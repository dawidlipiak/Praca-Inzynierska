
Praca-Inzynierksa-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009970  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08009af8  08009af8  0000aaf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d9c  08009d9c  0000b10c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d9c  08009d9c  0000ad9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009da4  08009da4  0000b10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009da4  08009da4  0000ada4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009dac  08009dac  0000adac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08009db0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b10c  2**0
                  CONTENTS
 10 .bss          00000b98  2000010c  2000010c  0000b10c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ca4  20000ca4  0000b10c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c6a8  00000000  00000000  0000b13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c89  00000000  00000000  000277e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  0002b470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf0  00000000  00000000  0002c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005d78  00000000  00000000  0002d060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000156c6  00000000  00000000  00032dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5257  00000000  00000000  0004849e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d6f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004248  00000000  00000000  0011d738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  00121980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000010c 	.word	0x2000010c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009ae0 	.word	0x08009ae0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000110 	.word	0x20000110
 80001c4:	08009ae0 	.word	0x08009ae0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96a 	b.w	8000ca0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	460c      	mov	r4, r1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d14e      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f0:	4694      	mov	ip, r2
 80009f2:	458c      	cmp	ip, r1
 80009f4:	4686      	mov	lr, r0
 80009f6:	fab2 f282 	clz	r2, r2
 80009fa:	d962      	bls.n	8000ac2 <__udivmoddi4+0xde>
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0320 	rsb	r3, r2, #32
 8000a02:	4091      	lsls	r1, r2
 8000a04:	fa20 f303 	lsr.w	r3, r0, r3
 8000a08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0c:	4319      	orrs	r1, r3
 8000a0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a16:	fa1f f68c 	uxth.w	r6, ip
 8000a1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a22:	fb07 1114 	mls	r1, r7, r4, r1
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb04 f106 	mul.w	r1, r4, r6
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a3a:	f080 8112 	bcs.w	8000c62 <__udivmoddi4+0x27e>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 810f 	bls.w	8000c62 <__udivmoddi4+0x27e>
 8000a44:	3c02      	subs	r4, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a59      	subs	r1, r3, r1
 8000a4a:	fa1f f38e 	uxth.w	r3, lr
 8000a4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a52:	fb07 1110 	mls	r1, r7, r0, r1
 8000a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5a:	fb00 f606 	mul.w	r6, r0, r6
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x94>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a6a:	f080 80fc 	bcs.w	8000c66 <__udivmoddi4+0x282>
 8000a6e:	429e      	cmp	r6, r3
 8000a70:	f240 80f9 	bls.w	8000c66 <__udivmoddi4+0x282>
 8000a74:	4463      	add	r3, ip
 8000a76:	3802      	subs	r0, #2
 8000a78:	1b9b      	subs	r3, r3, r6
 8000a7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a7e:	2100      	movs	r1, #0
 8000a80:	b11d      	cbz	r5, 8000a8a <__udivmoddi4+0xa6>
 8000a82:	40d3      	lsrs	r3, r2
 8000a84:	2200      	movs	r2, #0
 8000a86:	e9c5 3200 	strd	r3, r2, [r5]
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d905      	bls.n	8000a9e <__udivmoddi4+0xba>
 8000a92:	b10d      	cbz	r5, 8000a98 <__udivmoddi4+0xb4>
 8000a94:	e9c5 0100 	strd	r0, r1, [r5]
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e7f5      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000a9e:	fab3 f183 	clz	r1, r3
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d146      	bne.n	8000b34 <__udivmoddi4+0x150>
 8000aa6:	42a3      	cmp	r3, r4
 8000aa8:	d302      	bcc.n	8000ab0 <__udivmoddi4+0xcc>
 8000aaa:	4290      	cmp	r0, r2
 8000aac:	f0c0 80f0 	bcc.w	8000c90 <__udivmoddi4+0x2ac>
 8000ab0:	1a86      	subs	r6, r0, r2
 8000ab2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	2d00      	cmp	r5, #0
 8000aba:	d0e6      	beq.n	8000a8a <__udivmoddi4+0xa6>
 8000abc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac0:	e7e3      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	f040 8090 	bne.w	8000be8 <__udivmoddi4+0x204>
 8000ac8:	eba1 040c 	sub.w	r4, r1, ip
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	fa1f f78c 	uxth.w	r7, ip
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ada:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ade:	fb08 4416 	mls	r4, r8, r6, r4
 8000ae2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ae6:	fb07 f006 	mul.w	r0, r7, r6
 8000aea:	4298      	cmp	r0, r3
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x11c>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x11a>
 8000af8:	4298      	cmp	r0, r3
 8000afa:	f200 80cd 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000afe:	4626      	mov	r6, r4
 8000b00:	1a1c      	subs	r4, r3, r0
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b12:	fb00 f707 	mul.w	r7, r0, r7
 8000b16:	429f      	cmp	r7, r3
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x148>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b22:	d202      	bcs.n	8000b2a <__udivmoddi4+0x146>
 8000b24:	429f      	cmp	r7, r3
 8000b26:	f200 80b0 	bhi.w	8000c8a <__udivmoddi4+0x2a6>
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	1bdb      	subs	r3, r3, r7
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	e7a5      	b.n	8000a80 <__udivmoddi4+0x9c>
 8000b34:	f1c1 0620 	rsb	r6, r1, #32
 8000b38:	408b      	lsls	r3, r1
 8000b3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b3e:	431f      	orrs	r7, r3
 8000b40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b44:	fa04 f301 	lsl.w	r3, r4, r1
 8000b48:	ea43 030c 	orr.w	r3, r3, ip
 8000b4c:	40f4      	lsrs	r4, r6
 8000b4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b52:	0c38      	lsrs	r0, r7, #16
 8000b54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b58:	fbb4 fef0 	udiv	lr, r4, r0
 8000b5c:	fa1f fc87 	uxth.w	ip, r7
 8000b60:	fb00 441e 	mls	r4, r0, lr, r4
 8000b64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b68:	fb0e f90c 	mul.w	r9, lr, ip
 8000b6c:	45a1      	cmp	r9, r4
 8000b6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b72:	d90a      	bls.n	8000b8a <__udivmoddi4+0x1a6>
 8000b74:	193c      	adds	r4, r7, r4
 8000b76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b7a:	f080 8084 	bcs.w	8000c86 <__udivmoddi4+0x2a2>
 8000b7e:	45a1      	cmp	r9, r4
 8000b80:	f240 8081 	bls.w	8000c86 <__udivmoddi4+0x2a2>
 8000b84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b88:	443c      	add	r4, r7
 8000b8a:	eba4 0409 	sub.w	r4, r4, r9
 8000b8e:	fa1f f983 	uxth.w	r9, r3
 8000b92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b96:	fb00 4413 	mls	r4, r0, r3, r4
 8000b9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	d907      	bls.n	8000bb6 <__udivmoddi4+0x1d2>
 8000ba6:	193c      	adds	r4, r7, r4
 8000ba8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bac:	d267      	bcs.n	8000c7e <__udivmoddi4+0x29a>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	d965      	bls.n	8000c7e <__udivmoddi4+0x29a>
 8000bb2:	3b02      	subs	r3, #2
 8000bb4:	443c      	add	r4, r7
 8000bb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bba:	fba0 9302 	umull	r9, r3, r0, r2
 8000bbe:	eba4 040c 	sub.w	r4, r4, ip
 8000bc2:	429c      	cmp	r4, r3
 8000bc4:	46ce      	mov	lr, r9
 8000bc6:	469c      	mov	ip, r3
 8000bc8:	d351      	bcc.n	8000c6e <__udivmoddi4+0x28a>
 8000bca:	d04e      	beq.n	8000c6a <__udivmoddi4+0x286>
 8000bcc:	b155      	cbz	r5, 8000be4 <__udivmoddi4+0x200>
 8000bce:	ebb8 030e 	subs.w	r3, r8, lr
 8000bd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bda:	40cb      	lsrs	r3, r1
 8000bdc:	431e      	orrs	r6, r3
 8000bde:	40cc      	lsrs	r4, r1
 8000be0:	e9c5 6400 	strd	r6, r4, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	e750      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000be8:	f1c2 0320 	rsb	r3, r2, #32
 8000bec:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf4:	fa24 f303 	lsr.w	r3, r4, r3
 8000bf8:	4094      	lsls	r4, r2
 8000bfa:	430c      	orrs	r4, r1
 8000bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c04:	fa1f f78c 	uxth.w	r7, ip
 8000c08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c10:	0c23      	lsrs	r3, r4, #16
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb00 f107 	mul.w	r1, r0, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x24c>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c26:	d22c      	bcs.n	8000c82 <__udivmoddi4+0x29e>
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d92a      	bls.n	8000c82 <__udivmoddi4+0x29e>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	4463      	add	r3, ip
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c38:	fb08 3311 	mls	r3, r8, r1, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb01 f307 	mul.w	r3, r1, r7
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x276>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c50:	d213      	bcs.n	8000c7a <__udivmoddi4+0x296>
 8000c52:	42a3      	cmp	r3, r4
 8000c54:	d911      	bls.n	8000c7a <__udivmoddi4+0x296>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4464      	add	r4, ip
 8000c5a:	1ae4      	subs	r4, r4, r3
 8000c5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c60:	e739      	b.n	8000ad6 <__udivmoddi4+0xf2>
 8000c62:	4604      	mov	r4, r0
 8000c64:	e6f0      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c66:	4608      	mov	r0, r1
 8000c68:	e706      	b.n	8000a78 <__udivmoddi4+0x94>
 8000c6a:	45c8      	cmp	r8, r9
 8000c6c:	d2ae      	bcs.n	8000bcc <__udivmoddi4+0x1e8>
 8000c6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c76:	3801      	subs	r0, #1
 8000c78:	e7a8      	b.n	8000bcc <__udivmoddi4+0x1e8>
 8000c7a:	4631      	mov	r1, r6
 8000c7c:	e7ed      	b.n	8000c5a <__udivmoddi4+0x276>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	e799      	b.n	8000bb6 <__udivmoddi4+0x1d2>
 8000c82:	4630      	mov	r0, r6
 8000c84:	e7d4      	b.n	8000c30 <__udivmoddi4+0x24c>
 8000c86:	46d6      	mov	lr, sl
 8000c88:	e77f      	b.n	8000b8a <__udivmoddi4+0x1a6>
 8000c8a:	4463      	add	r3, ip
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	e74d      	b.n	8000b2c <__udivmoddi4+0x148>
 8000c90:	4606      	mov	r6, r0
 8000c92:	4623      	mov	r3, r4
 8000c94:	4608      	mov	r0, r1
 8000c96:	e70f      	b.n	8000ab8 <__udivmoddi4+0xd4>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	e730      	b.n	8000b00 <__udivmoddi4+0x11c>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bfb8      	it	lt
 8000cb2:	425b      	neglt	r3, r3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_ZL20tmc4671_readRegisterh>:
#define STATE_WAIT_INIT_TIME   2
#define STATE_ESTIMATE_OFFSET  3

// spi access
static uint32_t tmc4671_readRegister(uint8_t address)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[5] = { 0 };
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	763b      	strb	r3, [r7, #24]
    uint8_t rxBuf[5];

    // clear write bit
    txBuf[0] = TMC4671_ADDRESS_MASK & address;
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	753b      	strb	r3, [r7, #20]

    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2110      	movs	r1, #16
 8000ce0:	480f      	ldr	r0, [pc, #60]	@ (8000d20 <_ZL20tmc4671_readRegisterh+0x60>)
 8000ce2:	f002 fd09 	bl	80036f8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, txBuf, rxBuf, 5, 200);
 8000ce6:	f107 020c 	add.w	r2, r7, #12
 8000cea:	f107 0114 	add.w	r1, r7, #20
 8000cee:	23c8      	movs	r3, #200	@ 0xc8
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	480b      	ldr	r0, [pc, #44]	@ (8000d24 <_ZL20tmc4671_readRegisterh+0x64>)
 8000cf6:	f004 fd90 	bl	800581a <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <_ZL20tmc4671_readRegisterh+0x60>)
 8000d00:	f002 fcfa 	bl	80036f8 <HAL_GPIO_WritePin>

    uint32_t ret;
	memcpy(&ret, &rxBuf[1], 4);  // Bajty danych zaczynają się od rxBuf[1]
 8000d04:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8000d08:	60bb      	str	r3, [r7, #8]
	ret = __REV(ret);  // Konwersja do little-endian
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	61fb      	str	r3, [r7, #28]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	ba1b      	rev	r3, r3
 8000d12:	bf00      	nop
 8000d14:	60bb      	str	r3, [r7, #8]

	return ret;
 8000d16:	68bb      	ldr	r3, [r7, #8]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40020000 	.word	0x40020000
 8000d24:	2000022c 	.word	0x2000022c

08000d28 <_ZL21tmc4671_writeRegisterhm>:

static void tmc4671_writeRegister(uint8_t address, uint32_t value)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
    uint8_t data[5] = { 0 };
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	743b      	strb	r3, [r7, #16]

    data[0] = TMC4671_WRITE_BIT | address;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	733b      	strb	r3, [r7, #12]

    value =__REV(value);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	ba1b      	rev	r3, r3
 8000d4e:	bf00      	nop
 8000d50:	603b      	str	r3, [r7, #0]
	memcpy(data+1,&value,4);
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	3301      	adds	r3, #1
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	601a      	str	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2110      	movs	r1, #16
 8000d60:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <_ZL21tmc4671_writeRegisterhm+0x60>)
 8000d62:	f002 fcc9 	bl	80036f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, 5, 200);
 8000d66:	f107 010c 	add.w	r1, r7, #12
 8000d6a:	23c8      	movs	r3, #200	@ 0xc8
 8000d6c:	2205      	movs	r2, #5
 8000d6e:	4807      	ldr	r0, [pc, #28]	@ (8000d8c <_ZL21tmc4671_writeRegisterhm+0x64>)
 8000d70:	f004 fc0f 	bl	8005592 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2110      	movs	r1, #16
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <_ZL21tmc4671_writeRegisterhm+0x60>)
 8000d7a:	f002 fcbd 	bl	80036f8 <HAL_GPIO_WritePin>
}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	2000022c 	.word	0x2000022c

08000d90 <_ZL20tmc4671_fieldExtractm13RegisterField>:

static uint32_t tmc4671_fieldExtract(uint32_t data, RegisterField field)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	e883 0006 	stmia.w	r3, {r1, r2}
    uint32_t value = (data & field.mask) >> field.shift;
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4013      	ands	r3, r2
 8000da4:	7a3a      	ldrb	r2, [r7, #8]
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	61fb      	str	r3, [r7, #28]

    if (field.isSigned)
 8000daa:	7abb      	ldrb	r3, [r7, #10]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d00f      	beq.n	8000dd0 <_ZL20tmc4671_fieldExtractm13RegisterField+0x40>
    {
        uint32_t baseMask = field.mask >> field.shift;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7a3a      	ldrb	r2, [r7, #8]
 8000db4:	40d3      	lsrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        uint32_t signMask = baseMask & (~baseMask >> 1);
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	085b      	lsrs	r3, r3, #1
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	617b      	str	r3, [r7, #20]
        value = (value ^ signMask) - signMask;
 8000dc4:	69fa      	ldr	r2, [r7, #28]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	405a      	eors	r2, r3
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	61fb      	str	r3, [r7, #28]
    }

    return value;
 8000dd0:	69fb      	ldr	r3, [r7, #28]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	@ 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_ZL17tmc4671_fieldRead13RegisterField>:

static inline uint32_t tmc4671_fieldRead(RegisterField field)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	463b      	mov	r3, r7
 8000de6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t value = tmc4671_readRegister(field.address);
 8000dea:	797b      	ldrb	r3, [r7, #5]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff67 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8000df2:	60f8      	str	r0, [r7, #12]
    return tmc4671_fieldExtract(value, field);
 8000df4:	463b      	mov	r3, r7
 8000df6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f7ff ffc8 	bl	8000d90 <_ZL20tmc4671_fieldExtractm13RegisterField>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_ZL19tmc4671_fieldUpdatem13RegisterFieldm>:

static inline uint32_t tmc4671_fieldUpdate(uint32_t data, RegisterField field, uint32_t value)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	1d38      	adds	r0, r7, #4
 8000e14:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e18:	603b      	str	r3, [r7, #0]
    return (data & (~field.mask)) | ((value << field.shift) & field.mask);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	401a      	ands	r2, r3
 8000e22:	7a3b      	ldrb	r3, [r7, #8]
 8000e24:	4619      	mov	r1, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	fa03 f101 	lsl.w	r1, r3, r1
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
 8000e30:	4313      	orrs	r3, r2
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>:

static inline void tmc4671_fieldWrite(RegisterField field, uint32_t value)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e4c:	607a      	str	r2, [r7, #4]
    uint32_t regValue = tmc4671_readRegister(field.address);
 8000e4e:	7b7b      	ldrb	r3, [r7, #13]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff35 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8000e56:	6178      	str	r0, [r7, #20]
    regValue = tmc4671_fieldUpdate(regValue, field, value);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f107 0208 	add.w	r2, r7, #8
 8000e5e:	ca06      	ldmia	r2, {r1, r2}
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffd2 	bl	8000e0a <_ZL19tmc4671_fieldUpdatem13RegisterFieldm>
 8000e66:	6178      	str	r0, [r7, #20]
    tmc4671_writeRegister(field.address, regValue);
 8000e68:	7b7b      	ldrb	r3, [r7, #13]
 8000e6a:	6979      	ldr	r1, [r7, #20]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5b 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_ZN15TMC4671Biquad_tC1Ev>:
	int16_t phiMoffset 		= 0;
	uint16_t dPhiMax 		= 10922;
};

enum class TMCbiquadpreset : uint8_t {none=0,lowpass=1,notch=2,peak=3};
struct TMC4671Biquad_t{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	751a      	strb	r2, [r3, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <_ZN13TMC4671BiquadC1Eb>:
	float gain = 10.0; // Gain for peak mode
};

class TMC4671Biquad{
public:
	TMC4671Biquad(bool enable = false){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	70fb      	strb	r3, [r7, #3]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ffd9 	bl	8000e7a <_ZN15TMC4671Biquad_tC1Ev>
		params.enable = enable;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	78fa      	ldrb	r2, [r7, #3]
 8000ecc:	751a      	strb	r2, [r3, #20]
	}
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_ZN10HallConfigC1Ev>:
struct HallConfig{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	705a      	strb	r2, [r3, #1]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	709a      	strb	r2, [r3, #2]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	70da      	strb	r2, [r3, #3]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2201      	movs	r2, #1
 8000efc:	711a      	strb	r2, [r3, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2264      	movs	r2, #100	@ 0x64
 8000f02:	80da      	strh	r2, [r3, #6]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	811a      	strh	r2, [r3, #8]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f642 22aa 	movw	r2, #10922	@ 0x2aaa
 8000f10:	815a      	strh	r2, [r3, #10]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000f18:	819a      	strh	r2, [r3, #12]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f20:	81da      	strh	r2, [r3, #14]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000f28:	821a      	strh	r2, [r3, #16]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f24d 5255 	movw	r2, #54613	@ 0xd555
 8000f30:	825a      	strh	r2, [r3, #18]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	829a      	strh	r2, [r3, #20]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	82da      	strh	r2, [r3, #22]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f642 22aa 	movw	r2, #10922	@ 0x2aaa
 8000f44:	831a      	strh	r2, [r3, #24]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_ZN9PIDConfigC1Ev>:
	TMC4671Biquad pos;
	TMC4671Biquad vel;
};


struct PIDConfig{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000f62:	801a      	strh	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000f6a:	805a      	strh	r2, [r3, #2]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000f72:	809a      	strh	r2, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000f7a:	80da      	strh	r2, [r3, #6]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	811a      	strh	r2, [r3, #8]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f88:	815a      	strh	r2, [r3, #10]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	819a      	strh	r2, [r3, #12]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2280      	movs	r2, #128	@ 0x80
 8000f94:	81da      	strh	r2, [r3, #14]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	741a      	strb	r2, [r3, #16]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <_ZN13TMC4671LimitsC1Ev>:
	bool velocity_P	= false;
	bool position_I	= false;
	bool position_P	= false;
};

struct TMC4671Limits{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000fba:	801a      	strh	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000fc2:	805a      	strh	r2, [r3, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000fca:	809a      	strh	r2, [r3, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a06      	ldr	r2, [pc, #24]	@ (8000ff8 <_ZN13TMC4671LimitsC1Ev+0x4c>)
 8000fe0:	611a      	str	r2, [r3, #16]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	80000001 	.word	0x80000001

08000ffc <_ZN9AdcConfigC1Ev>:
struct AdcConfig{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800100a:	801a      	strh	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001012:	805a      	strh	r2, [r3, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f248 2287 	movw	r2, #33415	@ 0x8287
 800102a:	819a      	strh	r2, [r3, #12]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f248 2287 	movw	r2, #33415	@ 0x8287
 8001032:	81da      	strh	r2, [r3, #14]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800103a:	821a      	strh	r2, [r3, #16]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001042:	825a      	strh	r2, [r3, #18]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	751a      	strb	r2, [r3, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_ZN10ABNencoderC1Ev>:
struct ABNencoder{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001066:	801a      	strh	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	b29a      	uxth	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	805a      	strh	r2, [r3, #2]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2204      	movs	r2, #4
 8001078:	711a      	strb	r2, [r3, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	715a      	strb	r2, [r3, #5]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	719a      	strb	r2, [r3, #6]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	71da      	strb	r2, [r3, #7]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	721a      	strb	r2, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	725a      	strb	r2, [r3, #9]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	729a      	strb	r2, [r3, #10]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	819a      	strh	r2, [r3, #12]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	81da      	strh	r2, [r3, #14]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	821a      	strh	r2, [r3, #16]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	749a      	strb	r2, [r3, #18]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	74da      	strb	r2, [r3, #19]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	751a      	strb	r2, [r3, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	755a      	strb	r2, [r3, #21]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	759a      	strb	r2, [r3, #22]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_ZN12PidPrecisionC1Ev>:
struct PidPrecision{ // Switch between Q8.8 (false) and Q4.12 (true) precision for pid controller
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	705a      	strb	r2, [r3, #1]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	709a      	strb	r2, [r3, #2]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	70da      	strb	r2, [r3, #3]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	711a      	strb	r2, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	715a      	strb	r2, [r3, #5]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <_ZN18TMC4671Biquad_confC1Ev>:
struct TMC4671Biquad_conf{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <_ZN18TMC4671Biquad_confC1Ev+0x2c>)
 800112a:	3302      	adds	r3, #2
 800112c:	6810      	ldr	r0, [r2, #0]
 800112e:	6018      	str	r0, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <_ZN18TMC4671Biquad_confC1Ev+0x30>)
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	08009af8 	.word	0x08009af8
 8001148:	41200000 	.word	0x41200000

0800114c <_ZN20TMC4671BiquadFiltersC1Ev>:
struct TMC4671BiquadFilters{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff feab 	bl	8000eb4 <_ZN13TMC4671BiquadC1Eb>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3318      	adds	r3, #24
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fea5 	bl	8000eb4 <_ZN13TMC4671BiquadC1Eb>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3330      	adds	r3, #48	@ 0x30
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fe9f 	bl	8000eb4 <_ZN13TMC4671BiquadC1Eb>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3348      	adds	r3, #72	@ 0x48
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fe99 	bl	8000eb4 <_ZN13TMC4671BiquadC1Eb>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_ZN14TMC4671_DriverC1Ev>:
	TMC_ERROR_MOTOR 	= 0x08,
	TMC_ERROR_VALUE 	= 0x10,
	TMC_ERROR_CHIP 		= 0x40
} TMCError;

class TMC4671_Driver {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fe9e 	bl	8000ed8 <_ZN10HallConfigC1Ev>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	331a      	adds	r3, #26
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fed7 	bl	8000f54 <_ZN9PIDConfigC1Ev>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	332c      	adds	r3, #44	@ 0x2c
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fefe 	bl	8000fac <_ZN13TMC4671LimitsC1Ev>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3344      	adds	r3, #68	@ 0x44
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff21 	bl	8000ffc <_ZN9AdcConfigC1Ev>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	335c      	adds	r3, #92	@ 0x5c
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff4a 	bl	8001058 <_ZN10ABNencoderC1Ev>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3374      	adds	r3, #116	@ 0x74
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff87 	bl	80010dc <_ZN12PidPrecisionC1Ev>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	337c      	adds	r3, #124	@ 0x7c
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ffa0 	bl	8001118 <_ZN18TMC4671Biquad_confC1Ev>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3388      	adds	r3, #136	@ 0x88
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ffb5 	bl	800114c <_ZN20TMC4671BiquadFiltersC1Ev>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2203      	movs	r2, #3
 80011e6:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001218:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2232      	movs	r2, #50	@ 0x32
 8001220:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2232      	movs	r2, #50	@ 0x32
 8001228:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f24c 620c 	movw	r2, #50700	@ 0xc60c
 8001232:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f24c 62d4 	movw	r2, #50900	@ 0xc6d4
 800123c:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f242 3228 	movw	r2, #9000	@ 0x2328
 8001246:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZN14TMC4671_Driver14setDriverStateE11DriverState>:

#include <TMC4671_controller.h>

TMC4671_Driver tmc4671;

void TMC4671_Driver::setDriverState(DriverState state) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
	if (state == DRIVER_DISABLE) {
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d109      	bne.n	8001292 <_ZN14TMC4671_Driver14setDriverStateE11DriverState+0x26>
		this->driverState = DRIVER_DISABLE;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
		HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2180      	movs	r1, #128	@ 0x80
 800128a:	4808      	ldr	r0, [pc, #32]	@ (80012ac <_ZN14TMC4671_Driver14setDriverStateE11DriverState+0x40>)
 800128c:	f002 fa34 	bl	80036f8 <HAL_GPIO_WritePin>
	} else {
		this->driverState = DRIVER_ENABLE;
		HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_SET);
	}
}
 8001290:	e008      	b.n	80012a4 <_ZN14TMC4671_Driver14setDriverStateE11DriverState+0x38>
		this->driverState = DRIVER_ENABLE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
		HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	2180      	movs	r1, #128	@ 0x80
 800129e:	4803      	ldr	r0, [pc, #12]	@ (80012ac <_ZN14TMC4671_Driver14setDriverStateE11DriverState+0x40>)
 80012a0:	f002 fa2a 	bl	80036f8 <HAL_GPIO_WritePin>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000

080012b0 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>:

void TMC4671_Driver::setMotionMode(MotionMode mode){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
//		return;
//	}
//	if(mode != curMotionMode){
//		lastMotionMode = curMotionMode;
//	}
	this->curr_motionMode = mode;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	78fa      	ldrb	r2, [r7, #3]
 80012c0:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
	tmc4671_fieldWrite(TMC4671_MODE_MOTION_FIELD, (uint8_t) mode);
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	4904      	ldr	r1, [pc, #16]	@ (80012d8 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode+0x28>)
 80012c8:	461a      	mov	r2, r3
 80012ca:	c903      	ldmia	r1, {r0, r1}
 80012cc:	f7ff fdb7 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	08009d64 	.word	0x08009d64

080012dc <_ZN14TMC4671_Driver13getMotionModeEv>:

MotionMode TMC4671_Driver::getMotionMode(){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	this->curr_motionMode = (MotionMode) tmc4671_fieldRead(TMC4671_MODE_MOTION_FIELD);
 80012e4:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <_ZN14TMC4671_Driver13getMotionModeEv+0x2c>)
 80012e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012ea:	f7ff fd78 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
	return this->curr_motionMode;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	08009d64 	.word	0x08009d64

0800130c <_ZN14TMC4671_Driver11getPhiETypeEv>:

PhiE TMC4671_Driver::getPhiEType(){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	this->phiEType = (PhiE) (tmc4671_fieldRead(TMC4671_PHI_E_SELECTION_FIELD) & 0x07);
 8001314:	4b09      	ldr	r3, [pc, #36]	@ (800133c <_ZN14TMC4671_Driver11getPhiETypeEv+0x30>)
 8001316:	e893 0003 	ldmia.w	r3, {r0, r1}
 800131a:	f7ff fd60 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 800131e:	4603      	mov	r3, r0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	b2da      	uxtb	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
	return this->phiEType;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	08009d1c 	.word	0x08009d1c

08001340 <_ZN14TMC4671_Driver7getPhiEEv>:

int16_t TMC4671_Driver::getPhiE(){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	return (int16_t)tmc4671_readRegister(TMC4671_PHI_E);
 8001348:	2053      	movs	r0, #83	@ 0x53
 800134a:	f7ff fcb9 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 800134e:	4603      	mov	r3, r0
 8001350:	b21b      	sxth	r3, r3
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <_ZN14TMC4671_Driver11getPhiE_EncEv>:

/**
 * Reads phiE directly from the encoder selection instead of the current phiE selection
 */
int16_t TMC4671_Driver::getPhiE_Enc(){
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	if(this->encoderType == EncoderType::abn){
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800136a:	2b01      	cmp	r3, #1
 800136c:	d107      	bne.n	800137e <_ZN14TMC4671_Driver11getPhiE_EncEv+0x22>
		return (int16_t)tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_E_FIELD);
 800136e:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x74>)
 8001370:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001374:	f7ff fd33 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 8001378:	4603      	mov	r3, r0
 800137a:	b21b      	sxth	r3, r3
 800137c:	e023      	b.n	80013c6 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x6a>
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001384:	2b02      	cmp	r3, #2
 8001386:	d004      	beq.n	8001392 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x36>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800138e:	2b03      	cmp	r3, #3
 8001390:	d107      	bne.n	80013a2 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x46>
		return (int16_t)tmc4671_fieldRead(TMC4671_AENC_DECODER_PHI_E_FIELD);
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x78>)
 8001394:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001398:	f7ff fd21 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 800139c:	4603      	mov	r3, r0
 800139e:	b21b      	sxth	r3, r3
 80013a0:	e011      	b.n	80013c6 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x6a>
	}
	else if(this->encoderType == EncoderType::hall){
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d107      	bne.n	80013bc <_ZN14TMC4671_Driver11getPhiE_EncEv+0x60>
		return (int16_t)tmc4671_fieldRead(TMC4671_HALL_PHI_E_FIELD);
 80013ac:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x7c>)
 80013ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013b2:	f7ff fd14 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	e004      	b.n	80013c6 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x6a>
	}
//	else if(usingExternalEncoder()){
//		return getPhiEfromExternalEncoder();
//	}
	else{
		return getPhiE();
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ffbf 	bl	8001340 <_ZN14TMC4671_Driver7getPhiEEv>
 80013c2:	4603      	mov	r3, r0
 80013c4:	bf00      	nop
	}
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	08009c64 	.word	0x08009c64
 80013d4:	08009cfc 	.word	0x08009cfc
 80013d8:	08009cdc 	.word	0x08009cdc

080013dc <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet>:

void TMC4671_Driver::setMotorTypeAndPoles(MotorType motor, uint16_t poles){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
 80013e8:	4613      	mov	r3, r2
 80013ea:	803b      	strh	r3, [r7, #0]
	if(motor == MotorType::DC){
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet+0x1a>
		poles = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	803b      	strh	r3, [r7, #0]
	}
	this->motorType = motor;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	78fa      	ldrb	r2, [r7, #3]
 80013fa:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	this->encoder.pole_pairs = poles;
 80013fe:	883b      	ldrh	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

	tmc4671_fieldWrite(TMC4671_N_POLE_PAIRS_FIELD, poles);
 8001408:	883b      	ldrh	r3, [r7, #0]
 800140a:	4907      	ldr	r1, [pc, #28]	@ (8001428 <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet+0x4c>)
 800140c:	461a      	mov	r2, r3
 800140e:	c903      	ldmia	r1, {r0, r1}
 8001410:	f7ff fd15 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_MOTOR_TYPE_FIELD, (uint8_t)motor);
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	4905      	ldr	r1, [pc, #20]	@ (800142c <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet+0x50>)
 8001418:	461a      	mov	r2, r3
 800141a:	c903      	ldmia	r1, {r0, r1}
 800141c:	f7ff fd0f 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	08009bfc 	.word	0x08009bfc
 800142c:	08009c04 	.word	0x08009c04

08001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>:

void TMC4671_Driver::setPhiEType(PhiE phiEType){
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
	if(phiEType == PhiE::extEncoder){
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	2b09      	cmp	r3, #9
 8001440:	d101      	bne.n	8001446 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE+0x16>
		phiEType = PhiE::ext;
 8001442:	2301      	movs	r3, #1
 8001444:	70fb      	strb	r3, [r7, #3]
	}
	this->phiEType = phiEType;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	78fa      	ldrb	r2, [r7, #3]
 800144a:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9

	tmc4671_fieldWrite(TMC4671_PHI_E_SELECTION_FIELD, (uint8_t)phiEType && 0xFF);
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf14      	ite	ne
 8001454:	2301      	movne	r3, #1
 8001456:	2300      	moveq	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE+0x40>)
 800145e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001462:	f7ff fcec 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08009d1c 	.word	0x08009d1c

08001474 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig>:

void TMC4671_Driver::setHallConfig(HallConfig* hallConfig_p){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	memcpy(&this->hallConfig, hallConfig_p, sizeof(this->hallConfig));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	221a      	movs	r2, #26
 8001482:	6839      	ldr	r1, [r7, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f008 fb1d 	bl	8009ac4 <memcpy>

	tmc4671_fieldWrite(TMC4671_HALL_POLARITY_FIELD, hallConfig_p->polarity);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	785b      	ldrb	r3, [r3, #1]
 800148e:	461a      	mov	r2, r3
 8001490:	4b3c      	ldr	r3, [pc, #240]	@ (8001584 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x110>)
 8001492:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001496:	f7ff fcd2 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_SYNCHRONOUS_PWM_SAMPLING_FIELD, hallConfig_p->pwmSamplingFilter);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	791b      	ldrb	r3, [r3, #4]
 800149e:	461a      	mov	r2, r3
 80014a0:	4b39      	ldr	r3, [pc, #228]	@ (8001588 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x114>)
 80014a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014a6:	f7ff fcca 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_INTERPOLATION_FIELD, hallConfig_p->interpolation);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	789b      	ldrb	r3, [r3, #2]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b36      	ldr	r3, [pc, #216]	@ (800158c <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x118>)
 80014b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014b6:	f7ff fcc2 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_DIRECTION_FIELD, hallConfig_p->direction);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	78db      	ldrb	r3, [r3, #3]
 80014be:	461a      	mov	r2, r3
 80014c0:	4b33      	ldr	r3, [pc, #204]	@ (8001590 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x11c>)
 80014c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014c6:	f7ff fcba 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_BLANK_FIELD, hallConfig_p->blank);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	88db      	ldrh	r3, [r3, #6]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b30      	ldr	r3, [pc, #192]	@ (8001594 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x120>)
 80014d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014d6:	f7ff fcb2 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_HALL_POSITION_000_FIELD, hallConfig_p->pos0);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001598 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x124>)
 80014e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014e8:	f7ff fca9 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_060_FIELD, hallConfig_p->pos60);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b29      	ldr	r3, [pc, #164]	@ (800159c <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x128>)
 80014f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014fa:	f7ff fca0 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_120_FIELD, hallConfig_p->pos120);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001504:	461a      	mov	r2, r3
 8001506:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x12c>)
 8001508:	e893 0003 	ldmia.w	r3, {r0, r1}
 800150c:	f7ff fc97 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_180_FIELD, hallConfig_p->pos180);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001516:	461a      	mov	r2, r3
 8001518:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x130>)
 800151a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800151e:	f7ff fc8e 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_240_FIELD, hallConfig_p->pos240);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001528:	461a      	mov	r2, r3
 800152a:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x134>)
 800152c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001530:	f7ff fc85 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_300_FIELD, hallConfig_p->pos300);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800153a:	461a      	mov	r2, r3
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x138>)
 800153e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001542:	f7ff fc7c 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_HALL_PHI_M_OFFSET_FIELD, hallConfig_p->phiMoffset);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800154c:	461a      	mov	r2, r3
 800154e:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x13c>)
 8001550:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001554:	f7ff fc73 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_PHI_E_OFFSET_FIELD, hallConfig_p->phiEoffset);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800155e:	461a      	mov	r2, r3
 8001560:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x140>)
 8001562:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001566:	f7ff fc6a 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_DPHI_MAX_FIELD, hallConfig_p->dPhiMax);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	8b1b      	ldrh	r3, [r3, #24]
 800156e:	461a      	mov	r2, r3
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x144>)
 8001572:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001576:	f7ff fc62 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	08009c6c 	.word	0x08009c6c
 8001588:	08009c74 	.word	0x08009c74
 800158c:	08009c7c 	.word	0x08009c7c
 8001590:	08009c84 	.word	0x08009c84
 8001594:	08009c8c 	.word	0x08009c8c
 8001598:	08009c94 	.word	0x08009c94
 800159c:	08009c9c 	.word	0x08009c9c
 80015a0:	08009ca4 	.word	0x08009ca4
 80015a4:	08009cac 	.word	0x08009cac
 80015a8:	08009cb4 	.word	0x08009cb4
 80015ac:	08009cbc 	.word	0x08009cbc
 80015b0:	08009cc4 	.word	0x08009cc4
 80015b4:	08009ccc 	.word	0x08009ccc
 80015b8:	08009cd4 	.word	0x08009cd4

080015bc <_ZN14TMC4671_Driver6setPWME7PwmMode>:

void TMC4671_Driver::setPWM(PwmMode pwmMode){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
	this->pwmMode = pwmMode;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	tmc4671_fieldWrite(TMC4671_PWM_CHOP_FIELD, (uint8_t)pwmMode);
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	4904      	ldr	r1, [pc, #16]	@ (80015e4 <_ZN14TMC4671_Driver6setPWME7PwmMode+0x28>)
 80015d4:	461a      	mov	r2, r3
 80015d6:	c903      	ldmia	r1, {r0, r1}
 80015d8:	f7ff fc31 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	08009bf4 	.word	0x08009bf4

080015e8 <_ZN14TMC4671_Driver6setPWME7PwmModethh>:

void TMC4671_Driver::setPWM(PwmMode pwmMode,uint16_t maxcnt,uint8_t bbmL,uint8_t bbmH){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	4608      	mov	r0, r1
 80015f2:	4611      	mov	r1, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	4603      	mov	r3, r0
 80015f8:	70fb      	strb	r3, [r7, #3]
 80015fa:	460b      	mov	r3, r1
 80015fc:	803b      	strh	r3, [r7, #0]
 80015fe:	4613      	mov	r3, r2
 8001600:	70bb      	strb	r3, [r7, #2]
	maxcnt = clip(maxcnt, 255, 4095);
 8001602:	883b      	ldrh	r3, [r7, #0]
 8001604:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001608:	21ff      	movs	r1, #255	@ 0xff
 800160a:	4618      	mov	r0, r3
 800160c:	f001 fa64 	bl	8002ad8 <_Z4clipItiET_S0_T0_S1_>
 8001610:	4603      	mov	r3, r0
 8001612:	803b      	strh	r3, [r7, #0]
	this->pwmMode = pwmMode;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	78fa      	ldrb	r2, [r7, #3]
 8001618:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	this->pwmCnt = maxcnt;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	883a      	ldrh	r2, [r7, #0]
 8001620:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
	this->bbmL = bbmL;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	78ba      	ldrb	r2, [r7, #2]
 8001628:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	this->bbmH = bbmH;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7c3a      	ldrb	r2, [r7, #16]
 8001630:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1

	tmc4671_fieldWrite(TMC4671_PWM_MAXCNT_FIELD, maxcnt);
 8001634:	883b      	ldrh	r3, [r7, #0]
 8001636:	490f      	ldr	r1, [pc, #60]	@ (8001674 <_ZN14TMC4671_Driver6setPWME7PwmModethh+0x8c>)
 8001638:	461a      	mov	r2, r3
 800163a:	c903      	ldmia	r1, {r0, r1}
 800163c:	f7ff fbff 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PWM_CHOP_FIELD, (uint8_t)pwmMode);
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	490d      	ldr	r1, [pc, #52]	@ (8001678 <_ZN14TMC4671_Driver6setPWME7PwmModethh+0x90>)
 8001644:	461a      	mov	r2, r3
 8001646:	c903      	ldmia	r1, {r0, r1}
 8001648:	f7ff fbf9 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PWM_BBM_L_FIELD, bbmL);
 800164c:	78bb      	ldrb	r3, [r7, #2]
 800164e:	490b      	ldr	r1, [pc, #44]	@ (800167c <_ZN14TMC4671_Driver6setPWME7PwmModethh+0x94>)
 8001650:	461a      	mov	r2, r3
 8001652:	c903      	ldmia	r1, {r0, r1}
 8001654:	f7ff fbf3 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PWM_BBM_H_FIELD, bbmH);
 8001658:	7c3b      	ldrb	r3, [r7, #16]
 800165a:	4909      	ldr	r1, [pc, #36]	@ (8001680 <_ZN14TMC4671_Driver6setPWME7PwmModethh+0x98>)
 800165c:	461a      	mov	r2, r3
 800165e:	c903      	ldmia	r1, {r0, r1}
 8001660:	f7ff fbed 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_writeRegister(TMC4671_PWM_POLARITIES, 0x00);
 8001664:	2100      	movs	r1, #0
 8001666:	2017      	movs	r0, #23
 8001668:	f7ff fb5e 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	08009bdc 	.word	0x08009bdc
 8001678:	08009bf4 	.word	0x08009bf4
 800167c:	08009be4 	.word	0x08009be4
 8001680:	08009bec 	.word	0x08009bec

08001684 <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig>:

void TMC4671_Driver::setAdcOffset(AdcConfig* adcConfig_p){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
	this->adcConfig.adc_I0_offset = adcConfig_p->adc_I0_offset;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	899a      	ldrh	r2, [r3, #12]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	this->adcConfig.adc_I1_offset = adcConfig_p->adc_I1_offset;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	89da      	ldrh	r2, [r3, #14]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

	tmc4671_fieldWrite(TMC4671_ADC_I0_OFFSET_FIELD, adcConfig_p->adc_I0_offset);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	899b      	ldrh	r3, [r3, #12]
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig+0x48>)
 80016aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016ae:	f7ff fbc6 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I1_OFFSET_FIELD, adcConfig_p->adc_I1_offset);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	89db      	ldrh	r3, [r3, #14]
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig+0x4c>)
 80016ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016be:	f7ff fbbe 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	08009ba4 	.word	0x08009ba4
 80016d0:	08009b94 	.word	0x08009b94

080016d4 <_ZN14TMC4671_Driver11setAdcScaleEP9AdcConfig>:

void TMC4671_Driver::setAdcScale(AdcConfig* adcConfig_p){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
	this->adcConfig.adc_I0_scale = adcConfig_p->adc_I0_scale;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	8a1a      	ldrh	r2, [r3, #16]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	this->adcConfig.adc_I1_scale = adcConfig_p->adc_I1_scale;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	8a5a      	ldrh	r2, [r3, #18]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

	tmc4671_fieldWrite(TMC4671_ADC_I0_SCALE_FIELD, adcConfig_p->adc_I0_scale);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	8a1b      	ldrh	r3, [r3, #16]
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <_ZN14TMC4671_Driver11setAdcScaleEP9AdcConfig+0x48>)
 80016fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016fe:	f7ff fb9e 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I1_SCALE_FIELD, adcConfig_p->adc_I1_scale);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	8a5b      	ldrh	r3, [r3, #18]
 8001706:	461a      	mov	r2, r3
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <_ZN14TMC4671_Driver11setAdcScaleEP9AdcConfig+0x4c>)
 800170a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800170e:	f7ff fb96 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	08009bac 	.word	0x08009bac
 8001720:	08009b9c 	.word	0x08009b9c

08001724 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig>:

void TMC4671_Driver::initAdc(AdcConfig* adcConfig_p){
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
	this->adcConfig.mclkA = adcConfig_p->mclkA;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	649a      	str	r2, [r3, #72]	@ 0x48
	this->adcConfig.mclkB = adcConfig_p->mclkB;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	64da      	str	r2, [r3, #76]	@ 0x4c
	this->adcConfig.mdecA = adcConfig_p->mdecA;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	881a      	ldrh	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	this->adcConfig.mdecB = adcConfig_p->mdecB;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	885a      	ldrh	r2, [r3, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	tmc4671_fieldWrite(TMC4671_DSADC_MDEC_A_FIELD, adcConfig_p->mdecA);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0xf4>)
 800175a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800175e:	f7ff fb6e 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_DSADC_MDEC_B_FIELD, adcConfig_p->mdecB);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	885b      	ldrh	r3, [r3, #2]
 8001766:	461a      	mov	r2, r3
 8001768:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0xf8>)
 800176a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800176e:	f7ff fb66 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_DSADC_MCLK_A_FIELD, adcConfig_p->mclkA);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	492a      	ldr	r1, [pc, #168]	@ (8001820 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0xfc>)
 8001778:	461a      	mov	r2, r3
 800177a:	c903      	ldmia	r1, {r0, r1}
 800177c:	f7ff fb5f 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_DSADC_MCLK_B_FIELD, adcConfig_p->mclkB);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4927      	ldr	r1, [pc, #156]	@ (8001824 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x100>)
 8001786:	461a      	mov	r2, r3
 8001788:	c903      	ldmia	r1, {r0, r1}
 800178a:	f7ff fb58 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_SEL_NCLK_MCLK_I_A_FIELD, adcConfig_p->mclkA == 0 ? 0 : 1);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf14      	ite	ne
 8001796:	2301      	movne	r3, #1
 8001798:	2300      	moveq	r3, #0
 800179a:	b2db      	uxtb	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x104>)
 80017a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017a4:	f7ff fb4b 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_SEL_NCLK_MCLK_I_B_FIELD, adcConfig_p->mclkB == 0 ? 0 : 1);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf14      	ite	ne
 80017b0:	2301      	movne	r3, #1
 80017b2:	2300      	moveq	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x108>)
 80017ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017be:	f7ff fb3e 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_ADC_I0_SELECT_FIELD, 0x0);   // 0: ADCSD_I0_RAW (sigma delta ADC)
 80017c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x10c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017ca:	f7ff fb38 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I1_SELECT_FIELD, 0x01);  // 1: ADCSD_I1_RAW (sigma delta ADC)
 80017ce:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x110>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017d6:	f7ff fb32 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I_UX_SELECT_FIELD,0x00); // 0: UX = ADC_I0 (default)
 80017da:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x114>)
 80017dc:	2200      	movs	r2, #0
 80017de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017e2:	f7ff fb2c 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I_V_SELECT_FIELD, 0x02); // 2: V = ADC_I2
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x118>)
 80017e8:	2202      	movs	r2, #2
 80017ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017ee:	f7ff fb26 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I_WY_SELECT_FIELD, 0x01);// 1: WY = ADC_I1
 80017f2:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x11c>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017fa:	f7ff fb20 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	setAdcOffset(adcConfig_p);
 80017fe:	6839      	ldr	r1, [r7, #0]
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff3f 	bl	8001684 <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig>
	setAdcScale(adcConfig_p);
 8001806:	6839      	ldr	r1, [r7, #0]
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff63 	bl	80016d4 <_ZN14TMC4671_Driver11setAdcScaleEP9AdcConfig>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08009b84 	.word	0x08009b84
 800181c:	08009b8c 	.word	0x08009b8c
 8001820:	08009b74 	.word	0x08009b74
 8001824:	08009b7c 	.word	0x08009b7c
 8001828:	08009b64 	.word	0x08009b64
 800182c:	08009b6c 	.word	0x08009b6c
 8001830:	08009bb4 	.word	0x08009bb4
 8001834:	08009bbc 	.word	0x08009bbc
 8001838:	08009bc4 	.word	0x08009bc4
 800183c:	08009bcc 	.word	0x08009bcc
 8001840:	08009bd4 	.word	0x08009bd4

08001844 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig>:

void TMC4671_Driver::setPids(PIDConfig* pidConfig_p){
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
	memcpy(&this->pidConfig, pidConfig_p, sizeof(this->pidConfig));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	331a      	adds	r3, #26
 8001852:	2212      	movs	r2, #18
 8001854:	6839      	ldr	r1, [r7, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f008 f934 	bl	8009ac4 <memcpy>

	tmc4671_fieldWrite(TMC4671_PID_FLUX_I_FIELD, pidConfig_p->fluxI);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b24      	ldr	r3, [pc, #144]	@ (80018f4 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xb0>)
 8001864:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001868:	f7ff fae9 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_FLUX_P_FIELD, pidConfig_p->fluxP);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	885b      	ldrh	r3, [r3, #2]
 8001870:	461a      	mov	r2, r3
 8001872:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xb4>)
 8001874:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001878:	f7ff fae1 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_TORQUE_I_FIELD, pidConfig_p->torqueI);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	889b      	ldrh	r3, [r3, #4]
 8001880:	461a      	mov	r2, r3
 8001882:	4b1e      	ldr	r3, [pc, #120]	@ (80018fc <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xb8>)
 8001884:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001888:	f7ff fad9 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_TORQUE_P_FIELD, pidConfig_p->fluxP);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	885b      	ldrh	r3, [r3, #2]
 8001890:	461a      	mov	r2, r3
 8001892:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xbc>)
 8001894:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001898:	f7ff fad1 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_VELOCITY_I_FIELD, pidConfig_p->velocityI);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	891b      	ldrh	r3, [r3, #8]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xc0>)
 80018a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018a8:	f7ff fac9 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_VELOCITY_P_FIELD, pidConfig_p->velocityP);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	895b      	ldrh	r3, [r3, #10]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xc4>)
 80018b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018b8:	f7ff fac1 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_POSITION_I_FIELD, pidConfig_p->positionI);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	899b      	ldrh	r3, [r3, #12]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xc8>)
 80018c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018c8:	f7ff fab9 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_POSITION_P_FIELD, pidConfig_p->positionP);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	89db      	ldrh	r3, [r3, #14]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xcc>)
 80018d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018d8:	f7ff fab1 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_MODE_PID_TYPE_FIELD, pidConfig_p->sequentialPI);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	7c1b      	ldrb	r3, [r3, #16]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xd0>)
 80018e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018e8:	f7ff faa9 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	08009d24 	.word	0x08009d24
 80018f8:	08009d2c 	.word	0x08009d2c
 80018fc:	08009d34 	.word	0x08009d34
 8001900:	08009d3c 	.word	0x08009d3c
 8001904:	08009d44 	.word	0x08009d44
 8001908:	08009d4c 	.word	0x08009d4c
 800190c:	08009d54 	.word	0x08009d54
 8001910:	08009d5c 	.word	0x08009d5c
 8001914:	08009d6c 	.word	0x08009d6c

08001918 <_ZN14TMC4671_Driver17setAdcBrakeLimitsEtt>:
/**
 *  Sets the raw brake resistor limits.
 *  Centered at 0x7fff
 *  Set both 0 to deactivate
 */
void TMC4671_Driver::setAdcBrakeLimits(uint16_t low,uint16_t high){
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	803b      	strh	r3, [r7, #0]
	this->brakeLimLow = low;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	this->brakeLimHigh = high;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	883a      	ldrh	r2, [r7, #0]
 8001934:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4

	tmc4671_fieldWrite(TMC4671_ADC_VM_LIMIT_LOW_FIELD, low);
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	4907      	ldr	r1, [pc, #28]	@ (8001958 <_ZN14TMC4671_Driver17setAdcBrakeLimitsEtt+0x40>)
 800193c:	461a      	mov	r2, r3
 800193e:	c903      	ldmia	r1, {r0, r1}
 8001940:	f7ff fa7d 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_VM_LIMIT_LOW_FIELD, high);
 8001944:	883b      	ldrh	r3, [r7, #0]
 8001946:	4904      	ldr	r1, [pc, #16]	@ (8001958 <_ZN14TMC4671_Driver17setAdcBrakeLimitsEtt+0x40>)
 8001948:	461a      	mov	r2, r3
 800194a:	c903      	ldmia	r1, {r0, r1}
 800194c:	f7ff fa77 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	08009d7c 	.word	0x08009d7c

0800195c <_ZN14TMC4671_Driver17setActualPositionEl>:

// Changes actual multi turn position for positioning
void TMC4671_Driver::setActualPosition(int32_t pos){
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	tmc4671_fieldWrite(TMC4671_PID_POSITION_ACTUAL_FIELD, (uint32_t)pos);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	4904      	ldr	r1, [pc, #16]	@ (800197c <_ZN14TMC4671_Driver17setActualPositionEl+0x20>)
 800196a:	461a      	mov	r2, r3
 800196c:	c903      	ldmia	r1, {r0, r1}
 800196e:	f7ff fa66 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	08009d74 	.word	0x08009d74

08001980 <_ZN14TMC4671_Driver17getActualPositionEv>:

// Returns actual multi turn position from tmc
int32_t TMC4671_Driver::getActualPosition(){
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	return (int32_t)tmc4671_fieldRead(TMC4671_PID_POSITION_ACTUAL_FIELD);
 8001988:	4b04      	ldr	r3, [pc, #16]	@ (800199c <_ZN14TMC4671_Driver17getActualPositionEv+0x1c>)
 800198a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800198e:	f7ff fa26 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 8001992:	4603      	mov	r3, r0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	08009d74 	.word	0x08009d74

080019a0 <_ZN14TMC4671_Driver19getAbsolutePositionEv>:

int32_t TMC4671_Driver::getAbsolutePosition(){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	int16_t pos;

	if(this->encoderType == EncoderType::abn){
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d107      	bne.n	80019c2 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x22>
		pos = (int16_t)tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_M_FIELD);
 80019b2:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x6c>)
 80019b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019b8:	f7ff fa11 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 80019bc:	4603      	mov	r3, r0
 80019be:	81fb      	strh	r3, [r7, #14]
 80019c0:	e01d      	b.n	80019fe <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x5e>
	}
	else if(this->encoderType == EncoderType::hall){
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d107      	bne.n	80019dc <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x3c>
		pos = (int16_t)tmc4671_fieldRead(TMC4671_HALL_PHI_M_FIELD);
 80019cc:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x70>)
 80019ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019d2:	f7ff fa04 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 80019d6:	4603      	mov	r3, r0
 80019d8:	81fb      	strh	r3, [r7, #14]
 80019da:	e010      	b.n	80019fe <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x5e>
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d004      	beq.n	80019f0 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x50>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d106      	bne.n	80019fe <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x5e>
		pos = (int16_t)tmc4671_fieldRead(TMC4671_AENC_DECODER_PHI_M_FIELD);
 80019f0:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x74>)
 80019f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019f6:	f7ff f9f2 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 80019fa:	4603      	mov	r3, r0
 80019fc:	81fb      	strh	r3, [r7, #14]
	}
	else{
//		pos = getPos(); // read phiM
	}

	return pos;
 80019fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	08009c5c 	.word	0x08009c5c
 8001a10:	08009ce4 	.word	0x08009ce4
 8001a14:	08009cf4 	.word	0x08009cf4

08001a18 <_ZN14TMC4671_Driver13setFluxTorqueEss>:

void TMC4671_Driver::setFluxTorque(int16_t flux, int16_t torque){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
 8001a24:	4613      	mov	r3, r2
 8001a26:	803b      	strh	r3, [r7, #0]
//	if(curr_motionMode != MotionMode::torque){
		setMotionMode(MotionMode::torque);
 8001a28:	2101      	movs	r1, #1
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fc40 	bl	80012b0 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
//	}

//	tmc4671_fieldWrite(TMC4671_PID_FLUX_TARGET_FIELD, flux);
//	tmc4671_fieldWrite(TMC4671_PID_TORQUE_TARGET_FIELD, torque);
	tmc4671_writeRegister(0x64, (flux & 0xffff) | (torque << 16));
 8001a30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a3a:	041b      	lsls	r3, r3, #16
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	2064      	movs	r0, #100	@ 0x64
 8001a42:	f7ff f971 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
	tmc4671_writeRegister(0x64, (flux & 0xffff) | (torque << 16));
 8001a46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	4313      	orrs	r3, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	2064      	movs	r0, #100	@ 0x64
 8001a58:	f7ff f966 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_ZN14TMC4671_Driver13setStatusMaskE11StatusFlags>:

void TMC4671_Driver::setStatusFlags(StatusFlags flag){
	tmc4671_writeRegister(TMC4671_STATUS_MASK, flag.asInt);
}

void TMC4671_Driver::setStatusMask(StatusFlags mask){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
	tmc4671_writeRegister(TMC4671_STATUS_MASK, mask.asInt);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	207d      	movs	r0, #125	@ 0x7d
 8001a74:	f7ff f958 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>:
void TMC4671_Driver::setUdUq(int16_t ud,int16_t uq){
	tmc4671_fieldWrite(TMC4671_UD_EXT_FIELD, ud);
	tmc4671_fieldWrite(TMC4671_UQ_EXT_FIELD, uq);
}

void TMC4671_Driver::setPhiE_ext(int16_t phiE){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
	tmc4671_fieldWrite(TMC4671_PHI_E_EXT_FIELD, (uint32_t)phiE);
 8001a8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a90:	4904      	ldr	r1, [pc, #16]	@ (8001aa4 <_ZN14TMC4671_Driver11setPhiE_extEs+0x24>)
 8001a92:	461a      	mov	r2, r3
 8001a94:	c903      	ldmia	r1, {r0, r1}
 8001a96:	f7ff f9d2 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	08009c0c 	.word	0x08009c0c

08001aa8 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt>:

/**
 * Calibrates the ADC by disabling the power stage and sampling a mean value. Takes time!
 */
bool TMC4671_Driver::calibrateAdcOffset(uint16_t time){
 8001aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aac:	b096      	sub	sp, #88	@ 0x58
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	61f8      	str	r0, [r7, #28]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	837b      	strh	r3, [r7, #26]

	uint16_t measuretime_idle = time;
 8001ab6:	8b7b      	ldrh	r3, [r7, #26]
 8001ab8:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint32_t measurements_idle = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	657b      	str	r3, [r7, #84]	@ 0x54
	uint64_t totalA=0;
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	uint64_t totalB=0;
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	tmc4671_writeRegister(TMC4671_ADC_RAW_ADDR, 0); // Read raw adc
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f7ff f925 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
	PhiE lastphie = getPhiEType();
 8001ade:	69f8      	ldr	r0, [r7, #28]
 8001ae0:	f7ff fc14 	bl	800130c <_ZN14TMC4671_Driver11getPhiETypeEv>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	MotionMode lastmode = getMotionMode();
 8001aea:	69f8      	ldr	r0, [r7, #28]
 8001aec:	f7ff fbf6 	bl	80012dc <_ZN14TMC4671_Driver13getMotionModeEv>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	setMotionMode(MotionMode::stopped);
 8001af6:	2100      	movs	r1, #0
 8001af8:	69f8      	ldr	r0, [r7, #28]
 8001afa:	f7ff fbd9 	bl	80012b0 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
	HAL_Delay(100); // Wait a bit before sampling
 8001afe:	2064      	movs	r0, #100	@ 0x64
 8001b00:	f001 fb10 	bl	8003124 <HAL_Delay>
	uint16_t lastrawA = this->adcConfig.adc_I0_offset, lastrawB = this->adcConfig.adc_I1_offset;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b0a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001b12:	87bb      	strh	r3, [r7, #60]	@ 0x3c

	//pulseClipLed(); // Turn on led
	// Disable drivers and measure many samples of zero current
	//enablePin.reset();
	uint32_t tick = HAL_GetTick();
 8001b14:	f001 fafa 	bl	800310c <HAL_GetTick>
 8001b18:	6378      	str	r0, [r7, #52]	@ 0x34
	while(HAL_GetTick() - tick < measuretime_idle){ // Measure idle
 8001b1a:	e043      	b.n	8001ba4 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0xfc>
		tmc4671_writeRegister(TMC4671_ADC_RAW_ADDR, 0); // Read raw adc
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2003      	movs	r0, #3
 8001b20:	f7ff f902 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
		uint32_t adcraw = tmc4671_readRegister(TMC4671_ADC_RAW_DATA);
 8001b24:	2002      	movs	r0, #2
 8001b26:	f7ff f8cb 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8001b2a:	62b8      	str	r0, [r7, #40]	@ 0x28
		uint16_t rawA = adcraw & 0xffff;
 8001b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
		uint16_t rawB = (adcraw >> 16) & 0xffff;
 8001b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b32:	0c1b      	lsrs	r3, r3, #16
 8001b34:	84bb      	strh	r3, [r7, #36]	@ 0x24

		// Signflip filter for SPI bug
		if(abs(lastrawA-rawA) < 10000 && abs(lastrawB-rawB) < 10000){
 8001b36:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001b38:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bfb8      	it	lt
 8001b40:	425b      	neglt	r3, r3
 8001b42:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b46:	4293      	cmp	r3, r2
 8001b48:	dc2c      	bgt.n	8001ba4 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0xfc>
 8001b4a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001b4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bfb8      	it	lt
 8001b54:	425b      	neglt	r3, r3
 8001b56:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	dc22      	bgt.n	8001ba4 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0xfc>
			totalA += rawA;
 8001b5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b60:	2200      	movs	r2, #0
 8001b62:	461c      	mov	r4, r3
 8001b64:	4615      	mov	r5, r2
 8001b66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b6a:	eb12 0a04 	adds.w	sl, r2, r4
 8001b6e:	eb43 0b05 	adc.w	fp, r3, r5
 8001b72:	e9c7 ab12 	strd	sl, fp, [r7, #72]	@ 0x48
			totalB += rawB;
 8001b76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4698      	mov	r8, r3
 8001b7c:	4691      	mov	r9, r2
 8001b7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b82:	eb12 0108 	adds.w	r1, r2, r8
 8001b86:	6039      	str	r1, [r7, #0]
 8001b88:	eb43 0309 	adc.w	r3, r3, r9
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b92:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			measurements_idle++;
 8001b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b98:	3301      	adds	r3, #1
 8001b9a:	657b      	str	r3, [r7, #84]	@ 0x54
			lastrawA = rawA;
 8001b9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			lastrawB = rawB;
 8001ba0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ba2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	while(HAL_GetTick() - tick < measuretime_idle){ // Measure idle
 8001ba4:	f001 fab2 	bl	800310c <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bac:	1ad2      	subs	r2, r2, r3
 8001bae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	bf34      	ite	cc
 8001bb4:	2301      	movcc	r3, #1
 8001bb6:	2300      	movcs	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1ae      	bne.n	8001b1c <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x74>
		}
//		uint32_t lastMicros = micros();
//		while(micros()-lastMicros < 100){} // Wait 100µs at least
	}
	//enablePin.set();
	int32_t offsetAidle = totalA / (measurements_idle);
 8001bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	617a      	str	r2, [r7, #20]
 8001bc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001bce:	f7fe fef1 	bl	80009b4 <__aeabi_uldivmod>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t offsetBidle = totalB / (measurements_idle);
 8001bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	60fa      	str	r2, [r7, #12]
 8001be2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001be6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001bea:	f7fe fee3 	bl	80009b4 <__aeabi_uldivmod>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Check if offsets are in a valid range
	if(totalA < 100 || totalB < 100 || ((abs(offsetAidle - 0x7fff) > TMC_ADCOFFSETFAIL) || (abs(offsetBidle - 0x7fff) > TMC_ADCOFFSETFAIL)) ){
 8001bf6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001bfa:	2a64      	cmp	r2, #100	@ 0x64
 8001bfc:	f173 0300 	sbcs.w	r3, r3, #0
 8001c00:	d31d      	bcc.n	8001c3e <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x196>
 8001c02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c06:	2a64      	cmp	r2, #100	@ 0x64
 8001c08:	f173 0300 	sbcs.w	r3, r3, #0
 8001c0c:	d317      	bcc.n	8001c3e <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x196>
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c10:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001c14:	3b7f      	subs	r3, #127	@ 0x7f
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f844 	bl	8000ca4 <_ZSt3absl>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	dc0b      	bgt.n	8001c3e <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x196>
 8001c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c28:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001c2c:	3b7f      	subs	r3, #127	@ 0x7f
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f838 	bl	8000ca4 <_ZSt3absl>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	dd01      	ble.n	8001c42 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x19a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x19c>
 8001c42:	2300      	movs	r3, #0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00a      	beq.n	8001c5e <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x1b6>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	4817      	ldr	r0, [pc, #92]	@ (8001cac <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x204>)
 8001c4e:	f001 fd53 	bl	80036f8 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
//		ErrorHandler::addError(Error(ErrorCode::adcCalibrationError,ErrorType::critical,"TMC ADC offset calibration failed."));
//		blinkErrLed(100, 0); // Blink forever
//		setPwm(TMC_PwmMode::off); //Disable pwm
//		this->changeState(TMC_ControlState::HardError);
		this->adcConfig.adcCalibrated = false;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		return false; // An adc or shunt amp is likely broken. do not proceed.
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e020      	b.n	8001ca0 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x1f8>
	}
	this->adcConfig.adc_I0_offset = offsetAidle;
 8001c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	this->adcConfig.adc_I1_offset = offsetBidle;
 8001c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	setAdcOffset(&this->adcConfig);
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3344      	adds	r3, #68	@ 0x44
 8001c76:	4619      	mov	r1, r3
 8001c78:	69f8      	ldr	r0, [r7, #28]
 8001c7a:	f7ff fd03 	bl	8001684 <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig>
	// ADC Offsets should now be close to perfect

	setPhiEType(lastphie);
 8001c7e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001c82:	4619      	mov	r1, r3
 8001c84:	69f8      	ldr	r0, [r7, #28]
 8001c86:	f7ff fbd3 	bl	8001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 8001c8a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001c8e:	4619      	mov	r1, r3
 8001c90:	69f8      	ldr	r0, [r7, #28]
 8001c92:	f7ff fb0d 	bl	80012b0 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
	this->adcConfig.adcCalibrated = true;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	return true;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3758      	adds	r7, #88	@ 0x58
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000

08001cb0 <_ZN14TMC4671_Driver17estimateABNparamsEv>:
/**
 * Moves the rotor and estimates polarity and direction of the encoder
 * Polarity is found by measuring the n pulse.
 * If polarity was found to be reversed during the test direction will be reversed again to account for that
 */
void TMC4671_Driver::estimateABNparams(){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	int32_t pos = getActualPosition();
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fe61 	bl	8001980 <_ZN14TMC4671_Driver17getActualPositionEv>
 8001cbe:	6138      	str	r0, [r7, #16]
	setActualPosition(0);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fe4a 	bl	800195c <_ZN14TMC4671_Driver17setActualPositionEl>
	PhiE lastphie = getPhiEType();
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fb1f 	bl	800130c <_ZN14TMC4671_Driver11getPhiETypeEv>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	73fb      	strb	r3, [r7, #15]
	MotionMode lastmode = getMotionMode();
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fb02 	bl	80012dc <_ZN14TMC4671_Driver13getMotionModeEv>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	73bb      	strb	r3, [r7, #14]
	tmc4671_fieldWrite(TMC4671_ABN_DIRECTION_FIELD, 0); // Set direction positive (0)
 8001cdc:	4b70      	ldr	r3, [pc, #448]	@ (8001ea0 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1f0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ce4:	f7ff f8ab 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	setPhiE_ext(0); // Electrical angle phi_e_ext for external writing into this register
 8001ce8:	2100      	movs	r1, #0
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fec8 	bl	8001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(PhiE::ext);
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fb9c 	bl	8001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setFluxTorque(0, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff fe8b 	bl	8001a18 <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setMotionMode(MotionMode::torque);
 8001d02:	2101      	movs	r1, #1
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fad3 	bl	80012b0 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>

	for(int16_t flux = 0; flux <= initPower; flux+=20){
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	83fb      	strh	r3, [r7, #30]
 8001d0e:	e00d      	b.n	8001d2c <_ZN14TMC4671_Driver17estimateABNparamsEv+0x7c>
		setFluxTorque(flux, 0);
 8001d10:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001d14:	2200      	movs	r2, #0
 8001d16:	4619      	mov	r1, r3
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff fe7d 	bl	8001a18 <_ZN14TMC4671_Driver13setFluxTorqueEss>
		HAL_Delay(5);
 8001d1e:	2005      	movs	r0, #5
 8001d20:	f001 fa00 	bl	8003124 <HAL_Delay>
	for(int16_t flux = 0; flux <= initPower; flux+=20){
 8001d24:	8bfb      	ldrh	r3, [r7, #30]
 8001d26:	3314      	adds	r3, #20
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	83fb      	strh	r3, [r7, #30]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	@ 0xf6
 8001d32:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	ddea      	ble.n	8001d10 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x60>
	}

	int16_t phiE_abn = tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_E_FIELD);
 8001d3a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea4 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1f4>)
 8001d3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d40:	f7ff f84d 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 8001d44:	4603      	mov	r3, r0
 8001d46:	83bb      	strh	r3, [r7, #28]
	int16_t phiE_abn_old = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	81bb      	strh	r3, [r7, #12]
	int16_t rcount = 0, c = 0; // Count how often direction was in reverse
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	837b      	strh	r3, [r7, #26]
 8001d50:	2300      	movs	r3, #0
 8001d52:	833b      	strh	r3, [r7, #24]
	uint16_t highcount = 0; // Count high state of n pulse for polarity estimation
 8001d54:	2300      	movs	r3, #0
 8001d56:	82fb      	strh	r3, [r7, #22]

	// Rotate a bit
	for(int16_t p = 0;p<0x0fff;p+=0x2f){
 8001d58:	2300      	movs	r3, #0
 8001d5a:	82bb      	strh	r3, [r7, #20]
 8001d5c:	e037      	b.n	8001dce <_ZN14TMC4671_Driver17estimateABNparamsEv+0x11e>
		setPhiE_ext(p);
 8001d5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fe8b 	bl	8001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>
		HAL_Delay(10);
 8001d6a:	200a      	movs	r0, #10
 8001d6c:	f001 f9da 	bl	8003124 <HAL_Delay>
		c++;
 8001d70:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3301      	adds	r3, #1
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	833b      	strh	r3, [r7, #24]
		phiE_abn_old = phiE_abn;
 8001d7c:	8bbb      	ldrh	r3, [r7, #28]
 8001d7e:	81bb      	strh	r3, [r7, #12]
		phiE_abn = tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_E_FIELD);
 8001d80:	4b48      	ldr	r3, [pc, #288]	@ (8001ea4 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1f4>)
 8001d82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d86:	f7ff f82a 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	83bb      	strh	r3, [r7, #28]

		// Count how often the new position was lower than the previous indicating a reversed encoder or motor direction
		if(phiE_abn < phiE_abn_old){
 8001d8e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001d92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	da05      	bge.n	8001da6 <_ZN14TMC4671_Driver17estimateABNparamsEv+0xf6>
			rcount++;
 8001d9a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	837b      	strh	r3, [r7, #26]
		}

		if(tmc4671_fieldRead(TMC4671_N_OF_ABN_RAW_FIELD)){
 8001da6:	4b40      	ldr	r3, [pc, #256]	@ (8001ea8 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1f8>)
 8001da8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001dac:	f7ff f817 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	bf14      	ite	ne
 8001db6:	2301      	movne	r3, #1
 8001db8:	2300      	moveq	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x116>
			highcount++;
 8001dc0:	8afb      	ldrh	r3, [r7, #22]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	82fb      	strh	r3, [r7, #22]
	for(int16_t p = 0;p<0x0fff;p+=0x2f){
 8001dc6:	8abb      	ldrh	r3, [r7, #20]
 8001dc8:	332f      	adds	r3, #47	@ 0x2f
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	82bb      	strh	r3, [r7, #20]
 8001dce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dd2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	ddc1      	ble.n	8001d5e <_ZN14TMC4671_Driver17estimateABNparamsEv+0xae>
		}
	}
	setActualPosition(pos + getActualPosition());
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fdd0 	bl	8001980 <_ZN14TMC4671_Driver17getActualPositionEv>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4413      	add	r3, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fdb7 	bl	800195c <_ZN14TMC4671_Driver17setActualPositionEl>

	setFluxTorque(0, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2100      	movs	r1, #0
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fe10 	bl	8001a18 <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setPhiEType(lastphie);
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff fb17 	bl	8001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 8001e02:	7bbb      	ldrb	r3, [r7, #14]
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff fa52 	bl	80012b0 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>

	bool npol = highcount > c/2;
 8001e0c:	8afa      	ldrh	r2, [r7, #22]
 8001e0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e12:	0fd9      	lsrs	r1, r3, #31
 8001e14:	440b      	add	r3, r1
 8001e16:	105b      	asrs	r3, r3, #1
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	bfcc      	ite	gt
 8001e1e:	2301      	movgt	r3, #1
 8001e20:	2300      	movle	r3, #0
 8001e22:	72fb      	strb	r3, [r7, #11]
	encoder.rdir = rcount > c/2;
 8001e24:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e28:	0fda      	lsrs	r2, r3, #31
 8001e2a:	4413      	add	r3, r2
 8001e2c:	105b      	asrs	r3, r3, #1
 8001e2e:	b21b      	sxth	r3, r3
 8001e30:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	bfcc      	ite	gt
 8001e38:	2301      	movgt	r3, #1
 8001e3a:	2300      	movle	r3, #0
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

	if(npol != encoder.npol){ // Invert dir if polarity was reversed TODO correct? likely wrong at the moment
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 8001e4a:	7afa      	ldrb	r2, [r7, #11]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d016      	beq.n	8001e7e <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1ce>
		encoder.rdir = !encoder.rdir;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001e56:	f083 0301 	eor.w	r3, r3, #1
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001e62:	2201      	movs	r2, #1
 8001e64:	2102      	movs	r1, #2
 8001e66:	4811      	ldr	r0, [pc, #68]	@ (8001eac <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1fc>)
 8001e68:	f001 fc46 	bl	80036f8 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8001e6c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001e70:	f001 f958 	bl	8003124 <HAL_Delay>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2102      	movs	r1, #2
 8001e78:	480c      	ldr	r0, [pc, #48]	@ (8001eac <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1fc>)
 8001e7a:	f001 fc3d 	bl	80036f8 <HAL_GPIO_WritePin>
	}


	encoder.apol = npol;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7afa      	ldrb	r2, [r7, #11]
 8001e82:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
	encoder.bpol = npol;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7afa      	ldrb	r2, [r7, #11]
 8001e8a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	encoder.npol = npol;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	7afa      	ldrb	r2, [r7, #11]
 8001e92:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63

//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
//	HAL_Delay(200);
//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
}
 8001e96:	bf00      	nop
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	08009c3c 	.word	0x08009c3c
 8001ea4:	08009c64 	.word	0x08009c64
 8001ea8:	08009d84 	.word	0x08009d84
 8001eac:	40021000 	.word	0x40021000

08001eb0 <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb>:

void TMC4671_Driver::zeroAbnUsingPhiM(bool offsetPhiE = false){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
	int32_t npos = tmc4671_readRegister(TMC4671_ABN_DECODER_COUNT_N); // raw encoder counts at index hit
 8001ebc:	2028      	movs	r0, #40	@ 0x28
 8001ebe:	f7fe feff 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	60fb      	str	r3, [r7, #12]
	int32_t npos_M = (npos * 0xffff) / encoder.cpr; // Scaled encoder angle at index
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	041b      	lsls	r3, r3, #16
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8001ed4:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ed8:	60bb      	str	r3, [r7, #8]
	encoder.phiMoffset = -npos_M;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	425b      	negs	r3, r3
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

	if(offsetPhiE){
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d013      	beq.n	8001f18 <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb+0x68>
		encoder.phiEoffset += npos_M * encoder.pole_pairs;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	@ 0x68
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001efe:	4619      	mov	r1, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	fb11 f303 	smulbb	r3, r1, r3
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8001f16:	e008      	b.n	8001f2a <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb+0x7a>
	}else{
		tmc4671_fieldWrite(TMC4671_ABN_DECODER_PHI_M_OFFSET_FIELD, encoder.phiMoffset);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	@ 0x6a
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb+0x94>)
 8001f22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f26:	f7fe ff8a 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	}

	setActualPosition(getAbsolutePosition()); // Set position to absolute position = ~zero
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff fd38 	bl	80019a0 <_ZN14TMC4671_Driver19getAbsolutePositionEv>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4619      	mov	r1, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fd11 	bl	800195c <_ZN14TMC4671_Driver17setActualPositionEl>
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	08009c4c 	.word	0x08009c4c

08001f48 <_ZN14TMC4671_Driver16powerInitEncoderEs>:
/**
 * Aligns ABN encoders by forcing an angle with high current and calculating the offset
 * Will start at the current phiE to minimize any extra movements (useful if motor was turned in openloop mode before already)
 * @param power Maximum current reached during flux ramp
 */
void TMC4671_Driver::powerInitEncoder(int16_t power){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
	// This aligning technique is only for stepper and bldc motors
	if(motorType != MotorType::STEPPER && motorType != MotorType::BLDC){
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d005      	beq.n	8001f6a <_ZN14TMC4671_Driver16powerInitEncoderEs+0x22>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	f040 80f7 	bne.w	8002158 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x210>
		return;
	}

	PhiE lastphie = getPhiEType();
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff f9ce 	bl	800130c <_ZN14TMC4671_Driver11getPhiETypeEv>
 8001f70:	4603      	mov	r3, r0
 8001f72:	74fb      	strb	r3, [r7, #19]
	MotionMode lastmode = getMotionMode();
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff f9b1 	bl	80012dc <_ZN14TMC4671_Driver13getMotionModeEv>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	74bb      	strb	r3, [r7, #18]
	setFluxTorque(0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fd48 	bl	8001a18 <_ZN14TMC4671_Driver13setFluxTorqueEss>

	RegisterField phiEoffsetReg = TMC4671_ABN_DECODER_PHI_E_OFFSET_FIELD;
 8001f88:	4a75      	ldr	r2, [pc, #468]	@ (8002160 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x218>)
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f92:	e883 0003 	stmia.w	r3, {r0, r1}

	if(this->encoderType == EncoderType::abn){
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d113      	bne.n	8001fc8 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x80>
		phiEoffsetReg = TMC4671_ABN_DECODER_PHI_E_OFFSET_FIELD;
 8001fa0:	4a70      	ldr	r2, [pc, #448]	@ (8002164 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x21c>)
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001faa:	e883 0003 	stmia.w	r3, {r0, r1}

		if(!encoder.indexHitFlag){
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001fb4:	f083 0301 	eor.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01d      	beq.n	8001ffa <_ZN14TMC4671_Driver16powerInitEncoderEs+0xb2>
			zeroAbnUsingPhiM();
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff75 	bl	8001eb0 <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb>
 8001fc6:	e018      	b.n	8001ffa <_ZN14TMC4671_Driver16powerInitEncoderEs+0xb2>
		}
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d004      	beq.n	8001fdc <_ZN14TMC4671_Driver16powerInitEncoderEs+0x94>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d10e      	bne.n	8001ffa <_ZN14TMC4671_Driver16powerInitEncoderEs+0xb2>
		tmc4671_writeRegister(TMC4671_AENC_DECODER_COUNT, 0); //Zero encoder
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2041      	movs	r0, #65	@ 0x41
 8001fe0:	f7fe fea2 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
		tmc4671_writeRegister(TMC4671_AENC_DECODER_POSITION, 0); //Zero encoder
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2047      	movs	r0, #71	@ 0x47
 8001fe8:	f7fe fe9e 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
		phiEoffsetReg = TMC4671_AENC_DECODER_PHI_E_OFFSET_FIELD;
 8001fec:	4a5e      	ldr	r2, [pc, #376]	@ (8002168 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x220>)
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ff6:	e883 0003 	stmia.w	r3, {r0, r1}
//	}
//	else{
//		return; // Not relevant
//	}

	int16_t phiEpos = getPhiE(); // starts at current encoder position
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff f9a0 	bl	8001340 <_ZN14TMC4671_Driver7getPhiEEv>
 8002000:	4603      	mov	r3, r0
 8002002:	823b      	strh	r3, [r7, #16]
	tmc4671_fieldWrite(phiEoffsetReg, 0); // Set phiE offset to zero
 8002004:	2200      	movs	r2, #0
 8002006:	f107 0308 	add.w	r3, r7, #8
 800200a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800200e:	f7fe ff16 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	setPhiE_ext(phiEpos);
 8002012:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fd31 	bl	8001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(PhiE::ext);
 800201e:	2101      	movs	r1, #1
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff fa05 	bl	8001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>

	// Ramp up flux
	for(int16_t flux = 0; flux <= power; flux+=10){
 8002026:	2300      	movs	r3, #0
 8002028:	83fb      	strh	r3, [r7, #30]
 800202a:	e00d      	b.n	8002048 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x100>
		setFluxTorque(flux, 0);
 800202c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002030:	2200      	movs	r2, #0
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff fcef 	bl	8001a18 <_ZN14TMC4671_Driver13setFluxTorqueEss>
		HAL_Delay(3);
 800203a:	2003      	movs	r0, #3
 800203c:	f001 f872 	bl	8003124 <HAL_Delay>
	for(int16_t flux = 0; flux <= power; flux+=10){
 8002040:	8bfb      	ldrh	r3, [r7, #30]
 8002042:	330a      	adds	r3, #10
 8002044:	b29b      	uxth	r3, r3
 8002046:	83fb      	strh	r3, [r7, #30]
 8002048:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800204c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002050:	429a      	cmp	r2, r3
 8002052:	ddeb      	ble.n	800202c <_ZN14TMC4671_Driver16powerInitEncoderEs+0xe4>
	}

	int16_t phiE_enc = getPhiE_Enc();
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff f981 	bl	800135c <_ZN14TMC4671_Driver11getPhiE_EncEv>
 800205a:	4603      	mov	r3, r0
 800205c:	83bb      	strh	r3, [r7, #28]
	HAL_Delay(50);
 800205e:	2032      	movs	r0, #50	@ 0x32
 8002060:	f001 f860 	bl	8003124 <HAL_Delay>
	int16_t phiE_abn_old = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	837b      	strh	r3, [r7, #26]
	int16_t c = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	833b      	strh	r3, [r7, #24]
	uint16_t still = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	82fb      	strh	r3, [r7, #22]

//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
	while(still < 30 && c++ < 1000){
 8002070:	e019      	b.n	80020a6 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x15e>
		// Wait for motor to stop moving
		if(abs(phiE_enc - phiE_abn_old) < 100){
 8002072:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002076:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	bfb8      	it	lt
 8002080:	425b      	neglt	r3, r3
 8002082:	2b63      	cmp	r3, #99	@ 0x63
 8002084:	dc03      	bgt.n	800208e <_ZN14TMC4671_Driver16powerInitEncoderEs+0x146>
			still++;
 8002086:	8afb      	ldrh	r3, [r7, #22]
 8002088:	3301      	adds	r3, #1
 800208a:	82fb      	strh	r3, [r7, #22]
 800208c:	e001      	b.n	8002092 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x14a>
		}
		else{
			still = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	82fb      	strh	r3, [r7, #22]
		}
		phiE_abn_old = phiE_enc;
 8002092:	8bbb      	ldrh	r3, [r7, #28]
 8002094:	837b      	strh	r3, [r7, #26]
		phiE_enc = getPhiE_Enc();
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff f960 	bl	800135c <_ZN14TMC4671_Driver11getPhiE_EncEv>
 800209c:	4603      	mov	r3, r0
 800209e:	83bb      	strh	r3, [r7, #28]
		HAL_Delay(10);
 80020a0:	200a      	movs	r0, #10
 80020a2:	f001 f83f 	bl	8003124 <HAL_Delay>
	while(still < 30 && c++ < 1000){
 80020a6:	8afb      	ldrh	r3, [r7, #22]
 80020a8:	2b1d      	cmp	r3, #29
 80020aa:	d80a      	bhi.n	80020c2 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x17a>
 80020ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	3201      	adds	r2, #1
 80020b4:	b292      	uxth	r2, r2
 80020b6:	833a      	strh	r2, [r7, #24]
 80020b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020bc:	da01      	bge.n	80020c2 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x17a>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x17c>
 80020c2:	2300      	movs	r3, #0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1d4      	bne.n	8002072 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x12a>
	}
	setFluxTorque(0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff fca3 	bl	8001a18 <_ZN14TMC4671_Driver13setFluxTorqueEss>
//	HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);

	//Write offset
	int16_t phiEoffset =  phiEpos-phiE_enc;
 80020d2:	8a3a      	ldrh	r2, [r7, #16]
 80020d4:	8bbb      	ldrh	r3, [r7, #28]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	b29b      	uxth	r3, r3
 80020da:	82bb      	strh	r3, [r7, #20]

	if(phiEoffset == 0){ // 0 invalid
 80020dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1b0>
		HAL_Delay(200);
 80020e4:	20c8      	movs	r0, #200	@ 0xc8
 80020e6:	f001 f81d 	bl	8003124 <HAL_Delay>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80020ea:	2201      	movs	r2, #1
 80020ec:	2102      	movs	r1, #2
 80020ee:	481f      	ldr	r0, [pc, #124]	@ (800216c <_ZN14TMC4671_Driver16powerInitEncoderEs+0x224>)
 80020f0:	f001 fb02 	bl	80036f8 <HAL_GPIO_WritePin>
//		HAL_Delay(5000);
		phiEoffset = 1;
 80020f4:	2301      	movs	r3, #1
 80020f6:	82bb      	strh	r3, [r7, #20]

//	if (usingExternalEncoder()){
//		externalEncoderPhieOffset = phiEoffset;
//	}
//	else{
	tmc4671_fieldWrite(phiEoffsetReg, phiEoffset);
 80020f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020fc:	461a      	mov	r2, r3
 80020fe:	f107 0308 	add.w	r3, r7, #8
 8002102:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002106:	f7fe fe9a 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
//	}

	if(this->encoderType == EncoderType::abn){
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8002110:	2b01      	cmp	r3, #1
 8002112:	d104      	bne.n	800211e <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1d6>
		encoder.phiEoffset = phiEoffset;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	8aba      	ldrh	r2, [r7, #20]
 8002118:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800211c:	e00d      	b.n	800213a <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1f2>
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8002124:	2b02      	cmp	r3, #2
 8002126:	d004      	beq.n	8002132 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1ea>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800212e:	2b03      	cmp	r3, #3
 8002130:	d103      	bne.n	800213a <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1f2>
		encoder.phiEoffset = phiEoffset;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	8aba      	ldrh	r2, [r7, #20]
 8002136:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	}


	setPhiE_ext(0);
 800213a:	2100      	movs	r1, #0
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fc9f 	bl	8001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(lastphie);
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	4619      	mov	r1, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff f972 	bl	8001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 800214c:	7cbb      	ldrb	r3, [r7, #18]
 800214e:	4619      	mov	r1, r3
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff f8ad 	bl	80012b0 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
 8002156:	e000      	b.n	800215a <_ZN14TMC4671_Driver16powerInitEncoderEs+0x212>
		return;
 8002158:	bf00      	nop
}
 800215a:	3720      	adds	r7, #32
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	08009afc 	.word	0x08009afc
 8002164:	08009c54 	.word	0x08009c54
 8002168:	08009cec 	.word	0x08009cec
 800216c:	40021000 	.word	0x40021000

08002170 <_ZN14TMC4671_Driver12checkEncoderEv>:

/**
 * Steps the motor a few times to check if the encoder follows correctly
 */
bool TMC4671_Driver::checkEncoder(){
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	@ 0x30
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	if(this->motorType != MotorType::STEPPER && this->motorType != MotorType::BLDC){
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800217e:	2b02      	cmp	r3, #2
 8002180:	d006      	beq.n	8002190 <_ZN14TMC4671_Driver12checkEncoderEv+0x20>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002188:	2b03      	cmp	r3, #3
 800218a:	d001      	beq.n	8002190 <_ZN14TMC4671_Driver12checkEncoderEv+0x20>
		// If not stepper or bldc return
		return true;
 800218c:	2301      	movs	r3, #1
 800218e:	e1ee      	b.n	800256e <_ZN14TMC4671_Driver12checkEncoderEv+0x3fe>
	}

	const uint16_t maxcount = 80; // Allowed reversals
 8002190:	2350      	movs	r3, #80	@ 0x50
 8002192:	82fb      	strh	r3, [r7, #22]
	const uint16_t maxfail = 10; // Allowed fails
 8002194:	230a      	movs	r3, #10
 8002196:	82bb      	strh	r3, [r7, #20]

	// Start angle offsets all angles later so there is no jump if angle is already properly aligned
	const int16_t startAngle = getPhiE_Enc();
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff f8df 	bl	800135c <_ZN14TMC4671_Driver11getPhiE_EncEv>
 800219e:	4603      	mov	r3, r0
 80021a0:	827b      	strh	r3, [r7, #18]
	const int16_t targetAngle = 0x3FFF;
 80021a2:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80021a6:	823b      	strh	r3, [r7, #16]

	bool result = true;
 80021a8:	2301      	movs	r3, #1
 80021aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	PhiE lastphie = getPhiEType();
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff f8ac 	bl	800130c <_ZN14TMC4671_Driver11getPhiETypeEv>
 80021b4:	4603      	mov	r3, r0
 80021b6:	73fb      	strb	r3, [r7, #15]
	MotionMode lastmode = getMotionMode();
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff f88f 	bl	80012dc <_ZN14TMC4671_Driver13getMotionModeEv>
 80021be:	4603      	mov	r3, r0
 80021c0:	73bb      	strb	r3, [r7, #14]

//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
//	HAL_Delay(200);
//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);

	setFluxTorque(0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff fc26 	bl	8001a18 <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setPhiEType(PhiE::ext);
 80021cc:	2101      	movs	r1, #1
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff f92e 	bl	8001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setPhiE_ext(startAngle);
 80021d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fc50 	bl	8001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>

	// Ramp up flux
	for(int16_t flux = 0; flux <= 2*this->initPower/3; flux+=20){
 80021e0:	2300      	movs	r3, #0
 80021e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80021e4:	e00d      	b.n	8002202 <_ZN14TMC4671_Driver12checkEncoderEv+0x92>
		setFluxTorque(flux, 0);
 80021e6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80021ea:	2200      	movs	r2, #0
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff fc12 	bl	8001a18 <_ZN14TMC4671_Driver13setFluxTorqueEss>
		HAL_Delay(2);
 80021f4:	2002      	movs	r0, #2
 80021f6:	f000 ff95 	bl	8003124 <HAL_Delay>
	for(int16_t flux = 0; flux <= 2*this->initPower/3; flux+=20){
 80021fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80021fc:	3314      	adds	r3, #20
 80021fe:	b29b      	uxth	r3, r3
 8002200:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8002202:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	@ 0xf6
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	49ab      	ldr	r1, [pc, #684]	@ (80024bc <_ZN14TMC4671_Driver12checkEncoderEv+0x34c>)
 8002210:	fb81 0103 	smull	r0, r1, r1, r3
 8002214:	17db      	asrs	r3, r3, #31
 8002216:	1acb      	subs	r3, r1, r3
 8002218:	429a      	cmp	r2, r3
 800221a:	dde4      	ble.n	80021e6 <_ZN14TMC4671_Driver12checkEncoderEv+0x76>
	}

	//Forward
	int16_t phiE_enc = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	81bb      	strh	r3, [r7, #12]
	uint16_t failcount = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	857b      	strh	r3, [r7, #42]	@ 0x2a
	int16_t revCount = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	853b      	strh	r3, [r7, #40]	@ 0x28
	for(int16_t angle = 0; angle<targetAngle; angle+=0x00ff){
 8002228:	2300      	movs	r3, #0
 800222a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800222c:	e088      	b.n	8002340 <_ZN14TMC4671_Driver12checkEncoderEv+0x1d0>
		uint16_t c = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	84bb      	strh	r3, [r7, #36]	@ 0x24
		setPhiE_ext(angle+startAngle);
 8002232:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002234:	8a7b      	ldrh	r3, [r7, #18]
 8002236:	4413      	add	r3, r2
 8002238:	b29b      	uxth	r3, r3
 800223a:	b21b      	sxth	r3, r3
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff fc1e 	bl	8001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>
		HAL_Delay(5);
 8002244:	2005      	movs	r0, #5
 8002246:	f000 ff6d 	bl	8003124 <HAL_Delay>

		phiE_enc = getPhiE_Enc() - startAngle;
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff f886 	bl	800135c <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8002250:	4603      	mov	r3, r0
 8002252:	b29a      	uxth	r2, r3
 8002254:	8a7b      	ldrh	r3, [r7, #18]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	b29b      	uxth	r3, r3
 800225a:	81bb      	strh	r3, [r7, #12]
		int16_t err = abs(phiE_enc - angle);
 800225c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002260:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	bfb8      	it	lt
 800226a:	425b      	neglt	r3, r3
 800226c:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t nErr = abs(phiE_enc + angle);
 800226e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002272:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002276:	4413      	add	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	bfb8      	it	lt
 800227c:	425b      	neglt	r3, r3
 800227e:	843b      	strh	r3, [r7, #32]

		// Wait more until encoder settles a bit
		while(err > 2500 && nErr > 2500 && c++ < maxcount){
 8002280:	e01d      	b.n	80022be <_ZN14TMC4671_Driver12checkEncoderEv+0x14e>
			phiE_enc = getPhiE_Enc() - startAngle;
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff f86a 	bl	800135c <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8002288:	4603      	mov	r3, r0
 800228a:	b29a      	uxth	r2, r3
 800228c:	8a7b      	ldrh	r3, [r7, #18]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	b29b      	uxth	r3, r3
 8002292:	81bb      	strh	r3, [r7, #12]
			err = abs(phiE_enc - angle);
 8002294:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002298:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	bfb8      	it	lt
 80022a2:	425b      	neglt	r3, r3
 80022a4:	847b      	strh	r3, [r7, #34]	@ 0x22
			nErr = abs(angle - phiE_enc);
 80022a6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80022aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bfb8      	it	lt
 80022b4:	425b      	neglt	r3, r3
 80022b6:	843b      	strh	r3, [r7, #32]
			HAL_Delay(10);
 80022b8:	200a      	movs	r0, #10
 80022ba:	f000 ff33 	bl	8003124 <HAL_Delay>
		while(err > 2500 && nErr > 2500 && c++ < maxcount){
 80022be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80022c2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80022c6:	4293      	cmp	r3, r2
 80022c8:	dd0c      	ble.n	80022e4 <_ZN14TMC4671_Driver12checkEncoderEv+0x174>
 80022ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80022ce:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80022d2:	4293      	cmp	r3, r2
 80022d4:	dd06      	ble.n	80022e4 <_ZN14TMC4671_Driver12checkEncoderEv+0x174>
 80022d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	84ba      	strh	r2, [r7, #36]	@ 0x24
 80022dc:	2b4f      	cmp	r3, #79	@ 0x4f
 80022de:	d801      	bhi.n	80022e4 <_ZN14TMC4671_Driver12checkEncoderEv+0x174>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <_ZN14TMC4671_Driver12checkEncoderEv+0x176>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1cb      	bne.n	8002282 <_ZN14TMC4671_Driver12checkEncoderEv+0x112>
		}

		if(err > nErr){
 80022ea:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80022ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	dd05      	ble.n	8002302 <_ZN14TMC4671_Driver12checkEncoderEv+0x192>
			revCount++;
 80022f6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	b29b      	uxth	r3, r3
 8002300:	853b      	strh	r3, [r7, #40]	@ 0x28
		}

		if(c >= maxcount){
 8002302:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002304:	2b4f      	cmp	r3, #79	@ 0x4f
 8002306:	d917      	bls.n	8002338 <_ZN14TMC4671_Driver12checkEncoderEv+0x1c8>
			failcount++;
 8002308:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800230a:	3301      	adds	r3, #1
 800230c:	857b      	strh	r3, [r7, #42]	@ 0x2a
			if(failcount > maxfail){
 800230e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002310:	2b0a      	cmp	r3, #10
 8002312:	d911      	bls.n	8002338 <_ZN14TMC4671_Driver12checkEncoderEv+0x1c8>
				result = false;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 800231a:	2201      	movs	r2, #1
 800231c:	2102      	movs	r1, #2
 800231e:	4868      	ldr	r0, [pc, #416]	@ (80024c0 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8002320:	f001 f9ea 	bl	80036f8 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8002324:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002328:	f000 fefc 	bl	8003124 <HAL_Delay>
				HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	2102      	movs	r1, #2
 8002330:	4863      	ldr	r0, [pc, #396]	@ (80024c0 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8002332:	f001 f9e1 	bl	80036f8 <HAL_GPIO_WritePin>
				break;
 8002336:	e00a      	b.n	800234e <_ZN14TMC4671_Driver12checkEncoderEv+0x1de>
	for(int16_t angle = 0; angle<targetAngle; angle+=0x00ff){
 8002338:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800233a:	33ff      	adds	r3, #255	@ 0xff
 800233c:	b29b      	uxth	r3, r3
 800233e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002340:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002344:	f643 72fe 	movw	r2, #16382	@ 0x3ffe
 8002348:	4293      	cmp	r3, r2
 800234a:	f77f af70 	ble.w	800222e <_ZN14TMC4671_Driver12checkEncoderEv+0xbe>
	 * Encoder connection wrong
	 * Wrong encoder selection
	 * No motor movement
	 * No encoder power
	 */
	if(startAngle == getPhiE_Enc()){
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff f804 	bl	800135c <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800235c:	4293      	cmp	r3, r2
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d010      	beq.n	800238c <_ZN14TMC4671_Driver12checkEncoderEv+0x21c>
		// TODO: error handler
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 800236a:	2201      	movs	r2, #1
 800236c:	2102      	movs	r1, #2
 800236e:	4854      	ldr	r0, [pc, #336]	@ (80024c0 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8002370:	f001 f9c2 	bl	80036f8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8002374:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002378:	f000 fed4 	bl	8003124 <HAL_Delay>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 800237c:	2200      	movs	r2, #0
 800237e:	2102      	movs	r1, #2
 8002380:	484f      	ldr	r0, [pc, #316]	@ (80024c0 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8002382:	f001 f9b9 	bl	80036f8 <HAL_GPIO_WritePin>
		result = false;
 8002386:	2300      	movs	r3, #0
 8002388:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	// Backward

	if(result){ // Only if not already failed
 800238c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80a0 	beq.w	80024d6 <_ZN14TMC4671_Driver12checkEncoderEv+0x366>
		for(int16_t angle = targetAngle;angle>0;angle -= 0x00ff){
 8002396:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800239a:	83fb      	strh	r3, [r7, #30]
 800239c:	e096      	b.n	80024cc <_ZN14TMC4671_Driver12checkEncoderEv+0x35c>
			uint16_t c = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	83bb      	strh	r3, [r7, #28]
			setPhiE_ext(angle+startAngle);
 80023a2:	8bfa      	ldrh	r2, [r7, #30]
 80023a4:	8a7b      	ldrh	r3, [r7, #18]
 80023a6:	4413      	add	r3, r2
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	4619      	mov	r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fb66 	bl	8001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>
			HAL_Delay(5);
 80023b4:	2005      	movs	r0, #5
 80023b6:	f000 feb5 	bl	8003124 <HAL_Delay>

			phiE_enc = getPhiE_Enc() - startAngle;
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe ffce 	bl	800135c <_ZN14TMC4671_Driver11getPhiE_EncEv>
 80023c0:	4603      	mov	r3, r0
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	8a7b      	ldrh	r3, [r7, #18]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	81bb      	strh	r3, [r7, #12]
			int16_t err = abs(phiE_enc - angle);
 80023cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80023d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bfb8      	it	lt
 80023da:	425b      	neglt	r3, r3
 80023dc:	837b      	strh	r3, [r7, #26]
			int16_t nErr = abs(phiE_enc + angle);
 80023de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80023e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023e6:	4413      	add	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bfb8      	it	lt
 80023ec:	425b      	neglt	r3, r3
 80023ee:	833b      	strh	r3, [r7, #24]

			// Wait more
			while(err > 2500 && nErr > 2500 && c++ < maxcount){
 80023f0:	e01d      	b.n	800242e <_ZN14TMC4671_Driver12checkEncoderEv+0x2be>
				phiE_enc = getPhiE_Enc() - startAngle;
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7fe ffb2 	bl	800135c <_ZN14TMC4671_Driver11getPhiE_EncEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	8a7b      	ldrh	r3, [r7, #18]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	b29b      	uxth	r3, r3
 8002402:	81bb      	strh	r3, [r7, #12]
				err = abs(phiE_enc - angle);
 8002404:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002408:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	bfb8      	it	lt
 8002412:	425b      	neglt	r3, r3
 8002414:	837b      	strh	r3, [r7, #26]
				nErr = abs(angle - phiE_enc);
 8002416:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800241a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	bfb8      	it	lt
 8002424:	425b      	neglt	r3, r3
 8002426:	833b      	strh	r3, [r7, #24]
				HAL_Delay(10);
 8002428:	200a      	movs	r0, #10
 800242a:	f000 fe7b 	bl	8003124 <HAL_Delay>
			while(err > 2500 && nErr > 2500 && c++ < maxcount){
 800242e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002432:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002436:	4293      	cmp	r3, r2
 8002438:	dd0c      	ble.n	8002454 <_ZN14TMC4671_Driver12checkEncoderEv+0x2e4>
 800243a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800243e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002442:	4293      	cmp	r3, r2
 8002444:	dd06      	ble.n	8002454 <_ZN14TMC4671_Driver12checkEncoderEv+0x2e4>
 8002446:	8bbb      	ldrh	r3, [r7, #28]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	83ba      	strh	r2, [r7, #28]
 800244c:	2b4f      	cmp	r3, #79	@ 0x4f
 800244e:	d801      	bhi.n	8002454 <_ZN14TMC4671_Driver12checkEncoderEv+0x2e4>
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <_ZN14TMC4671_Driver12checkEncoderEv+0x2e6>
 8002454:	2300      	movs	r3, #0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1cb      	bne.n	80023f2 <_ZN14TMC4671_Driver12checkEncoderEv+0x282>
			}

			if(err > nErr){
 800245a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800245e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002462:	429a      	cmp	r2, r3
 8002464:	dd05      	ble.n	8002472 <_ZN14TMC4671_Driver12checkEncoderEv+0x302>
				revCount++;
 8002466:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800246a:	b29b      	uxth	r3, r3
 800246c:	3301      	adds	r3, #1
 800246e:	b29b      	uxth	r3, r3
 8002470:	853b      	strh	r3, [r7, #40]	@ 0x28
			}

			if(c >= maxcount){
 8002472:	8bbb      	ldrh	r3, [r7, #28]
 8002474:	2b4f      	cmp	r3, #79	@ 0x4f
 8002476:	d925      	bls.n	80024c4 <_ZN14TMC4671_Driver12checkEncoderEv+0x354>
				failcount++;
 8002478:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800247a:	3301      	adds	r3, #1
 800247c:	857b      	strh	r3, [r7, #42]	@ 0x2a
				if(failcount > maxfail){
 800247e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002480:	2b0a      	cmp	r3, #10
 8002482:	d91f      	bls.n	80024c4 <_ZN14TMC4671_Driver12checkEncoderEv+0x354>
					result = false;
 8002484:	2300      	movs	r3, #0
 8002486:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 800248a:	2201      	movs	r2, #1
 800248c:	2101      	movs	r1, #1
 800248e:	480c      	ldr	r0, [pc, #48]	@ (80024c0 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8002490:	f001 f932 	bl	80036f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8002494:	2201      	movs	r2, #1
 8002496:	2102      	movs	r1, #2
 8002498:	4809      	ldr	r0, [pc, #36]	@ (80024c0 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 800249a:	f001 f92d 	bl	80036f8 <HAL_GPIO_WritePin>
					HAL_Delay(150);
 800249e:	2096      	movs	r0, #150	@ 0x96
 80024a0:	f000 fe40 	bl	8003124 <HAL_Delay>
					HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2101      	movs	r1, #1
 80024a8:	4805      	ldr	r0, [pc, #20]	@ (80024c0 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 80024aa:	f001 f925 	bl	80036f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2102      	movs	r1, #2
 80024b2:	4803      	ldr	r0, [pc, #12]	@ (80024c0 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 80024b4:	f001 f920 	bl	80036f8 <HAL_GPIO_WritePin>
					break;
 80024b8:	e00d      	b.n	80024d6 <_ZN14TMC4671_Driver12checkEncoderEv+0x366>
 80024ba:	bf00      	nop
 80024bc:	55555556 	.word	0x55555556
 80024c0:	40021000 	.word	0x40021000
		for(int16_t angle = targetAngle;angle>0;angle -= 0x00ff){
 80024c4:	8bfb      	ldrh	r3, [r7, #30]
 80024c6:	3bff      	subs	r3, #255	@ 0xff
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	83fb      	strh	r3, [r7, #30]
 80024cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f73f af64 	bgt.w	800239e <_ZN14TMC4671_Driver12checkEncoderEv+0x22e>
			}
		}
	}

	// TODO check if we want that
	if(revCount > maxcount){ // Encoder seems reversed
 80024d6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80024da:	2b50      	cmp	r3, #80	@ 0x50
 80024dc:	dd2a      	ble.n	8002534 <_ZN14TMC4671_Driver12checkEncoderEv+0x3c4>
		// reverse encoder
		if(this->encoderType == EncoderType::abn){
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d112      	bne.n	800250e <_ZN14TMC4671_Driver12checkEncoderEv+0x39e>
			this->encoder.rdir = !this->encoder.rdir;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80024ee:	f083 0301 	eor.w	r3, r3, #1
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
//			this->encoder.bpol = !this->encoder.bpol;
//			this->encoder.npol = !this->encoder.npol;
//			HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
//			HAL_Delay(500);
//			HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
			tmc4671_fieldWrite(TMC4671_ABN_DIRECTION_FIELD, this->encoder.rdir);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002500:	461a      	mov	r2, r3
 8002502:	4b1d      	ldr	r3, [pc, #116]	@ (8002578 <_ZN14TMC4671_Driver12checkEncoderEv+0x408>)
 8002504:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002508:	f7fe fc99 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
 800250c:	e012      	b.n	8002534 <_ZN14TMC4671_Driver12checkEncoderEv+0x3c4>
//			tmc4671_fieldWrite(TMC4671_ABN_BPOL_FIELD, this->encoder.bpol);
//			tmc4671_fieldWrite(TMC4671_ABN_NPOL_FIELD, this->encoder.npol);
//			result = false;
//			setupAbnEncoder(&encoder);
		}
		else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8002514:	2b02      	cmp	r3, #2
 8002516:	d004      	beq.n	8002522 <_ZN14TMC4671_Driver12checkEncoderEv+0x3b2>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800251e:	2b03      	cmp	r3, #3
 8002520:	d108      	bne.n	8002534 <_ZN14TMC4671_Driver12checkEncoderEv+0x3c4>
			this->encoder.rdir = !this->encoder.rdir;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002528:	f083 0301 	eor.w	r3, r3, #1
 800252c:	b2da      	uxtb	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
//			this->encoderReversed = !this->encoderReversed;
		}
//		ErrorHandler::addError(Error(ErrorCode::encoderReversed,ErrorType::warning,"Encoder direction reversed during check"));
	}

	setFluxTorque(0, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	2100      	movs	r1, #0
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff fa6d 	bl	8001a18 <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setPhiE_ext(0);
 800253e:	2100      	movs	r1, #0
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff fa9d 	bl	8001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(lastphie);
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	4619      	mov	r1, r3
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7fe ff70 	bl	8001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 8002550:	7bbb      	ldrb	r3, [r7, #14]
 8002552:	4619      	mov	r1, r3
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7fe feab 	bl	80012b0 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>

	if(result){
 800255a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <_ZN14TMC4671_Driver12checkEncoderEv+0x3fa>
		encoder.isAligned = true;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
	}

	return result;
 800256a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800256e:	4618      	mov	r0, r3
 8002570:	3730      	adds	r7, #48	@ 0x30
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	08009c3c 	.word	0x08009c3c

0800257c <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder>:

void TMC4671_Driver::setupAbnEncoder(ABNencoder* abnEncoder_p){
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
	this->statusMask.flags.AENC_N = 0;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	f892 30ff 	ldrb.w	r3, [r2, #255]	@ 0xff
 800258c:	f36f 1386 	bfc	r3, #6, #1
 8002590:	f882 30ff 	strb.w	r3, [r2, #255]	@ 0xff
	this->statusMask.flags.ENC_N = 0;
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	f892 30ff 	ldrb.w	r3, [r2, #255]	@ 0xff
 800259a:	f36f 1304 	bfc	r3, #4, #1
 800259e:	f882 30ff 	strb.w	r3, [r2, #255]	@ 0xff
	setStatusMask(statusMask);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8d3 10fc 	ldr.w	r1, [r3, #252]	@ 0xfc
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff fa5b 	bl	8001a64 <_ZN14TMC4671_Driver13setStatusMaskE11StatusFlags>

	memcpy(&this->encoder, abnEncoder_p, sizeof(this->encoder));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	335c      	adds	r3, #92	@ 0x5c
 80025b2:	2218      	movs	r2, #24
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f007 fa84 	bl	8009ac4 <memcpy>

	tmc4671_fieldWrite(TMC4671_ABN_APOL_FIELD, abnEncoder_p->apol);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	795b      	ldrb	r3, [r3, #5]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002740 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1c4>)
 80025c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025c8:	f7fe fc39 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_BPOL_FIELD, abnEncoder_p->bpol);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	799b      	ldrb	r3, [r3, #6]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002744 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1c8>)
 80025d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025d8:	f7fe fc31 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_NPOL_FIELD, abnEncoder_p->npol);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	79db      	ldrb	r3, [r3, #7]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b59      	ldr	r3, [pc, #356]	@ (8002748 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1cc>)
 80025e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025e8:	f7fe fc29 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_USE_ABN_AS_N_FIELD, abnEncoder_p->ab_as_n);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	7a5b      	ldrb	r3, [r3, #9]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b56      	ldr	r3, [pc, #344]	@ (800274c <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1d0>)
 80025f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025f8:	f7fe fc21 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_CLN_FIELD, abnEncoder_p->latch_on_N);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	7a9b      	ldrb	r3, [r3, #10]
 8002600:	461a      	mov	r2, r3
 8002602:	4b53      	ldr	r3, [pc, #332]	@ (8002750 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1d4>)
 8002604:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002608:	f7fe fc19 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_DIRECTION_FIELD, abnEncoder_p->rdir);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	7a1b      	ldrb	r3, [r3, #8]
 8002610:	461a      	mov	r2, r3
 8002612:	4b50      	ldr	r3, [pc, #320]	@ (8002754 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1d8>)
 8002614:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002618:	f7fe fc11 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_ABN_DECODER_PPR_FIELD, abnEncoder_p->cpr);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	885b      	ldrh	r3, [r3, #2]
 8002620:	461a      	mov	r2, r3
 8002622:	4b4d      	ldr	r3, [pc, #308]	@ (8002758 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1dc>)
 8002624:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002628:	f7fe fc09 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_ABN_DECODER_PHI_E_OFFSET_FIELD, abnEncoder_p->phiEoffset);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002632:	461a      	mov	r2, r3
 8002634:	4b49      	ldr	r3, [pc, #292]	@ (800275c <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1e0>)
 8002636:	e893 0003 	ldmia.w	r3, {r0, r1}
 800263a:	f7fe fc00 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_DECODER_PHI_M_OFFSET_FIELD, abnEncoder_p->phiMoffset);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002644:	461a      	mov	r2, r3
 8002646:	4b46      	ldr	r3, [pc, #280]	@ (8002760 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1e4>)
 8002648:	e893 0003 	ldmia.w	r3, {r0, r1}
 800264c:	f7fe fbf7 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	// Set mechanical angle
	this->encoder.posSelection = PosAndVelSelection::PhiM_abn;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2209      	movs	r2, #9
 8002654:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	this->encoder.velSelection = PosAndVelSelection::PhiM_abn;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2209      	movs	r2, #9
 800265c:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	tmc4671_fieldWrite(TMC4671_POSITION_SELECTION_FIELD, (uint8_t)this->encoder.posSelection);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002666:	461a      	mov	r2, r3
 8002668:	4b3e      	ldr	r3, [pc, #248]	@ (8002764 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1e8>)
 800266a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800266e:	f7fe fbe6 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_VELOCITY_SELECTION_FIELD, (uint8_t)this->encoder.velSelection);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8002678:	461a      	mov	r2, r3
 800267a:	4b3b      	ldr	r3, [pc, #236]	@ (8002768 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1ec>)
 800267c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002680:	f7fe fbdd 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_VELOCITY_METER_SELECTION_FIELD, 0); // 0: default velocity meter (fixed frequency sampling)
 8002684:	4b39      	ldr	r3, [pc, #228]	@ (800276c <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1f0>)
 8002686:	2200      	movs	r2, #0
 8002688:	e893 0003 	ldmia.w	r3, {r0, r1}
 800268c:	f7fe fbd7 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>


	estimateABNparams();
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff fb0d 	bl	8001cb0 <_ZN14TMC4671_Driver17estimateABNparamsEv>
//		HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
//		HAL_Delay(400);
//		HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
//	}
//	else{
		setPhiE_ext(tmc4671_readRegister(TMC4671_PHI_E));
 8002696:	2053      	movs	r0, #83	@ 0x53
 8002698:	f7fe fb12 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 800269c:	4603      	mov	r3, r0
 800269e:	b21b      	sxth	r3, r3
 80026a0:	4619      	mov	r1, r3
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff f9ec 	bl	8001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>
		setPhiEType(PhiE::ext);
 80026a8:	2101      	movs	r1, #1
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7fe fec0 	bl	8001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
//		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
//	}

	// Align encoder
	powerInitEncoder(this->initPower);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	@ 0xf6
 80026b6:	4619      	mov	r1, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff fc45 	bl	8001f48 <_ZN14TMC4671_Driver16powerInitEncoderEs>

	uint8_t enc_retry = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
	while(!encoder.isAligned && enc_retry < 3){
 80026c2:	e005      	b.n	80026d0 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x154>
		checkEncoder();
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff fd53 	bl	8002170 <_ZN14TMC4671_Driver12checkEncoderEv>
		enc_retry++;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	3301      	adds	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
	while(!encoder.isAligned && enc_retry < 3){
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x16a>
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d9ee      	bls.n	80026c4 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x148>
	}
	if(!encoder.isAligned) {
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 80026ec:	f083 0301 	eor.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x18e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80026f6:	2201      	movs	r2, #1
 80026f8:	2102      	movs	r1, #2
 80026fa:	481d      	ldr	r0, [pc, #116]	@ (8002770 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1f4>)
 80026fc:	f000 fffc 	bl	80036f8 <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
 8002700:	2100      	movs	r1, #0
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe fdb2 	bl	800126c <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
		return;
 8002708:	e017      	b.n	800273a <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1be>
//		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
//		HAL_Delay(400);
//		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
//	}

	if(this->encoderType == EncoderType::abn){
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8002710:	2b01      	cmp	r3, #1
 8002712:	d104      	bne.n	800271e <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1a2>
		setPhiEType(PhiE::abn);
 8002714:	2103      	movs	r1, #3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe fe8a 	bl	8001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
 800271c:	e00d      	b.n	800273a <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1be>
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8002724:	2b02      	cmp	r3, #2
 8002726:	d004      	beq.n	8002732 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1b6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800272e:	2b03      	cmp	r3, #3
 8002730:	d103      	bne.n	800273a <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1be>
		setPhiEType(PhiE::aenc);
 8002732:	2106      	movs	r1, #6
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7fe fe7b 	bl	8001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
//	HAL_Delay(1000);
//	else if(usingExternalEncoder()){
//		setPhiEType(PhiE::extEncoder);
//	}

}
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	08009c14 	.word	0x08009c14
 8002744:	08009c1c 	.word	0x08009c1c
 8002748:	08009c24 	.word	0x08009c24
 800274c:	08009c2c 	.word	0x08009c2c
 8002750:	08009c34 	.word	0x08009c34
 8002754:	08009c3c 	.word	0x08009c3c
 8002758:	08009c44 	.word	0x08009c44
 800275c:	08009c54 	.word	0x08009c54
 8002760:	08009c4c 	.word	0x08009c4c
 8002764:	08009d14 	.word	0x08009d14
 8002768:	08009d04 	.word	0x08009d04
 800276c:	08009d0c 	.word	0x08009d0c
 8002770:	40021000 	.word	0x40021000

08002774 <_ZN14TMC4671_Driver4initEv>:
//	uint16_t intV = getIntV();
//	return (intV > 10000) && (getExtV() > 10000) && (intV < 78000);
}

void TMC4671_Driver::init()
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af02      	add	r7, sp, #8
 800277a:	6078      	str	r0, [r7, #4]
	setDriverState(DRIVER_DISABLE);
 800277c:	2100      	movs	r1, #0
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fd74 	bl	800126c <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
	// Ping driver
	tmc4671_writeRegister(TMC4671_CHIPINFO_ADDR, 0);
 8002784:	2100      	movs	r1, #0
 8002786:	2001      	movs	r0, #1
 8002788:	f7fe face 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
	if (tmc4671_readRegister(TMC4671_CHIPINFO_DATA) == 0x34363731) {
 800278c:	2000      	movs	r0, #0
 800278e:	f7fe fa97 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8002792:	4603      	mov	r3, r0
 8002794:	4a77      	ldr	r2, [pc, #476]	@ (8002974 <_ZN14TMC4671_Driver4initEv+0x200>)
 8002796:	4293      	cmp	r3, r2
 8002798:	bf0c      	ite	eq
 800279a:	2301      	moveq	r3, #1
 800279c:	2300      	movne	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01d      	beq.n	80027e0 <_ZN14TMC4671_Driver4initEv+0x6c>
		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
 80027a4:	2201      	movs	r2, #1
 80027a6:	2180      	movs	r1, #128	@ 0x80
 80027a8:	4873      	ldr	r0, [pc, #460]	@ (8002978 <_ZN14TMC4671_Driver4initEv+0x204>)
 80027aa:	f000 ffa5 	bl	80036f8 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80027ae:	20c8      	movs	r0, #200	@ 0xc8
 80027b0:	f000 fcb8 	bl	8003124 <HAL_Delay>
		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 80027b4:	2200      	movs	r2, #0
 80027b6:	2180      	movs	r1, #128	@ 0x80
 80027b8:	486f      	ldr	r0, [pc, #444]	@ (8002978 <_ZN14TMC4671_Driver4initEv+0x204>)
 80027ba:	f000 ff9d 	bl	80036f8 <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
	  return;
	}

	// Check TMC version if it is not ES
	tmc4671_writeRegister(TMC4671_CHIPINFO_ADDR, 1);
 80027be:	2101      	movs	r1, #1
 80027c0:	2001      	movs	r0, #1
 80027c2:	f7fe fab1 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
	if(tmc4671_readRegister(TMC4671_CHIPINFO_DATA) == 0x00010000){
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7fe fa7a 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d019      	beq.n	8002812 <_ZN14TMC4671_Driver4initEv+0x9e>
 80027de:	e009      	b.n	80027f4 <_ZN14TMC4671_Driver4initEv+0x80>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80027e0:	2201      	movs	r2, #1
 80027e2:	2102      	movs	r1, #2
 80027e4:	4865      	ldr	r0, [pc, #404]	@ (800297c <_ZN14TMC4671_Driver4initEv+0x208>)
 80027e6:	f000 ff87 	bl	80036f8 <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
 80027ea:	2100      	movs	r1, #0
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7fe fd3d 	bl	800126c <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
	  return;
 80027f2:	e0bc      	b.n	800296e <_ZN14TMC4671_Driver4initEv+0x1fa>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80027f4:	2201      	movs	r2, #1
 80027f6:	2102      	movs	r1, #2
 80027f8:	4860      	ldr	r0, [pc, #384]	@ (800297c <_ZN14TMC4671_Driver4initEv+0x208>)
 80027fa:	f000 ff7d 	bl	80036f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 80027fe:	2201      	movs	r2, #1
 8002800:	2101      	movs	r1, #1
 8002802:	485e      	ldr	r0, [pc, #376]	@ (800297c <_ZN14TMC4671_Driver4initEv+0x208>)
 8002804:	f000 ff78 	bl	80036f8 <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
 8002808:	2100      	movs	r1, #0
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe fd2e 	bl	800126c <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
		return;
 8002810:	e0ad      	b.n	800296e <_ZN14TMC4671_Driver4initEv+0x1fa>
	}

	// Setup main constants
//	setDriverState(DRIVER_ENABLE);
//	setPidPrecision(&pidPrecision);
	tmc4671_writeRegister(TMC4671_PID_TORQUE_FLUX_TARGET, 0);
 8002812:	2100      	movs	r1, #0
 8002814:	2064      	movs	r0, #100	@ 0x64
 8002816:	f7fe fa87 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
	setPWM(PwmMode::off ,pwmCnt, bbmL, bbmH);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	@ 0xee
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 10f0 	ldrb.w	r1, [r3, #240]	@ 0xf0
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	460b      	mov	r3, r1
 8002830:	2100      	movs	r1, #0
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fed8 	bl	80015e8 <_ZN14TMC4671_Driver6setPWME7PwmModethh>
	setMotorTypeAndPoles(motorType, encoder.pole_pairs);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 10e8 	ldrb.w	r1, [r3, #232]	@ 0xe8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002844:	461a      	mov	r2, r3
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe fdc8 	bl	80013dc <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet>
	setPhiEType(phiEType);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7fe fdeb 	bl	8001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setHallConfig(&hallConfig); //enables hall filter and masking
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4619      	mov	r1, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe fe08 	bl	8001474 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig>
	initAdc(&adcConfig);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3344      	adds	r3, #68	@ 0x44
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe ff5a 	bl	8001724 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig>
//	setBiquadFlux(TMC4671Biquad(Biquad(BiquadType::lowpass, (float)350.0 / (float)((4.0*25e6)/(pwmCnt+1)), 0.7,0.0), true)); // Create flux filter

	if(!calibrateAdcOffset(300)){
 8002870:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff f917 	bl	8001aa8 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt>
 800287a:	4603      	mov	r3, r0
 800287c:	f083 0301 	eor.w	r3, r3, #1
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <_ZN14TMC4671_Driver4initEv+0x126>
		// ADC or shunt amp is broken!
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8002886:	2201      	movs	r2, #1
 8002888:	2102      	movs	r1, #2
 800288a:	483c      	ldr	r0, [pc, #240]	@ (800297c <_ZN14TMC4671_Driver4initEv+0x208>)
 800288c:	f000 ff34 	bl	80036f8 <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
 8002890:	2100      	movs	r1, #0
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe fcea 	bl	800126c <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
		return;
 8002898:	e069      	b.n	800296e <_ZN14TMC4671_Driver4initEv+0x1fa>
	}

	setAdcBrakeLimits(brakeLimLow, brakeLimHigh);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f8b3 10f2 	ldrh.w	r1, [r3, #242]	@ 0xf2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 80028a6:	461a      	mov	r2, r3
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff f835 	bl	8001918 <_ZN14TMC4671_Driver17setAdcBrakeLimitsEtt>
//	/*
//	 * Enable adc clipping and pll errors
//	 */
	statusMask.asInt = 0;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	statusMask.flags.adc_i_clipped = 1;
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	f892 30ff 	ldrb.w	r3, [r2, #255]	@ 0xff
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	f882 30ff 	strb.w	r3, [r2, #255]	@ 0xff
	statusMask.flags.not_PLL_locked = 1;
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	f892 30fe 	ldrb.w	r3, [r2, #254]	@ 0xfe
 80028ca:	f043 0308 	orr.w	r3, r3, #8
 80028ce:	f882 30fe 	strb.w	r3, [r2, #254]	@ 0xfe
	setStatusMask(statusMask);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8d3 10fc 	ldr.w	r1, [r3, #252]	@ 0xfc
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff f8c3 	bl	8001a64 <_ZN14TMC4671_Driver13setStatusMaskE11StatusFlags>

	setPids(&pidConfig);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	331a      	adds	r3, #26
 80028e2:	4619      	mov	r1, r3
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7fe ffad 	bl	8001844 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig>
	uint8_t flags = tmc4671_readRegister(TMC4671_STATUS_FLAGS);
 80028ea:	207c      	movs	r0, #124	@ 0x7c
 80028ec:	f7fe f9e8 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 80028f0:	4603      	mov	r3, r0
 80028f2:	73fb      	strb	r3, [r7, #15]
	this->statusFlags.asInt = flags;
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

	// setting SD_STP (DIO6) and SD_DIR (DIO7) to High-Z
//	HAL.IOs->config->reset(&HAL.IOs->pins->DIO6);
//	HAL.IOs->config->reset(&HAL.IOs->pins->DIO7);
//
	setDriverState(DRIVER_ENABLE);
 80028fc:	2101      	movs	r1, #1
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe fcb4 	bl	800126c <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
	setPWM(PwmMode::PWM_FOC);
 8002904:	2107      	movs	r1, #7
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe fe58 	bl	80015bc <_ZN14TMC4671_Driver6setPWME7PwmMode>

	while(!encoder.isAligned){
 800290c:	e005      	b.n	800291a <_ZN14TMC4671_Driver4initEv+0x1a6>
		setupAbnEncoder(&encoder);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	335c      	adds	r3, #92	@ 0x5c
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff fe31 	bl	800257c <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder>
	while(!encoder.isAligned){
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 8002920:	f083 0301 	eor.w	r3, r3, #1
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f1      	bne.n	800290e <_ZN14TMC4671_Driver4initEv+0x19a>
	}

//	setMotionMode(MotionMode::stopped);
	HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
 800292a:	2201      	movs	r2, #1
 800292c:	2180      	movs	r1, #128	@ 0x80
 800292e:	4812      	ldr	r0, [pc, #72]	@ (8002978 <_ZN14TMC4671_Driver4initEv+0x204>)
 8002930:	f000 fee2 	bl	80036f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 8002934:	2201      	movs	r2, #1
 8002936:	2101      	movs	r1, #1
 8002938:	4810      	ldr	r0, [pc, #64]	@ (800297c <_ZN14TMC4671_Driver4initEv+0x208>)
 800293a:	f000 fedd 	bl	80036f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 800293e:	2201      	movs	r2, #1
 8002940:	2102      	movs	r1, #2
 8002942:	480e      	ldr	r0, [pc, #56]	@ (800297c <_ZN14TMC4671_Driver4initEv+0x208>)
 8002944:	f000 fed8 	bl	80036f8 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8002948:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800294c:	f000 fbea 	bl	8003124 <HAL_Delay>
	HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	@ 0x80
 8002954:	4808      	ldr	r0, [pc, #32]	@ (8002978 <_ZN14TMC4671_Driver4initEv+0x204>)
 8002956:	f000 fecf 	bl	80036f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
 800295a:	2200      	movs	r2, #0
 800295c:	2101      	movs	r1, #1
 800295e:	4807      	ldr	r0, [pc, #28]	@ (800297c <_ZN14TMC4671_Driver4initEv+0x208>)
 8002960:	f000 feca 	bl	80036f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8002964:	2200      	movs	r2, #0
 8002966:	2102      	movs	r1, #2
 8002968:	4804      	ldr	r0, [pc, #16]	@ (800297c <_ZN14TMC4671_Driver4initEv+0x208>)
 800296a:	f000 fec5 	bl	80036f8 <HAL_GPIO_WritePin>
}
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	34363731 	.word	0x34363731
 8002978:	40020c00 	.word	0x40020c00
 800297c:	40021000 	.word	0x40021000

08002980 <_ZN14TMC4671_Driver6moveByEs>:
//	actualMotionMode = TMC4671_MOTION_MODE_POSITION;
//
	return TMC_ERROR_NONE;
}

void TMC4671_Driver::moveBy(int16_t angle) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
//
	// Start angle offsets all angles later so there is no jump if angle is already properly aligned
//	HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
//	HAL_Delay(100);
//	HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
	const int32_t startAngle = getPhiE_Enc();
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7fe fce5 	bl	800135c <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8002992:	4603      	mov	r3, r0
 8002994:	617b      	str	r3, [r7, #20]
	const int32_t targetAngle = ((float)(angle*POSITION_SCALE_MAX)/360.0);
 8002996:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800299a:	041b      	lsls	r3, r3, #16
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a4:	ee17 0a90 	vmov	r0, s15
 80029a8:	f7fd fd72 	bl	8000490 <__aeabi_f2d>
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	4b48      	ldr	r3, [pc, #288]	@ (8002ad4 <_ZN14TMC4671_Driver6moveByEs+0x154>)
 80029b2:	f7fd feef 	bl	8000794 <__aeabi_ddiv>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	f7fd ffd1 	bl	8000964 <__aeabi_d2iz>
 80029c2:	4603      	mov	r3, r0
 80029c4:	613b      	str	r3, [r7, #16]

	PhiE lastphie = getPhiEType();
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fca0 	bl	800130c <_ZN14TMC4671_Driver11getPhiETypeEv>
 80029cc:	4603      	mov	r3, r0
 80029ce:	73fb      	strb	r3, [r7, #15]
	MotionMode lastmode = getMotionMode();
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7fe fc83 	bl	80012dc <_ZN14TMC4671_Driver13getMotionModeEv>
 80029d6:	4603      	mov	r3, r0
 80029d8:	73bb      	strb	r3, [r7, #14]
	setFluxTorque(0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff f81a 	bl	8001a18 <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setPhiEType(PhiE::ext);
 80029e4:	2101      	movs	r1, #1
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe fd22 	bl	8001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setPhiE_ext(startAngle);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	b21b      	sxth	r3, r3
 80029f0:	4619      	mov	r1, r3
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff f844 	bl	8001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>

	// Ramp up flux
	for(int16_t flux = 0; flux <= 3*this->initPower/4; flux+=20){
 80029f8:	2300      	movs	r3, #0
 80029fa:	83fb      	strh	r3, [r7, #30]
 80029fc:	e00d      	b.n	8002a1a <_ZN14TMC4671_Driver6moveByEs+0x9a>
		setFluxTorque(flux, 0);
 80029fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a02:	2200      	movs	r2, #0
 8002a04:	4619      	mov	r1, r3
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff f806 	bl	8001a18 <_ZN14TMC4671_Driver13setFluxTorqueEss>
		HAL_Delay(2);
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f000 fb89 	bl	8003124 <HAL_Delay>
	for(int16_t flux = 0; flux <= 3*this->initPower/4; flux+=20){
 8002a12:	8bfb      	ldrh	r3, [r7, #30]
 8002a14:	3314      	adds	r3, #20
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	83fb      	strh	r3, [r7, #30]
 8002a1a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	@ 0xf6
 8002a24:	4619      	mov	r1, r3
 8002a26:	460b      	mov	r3, r1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	440b      	add	r3, r1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	da00      	bge.n	8002a32 <_ZN14TMC4671_Driver6moveByEs+0xb2>
 8002a30:	3303      	adds	r3, #3
 8002a32:	109b      	asrs	r3, r3, #2
 8002a34:	429a      	cmp	r2, r3
 8002a36:	dde2      	ble.n	80029fe <_ZN14TMC4671_Driver6moveByEs+0x7e>
	}

	if(angle > 0){
 8002a38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	dd19      	ble.n	8002a74 <_ZN14TMC4671_Driver6moveByEs+0xf4>
		for(int16_t curr_angle = 0; curr_angle <= targetAngle; curr_angle+=0x00ff){
 8002a40:	2300      	movs	r3, #0
 8002a42:	83bb      	strh	r3, [r7, #28]
 8002a44:	e010      	b.n	8002a68 <_ZN14TMC4671_Driver6moveByEs+0xe8>
			setPhiE_ext(curr_angle+startAngle);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	8bbb      	ldrh	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff f813 	bl	8001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>
			HAL_Delay(5);
 8002a5a:	2005      	movs	r0, #5
 8002a5c:	f000 fb62 	bl	8003124 <HAL_Delay>
		for(int16_t curr_angle = 0; curr_angle <= targetAngle; curr_angle+=0x00ff){
 8002a60:	8bbb      	ldrh	r3, [r7, #28]
 8002a62:	33ff      	adds	r3, #255	@ 0xff
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	83bb      	strh	r3, [r7, #28]
 8002a68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	dae9      	bge.n	8002a46 <_ZN14TMC4671_Driver6moveByEs+0xc6>
 8002a72:	e018      	b.n	8002aa6 <_ZN14TMC4671_Driver6moveByEs+0x126>
		}
	}
	else {
		for(int16_t curr_angle = 0; curr_angle >= targetAngle; curr_angle-=0x00ff){
 8002a74:	2300      	movs	r3, #0
 8002a76:	837b      	strh	r3, [r7, #26]
 8002a78:	e010      	b.n	8002a9c <_ZN14TMC4671_Driver6moveByEs+0x11c>
			setPhiE_ext(curr_angle+startAngle);
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	8b7b      	ldrh	r3, [r7, #26]
 8002a80:	4413      	add	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	b21b      	sxth	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fe fff9 	bl	8001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>
			HAL_Delay(5);
 8002a8e:	2005      	movs	r0, #5
 8002a90:	f000 fb48 	bl	8003124 <HAL_Delay>
		for(int16_t curr_angle = 0; curr_angle >= targetAngle; curr_angle-=0x00ff){
 8002a94:	8b7b      	ldrh	r3, [r7, #26]
 8002a96:	3bff      	subs	r3, #255	@ 0xff
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	837b      	strh	r3, [r7, #26]
 8002a9c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	dde9      	ble.n	8002a7a <_ZN14TMC4671_Driver6moveByEs+0xfa>
		}
	}
	setFluxTorque(0, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe ffb4 	bl	8001a18 <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setPhiE_ext(0);
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fe ffe4 	bl	8001a80 <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(lastphie);
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	4619      	mov	r1, r3
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7fe fcb7 	bl	8001430 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 8002ac2:	7bbb      	ldrb	r3, [r7, #14]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe fbf2 	bl	80012b0 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
}
 8002acc:	bf00      	nop
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40768000 	.word	0x40768000

08002ad8 <_Z4clipItiET_S0_T0_S1_>:
#define INC_UTIL_FUNCTIONS_H_

#include <stdint.h>

template<class T,class C>
T clip(T v, C l, C h)
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	81fb      	strh	r3, [r7, #14]
{
  return { v > h ? h : v < l ? l : v };
 8002ae6:	89fb      	ldrh	r3, [r7, #14]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	db06      	blt.n	8002afc <_Z4clipItiET_S0_T0_S1_+0x24>
 8002aee:	89fa      	ldrh	r2, [r7, #14]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4293      	cmp	r3, r2
 8002af4:	bfb8      	it	lt
 8002af6:	4613      	movlt	r3, r2
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	e001      	b.n	8002b00 <_Z4clipItiET_S0_T0_S1_+0x28>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	b29b      	uxth	r3, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <_Z41__static_initialization_and_destruction_0ii>:
//	}
}

void TMC4671_Driver::resetAllRegisters()
{
}
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d102      	bne.n	8002b2c <_Z41__static_initialization_and_destruction_0ii+0x20>
TMC4671_Driver tmc4671;
 8002b26:	4803      	ldr	r0, [pc, #12]	@ (8002b34 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002b28:	f7fe fb30 	bl	800118c <_ZN14TMC4671_DriverC1Ev>
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000128 	.word	0x20000128

08002b38 <_GLOBAL__sub_I_tmc4671>:
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff ffe3 	bl	8002b0c <_Z41__static_initialization_and_destruction_0ii>
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	@ 0x28
 8002b4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4e:	f107 0314 	add.w	r3, r7, #20
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	60da      	str	r2, [r3, #12]
 8002b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	4b47      	ldr	r3, [pc, #284]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	4a46      	ldr	r2, [pc, #280]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6e:	4b44      	ldr	r3, [pc, #272]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b40      	ldr	r3, [pc, #256]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	4a3f      	ldr	r2, [pc, #252]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	4b39      	ldr	r3, [pc, #228]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	4a38      	ldr	r2, [pc, #224]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002ba0:	f043 0310 	orr.w	r3, r3, #16
 8002ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba6:	4b36      	ldr	r3, [pc, #216]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	4b32      	ldr	r3, [pc, #200]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	4a31      	ldr	r2, [pc, #196]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002bbc:	f043 0308 	orr.w	r3, r3, #8
 8002bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bde:	4b28      	ldr	r3, [pc, #160]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port, SPI1_SS1_Pin, GPIO_PIN_SET);
 8002bea:	2201      	movs	r2, #1
 8002bec:	2110      	movs	r1, #16
 8002bee:	4825      	ldr	r0, [pc, #148]	@ (8002c84 <MX_GPIO_Init+0x13c>)
 8002bf0:	f000 fd82 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DRV_ENABLE_Pin|LED_CLIP_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2183      	movs	r1, #131	@ 0x83
 8002bf8:	4823      	ldr	r0, [pc, #140]	@ (8002c88 <MX_GPIO_Init+0x140>)
 8002bfa:	f000 fd7d 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2180      	movs	r1, #128	@ 0x80
 8002c02:	4822      	ldr	r0, [pc, #136]	@ (8002c8c <MX_GPIO_Init+0x144>)
 8002c04:	f000 fd78 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_SS1_Pin;
 8002c08:	2310      	movs	r3, #16
 8002c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c14:	2303      	movs	r3, #3
 8002c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_SS1_GPIO_Port, &GPIO_InitStruct);
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4819      	ldr	r0, [pc, #100]	@ (8002c84 <MX_GPIO_Init+0x13c>)
 8002c20:	f000 fbb6 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_ENABLE_Pin;
 8002c24:	2380      	movs	r3, #128	@ 0x80
 8002c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4813      	ldr	r0, [pc, #76]	@ (8002c88 <MX_GPIO_Init+0x140>)
 8002c3c:	f000 fba8 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SYS_Pin;
 8002c40:	2380      	movs	r3, #128	@ 0x80
 8002c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c44:	2301      	movs	r3, #1
 8002c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_SYS_GPIO_Port, &GPIO_InitStruct);
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	4619      	mov	r1, r3
 8002c56:	480d      	ldr	r0, [pc, #52]	@ (8002c8c <MX_GPIO_Init+0x144>)
 8002c58:	f000 fb9a 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_CLIP_Pin|LED_ERR_Pin;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c60:	2301      	movs	r3, #1
 8002c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	4619      	mov	r1, r3
 8002c72:	4805      	ldr	r0, [pc, #20]	@ (8002c88 <MX_GPIO_Init+0x140>)
 8002c74:	f000 fb8c 	bl	8003390 <HAL_GPIO_Init>

}
 8002c78:	bf00      	nop
 8002c7a:	3728      	adds	r7, #40	@ 0x28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020000 	.word	0x40020000
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40020c00 	.word	0x40020c00

08002c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c94:	f000 f9d4 	bl	8003040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c98:	f000 f836 	bl	8002d08 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c9c:	f7ff ff54 	bl	8002b48 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8002ca0:	f006 fa26 	bl	80090f0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002ca4:	f000 f8b0 	bl	8002e08 <MX_SPI1_Init>
//  MX_TIM10_Init();
//  MX_TIM10_Init();
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8002ca8:	2201      	movs	r2, #1
 8002caa:	2102      	movs	r1, #2
 8002cac:	4813      	ldr	r0, [pc, #76]	@ (8002cfc <main+0x6c>)
 8002cae:	f000 fd23 	bl	80036f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4811      	ldr	r0, [pc, #68]	@ (8002cfc <main+0x6c>)
 8002cb8:	f000 fd1e 	bl	80036f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	2180      	movs	r1, #128	@ 0x80
 8002cc0:	480f      	ldr	r0, [pc, #60]	@ (8002d00 <main+0x70>)
 8002cc2:	f000 fd19 	bl	80036f8 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8002cc6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002cca:	f000 fa2b 	bl	8003124 <HAL_Delay>
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	480a      	ldr	r0, [pc, #40]	@ (8002cfc <main+0x6c>)
 8002cd4:	f000 fd10 	bl	80036f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2101      	movs	r1, #1
 8002cdc:	4807      	ldr	r0, [pc, #28]	@ (8002cfc <main+0x6c>)
 8002cde:	f000 fd0b 	bl	80036f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2180      	movs	r1, #128	@ 0x80
 8002ce6:	4806      	ldr	r0, [pc, #24]	@ (8002d00 <main+0x70>)
 8002ce8:	f000 fd06 	bl	80036f8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002cec:	2064      	movs	r0, #100	@ 0x64
 8002cee:	f000 fa19 	bl	8003124 <HAL_Delay>
  /* USER CODE END 2 */
  tmc4671.init();
 8002cf2:	4804      	ldr	r0, [pc, #16]	@ (8002d04 <main+0x74>)
 8002cf4:	f7ff fd3e 	bl	8002774 <_ZN14TMC4671_Driver4initEv>
//  HAL_TIM_Base_Start_IT(&htim10);

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <main+0x68>
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40020c00 	.word	0x40020c00
 8002d04:	20000128 	.word	0x20000128

08002d08 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b094      	sub	sp, #80	@ 0x50
 8002d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d0e:	f107 0320 	add.w	r3, r7, #32
 8002d12:	2230      	movs	r2, #48	@ 0x30
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f006 fea8 	bl	8009a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d1c:	f107 030c 	add.w	r3, r7, #12
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	4b2d      	ldr	r3, [pc, #180]	@ (8002de8 <_Z18SystemClock_Configv+0xe0>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	4a2c      	ldr	r2, [pc, #176]	@ (8002de8 <_Z18SystemClock_Configv+0xe0>)
 8002d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002de8 <_Z18SystemClock_Configv+0xe0>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	4b27      	ldr	r3, [pc, #156]	@ (8002dec <_Z18SystemClock_Configv+0xe4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a26      	ldr	r2, [pc, #152]	@ (8002dec <_Z18SystemClock_Configv+0xe4>)
 8002d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b24      	ldr	r3, [pc, #144]	@ (8002dec <_Z18SystemClock_Configv+0xe4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d64:	2301      	movs	r3, #1
 8002d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d78:	2304      	movs	r3, #4
 8002d7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002d7c:	23a8      	movs	r3, #168	@ 0xa8
 8002d7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d80:	2302      	movs	r3, #2
 8002d82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d84:	2307      	movs	r3, #7
 8002d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d88:	f107 0320 	add.w	r3, r7, #32
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 ff07 	bl	8004ba0 <HAL_RCC_OscConfig>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002da2:	f000 f825 	bl	8002df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002da6:	230f      	movs	r3, #15
 8002da8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002daa:	2302      	movs	r3, #2
 8002dac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002db2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002db6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002dbe:	f107 030c 	add.w	r3, r7, #12
 8002dc2:	2105      	movs	r1, #5
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f002 f963 	bl	8005090 <HAL_RCC_ClockConfig>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002dda:	f000 f809 	bl	8002df0 <Error_Handler>
  }
}
 8002dde:	bf00      	nop
 8002de0:	3750      	adds	r7, #80	@ 0x50
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40007000 	.word	0x40007000

08002df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002df4:	b672      	cpsid	i
}
 8002df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	4801      	ldr	r0, [pc, #4]	@ (8002e04 <Error_Handler+0x14>)
 8002dfe:	f000 fc7b 	bl	80036f8 <HAL_GPIO_WritePin>
 8002e02:	e7f9      	b.n	8002df8 <Error_Handler+0x8>
 8002e04:	40021000 	.word	0x40021000

08002e08 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e0c:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <MX_SPI1_Init+0x64>)
 8002e0e:	4a18      	ldr	r2, [pc, #96]	@ (8002e70 <MX_SPI1_Init+0x68>)
 8002e10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e12:	4b16      	ldr	r3, [pc, #88]	@ (8002e6c <MX_SPI1_Init+0x64>)
 8002e14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e1a:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <MX_SPI1_Init+0x64>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e20:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <MX_SPI1_Init+0x64>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002e26:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <MX_SPI1_Init+0x64>)
 8002e28:	2202      	movs	r2, #2
 8002e2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e6c <MX_SPI1_Init+0x64>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e32:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <MX_SPI1_Init+0x64>)
 8002e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e6c <MX_SPI1_Init+0x64>)
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e40:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <MX_SPI1_Init+0x64>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e46:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <MX_SPI1_Init+0x64>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e4c:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <MX_SPI1_Init+0x64>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e52:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <MX_SPI1_Init+0x64>)
 8002e54:	220a      	movs	r2, #10
 8002e56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e58:	4804      	ldr	r0, [pc, #16]	@ (8002e6c <MX_SPI1_Init+0x64>)
 8002e5a:	f002 fb11 	bl	8005480 <HAL_SPI_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e64:	f7ff ffc4 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	2000022c 	.word	0x2000022c
 8002e70:	40013000 	.word	0x40013000

08002e74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	@ 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7c:	f107 0314 	add.w	r3, r7, #20
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a19      	ldr	r2, [pc, #100]	@ (8002ef8 <HAL_SPI_MspInit+0x84>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d12b      	bne.n	8002eee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	4b18      	ldr	r3, [pc, #96]	@ (8002efc <HAL_SPI_MspInit+0x88>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	4a17      	ldr	r2, [pc, #92]	@ (8002efc <HAL_SPI_MspInit+0x88>)
 8002ea0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea6:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <HAL_SPI_MspInit+0x88>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <HAL_SPI_MspInit+0x88>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	4a10      	ldr	r2, [pc, #64]	@ (8002efc <HAL_SPI_MspInit+0x88>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8002efc <HAL_SPI_MspInit+0x88>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ece:	23e0      	movs	r3, #224	@ 0xe0
 8002ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eda:	2303      	movs	r3, #3
 8002edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ede:	2305      	movs	r3, #5
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee2:	f107 0314 	add.w	r3, r7, #20
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4805      	ldr	r0, [pc, #20]	@ (8002f00 <HAL_SPI_MspInit+0x8c>)
 8002eea:	f000 fa51 	bl	8003390 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3728      	adds	r7, #40	@ 0x28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40013000 	.word	0x40013000
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020000 	.word	0x40020000

08002f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_MspInit+0x4c>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f12:	4a0f      	ldr	r2, [pc, #60]	@ (8002f50 <HAL_MspInit+0x4c>)
 8002f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f50 <HAL_MspInit+0x4c>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f22:	607b      	str	r3, [r7, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	603b      	str	r3, [r7, #0]
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <HAL_MspInit+0x4c>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	4a08      	ldr	r2, [pc, #32]	@ (8002f50 <HAL_MspInit+0x4c>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_MspInit+0x4c>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800

08002f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <NMI_Handler+0x4>

08002f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f60:	bf00      	nop
 8002f62:	e7fd      	b.n	8002f60 <HardFault_Handler+0x4>

08002f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <MemManage_Handler+0x4>

08002f6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f70:	bf00      	nop
 8002f72:	e7fd      	b.n	8002f70 <BusFault_Handler+0x4>

08002f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f78:	bf00      	nop
 8002f7a:	e7fd      	b.n	8002f78 <UsageFault_Handler+0x4>

08002f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002faa:	f000 f89b 	bl	80030e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002fb8:	4802      	ldr	r0, [pc, #8]	@ (8002fc4 <OTG_FS_IRQHandler+0x10>)
 8002fba:	f000 fcfa 	bl	80039b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000768 	.word	0x20000768

08002fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <SystemInit+0x20>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd2:	4a05      	ldr	r2, [pc, #20]	@ (8002fe8 <SystemInit+0x20>)
 8002fd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003024 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ff0:	f7ff ffea 	bl	8002fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ff4:	480c      	ldr	r0, [pc, #48]	@ (8003028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ff6:	490d      	ldr	r1, [pc, #52]	@ (800302c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ffc:	e002      	b.n	8003004 <LoopCopyDataInit>

08002ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003002:	3304      	adds	r3, #4

08003004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003008:	d3f9      	bcc.n	8002ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800300a:	4a0a      	ldr	r2, [pc, #40]	@ (8003034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800300c:	4c0a      	ldr	r4, [pc, #40]	@ (8003038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800300e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003010:	e001      	b.n	8003016 <LoopFillZerobss>

08003012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003014:	3204      	adds	r2, #4

08003016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003018:	d3fb      	bcc.n	8003012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800301a:	f006 fd2f 	bl	8009a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800301e:	f7ff fe37 	bl	8002c90 <main>
  bx  lr    
 8003022:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800302c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8003030:	08009db0 	.word	0x08009db0
  ldr r2, =_sbss
 8003034:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8003038:	20000ca4 	.word	0x20000ca4

0800303c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800303c:	e7fe      	b.n	800303c <ADC_IRQHandler>
	...

08003040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003044:	4b0e      	ldr	r3, [pc, #56]	@ (8003080 <HAL_Init+0x40>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0d      	ldr	r2, [pc, #52]	@ (8003080 <HAL_Init+0x40>)
 800304a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800304e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003050:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <HAL_Init+0x40>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0a      	ldr	r2, [pc, #40]	@ (8003080 <HAL_Init+0x40>)
 8003056:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800305a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800305c:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <HAL_Init+0x40>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a07      	ldr	r2, [pc, #28]	@ (8003080 <HAL_Init+0x40>)
 8003062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003068:	2003      	movs	r0, #3
 800306a:	f000 f94f 	bl	800330c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800306e:	200f      	movs	r0, #15
 8003070:	f000 f808 	bl	8003084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003074:	f7ff ff46 	bl	8002f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023c00 	.word	0x40023c00

08003084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800308c:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <HAL_InitTick+0x54>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b12      	ldr	r3, [pc, #72]	@ (80030dc <HAL_InitTick+0x58>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4619      	mov	r1, r3
 8003096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800309a:	fbb3 f3f1 	udiv	r3, r3, r1
 800309e:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 f967 	bl	8003376 <HAL_SYSTICK_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00e      	b.n	80030d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b0f      	cmp	r3, #15
 80030b6:	d80a      	bhi.n	80030ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b8:	2200      	movs	r2, #0
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	f000 f92f 	bl	8003322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030c4:	4a06      	ldr	r2, [pc, #24]	@ (80030e0 <HAL_InitTick+0x5c>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e000      	b.n	80030d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000000 	.word	0x20000000
 80030dc:	20000008 	.word	0x20000008
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e8:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_IncTick+0x20>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <HAL_IncTick+0x24>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	4a04      	ldr	r2, [pc, #16]	@ (8003108 <HAL_IncTick+0x24>)
 80030f6:	6013      	str	r3, [r2, #0]
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000008 	.word	0x20000008
 8003108:	20000284 	.word	0x20000284

0800310c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return uwTick;
 8003110:	4b03      	ldr	r3, [pc, #12]	@ (8003120 <HAL_GetTick+0x14>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000284 	.word	0x20000284

08003124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800312c:	f7ff ffee 	bl	800310c <HAL_GetTick>
 8003130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d005      	beq.n	800314a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800313e:	4b0a      	ldr	r3, [pc, #40]	@ (8003168 <HAL_Delay+0x44>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800314a:	bf00      	nop
 800314c:	f7ff ffde 	bl	800310c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	429a      	cmp	r2, r3
 800315a:	d8f7      	bhi.n	800314c <HAL_Delay+0x28>
  {
  }
}
 800315c:	bf00      	nop
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000008 	.word	0x20000008

0800316c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800317c:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003188:	4013      	ands	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800319c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319e:	4a04      	ldr	r2, [pc, #16]	@ (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	60d3      	str	r3, [r2, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b8:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <__NVIC_GetPriorityGrouping+0x18>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	f003 0307 	and.w	r3, r3, #7
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	db0b      	blt.n	80031fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	4907      	ldr	r1, [pc, #28]	@ (8003208 <__NVIC_EnableIRQ+0x38>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2001      	movs	r0, #1
 80031f2:	fa00 f202 	lsl.w	r2, r0, r2
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000e100 	.word	0xe000e100

0800320c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	2b00      	cmp	r3, #0
 800321e:	db0a      	blt.n	8003236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	490c      	ldr	r1, [pc, #48]	@ (8003258 <__NVIC_SetPriority+0x4c>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	0112      	lsls	r2, r2, #4
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	440b      	add	r3, r1
 8003230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003234:	e00a      	b.n	800324c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	4908      	ldr	r1, [pc, #32]	@ (800325c <__NVIC_SetPriority+0x50>)
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	3b04      	subs	r3, #4
 8003244:	0112      	lsls	r2, r2, #4
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	440b      	add	r3, r1
 800324a:	761a      	strb	r2, [r3, #24]
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000e100 	.word	0xe000e100
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	@ 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f1c3 0307 	rsb	r3, r3, #7
 800327a:	2b04      	cmp	r3, #4
 800327c:	bf28      	it	cs
 800327e:	2304      	movcs	r3, #4
 8003280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3304      	adds	r3, #4
 8003286:	2b06      	cmp	r3, #6
 8003288:	d902      	bls.n	8003290 <NVIC_EncodePriority+0x30>
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3b03      	subs	r3, #3
 800328e:	e000      	b.n	8003292 <NVIC_EncodePriority+0x32>
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003294:	f04f 32ff 	mov.w	r2, #4294967295
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	401a      	ands	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	43d9      	mvns	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b8:	4313      	orrs	r3, r2
         );
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3724      	adds	r7, #36	@ 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032d8:	d301      	bcc.n	80032de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032da:	2301      	movs	r3, #1
 80032dc:	e00f      	b.n	80032fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032de:	4a0a      	ldr	r2, [pc, #40]	@ (8003308 <SysTick_Config+0x40>)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032e6:	210f      	movs	r1, #15
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ec:	f7ff ff8e 	bl	800320c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032f0:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <SysTick_Config+0x40>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032f6:	4b04      	ldr	r3, [pc, #16]	@ (8003308 <SysTick_Config+0x40>)
 80032f8:	2207      	movs	r2, #7
 80032fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	e000e010 	.word	0xe000e010

0800330c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ff29 	bl	800316c <__NVIC_SetPriorityGrouping>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003334:	f7ff ff3e 	bl	80031b4 <__NVIC_GetPriorityGrouping>
 8003338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	6978      	ldr	r0, [r7, #20]
 8003340:	f7ff ff8e 	bl	8003260 <NVIC_EncodePriority>
 8003344:	4602      	mov	r2, r0
 8003346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff ff5d 	bl	800320c <__NVIC_SetPriority>
}
 8003352:	bf00      	nop
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff31 	bl	80031d0 <__NVIC_EnableIRQ>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ffa2 	bl	80032c8 <SysTick_Config>
 8003384:	4603      	mov	r3, r0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	@ 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	e16b      	b.n	8003684 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033ac:	2201      	movs	r2, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	f040 815a 	bne.w	800367e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d005      	beq.n	80033e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d130      	bne.n	8003444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003418:	2201      	movs	r2, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 0201 	and.w	r2, r3, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b03      	cmp	r3, #3
 800344e:	d017      	beq.n	8003480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	2203      	movs	r2, #3
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d123      	bne.n	80034d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	08da      	lsrs	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3208      	adds	r2, #8
 8003494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	220f      	movs	r2, #15
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	08da      	lsrs	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3208      	adds	r2, #8
 80034ce:	69b9      	ldr	r1, [r7, #24]
 80034d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0203 	and.w	r2, r3, #3
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80b4 	beq.w	800367e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b60      	ldr	r3, [pc, #384]	@ (800369c <HAL_GPIO_Init+0x30c>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	4a5f      	ldr	r2, [pc, #380]	@ (800369c <HAL_GPIO_Init+0x30c>)
 8003520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003524:	6453      	str	r3, [r2, #68]	@ 0x44
 8003526:	4b5d      	ldr	r3, [pc, #372]	@ (800369c <HAL_GPIO_Init+0x30c>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003532:	4a5b      	ldr	r2, [pc, #364]	@ (80036a0 <HAL_GPIO_Init+0x310>)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	3302      	adds	r3, #2
 800353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	220f      	movs	r2, #15
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a52      	ldr	r2, [pc, #328]	@ (80036a4 <HAL_GPIO_Init+0x314>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d02b      	beq.n	80035b6 <HAL_GPIO_Init+0x226>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a51      	ldr	r2, [pc, #324]	@ (80036a8 <HAL_GPIO_Init+0x318>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d025      	beq.n	80035b2 <HAL_GPIO_Init+0x222>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a50      	ldr	r2, [pc, #320]	@ (80036ac <HAL_GPIO_Init+0x31c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01f      	beq.n	80035ae <HAL_GPIO_Init+0x21e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4f      	ldr	r2, [pc, #316]	@ (80036b0 <HAL_GPIO_Init+0x320>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d019      	beq.n	80035aa <HAL_GPIO_Init+0x21a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4e      	ldr	r2, [pc, #312]	@ (80036b4 <HAL_GPIO_Init+0x324>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_GPIO_Init+0x216>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4d      	ldr	r2, [pc, #308]	@ (80036b8 <HAL_GPIO_Init+0x328>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00d      	beq.n	80035a2 <HAL_GPIO_Init+0x212>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4c      	ldr	r2, [pc, #304]	@ (80036bc <HAL_GPIO_Init+0x32c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <HAL_GPIO_Init+0x20e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4b      	ldr	r2, [pc, #300]	@ (80036c0 <HAL_GPIO_Init+0x330>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_GPIO_Init+0x20a>
 8003596:	2307      	movs	r3, #7
 8003598:	e00e      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 800359a:	2308      	movs	r3, #8
 800359c:	e00c      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 800359e:	2306      	movs	r3, #6
 80035a0:	e00a      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035a2:	2305      	movs	r3, #5
 80035a4:	e008      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035a6:	2304      	movs	r3, #4
 80035a8:	e006      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e004      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e002      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035b6:	2300      	movs	r3, #0
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f002 0203 	and.w	r2, r2, #3
 80035be:	0092      	lsls	r2, r2, #2
 80035c0:	4093      	lsls	r3, r2
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c8:	4935      	ldr	r1, [pc, #212]	@ (80036a0 <HAL_GPIO_Init+0x310>)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	3302      	adds	r3, #2
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035d6:	4b3b      	ldr	r3, [pc, #236]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035fa:	4a32      	ldr	r2, [pc, #200]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003600:	4b30      	ldr	r3, [pc, #192]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003624:	4a27      	ldr	r2, [pc, #156]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800362a:	4b26      	ldr	r3, [pc, #152]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800364e:	4a1d      	ldr	r2, [pc, #116]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003654:	4b1b      	ldr	r3, [pc, #108]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003678:	4a12      	ldr	r2, [pc, #72]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	f67f ae90 	bls.w	80033ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	3724      	adds	r7, #36	@ 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	40013800 	.word	0x40013800
 80036a4:	40020000 	.word	0x40020000
 80036a8:	40020400 	.word	0x40020400
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40020c00 	.word	0x40020c00
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40021400 	.word	0x40021400
 80036bc:	40021800 	.word	0x40021800
 80036c0:	40021c00 	.word	0x40021c00
 80036c4:	40013c00 	.word	0x40013c00

080036c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	887b      	ldrh	r3, [r7, #2]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	e001      	b.n	80036ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003714:	e003      	b.n	800371e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003716:	887b      	ldrh	r3, [r7, #2]
 8003718:	041a      	lsls	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	619a      	str	r2, [r3, #24]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af02      	add	r7, sp, #8
 8003730:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e101      	b.n	8003940 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f005 fe78 	bl	800944c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2203      	movs	r2, #3
 8003760:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800376a:	d102      	bne.n	8003772 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f002 fbeb 	bl	8005f52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7c1a      	ldrb	r2, [r3, #16]
 8003784:	f88d 2000 	strb.w	r2, [sp]
 8003788:	3304      	adds	r3, #4
 800378a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800378c:	f002 faca 	bl	8005d24 <USB_CoreInit>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e0ce      	b.n	8003940 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f002 fbe3 	bl	8005f74 <USB_SetCurrentMode>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0bf      	b.n	8003940 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c0:	2300      	movs	r3, #0
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	e04a      	b.n	800385c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	3315      	adds	r3, #21
 80037d6:	2201      	movs	r2, #1
 80037d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	3314      	adds	r3, #20
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	b298      	uxth	r0, r3
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	332e      	adds	r3, #46	@ 0x2e
 8003802:	4602      	mov	r2, r0
 8003804:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3318      	adds	r3, #24
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	331c      	adds	r3, #28
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3320      	adds	r3, #32
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3324      	adds	r3, #36	@ 0x24
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	3301      	adds	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	791b      	ldrb	r3, [r3, #4]
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	429a      	cmp	r2, r3
 8003864:	d3af      	bcc.n	80037c6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003866:	2300      	movs	r3, #0
 8003868:	73fb      	strb	r3, [r7, #15]
 800386a:	e044      	b.n	80038f6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800386c:	7bfa      	ldrb	r2, [r7, #15]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038ae:	7bfa      	ldrb	r2, [r7, #15]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	3301      	adds	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	791b      	ldrb	r3, [r3, #4]
 80038fa:	7bfa      	ldrb	r2, [r7, #15]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d3b5      	bcc.n	800386c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	7c1a      	ldrb	r2, [r3, #16]
 8003908:	f88d 2000 	strb.w	r2, [sp]
 800390c:	3304      	adds	r3, #4
 800390e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003910:	f002 fb7c 	bl	800600c <USB_DevInit>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e00c      	b.n	8003940 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f003 fbc6 	bl	80070ca <USB_DevDisconnect>

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_PCD_Start+0x1c>
 8003960:	2302      	movs	r3, #2
 8003962:	e022      	b.n	80039aa <HAL_PCD_Start+0x62>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d009      	beq.n	800398c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800397c:	2b01      	cmp	r3, #1
 800397e:	d105      	bne.n	800398c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003984:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f002 facd 	bl	8005f30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f003 fb74 	bl	8007088 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039b2:	b590      	push	{r4, r7, lr}
 80039b4:	b08d      	sub	sp, #52	@ 0x34
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f003 fc32 	bl	8007232 <USB_GetMode>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f040 848c 	bne.w	80042ee <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f003 fb96 	bl	800710c <USB_ReadInterrupts>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8482 	beq.w	80042ec <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f003 fb83 	bl	800710c <USB_ReadInterrupts>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d107      	bne.n	8003a20 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f002 0202 	and.w	r2, r2, #2
 8003a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 fb71 	bl	800710c <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d161      	bne.n	8003af8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0210 	bic.w	r2, r2, #16
 8003a42:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f003 020f 	and.w	r2, r3, #15
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	3304      	adds	r3, #4
 8003a62:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	0c5b      	lsrs	r3, r3, #17
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d124      	bne.n	8003aba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d035      	beq.n	8003ae8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	6a38      	ldr	r0, [r7, #32]
 8003a90:	f003 f9a8 	bl	8006de4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa0:	441a      	add	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab2:	441a      	add	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	615a      	str	r2, [r3, #20]
 8003ab8:	e016      	b.n	8003ae8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	0c5b      	lsrs	r3, r3, #17
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d110      	bne.n	8003ae8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003acc:	2208      	movs	r2, #8
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6a38      	ldr	r0, [r7, #32]
 8003ad2:	f003 f987 	bl	8006de4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ae2:	441a      	add	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0210 	orr.w	r2, r2, #16
 8003af6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f003 fb05 	bl	800710c <USB_ReadInterrupts>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b0c:	f040 80a7 	bne.w	8003c5e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 fb0a 	bl	8007132 <USB_ReadDevAllOutEpInterrupt>
 8003b1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003b20:	e099      	b.n	8003c56 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 808e 	beq.w	8003c4a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f003 fb2e 	bl	800719a <USB_ReadDevOutEPInterrupt>
 8003b3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00c      	beq.n	8003b64 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b56:	461a      	mov	r2, r3
 8003b58:	2301      	movs	r3, #1
 8003b5a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fe8c 	bl	800487c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00c      	beq.n	8003b88 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2308      	movs	r3, #8
 8003b7e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 ff62 	bl	8004a4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d030      	beq.n	8003c10 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb6:	2b80      	cmp	r3, #128	@ 0x80
 8003bb8:	d109      	bne.n	8003bce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bcc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4413      	add	r3, r2
 8003be0:	3304      	adds	r3, #4
 8003be2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	78db      	ldrb	r3, [r3, #3]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d108      	bne.n	8003bfe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f005 fd3b 	bl	8009674 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c26:	461a      	mov	r2, r3
 8003c28:	2320      	movs	r3, #32
 8003c2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c42:	461a      	mov	r2, r3
 8003c44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c48:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f47f af62 	bne.w	8003b22 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f003 fa52 	bl	800710c <USB_ReadInterrupts>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c72:	f040 80db 	bne.w	8003e2c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f003 fa73 	bl	8007166 <USB_ReadDevAllInEpInterrupt>
 8003c80:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003c86:	e0cd      	b.n	8003e24 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80c2 	beq.w	8003e18 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f003 fa99 	bl	80071d6 <USB_ReadDevInEPInterrupt>
 8003ca4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d057      	beq.n	8003d60 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69f9      	ldr	r1, [r7, #28]
 8003ccc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	799b      	ldrb	r3, [r3, #6]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d132      	bne.n	8003d54 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	3320      	adds	r3, #32
 8003cfe:	6819      	ldr	r1, [r3, #0]
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4403      	add	r3, r0
 8003d0e:	331c      	adds	r3, #28
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4419      	add	r1, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d18:	4613      	mov	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4403      	add	r3, r0
 8003d22:	3320      	adds	r3, #32
 8003d24:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d113      	bne.n	8003d54 <HAL_PCD_IRQHandler+0x3a2>
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	3324      	adds	r3, #36	@ 0x24
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d108      	bne.n	8003d54 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2101      	movs	r1, #1
 8003d50:	f003 faa0 	bl	8007294 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f005 fc05 	bl	800956a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d76:	461a      	mov	r2, r3
 8003d78:	2308      	movs	r3, #8
 8003d7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d92:	461a      	mov	r2, r3
 8003d94:	2310      	movs	r3, #16
 8003d96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dae:	461a      	mov	r2, r3
 8003db0:	2340      	movs	r3, #64	@ 0x40
 8003db2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d023      	beq.n	8003e06 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003dbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dc0:	6a38      	ldr	r0, [r7, #32]
 8003dc2:	f002 fa87 	bl	80062d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc8:	4613      	mov	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	3310      	adds	r3, #16
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	78db      	ldrb	r3, [r3, #3]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d108      	bne.n	8003df4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2200      	movs	r2, #0
 8003de6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f005 fc52 	bl	8009698 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e00:	461a      	mov	r2, r3
 8003e02:	2302      	movs	r3, #2
 8003e04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fca5 	bl	8004762 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f47f af2e 	bne.w	8003c88 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f003 f96b 	bl	800710c <USB_ReadInterrupts>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e40:	d122      	bne.n	8003e88 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d108      	bne.n	8003e72 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e68:	2100      	movs	r1, #0
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fe8c 	bl	8004b88 <HAL_PCDEx_LPM_Callback>
 8003e70:	e002      	b.n	8003e78 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f005 fbf0 	bl	8009658 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f003 f93d 	bl	800710c <USB_ReadInterrupts>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e9c:	d112      	bne.n	8003ec4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d102      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f005 fbac 	bl	800960c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ec2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f003 f91f 	bl	800710c <USB_ReadInterrupts>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed8:	f040 80b7 	bne.w	800404a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2110      	movs	r1, #16
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f002 f9ec 	bl	80062d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f00:	e046      	b.n	8003f90 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f14:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f26:	0151      	lsls	r1, r2, #5
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	440a      	add	r2, r1
 8003f2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f42:	461a      	mov	r2, r3
 8003f44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f48:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f5a:	0151      	lsls	r1, r2, #5
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	440a      	add	r2, r1
 8003f60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f7a:	0151      	lsls	r1, r2, #5
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	440a      	add	r2, r1
 8003f80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f88:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	791b      	ldrb	r3, [r3, #4]
 8003f94:	461a      	mov	r2, r3
 8003f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d3b2      	bcc.n	8003f02 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003faa:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003fae:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	7bdb      	ldrb	r3, [r3, #15]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d016      	beq.n	8003fe6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fc8:	f043 030b 	orr.w	r3, r3, #11
 8003fcc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fde:	f043 030b 	orr.w	r3, r3, #11
 8003fe2:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fe4:	e015      	b.n	8004012 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ff4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ff8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003ffc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	69fa      	ldr	r2, [r7, #28]
 8004008:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800400c:	f043 030b 	orr.w	r3, r3, #11
 8004010:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004020:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004024:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004034:	461a      	mov	r2, r3
 8004036:	f003 f92d 	bl	8007294 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f003 f85c 	bl	800710c <USB_ReadInterrupts>
 8004054:	4603      	mov	r3, r0
 8004056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800405a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800405e:	d123      	bne.n	80040a8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f003 f8f2 	bl	800724e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f002 f9a9 	bl	80063c6 <USB_GetDevSpeed>
 8004074:	4603      	mov	r3, r0
 8004076:	461a      	mov	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681c      	ldr	r4, [r3, #0]
 8004080:	f001 f9f2 	bl	8005468 <HAL_RCC_GetHCLKFreq>
 8004084:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800408a:	461a      	mov	r2, r3
 800408c:	4620      	mov	r0, r4
 800408e:	f001 fead 	bl	8005dec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f005 fa91 	bl	80095ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80040a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 f82d 	bl	800710c <USB_ReadInterrupts>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d10a      	bne.n	80040d2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f005 fa6e 	bl	800959e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695a      	ldr	r2, [r3, #20]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f002 0208 	and.w	r2, r2, #8
 80040d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f003 f818 	bl	800710c <USB_ReadInterrupts>
 80040dc:	4603      	mov	r3, r0
 80040de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e2:	2b80      	cmp	r3, #128	@ 0x80
 80040e4:	d123      	bne.n	800412e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040f2:	2301      	movs	r3, #1
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f6:	e014      	b.n	8004122 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d105      	bne.n	800411c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	b2db      	uxtb	r3, r3
 8004114:	4619      	mov	r1, r3
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 faf2 	bl	8004700 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	3301      	adds	r3, #1
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	791b      	ldrb	r3, [r3, #4]
 8004126:	461a      	mov	r2, r3
 8004128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412a:	4293      	cmp	r3, r2
 800412c:	d3e4      	bcc.n	80040f8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f002 ffea 	bl	800710c <USB_ReadInterrupts>
 8004138:	4603      	mov	r3, r0
 800413a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800413e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004142:	d13c      	bne.n	80041be <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004144:	2301      	movs	r3, #1
 8004146:	627b      	str	r3, [r7, #36]	@ 0x24
 8004148:	e02b      	b.n	80041a2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	3318      	adds	r3, #24
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d115      	bne.n	800419c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004170:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004172:	2b00      	cmp	r3, #0
 8004174:	da12      	bge.n	800419c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	3317      	adds	r3, #23
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004192:	b2db      	uxtb	r3, r3
 8004194:	4619      	mov	r1, r3
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fab2 	bl	8004700 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	3301      	adds	r3, #1
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	791b      	ldrb	r3, [r3, #4]
 80041a6:	461a      	mov	r2, r3
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d3cd      	bcc.n	800414a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695a      	ldr	r2, [r3, #20]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80041bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f002 ffa2 	bl	800710c <USB_ReadInterrupts>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041d2:	d156      	bne.n	8004282 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041d4:	2301      	movs	r3, #1
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d8:	e045      	b.n	8004266 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d12e      	bne.n	8004260 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004202:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004204:	2b00      	cmp	r3, #0
 8004206:	da2b      	bge.n	8004260 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004214:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004218:	429a      	cmp	r2, r3
 800421a:	d121      	bne.n	8004260 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004220:	4613      	mov	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800422e:	2201      	movs	r2, #1
 8004230:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004258:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800425c:	6053      	str	r3, [r2, #4]
            break;
 800425e:	e008      	b.n	8004272 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	3301      	adds	r3, #1
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	791b      	ldrb	r3, [r3, #4]
 800426a:	461a      	mov	r2, r3
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	4293      	cmp	r3, r2
 8004270:	d3b3      	bcc.n	80041da <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f002 ff40 	bl	800710c <USB_ReadInterrupts>
 800428c:	4603      	mov	r3, r0
 800428e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004296:	d10a      	bne.n	80042ae <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f005 fa0f 	bl	80096bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695a      	ldr	r2, [r3, #20]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80042ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f002 ff2a 	bl	800710c <USB_ReadInterrupts>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d115      	bne.n	80042ee <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f005 f9ff 	bl	80096d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	e000      	b.n	80042ee <HAL_PCD_IRQHandler+0x93c>
      return;
 80042ec:	bf00      	nop
    }
  }
}
 80042ee:	3734      	adds	r7, #52	@ 0x34
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd90      	pop	{r4, r7, pc}

080042f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_PCD_SetAddress+0x1a>
 800430a:	2302      	movs	r3, #2
 800430c:	e012      	b.n	8004334 <HAL_PCD_SetAddress+0x40>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f002 fe89 	bl	800703c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	4608      	mov	r0, r1
 8004346:	4611      	mov	r1, r2
 8004348:	461a      	mov	r2, r3
 800434a:	4603      	mov	r3, r0
 800434c:	70fb      	strb	r3, [r7, #3]
 800434e:	460b      	mov	r3, r1
 8004350:	803b      	strh	r3, [r7, #0]
 8004352:	4613      	mov	r3, r2
 8004354:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800435a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800435e:	2b00      	cmp	r3, #0
 8004360:	da0f      	bge.n	8004382 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	f003 020f 	and.w	r2, r3, #15
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	3310      	adds	r3, #16
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	4413      	add	r3, r2
 8004376:	3304      	adds	r3, #4
 8004378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	705a      	strb	r2, [r3, #1]
 8004380:	e00f      	b.n	80043a2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	f003 020f 	and.w	r2, r3, #15
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	4413      	add	r3, r2
 8004398:	3304      	adds	r3, #4
 800439a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80043ae:	883b      	ldrh	r3, [r7, #0]
 80043b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	78ba      	ldrb	r2, [r7, #2]
 80043bc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	785b      	ldrb	r3, [r3, #1]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043d0:	78bb      	ldrb	r3, [r7, #2]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d102      	bne.n	80043dc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_PCD_EP_Open+0xae>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e00e      	b.n	8004408 <HAL_PCD_EP_Open+0xcc>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68f9      	ldr	r1, [r7, #12]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f002 f809 	bl	8006410 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004406:	7afb      	ldrb	r3, [r7, #11]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800441c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004420:	2b00      	cmp	r3, #0
 8004422:	da0f      	bge.n	8004444 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	f003 020f 	and.w	r2, r3, #15
 800442a:	4613      	mov	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	3310      	adds	r3, #16
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4413      	add	r3, r2
 8004438:	3304      	adds	r3, #4
 800443a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	705a      	strb	r2, [r3, #1]
 8004442:	e00f      	b.n	8004464 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	f003 020f 	and.w	r2, r3, #15
 800444a:	4613      	mov	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4413      	add	r3, r2
 800445a:	3304      	adds	r3, #4
 800445c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	b2da      	uxtb	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_PCD_EP_Close+0x6e>
 800447a:	2302      	movs	r3, #2
 800447c:	e00e      	b.n	800449c <HAL_PCD_EP_Close+0x8c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68f9      	ldr	r1, [r7, #12]
 800448c:	4618      	mov	r0, r3
 800448e:	f002 f847 	bl	8006520 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	460b      	mov	r3, r1
 80044b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044b4:	7afb      	ldrb	r3, [r7, #11]
 80044b6:	f003 020f 	and.w	r2, r3, #15
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4413      	add	r3, r2
 80044ca:	3304      	adds	r3, #4
 80044cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2200      	movs	r2, #0
 80044de:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2200      	movs	r2, #0
 80044e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044e6:	7afb      	ldrb	r3, [r7, #11]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	799b      	ldrb	r3, [r3, #6]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d102      	bne.n	8004500 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	799b      	ldrb	r3, [r3, #6]
 8004508:	461a      	mov	r2, r3
 800450a:	6979      	ldr	r1, [r7, #20]
 800450c:	f002 f8e4 	bl	80066d8 <USB_EPStartXfer>

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b086      	sub	sp, #24
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
 8004526:	460b      	mov	r3, r1
 8004528:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800452a:	7afb      	ldrb	r3, [r7, #11]
 800452c:	f003 020f 	and.w	r2, r3, #15
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	3310      	adds	r3, #16
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4413      	add	r3, r2
 800453e:	3304      	adds	r3, #4
 8004540:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2201      	movs	r2, #1
 8004558:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800455a:	7afb      	ldrb	r3, [r7, #11]
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	b2da      	uxtb	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	799b      	ldrb	r3, [r3, #6]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d102      	bne.n	8004574 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	799b      	ldrb	r3, [r3, #6]
 800457c:	461a      	mov	r2, r3
 800457e:	6979      	ldr	r1, [r7, #20]
 8004580:	f002 f8aa 	bl	80066d8 <USB_EPStartXfer>

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	460b      	mov	r3, r1
 8004598:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800459a:	78fb      	ldrb	r3, [r7, #3]
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	7912      	ldrb	r2, [r2, #4]
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e04f      	b.n	800464c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	da0f      	bge.n	80045d4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	f003 020f 	and.w	r2, r3, #15
 80045ba:	4613      	mov	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	3310      	adds	r3, #16
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	3304      	adds	r3, #4
 80045ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	705a      	strb	r2, [r3, #1]
 80045d2:	e00d      	b.n	80045f0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045d4:	78fa      	ldrb	r2, [r7, #3]
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	3304      	adds	r3, #4
 80045e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_PCD_EP_SetStall+0x82>
 800460c:	2302      	movs	r3, #2
 800460e:	e01d      	b.n	800464c <HAL_PCD_EP_SetStall+0xbe>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68f9      	ldr	r1, [r7, #12]
 800461e:	4618      	mov	r0, r3
 8004620:	f002 fc38 	bl	8006e94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	7999      	ldrb	r1, [r3, #6]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800463c:	461a      	mov	r2, r3
 800463e:	f002 fe29 	bl	8007294 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	7912      	ldrb	r2, [r2, #4]
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e042      	b.n	80046f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004676:	2b00      	cmp	r3, #0
 8004678:	da0f      	bge.n	800469a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800467a:	78fb      	ldrb	r3, [r7, #3]
 800467c:	f003 020f 	and.w	r2, r3, #15
 8004680:	4613      	mov	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	3310      	adds	r3, #16
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	3304      	adds	r3, #4
 8004690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	705a      	strb	r2, [r3, #1]
 8004698:	e00f      	b.n	80046ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	f003 020f 	and.w	r2, r3, #15
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	4413      	add	r3, r2
 80046b0:	3304      	adds	r3, #4
 80046b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_PCD_EP_ClrStall+0x86>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e00e      	b.n	80046f8 <HAL_PCD_EP_ClrStall+0xa4>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68f9      	ldr	r1, [r7, #12]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f002 fc41 	bl	8006f70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800470c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004710:	2b00      	cmp	r3, #0
 8004712:	da0c      	bge.n	800472e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	f003 020f 	and.w	r2, r3, #15
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	3310      	adds	r3, #16
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4413      	add	r3, r2
 8004728:	3304      	adds	r3, #4
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e00c      	b.n	8004748 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	f003 020f 	and.w	r2, r3, #15
 8004734:	4613      	mov	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	4413      	add	r3, r2
 8004744:	3304      	adds	r3, #4
 8004746:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68f9      	ldr	r1, [r7, #12]
 800474e:	4618      	mov	r0, r3
 8004750:	f002 fa60 	bl	8006c14 <USB_EPStopXfer>
 8004754:	4603      	mov	r3, r0
 8004756:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004758:	7afb      	ldrb	r3, [r7, #11]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b08a      	sub	sp, #40	@ 0x28
 8004766:	af02      	add	r7, sp, #8
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	3310      	adds	r3, #16
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	3304      	adds	r3, #4
 8004788:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	429a      	cmp	r2, r3
 8004794:	d901      	bls.n	800479a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e06b      	b.n	8004872 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d902      	bls.n	80047b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3303      	adds	r3, #3
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047be:	e02a      	b.n	8004816 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d902      	bls.n	80047dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3303      	adds	r3, #3
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	68d9      	ldr	r1, [r3, #12]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	4603      	mov	r3, r0
 80047f8:	6978      	ldr	r0, [r7, #20]
 80047fa:	f002 fab5 	bl	8006d68 <USB_WritePacket>

    ep->xfer_buff  += len;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	441a      	add	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	441a      	add	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	429a      	cmp	r2, r3
 800482a:	d809      	bhi.n	8004840 <PCD_WriteEmptyTxFifo+0xde>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	695a      	ldr	r2, [r3, #20]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004834:	429a      	cmp	r2, r3
 8004836:	d203      	bcs.n	8004840 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1bf      	bne.n	80047c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	429a      	cmp	r2, r3
 800484a:	d811      	bhi.n	8004870 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	2201      	movs	r2, #1
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	43db      	mvns	r3, r3
 8004866:	6939      	ldr	r1, [r7, #16]
 8004868:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800486c:	4013      	ands	r3, r2
 800486e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3720      	adds	r7, #32
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	333c      	adds	r3, #60	@ 0x3c
 8004894:	3304      	adds	r3, #4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	799b      	ldrb	r3, [r3, #6]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d17b      	bne.n	80049aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d015      	beq.n	80048e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	4a61      	ldr	r2, [pc, #388]	@ (8004a44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	f240 80b9 	bls.w	8004a38 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80b3 	beq.w	8004a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048de:	461a      	mov	r2, r3
 80048e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048e4:	6093      	str	r3, [r2, #8]
 80048e6:	e0a7      	b.n	8004a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048fe:	461a      	mov	r2, r3
 8004900:	2320      	movs	r3, #32
 8004902:	6093      	str	r3, [r2, #8]
 8004904:	e098      	b.n	8004a38 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	f040 8093 	bne.w	8004a38 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	4a4b      	ldr	r2, [pc, #300]	@ (8004a44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d90f      	bls.n	800493a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004930:	461a      	mov	r2, r3
 8004932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004936:	6093      	str	r3, [r2, #8]
 8004938:	e07e      	b.n	8004a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	4613      	mov	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	4413      	add	r3, r2
 800494c:	3304      	adds	r3, #4
 800494e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1a      	ldr	r2, [r3, #32]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	0159      	lsls	r1, r3, #5
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	440b      	add	r3, r1
 800495c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004966:	1ad2      	subs	r2, r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d114      	bne.n	800499c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d109      	bne.n	800498e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004984:	461a      	mov	r2, r3
 8004986:	2101      	movs	r1, #1
 8004988:	f002 fc84 	bl	8007294 <USB_EP0_OutStart>
 800498c:	e006      	b.n	800499c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	441a      	add	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f004 fdc6 	bl	8009534 <HAL_PCD_DataOutStageCallback>
 80049a8:	e046      	b.n	8004a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	4a26      	ldr	r2, [pc, #152]	@ (8004a48 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d124      	bne.n	80049fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c8:	461a      	mov	r2, r3
 80049ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ce:	6093      	str	r3, [r2, #8]
 80049d0:	e032      	b.n	8004a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e8:	461a      	mov	r2, r3
 80049ea:	2320      	movs	r3, #32
 80049ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f004 fd9d 	bl	8009534 <HAL_PCD_DataOutStageCallback>
 80049fa:	e01d      	b.n	8004a38 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d114      	bne.n	8004a2c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	4613      	mov	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d108      	bne.n	8004a2c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a24:	461a      	mov	r2, r3
 8004a26:	2100      	movs	r1, #0
 8004a28:	f002 fc34 	bl	8007294 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f004 fd7e 	bl	8009534 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3720      	adds	r7, #32
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	4f54300a 	.word	0x4f54300a
 8004a48:	4f54310a 	.word	0x4f54310a

08004a4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	333c      	adds	r3, #60	@ 0x3c
 8004a64:	3304      	adds	r3, #4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4a15      	ldr	r2, [pc, #84]	@ (8004ad4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d90e      	bls.n	8004aa0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d009      	beq.n	8004aa0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f004 fd35 	bl	8009510 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d90c      	bls.n	8004ac8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	799b      	ldrb	r3, [r3, #6]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d108      	bne.n	8004ac8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	f002 fbe6 	bl	8007294 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	4f54300a 	.word	0x4f54300a

08004ad8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d107      	bne.n	8004b06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004af6:	883b      	ldrh	r3, [r7, #0]
 8004af8:	0419      	lsls	r1, r3, #16
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b04:	e028      	b.n	8004b58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	4413      	add	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b14:	2300      	movs	r3, #0
 8004b16:	73fb      	strb	r3, [r7, #15]
 8004b18:	e00d      	b.n	8004b36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	3340      	adds	r3, #64	@ 0x40
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	3301      	adds	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
 8004b36:	7bfa      	ldrb	r2, [r7, #15]
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d3ec      	bcc.n	8004b1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b40:	883b      	ldrh	r3, [r7, #0]
 8004b42:	0418      	lsls	r0, r3, #16
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6819      	ldr	r1, [r3, #0]
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	4302      	orrs	r2, r0
 8004b50:	3340      	adds	r3, #64	@ 0x40
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	887a      	ldrh	r2, [r7, #2]
 8004b78:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e267      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d075      	beq.n	8004caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bbe:	4b88      	ldr	r3, [pc, #544]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d00c      	beq.n	8004be4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bca:	4b85      	ldr	r3, [pc, #532]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d112      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd6:	4b82      	ldr	r3, [pc, #520]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004be2:	d10b      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	4b7e      	ldr	r3, [pc, #504]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05b      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x108>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d157      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e242      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x74>
 8004c06:	4b76      	ldr	r3, [pc, #472]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a75      	ldr	r2, [pc, #468]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e01d      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x98>
 8004c1e:	4b70      	ldr	r3, [pc, #448]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6f      	ldr	r2, [pc, #444]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a6c      	ldr	r2, [pc, #432]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e00b      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c38:	4b69      	ldr	r3, [pc, #420]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a68      	ldr	r2, [pc, #416]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b66      	ldr	r3, [pc, #408]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a65      	ldr	r2, [pc, #404]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c58:	f7fe fa58 	bl	800310c <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c60:	f7fe fa54 	bl	800310c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	@ 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e207      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c72:	4b5b      	ldr	r3, [pc, #364]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0xc0>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fe fa44 	bl	800310c <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fe fa40 	bl	800310c <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	@ 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e1f3      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9a:	4b51      	ldr	r3, [pc, #324]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0xe8>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d063      	beq.n	8004d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc2:	4b47      	ldr	r3, [pc, #284]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d11c      	bne.n	8004d08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cce:	4b44      	ldr	r3, [pc, #272]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d116      	bne.n	8004d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cda:	4b41      	ldr	r3, [pc, #260]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x152>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d001      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e1c7      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	4937      	ldr	r1, [pc, #220]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d06:	e03a      	b.n	8004d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d020      	beq.n	8004d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d10:	4b34      	ldr	r3, [pc, #208]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d16:	f7fe f9f9 	bl	800310c <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d1e:	f7fe f9f5 	bl	800310c <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e1a8      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d30:	4b2b      	ldr	r3, [pc, #172]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3c:	4b28      	ldr	r3, [pc, #160]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4925      	ldr	r1, [pc, #148]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	600b      	str	r3, [r1, #0]
 8004d50:	e015      	b.n	8004d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d52:	4b24      	ldr	r3, [pc, #144]	@ (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fe f9d8 	bl	800310c <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d60:	f7fe f9d4 	bl	800310c <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e187      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d72:	4b1b      	ldr	r3, [pc, #108]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d036      	beq.n	8004df8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d016      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d92:	4b15      	ldr	r3, [pc, #84]	@ (8004de8 <HAL_RCC_OscConfig+0x248>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d98:	f7fe f9b8 	bl	800310c <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da0:	f7fe f9b4 	bl	800310c <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e167      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db2:	4b0b      	ldr	r3, [pc, #44]	@ (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x200>
 8004dbe:	e01b      	b.n	8004df8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc0:	4b09      	ldr	r3, [pc, #36]	@ (8004de8 <HAL_RCC_OscConfig+0x248>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc6:	f7fe f9a1 	bl	800310c <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dcc:	e00e      	b.n	8004dec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dce:	f7fe f99d 	bl	800310c <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d907      	bls.n	8004dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e150      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
 8004de0:	40023800 	.word	0x40023800
 8004de4:	42470000 	.word	0x42470000
 8004de8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dec:	4b88      	ldr	r3, [pc, #544]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1ea      	bne.n	8004dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8097 	beq.w	8004f34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e0a:	4b81      	ldr	r3, [pc, #516]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10f      	bne.n	8004e36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e16:	2300      	movs	r3, #0
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	4a7c      	ldr	r2, [pc, #496]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e26:	4b7a      	ldr	r3, [pc, #488]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e36:	4b77      	ldr	r3, [pc, #476]	@ (8005014 <HAL_RCC_OscConfig+0x474>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d118      	bne.n	8004e74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e42:	4b74      	ldr	r3, [pc, #464]	@ (8005014 <HAL_RCC_OscConfig+0x474>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a73      	ldr	r2, [pc, #460]	@ (8005014 <HAL_RCC_OscConfig+0x474>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4e:	f7fe f95d 	bl	800310c <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e56:	f7fe f959 	bl	800310c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e10c      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e68:	4b6a      	ldr	r3, [pc, #424]	@ (8005014 <HAL_RCC_OscConfig+0x474>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d106      	bne.n	8004e8a <HAL_RCC_OscConfig+0x2ea>
 8004e7c:	4b64      	ldr	r3, [pc, #400]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e80:	4a63      	ldr	r2, [pc, #396]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e88:	e01c      	b.n	8004ec4 <HAL_RCC_OscConfig+0x324>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b05      	cmp	r3, #5
 8004e90:	d10c      	bne.n	8004eac <HAL_RCC_OscConfig+0x30c>
 8004e92:	4b5f      	ldr	r3, [pc, #380]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e96:	4a5e      	ldr	r2, [pc, #376]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e98:	f043 0304 	orr.w	r3, r3, #4
 8004e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eaa:	e00b      	b.n	8004ec4 <HAL_RCC_OscConfig+0x324>
 8004eac:	4b58      	ldr	r3, [pc, #352]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb0:	4a57      	ldr	r2, [pc, #348]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eb8:	4b55      	ldr	r3, [pc, #340]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ebc:	4a54      	ldr	r2, [pc, #336]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004ebe:	f023 0304 	bic.w	r3, r3, #4
 8004ec2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d015      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ecc:	f7fe f91e 	bl	800310c <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed2:	e00a      	b.n	8004eea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed4:	f7fe f91a 	bl	800310c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e0cb      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eea:	4b49      	ldr	r3, [pc, #292]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0ee      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x334>
 8004ef6:	e014      	b.n	8004f22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef8:	f7fe f908 	bl	800310c <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f00:	f7fe f904 	bl	800310c <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e0b5      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f16:	4b3e      	ldr	r3, [pc, #248]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ee      	bne.n	8004f00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f28:	4b39      	ldr	r3, [pc, #228]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	4a38      	ldr	r2, [pc, #224]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80a1 	beq.w	8005080 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f3e:	4b34      	ldr	r3, [pc, #208]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d05c      	beq.n	8005004 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d141      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f52:	4b31      	ldr	r3, [pc, #196]	@ (8005018 <HAL_RCC_OscConfig+0x478>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f58:	f7fe f8d8 	bl	800310c <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fe f8d4 	bl	800310c <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e087      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f72:	4b27      	ldr	r3, [pc, #156]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69da      	ldr	r2, [r3, #28]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	019b      	lsls	r3, r3, #6
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f94:	085b      	lsrs	r3, r3, #1
 8004f96:	3b01      	subs	r3, #1
 8004f98:	041b      	lsls	r3, r3, #16
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa0:	061b      	lsls	r3, r3, #24
 8004fa2:	491b      	ldr	r1, [pc, #108]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8005018 <HAL_RCC_OscConfig+0x478>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fae:	f7fe f8ad 	bl	800310c <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb6:	f7fe f8a9 	bl	800310c <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e05c      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc8:	4b11      	ldr	r3, [pc, #68]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x416>
 8004fd4:	e054      	b.n	8005080 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd6:	4b10      	ldr	r3, [pc, #64]	@ (8005018 <HAL_RCC_OscConfig+0x478>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7fe f896 	bl	800310c <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fe f892 	bl	800310c <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e045      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff6:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <HAL_RCC_OscConfig+0x470>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x444>
 8005002:	e03d      	b.n	8005080 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d107      	bne.n	800501c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e038      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
 8005010:	40023800 	.word	0x40023800
 8005014:	40007000 	.word	0x40007000
 8005018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800501c:	4b1b      	ldr	r3, [pc, #108]	@ (800508c <HAL_RCC_OscConfig+0x4ec>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d028      	beq.n	800507c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005034:	429a      	cmp	r2, r3
 8005036:	d121      	bne.n	800507c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005042:	429a      	cmp	r2, r3
 8005044:	d11a      	bne.n	800507c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800504c:	4013      	ands	r3, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005054:	4293      	cmp	r3, r2
 8005056:	d111      	bne.n	800507c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005062:	085b      	lsrs	r3, r3, #1
 8005064:	3b01      	subs	r3, #1
 8005066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d107      	bne.n	800507c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800

08005090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0cc      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050a4:	4b68      	ldr	r3, [pc, #416]	@ (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d90c      	bls.n	80050cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b65      	ldr	r3, [pc, #404]	@ (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ba:	4b63      	ldr	r3, [pc, #396]	@ (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0b8      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d020      	beq.n	800511a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e4:	4b59      	ldr	r3, [pc, #356]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a58      	ldr	r2, [pc, #352]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050fc:	4b53      	ldr	r3, [pc, #332]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	4a52      	ldr	r2, [pc, #328]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005108:	4b50      	ldr	r3, [pc, #320]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	494d      	ldr	r1, [pc, #308]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d044      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d107      	bne.n	800513e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	4b47      	ldr	r3, [pc, #284]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d119      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e07f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d003      	beq.n	800514e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514a:	2b03      	cmp	r3, #3
 800514c:	d107      	bne.n	800515e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514e:	4b3f      	ldr	r3, [pc, #252]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e06f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515e:	4b3b      	ldr	r3, [pc, #236]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e067      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800516e:	4b37      	ldr	r3, [pc, #220]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f023 0203 	bic.w	r2, r3, #3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4934      	ldr	r1, [pc, #208]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005180:	f7fd ffc4 	bl	800310c <HAL_GetTick>
 8005184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005186:	e00a      	b.n	800519e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005188:	f7fd ffc0 	bl	800310c <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e04f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519e:	4b2b      	ldr	r3, [pc, #172]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 020c 	and.w	r2, r3, #12
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d1eb      	bne.n	8005188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051b0:	4b25      	ldr	r3, [pc, #148]	@ (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d20c      	bcs.n	80051d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b22      	ldr	r3, [pc, #136]	@ (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c6:	4b20      	ldr	r3, [pc, #128]	@ (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d001      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e032      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d008      	beq.n	80051f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e4:	4b19      	ldr	r3, [pc, #100]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	4916      	ldr	r1, [pc, #88]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005202:	4b12      	ldr	r3, [pc, #72]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	490e      	ldr	r1, [pc, #56]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	4313      	orrs	r3, r2
 8005214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005216:	f000 f821 	bl	800525c <HAL_RCC_GetSysClockFreq>
 800521a:	4602      	mov	r2, r0
 800521c:	4b0b      	ldr	r3, [pc, #44]	@ (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	490a      	ldr	r1, [pc, #40]	@ (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 8005228:	5ccb      	ldrb	r3, [r1, r3]
 800522a:	fa22 f303 	lsr.w	r3, r2, r3
 800522e:	4a09      	ldr	r2, [pc, #36]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 8005230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005232:	4b09      	ldr	r3, [pc, #36]	@ (8005258 <HAL_RCC_ClockConfig+0x1c8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fd ff24 	bl	8003084 <HAL_InitTick>

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40023c00 	.word	0x40023c00
 800524c:	40023800 	.word	0x40023800
 8005250:	08009d8c 	.word	0x08009d8c
 8005254:	20000000 	.word	0x20000000
 8005258:	20000004 	.word	0x20000004

0800525c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800525c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005260:	b094      	sub	sp, #80	@ 0x50
 8005262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005274:	4b79      	ldr	r3, [pc, #484]	@ (800545c <HAL_RCC_GetSysClockFreq+0x200>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 030c 	and.w	r3, r3, #12
 800527c:	2b08      	cmp	r3, #8
 800527e:	d00d      	beq.n	800529c <HAL_RCC_GetSysClockFreq+0x40>
 8005280:	2b08      	cmp	r3, #8
 8005282:	f200 80e1 	bhi.w	8005448 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <HAL_RCC_GetSysClockFreq+0x34>
 800528a:	2b04      	cmp	r3, #4
 800528c:	d003      	beq.n	8005296 <HAL_RCC_GetSysClockFreq+0x3a>
 800528e:	e0db      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005290:	4b73      	ldr	r3, [pc, #460]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x204>)
 8005292:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005294:	e0db      	b.n	800544e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005296:	4b73      	ldr	r3, [pc, #460]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x208>)
 8005298:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800529a:	e0d8      	b.n	800544e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800529c:	4b6f      	ldr	r3, [pc, #444]	@ (800545c <HAL_RCC_GetSysClockFreq+0x200>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052a6:	4b6d      	ldr	r3, [pc, #436]	@ (800545c <HAL_RCC_GetSysClockFreq+0x200>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d063      	beq.n	800537a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b2:	4b6a      	ldr	r3, [pc, #424]	@ (800545c <HAL_RCC_GetSysClockFreq+0x200>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	099b      	lsrs	r3, r3, #6
 80052b8:	2200      	movs	r2, #0
 80052ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80052c6:	2300      	movs	r3, #0
 80052c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052ce:	4622      	mov	r2, r4
 80052d0:	462b      	mov	r3, r5
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f04f 0100 	mov.w	r1, #0
 80052da:	0159      	lsls	r1, r3, #5
 80052dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052e0:	0150      	lsls	r0, r2, #5
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4621      	mov	r1, r4
 80052e8:	1a51      	subs	r1, r2, r1
 80052ea:	6139      	str	r1, [r7, #16]
 80052ec:	4629      	mov	r1, r5
 80052ee:	eb63 0301 	sbc.w	r3, r3, r1
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005300:	4659      	mov	r1, fp
 8005302:	018b      	lsls	r3, r1, #6
 8005304:	4651      	mov	r1, sl
 8005306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800530a:	4651      	mov	r1, sl
 800530c:	018a      	lsls	r2, r1, #6
 800530e:	4651      	mov	r1, sl
 8005310:	ebb2 0801 	subs.w	r8, r2, r1
 8005314:	4659      	mov	r1, fp
 8005316:	eb63 0901 	sbc.w	r9, r3, r1
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800532a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800532e:	4690      	mov	r8, r2
 8005330:	4699      	mov	r9, r3
 8005332:	4623      	mov	r3, r4
 8005334:	eb18 0303 	adds.w	r3, r8, r3
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	462b      	mov	r3, r5
 800533c:	eb49 0303 	adc.w	r3, r9, r3
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800534e:	4629      	mov	r1, r5
 8005350:	024b      	lsls	r3, r1, #9
 8005352:	4621      	mov	r1, r4
 8005354:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005358:	4621      	mov	r1, r4
 800535a:	024a      	lsls	r2, r1, #9
 800535c:	4610      	mov	r0, r2
 800535e:	4619      	mov	r1, r3
 8005360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005362:	2200      	movs	r2, #0
 8005364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005366:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005368:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800536c:	f7fb fb22 	bl	80009b4 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4613      	mov	r3, r2
 8005376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005378:	e058      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537a:	4b38      	ldr	r3, [pc, #224]	@ (800545c <HAL_RCC_GetSysClockFreq+0x200>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	099b      	lsrs	r3, r3, #6
 8005380:	2200      	movs	r2, #0
 8005382:	4618      	mov	r0, r3
 8005384:	4611      	mov	r1, r2
 8005386:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	2300      	movs	r3, #0
 800538e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005390:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005394:	4642      	mov	r2, r8
 8005396:	464b      	mov	r3, r9
 8005398:	f04f 0000 	mov.w	r0, #0
 800539c:	f04f 0100 	mov.w	r1, #0
 80053a0:	0159      	lsls	r1, r3, #5
 80053a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053a6:	0150      	lsls	r0, r2, #5
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4641      	mov	r1, r8
 80053ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80053b2:	4649      	mov	r1, r9
 80053b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053cc:	ebb2 040a 	subs.w	r4, r2, sl
 80053d0:	eb63 050b 	sbc.w	r5, r3, fp
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	00eb      	lsls	r3, r5, #3
 80053de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053e2:	00e2      	lsls	r2, r4, #3
 80053e4:	4614      	mov	r4, r2
 80053e6:	461d      	mov	r5, r3
 80053e8:	4643      	mov	r3, r8
 80053ea:	18e3      	adds	r3, r4, r3
 80053ec:	603b      	str	r3, [r7, #0]
 80053ee:	464b      	mov	r3, r9
 80053f0:	eb45 0303 	adc.w	r3, r5, r3
 80053f4:	607b      	str	r3, [r7, #4]
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005402:	4629      	mov	r1, r5
 8005404:	028b      	lsls	r3, r1, #10
 8005406:	4621      	mov	r1, r4
 8005408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800540c:	4621      	mov	r1, r4
 800540e:	028a      	lsls	r2, r1, #10
 8005410:	4610      	mov	r0, r2
 8005412:	4619      	mov	r1, r3
 8005414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005416:	2200      	movs	r2, #0
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	61fa      	str	r2, [r7, #28]
 800541c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005420:	f7fb fac8 	bl	80009b4 <__aeabi_uldivmod>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4613      	mov	r3, r2
 800542a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800542c:	4b0b      	ldr	r3, [pc, #44]	@ (800545c <HAL_RCC_GetSysClockFreq+0x200>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	0c1b      	lsrs	r3, r3, #16
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	3301      	adds	r3, #1
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800543c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800543e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005440:	fbb2 f3f3 	udiv	r3, r2, r3
 8005444:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005446:	e002      	b.n	800544e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005448:	4b05      	ldr	r3, [pc, #20]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x204>)
 800544a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800544c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800544e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005450:	4618      	mov	r0, r3
 8005452:	3750      	adds	r7, #80	@ 0x50
 8005454:	46bd      	mov	sp, r7
 8005456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800545a:	bf00      	nop
 800545c:	40023800 	.word	0x40023800
 8005460:	00f42400 	.word	0x00f42400
 8005464:	007a1200 	.word	0x007a1200

08005468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800546c:	4b03      	ldr	r3, [pc, #12]	@ (800547c <HAL_RCC_GetHCLKFreq+0x14>)
 800546e:	681b      	ldr	r3, [r3, #0]
}
 8005470:	4618      	mov	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000000 	.word	0x20000000

08005480 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e07b      	b.n	800558a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	2b00      	cmp	r3, #0
 8005498:	d108      	bne.n	80054ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054a2:	d009      	beq.n	80054b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	61da      	str	r2, [r3, #28]
 80054aa:	e005      	b.n	80054b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fd fcce 	bl	8002e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553c:	ea42 0103 	orr.w	r1, r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005544:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	0c1b      	lsrs	r3, r3, #16
 8005556:	f003 0104 	and.w	r1, r3, #4
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	f003 0210 	and.w	r2, r3, #16
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005578:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b088      	sub	sp, #32
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	603b      	str	r3, [r7, #0]
 800559e:	4613      	mov	r3, r2
 80055a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055a2:	f7fd fdb3 	bl	800310c <HAL_GetTick>
 80055a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d001      	beq.n	80055bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80055b8:	2302      	movs	r3, #2
 80055ba:	e12a      	b.n	8005812 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_SPI_Transmit+0x36>
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e122      	b.n	8005812 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_SPI_Transmit+0x48>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e11b      	b.n	8005812 <HAL_SPI_Transmit+0x280>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2203      	movs	r2, #3
 80055e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	88fa      	ldrh	r2, [r7, #6]
 8005600:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005628:	d10f      	bne.n	800564a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005638:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005648:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b40      	cmp	r3, #64	@ 0x40
 8005656:	d007      	beq.n	8005668 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005670:	d152      	bne.n	8005718 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_SPI_Transmit+0xee>
 800567a:	8b7b      	ldrh	r3, [r7, #26]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d145      	bne.n	800570c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005684:	881a      	ldrh	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005690:	1c9a      	adds	r2, r3, #2
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056a4:	e032      	b.n	800570c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d112      	bne.n	80056da <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b8:	881a      	ldrh	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c4:	1c9a      	adds	r2, r3, #2
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056d8:	e018      	b.n	800570c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056da:	f7fd fd17 	bl	800310c <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d803      	bhi.n	80056f2 <HAL_SPI_Transmit+0x160>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d102      	bne.n	80056f8 <HAL_SPI_Transmit+0x166>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e082      	b.n	8005812 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1c7      	bne.n	80056a6 <HAL_SPI_Transmit+0x114>
 8005716:	e053      	b.n	80057c0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <HAL_SPI_Transmit+0x194>
 8005720:	8b7b      	ldrh	r3, [r7, #26]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d147      	bne.n	80057b6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	7812      	ldrb	r2, [r2, #0]
 8005732:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800574c:	e033      	b.n	80057b6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b02      	cmp	r3, #2
 800575a:	d113      	bne.n	8005784 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005782:	e018      	b.n	80057b6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005784:	f7fd fcc2 	bl	800310c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d803      	bhi.n	800579c <HAL_SPI_Transmit+0x20a>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579a:	d102      	bne.n	80057a2 <HAL_SPI_Transmit+0x210>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e02d      	b.n	8005812 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1c6      	bne.n	800574e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 fa59 	bl	8005c7c <SPI_EndRxTxTransaction>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005810:	2300      	movs	r3, #0
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b08a      	sub	sp, #40	@ 0x28
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
 8005826:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005828:	2301      	movs	r3, #1
 800582a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800582c:	f7fd fc6e 	bl	800310c <HAL_GetTick>
 8005830:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005838:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005840:	887b      	ldrh	r3, [r7, #2]
 8005842:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005844:	7ffb      	ldrb	r3, [r7, #31]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d00c      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x4a>
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005850:	d106      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d102      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x46>
 800585a:	7ffb      	ldrb	r3, [r7, #31]
 800585c:	2b04      	cmp	r3, #4
 800585e:	d001      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005860:	2302      	movs	r3, #2
 8005862:	e17f      	b.n	8005b64 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_SPI_TransmitReceive+0x5c>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <HAL_SPI_TransmitReceive+0x5c>
 8005870:	887b      	ldrh	r3, [r7, #2]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e174      	b.n	8005b64 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x6e>
 8005884:	2302      	movs	r3, #2
 8005886:	e16d      	b.n	8005b64 <HAL_SPI_TransmitReceive+0x34a>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b04      	cmp	r3, #4
 800589a:	d003      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2205      	movs	r2, #5
 80058a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	887a      	ldrh	r2, [r7, #2]
 80058b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	887a      	ldrh	r2, [r7, #2]
 80058ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	887a      	ldrh	r2, [r7, #2]
 80058c6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	887a      	ldrh	r2, [r7, #2]
 80058cc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e4:	2b40      	cmp	r3, #64	@ 0x40
 80058e6:	d007      	beq.n	80058f8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005900:	d17e      	bne.n	8005a00 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <HAL_SPI_TransmitReceive+0xf6>
 800590a:	8afb      	ldrh	r3, [r7, #22]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d16c      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005914:	881a      	ldrh	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005920:	1c9a      	adds	r2, r3, #2
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005934:	e059      	b.n	80059ea <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b02      	cmp	r3, #2
 8005942:	d11b      	bne.n	800597c <HAL_SPI_TransmitReceive+0x162>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d016      	beq.n	800597c <HAL_SPI_TransmitReceive+0x162>
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	2b01      	cmp	r3, #1
 8005952:	d113      	bne.n	800597c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005958:	881a      	ldrh	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005964:	1c9a      	adds	r2, r3, #2
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b01      	cmp	r3, #1
 8005988:	d119      	bne.n	80059be <HAL_SPI_TransmitReceive+0x1a4>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d014      	beq.n	80059be <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599e:	b292      	uxth	r2, r2
 80059a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a6:	1c9a      	adds	r2, r3, #2
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059ba:	2301      	movs	r3, #1
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059be:	f7fd fba5 	bl	800310c <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d80d      	bhi.n	80059ea <HAL_SPI_TransmitReceive+0x1d0>
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d4:	d009      	beq.n	80059ea <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e0bc      	b.n	8005b64 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1a0      	bne.n	8005936 <HAL_SPI_TransmitReceive+0x11c>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d19b      	bne.n	8005936 <HAL_SPI_TransmitReceive+0x11c>
 80059fe:	e082      	b.n	8005b06 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <HAL_SPI_TransmitReceive+0x1f4>
 8005a08:	8afb      	ldrh	r3, [r7, #22]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d171      	bne.n	8005af2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	330c      	adds	r3, #12
 8005a18:	7812      	ldrb	r2, [r2, #0]
 8005a1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a34:	e05d      	b.n	8005af2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d11c      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x264>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d017      	beq.n	8005a7e <HAL_SPI_TransmitReceive+0x264>
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d114      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	7812      	ldrb	r2, [r2, #0]
 8005a60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d119      	bne.n	8005ac0 <HAL_SPI_TransmitReceive+0x2a6>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d014      	beq.n	8005ac0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005abc:	2301      	movs	r3, #1
 8005abe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ac0:	f7fd fb24 	bl	800310c <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d803      	bhi.n	8005ad8 <HAL_SPI_TransmitReceive+0x2be>
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d102      	bne.n	8005ade <HAL_SPI_TransmitReceive+0x2c4>
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e038      	b.n	8005b64 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d19c      	bne.n	8005a36 <HAL_SPI_TransmitReceive+0x21c>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d197      	bne.n	8005a36 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b06:	6a3a      	ldr	r2, [r7, #32]
 8005b08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 f8b6 	bl	8005c7c <SPI_EndRxTxTransaction>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d008      	beq.n	8005b28 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e01d      	b.n	8005b64 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005b62:	2300      	movs	r3, #0
  }
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3728      	adds	r7, #40	@ 0x28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b7c:	f7fd fac6 	bl	800310c <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b84:	1a9b      	subs	r3, r3, r2
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	4413      	add	r3, r2
 8005b8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b8c:	f7fd fabe 	bl	800310c <HAL_GetTick>
 8005b90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b92:	4b39      	ldr	r3, [pc, #228]	@ (8005c78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	015b      	lsls	r3, r3, #5
 8005b98:	0d1b      	lsrs	r3, r3, #20
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ba2:	e054      	b.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005baa:	d050      	beq.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bac:	f7fd faae 	bl	800310c <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d902      	bls.n	8005bc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d13d      	bne.n	8005c3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bda:	d111      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005be4:	d004      	beq.n	8005bf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bee:	d107      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c08:	d10f      	bne.n	8005c2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e017      	b.n	8005c6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4013      	ands	r3, r2
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	bf0c      	ite	eq
 8005c5e:	2301      	moveq	r3, #1
 8005c60:	2300      	movne	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d19b      	bne.n	8005ba4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000000 	.word	0x20000000

08005c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	2102      	movs	r1, #2
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f7ff ff6a 	bl	8005b6c <SPI_WaitFlagStateUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d007      	beq.n	8005cae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca2:	f043 0220 	orr.w	r2, r3, #32
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e032      	b.n	8005d14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cae:	4b1b      	ldr	r3, [pc, #108]	@ (8005d1c <SPI_EndRxTxTransaction+0xa0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d20 <SPI_EndRxTxTransaction+0xa4>)
 8005cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb8:	0d5b      	lsrs	r3, r3, #21
 8005cba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ccc:	d112      	bne.n	8005cf4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2180      	movs	r1, #128	@ 0x80
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f7ff ff47 	bl	8005b6c <SPI_WaitFlagStateUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d016      	beq.n	8005d12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce8:	f043 0220 	orr.w	r2, r3, #32
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e00f      	b.n	8005d14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0a:	2b80      	cmp	r3, #128	@ 0x80
 8005d0c:	d0f2      	beq.n	8005cf4 <SPI_EndRxTxTransaction+0x78>
 8005d0e:	e000      	b.n	8005d12 <SPI_EndRxTxTransaction+0x96>
        break;
 8005d10:	bf00      	nop
  }

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20000000 	.word	0x20000000
 8005d20:	165e9f81 	.word	0x165e9f81

08005d24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d24:	b084      	sub	sp, #16
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	f107 001c 	add.w	r0, r7, #28
 8005d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d123      	bne.n	8005d86 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d42:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005d52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d105      	bne.n	8005d7a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 fae8 	bl	8007350 <USB_CoreReset>
 8005d80:	4603      	mov	r3, r0
 8005d82:	73fb      	strb	r3, [r7, #15]
 8005d84:	e01b      	b.n	8005dbe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f001 fadc 	bl	8007350 <USB_CoreReset>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d106      	bne.n	8005db2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	639a      	str	r2, [r3, #56]	@ 0x38
 8005db0:	e005      	b.n	8005dbe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005dbe:	7fbb      	ldrb	r3, [r7, #30]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d10b      	bne.n	8005ddc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f043 0206 	orr.w	r2, r3, #6
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f043 0220 	orr.w	r2, r3, #32
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005de8:	b004      	add	sp, #16
 8005dea:	4770      	bx	lr

08005dec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	4613      	mov	r3, r2
 8005df8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005dfa:	79fb      	ldrb	r3, [r7, #7]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d165      	bne.n	8005ecc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4a41      	ldr	r2, [pc, #260]	@ (8005f08 <USB_SetTurnaroundTime+0x11c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d906      	bls.n	8005e16 <USB_SetTurnaroundTime+0x2a>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4a40      	ldr	r2, [pc, #256]	@ (8005f0c <USB_SetTurnaroundTime+0x120>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d202      	bcs.n	8005e16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e10:	230f      	movs	r3, #15
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	e062      	b.n	8005edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4a3c      	ldr	r2, [pc, #240]	@ (8005f0c <USB_SetTurnaroundTime+0x120>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d306      	bcc.n	8005e2c <USB_SetTurnaroundTime+0x40>
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	4a3b      	ldr	r2, [pc, #236]	@ (8005f10 <USB_SetTurnaroundTime+0x124>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d202      	bcs.n	8005e2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e26:	230e      	movs	r3, #14
 8005e28:	617b      	str	r3, [r7, #20]
 8005e2a:	e057      	b.n	8005edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4a38      	ldr	r2, [pc, #224]	@ (8005f10 <USB_SetTurnaroundTime+0x124>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d306      	bcc.n	8005e42 <USB_SetTurnaroundTime+0x56>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4a37      	ldr	r2, [pc, #220]	@ (8005f14 <USB_SetTurnaroundTime+0x128>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d202      	bcs.n	8005e42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e3c:	230d      	movs	r3, #13
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	e04c      	b.n	8005edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4a33      	ldr	r2, [pc, #204]	@ (8005f14 <USB_SetTurnaroundTime+0x128>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d306      	bcc.n	8005e58 <USB_SetTurnaroundTime+0x6c>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	4a32      	ldr	r2, [pc, #200]	@ (8005f18 <USB_SetTurnaroundTime+0x12c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d802      	bhi.n	8005e58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e52:	230c      	movs	r3, #12
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	e041      	b.n	8005edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8005f18 <USB_SetTurnaroundTime+0x12c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d906      	bls.n	8005e6e <USB_SetTurnaroundTime+0x82>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4a2e      	ldr	r2, [pc, #184]	@ (8005f1c <USB_SetTurnaroundTime+0x130>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d802      	bhi.n	8005e6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e68:	230b      	movs	r3, #11
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e036      	b.n	8005edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4a2a      	ldr	r2, [pc, #168]	@ (8005f1c <USB_SetTurnaroundTime+0x130>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d906      	bls.n	8005e84 <USB_SetTurnaroundTime+0x98>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4a29      	ldr	r2, [pc, #164]	@ (8005f20 <USB_SetTurnaroundTime+0x134>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d802      	bhi.n	8005e84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e7e:	230a      	movs	r3, #10
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	e02b      	b.n	8005edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4a26      	ldr	r2, [pc, #152]	@ (8005f20 <USB_SetTurnaroundTime+0x134>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d906      	bls.n	8005e9a <USB_SetTurnaroundTime+0xae>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4a25      	ldr	r2, [pc, #148]	@ (8005f24 <USB_SetTurnaroundTime+0x138>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d202      	bcs.n	8005e9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e94:	2309      	movs	r3, #9
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e020      	b.n	8005edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4a21      	ldr	r2, [pc, #132]	@ (8005f24 <USB_SetTurnaroundTime+0x138>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d306      	bcc.n	8005eb0 <USB_SetTurnaroundTime+0xc4>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	4a20      	ldr	r2, [pc, #128]	@ (8005f28 <USB_SetTurnaroundTime+0x13c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d802      	bhi.n	8005eb0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005eaa:	2308      	movs	r3, #8
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	e015      	b.n	8005edc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8005f28 <USB_SetTurnaroundTime+0x13c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d906      	bls.n	8005ec6 <USB_SetTurnaroundTime+0xda>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4a1c      	ldr	r2, [pc, #112]	@ (8005f2c <USB_SetTurnaroundTime+0x140>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d202      	bcs.n	8005ec6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ec0:	2307      	movs	r3, #7
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e00a      	b.n	8005edc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005ec6:	2306      	movs	r3, #6
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	e007      	b.n	8005edc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d102      	bne.n	8005ed8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ed2:	2309      	movs	r3, #9
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	e001      	b.n	8005edc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ed8:	2309      	movs	r3, #9
 8005eda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	029b      	lsls	r3, r3, #10
 8005ef0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	371c      	adds	r7, #28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	00d8acbf 	.word	0x00d8acbf
 8005f0c:	00e4e1c0 	.word	0x00e4e1c0
 8005f10:	00f42400 	.word	0x00f42400
 8005f14:	01067380 	.word	0x01067380
 8005f18:	011a499f 	.word	0x011a499f
 8005f1c:	01312cff 	.word	0x01312cff
 8005f20:	014ca43f 	.word	0x014ca43f
 8005f24:	016e3600 	.word	0x016e3600
 8005f28:	01a6ab1f 	.word	0x01a6ab1f
 8005f2c:	01e84800 	.word	0x01e84800

08005f30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f043 0201 	orr.w	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f023 0201 	bic.w	r2, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d115      	bne.n	8005fc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fa2:	200a      	movs	r0, #10
 8005fa4:	f7fd f8be 	bl	8003124 <HAL_Delay>
      ms += 10U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	330a      	adds	r3, #10
 8005fac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f001 f93f 	bl	8007232 <USB_GetMode>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d01e      	beq.n	8005ff8 <USB_SetCurrentMode+0x84>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fbe:	d9f0      	bls.n	8005fa2 <USB_SetCurrentMode+0x2e>
 8005fc0:	e01a      	b.n	8005ff8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d115      	bne.n	8005ff4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fd4:	200a      	movs	r0, #10
 8005fd6:	f7fd f8a5 	bl	8003124 <HAL_Delay>
      ms += 10U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	330a      	adds	r3, #10
 8005fde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 f926 	bl	8007232 <USB_GetMode>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <USB_SetCurrentMode+0x84>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ff0:	d9f0      	bls.n	8005fd4 <USB_SetCurrentMode+0x60>
 8005ff2:	e001      	b.n	8005ff8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e005      	b.n	8006004 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2bc8      	cmp	r3, #200	@ 0xc8
 8005ffc:	d101      	bne.n	8006002 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800600c:	b084      	sub	sp, #16
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800601a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006026:	2300      	movs	r3, #0
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	e009      	b.n	8006040 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	3340      	adds	r3, #64	@ 0x40
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	2200      	movs	r2, #0
 8006038:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	3301      	adds	r3, #1
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b0e      	cmp	r3, #14
 8006044:	d9f2      	bls.n	800602c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006046:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800604a:	2b00      	cmp	r3, #0
 800604c:	d11c      	bne.n	8006088 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800605c:	f043 0302 	orr.w	r3, r3, #2
 8006060:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006066:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006072:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	639a      	str	r2, [r3, #56]	@ 0x38
 8006086:	e00b      	b.n	80060a0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006098:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060a6:	461a      	mov	r2, r3
 80060a8:	2300      	movs	r3, #0
 80060aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d10d      	bne.n	80060d0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d104      	bne.n	80060c6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060bc:	2100      	movs	r1, #0
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f968 	bl	8006394 <USB_SetDevSpeed>
 80060c4:	e008      	b.n	80060d8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060c6:	2101      	movs	r1, #1
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f963 	bl	8006394 <USB_SetDevSpeed>
 80060ce:	e003      	b.n	80060d8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060d0:	2103      	movs	r1, #3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f95e 	bl	8006394 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060d8:	2110      	movs	r1, #16
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8fa 	bl	80062d4 <USB_FlushTxFifo>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f924 	bl	8006338 <USB_FlushRxFifo>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006100:	461a      	mov	r2, r3
 8006102:	2300      	movs	r3, #0
 8006104:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800610c:	461a      	mov	r2, r3
 800610e:	2300      	movs	r3, #0
 8006110:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006118:	461a      	mov	r2, r3
 800611a:	2300      	movs	r3, #0
 800611c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800611e:	2300      	movs	r3, #0
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	e043      	b.n	80061ac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006136:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800613a:	d118      	bne.n	800616e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800614e:	461a      	mov	r2, r3
 8006150:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e013      	b.n	8006180 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006164:	461a      	mov	r2, r3
 8006166:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	e008      	b.n	8006180 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800617a:	461a      	mov	r2, r3
 800617c:	2300      	movs	r3, #0
 800617e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800618c:	461a      	mov	r2, r3
 800618e:	2300      	movs	r3, #0
 8006190:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800619e:	461a      	mov	r2, r3
 80061a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80061a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3301      	adds	r3, #1
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80061b0:	461a      	mov	r2, r3
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d3b5      	bcc.n	8006124 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	e043      	b.n	8006246 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061d4:	d118      	bne.n	8006208 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e8:	461a      	mov	r2, r3
 80061ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	e013      	b.n	800621a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fe:	461a      	mov	r2, r3
 8006200:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	e008      	b.n	800621a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006214:	461a      	mov	r2, r3
 8006216:	2300      	movs	r3, #0
 8006218:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006226:	461a      	mov	r2, r3
 8006228:	2300      	movs	r3, #0
 800622a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006238:	461a      	mov	r2, r3
 800623a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800623e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	3301      	adds	r3, #1
 8006244:	613b      	str	r3, [r7, #16]
 8006246:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800624a:	461a      	mov	r2, r3
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	4293      	cmp	r3, r2
 8006250:	d3b5      	bcc.n	80061be <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006264:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006272:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006274:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006278:	2b00      	cmp	r3, #0
 800627a:	d105      	bne.n	8006288 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f043 0210 	orr.w	r2, r3, #16
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699a      	ldr	r2, [r3, #24]
 800628c:	4b10      	ldr	r3, [pc, #64]	@ (80062d0 <USB_DevInit+0x2c4>)
 800628e:	4313      	orrs	r3, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006294:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006298:	2b00      	cmp	r3, #0
 800629a:	d005      	beq.n	80062a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	f043 0208 	orr.w	r2, r3, #8
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d107      	bne.n	80062c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062b8:	f043 0304 	orr.w	r3, r3, #4
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062cc:	b004      	add	sp, #16
 80062ce:	4770      	bx	lr
 80062d0:	803c3800 	.word	0x803c3800

080062d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3301      	adds	r3, #1
 80062e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062ee:	d901      	bls.n	80062f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e01b      	b.n	800632c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	daf2      	bge.n	80062e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	019b      	lsls	r3, r3, #6
 8006304:	f043 0220 	orr.w	r2, r3, #32
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3301      	adds	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006318:	d901      	bls.n	800631e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e006      	b.n	800632c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b20      	cmp	r3, #32
 8006328:	d0f0      	beq.n	800630c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006350:	d901      	bls.n	8006356 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e018      	b.n	8006388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	daf2      	bge.n	8006344 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2210      	movs	r2, #16
 8006366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3301      	adds	r3, #1
 800636c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006374:	d901      	bls.n	800637a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e006      	b.n	8006388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0310 	and.w	r3, r3, #16
 8006382:	2b10      	cmp	r3, #16
 8006384:	d0f0      	beq.n	8006368 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	68f9      	ldr	r1, [r7, #12]
 80063b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063b4:	4313      	orrs	r3, r2
 80063b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b087      	sub	sp, #28
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 0306 	and.w	r3, r3, #6
 80063de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d102      	bne.n	80063ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]
 80063ea:	e00a      	b.n	8006402 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d002      	beq.n	80063f8 <USB_GetDevSpeed+0x32>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2b06      	cmp	r3, #6
 80063f6:	d102      	bne.n	80063fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063f8:	2302      	movs	r3, #2
 80063fa:	75fb      	strb	r3, [r7, #23]
 80063fc:	e001      	b.n	8006402 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063fe:	230f      	movs	r3, #15
 8006400:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006402:	7dfb      	ldrb	r3, [r7, #23]
}
 8006404:	4618      	mov	r0, r3
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	785b      	ldrb	r3, [r3, #1]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d13a      	bne.n	80064a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	2101      	movs	r1, #1
 800643e:	fa01 f303 	lsl.w	r3, r1, r3
 8006442:	b29b      	uxth	r3, r3
 8006444:	68f9      	ldr	r1, [r7, #12]
 8006446:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800644a:	4313      	orrs	r3, r2
 800644c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d155      	bne.n	8006510 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	791b      	ldrb	r3, [r3, #4]
 800647e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006480:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	059b      	lsls	r3, r3, #22
 8006486:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006488:	4313      	orrs	r3, r2
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	440a      	add	r2, r1
 8006492:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800649a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	e036      	b.n	8006510 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a8:	69da      	ldr	r2, [r3, #28]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	2101      	movs	r1, #1
 80064b4:	fa01 f303 	lsl.w	r3, r1, r3
 80064b8:	041b      	lsls	r3, r3, #16
 80064ba:	68f9      	ldr	r1, [r7, #12]
 80064bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064c0:	4313      	orrs	r3, r2
 80064c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d11a      	bne.n	8006510 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	791b      	ldrb	r3, [r3, #4]
 80064f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064f6:	430b      	orrs	r3, r1
 80064f8:	4313      	orrs	r3, r2
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	0151      	lsls	r1, r2, #5
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	440a      	add	r2, r1
 8006502:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006506:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800650a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800650e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
	...

08006520 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d161      	bne.n	8006600 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800654e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006552:	d11f      	bne.n	8006594 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	440a      	add	r2, r1
 800656a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800656e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006572:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800658e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006592:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800659a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	f003 030f 	and.w	r3, r3, #15
 80065a4:	2101      	movs	r1, #1
 80065a6:	fa01 f303 	lsl.w	r3, r1, r3
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	43db      	mvns	r3, r3
 80065ae:	68f9      	ldr	r1, [r7, #12]
 80065b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065b4:	4013      	ands	r3, r2
 80065b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065be:	69da      	ldr	r2, [r3, #28]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	2101      	movs	r1, #1
 80065ca:	fa01 f303 	lsl.w	r3, r1, r3
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	43db      	mvns	r3, r3
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065d8:	4013      	ands	r3, r2
 80065da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	0159      	lsls	r1, r3, #5
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	440b      	add	r3, r1
 80065f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f6:	4619      	mov	r1, r3
 80065f8:	4b35      	ldr	r3, [pc, #212]	@ (80066d0 <USB_DeactivateEndpoint+0x1b0>)
 80065fa:	4013      	ands	r3, r2
 80065fc:	600b      	str	r3, [r1, #0]
 80065fe:	e060      	b.n	80066c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006612:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006616:	d11f      	bne.n	8006658 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	440a      	add	r2, r1
 800662e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006632:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006636:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006652:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	2101      	movs	r1, #1
 800666a:	fa01 f303 	lsl.w	r3, r1, r3
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	43db      	mvns	r3, r3
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006678:	4013      	ands	r3, r2
 800667a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	2101      	movs	r1, #1
 800668e:	fa01 f303 	lsl.w	r3, r1, r3
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	43db      	mvns	r3, r3
 8006696:	68f9      	ldr	r1, [r7, #12]
 8006698:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800669c:	4013      	ands	r3, r2
 800669e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	0159      	lsls	r1, r3, #5
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	440b      	add	r3, r1
 80066b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ba:	4619      	mov	r1, r3
 80066bc:	4b05      	ldr	r3, [pc, #20]	@ (80066d4 <USB_DeactivateEndpoint+0x1b4>)
 80066be:	4013      	ands	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	ec337800 	.word	0xec337800
 80066d4:	eff37800 	.word	0xeff37800

080066d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	@ 0x28
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	4613      	mov	r3, r2
 80066e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	785b      	ldrb	r3, [r3, #1]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	f040 817f 	bne.w	80069f8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d132      	bne.n	8006768 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	0151      	lsls	r1, r2, #5
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	440a      	add	r2, r1
 8006718:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800671c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006720:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006724:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006740:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006744:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	0151      	lsls	r1, r2, #5
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	440a      	add	r2, r1
 800675c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006760:	0cdb      	lsrs	r3, r3, #19
 8006762:	04db      	lsls	r3, r3, #19
 8006764:	6113      	str	r3, [r2, #16]
 8006766:	e097      	b.n	8006898 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	440a      	add	r2, r1
 800677e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006782:	0cdb      	lsrs	r3, r3, #19
 8006784:	04db      	lsls	r3, r3, #19
 8006786:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067a2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80067a6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067aa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d11a      	bne.n	80067e8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	691a      	ldr	r2, [r3, #16]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d903      	bls.n	80067c6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067e4:	6113      	str	r3, [r2, #16]
 80067e6:	e044      	b.n	8006872 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	4413      	add	r3, r2
 80067f2:	1e5a      	subs	r2, r3, #1
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	8afb      	ldrh	r3, [r7, #22]
 800680e:	04d9      	lsls	r1, r3, #19
 8006810:	4ba4      	ldr	r3, [pc, #656]	@ (8006aa4 <USB_EPStartXfer+0x3cc>)
 8006812:	400b      	ands	r3, r1
 8006814:	69b9      	ldr	r1, [r7, #24]
 8006816:	0148      	lsls	r0, r1, #5
 8006818:	69f9      	ldr	r1, [r7, #28]
 800681a:	4401      	add	r1, r0
 800681c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006820:	4313      	orrs	r3, r2
 8006822:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	791b      	ldrb	r3, [r3, #4]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d122      	bne.n	8006872 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	440a      	add	r2, r1
 8006842:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006846:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800684a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	8afb      	ldrh	r3, [r7, #22]
 800685c:	075b      	lsls	r3, r3, #29
 800685e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006862:	69b9      	ldr	r1, [r7, #24]
 8006864:	0148      	lsls	r0, r1, #5
 8006866:	69f9      	ldr	r1, [r7, #28]
 8006868:	4401      	add	r1, r0
 800686a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800686e:	4313      	orrs	r3, r2
 8006870:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800687e:	691a      	ldr	r2, [r3, #16]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006888:	69b9      	ldr	r1, [r7, #24]
 800688a:	0148      	lsls	r0, r1, #5
 800688c:	69f9      	ldr	r1, [r7, #28]
 800688e:	4401      	add	r1, r0
 8006890:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006894:	4313      	orrs	r3, r2
 8006896:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006898:	79fb      	ldrb	r3, [r7, #7]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d14b      	bne.n	8006936 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d009      	beq.n	80068ba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b2:	461a      	mov	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	791b      	ldrb	r3, [r3, #4]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d128      	bne.n	8006914 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d110      	bne.n	80068f4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	0151      	lsls	r1, r2, #5
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	440a      	add	r2, r1
 80068e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	e00f      	b.n	8006914 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	440a      	add	r2, r1
 800690a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800690e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006912:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	440a      	add	r2, r1
 800692a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800692e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	e166      	b.n	8006c04 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	69fa      	ldr	r2, [r7, #28]
 800694a:	440a      	add	r2, r1
 800694c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006950:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006954:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	791b      	ldrb	r3, [r3, #4]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d015      	beq.n	800698a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 814e 	beq.w	8006c04 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800696e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	2101      	movs	r1, #1
 800697a:	fa01 f303 	lsl.w	r3, r1, r3
 800697e:	69f9      	ldr	r1, [r7, #28]
 8006980:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006984:	4313      	orrs	r3, r2
 8006986:	634b      	str	r3, [r1, #52]	@ 0x34
 8006988:	e13c      	b.n	8006c04 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006996:	2b00      	cmp	r3, #0
 8006998:	d110      	bne.n	80069bc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	0151      	lsls	r1, r2, #5
 80069ac:	69fa      	ldr	r2, [r7, #28]
 80069ae:	440a      	add	r2, r1
 80069b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	e00f      	b.n	80069dc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	68d9      	ldr	r1, [r3, #12]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	781a      	ldrb	r2, [r3, #0]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	b298      	uxth	r0, r3
 80069ea:	79fb      	ldrb	r3, [r7, #7]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	4603      	mov	r3, r0
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f9b9 	bl	8006d68 <USB_WritePacket>
 80069f6:	e105      	b.n	8006c04 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	0151      	lsls	r1, r2, #5
 8006a0a:	69fa      	ldr	r2, [r7, #28]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a12:	0cdb      	lsrs	r3, r3, #19
 8006a14:	04db      	lsls	r3, r3, #19
 8006a16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	0151      	lsls	r1, r2, #5
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	440a      	add	r2, r1
 8006a2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a32:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006a36:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a3a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d132      	bne.n	8006aa8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a70:	69b9      	ldr	r1, [r7, #24]
 8006a72:	0148      	lsls	r0, r1, #5
 8006a74:	69f9      	ldr	r1, [r7, #28]
 8006a76:	4401      	add	r1, r0
 8006a78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a9e:	6113      	str	r3, [r2, #16]
 8006aa0:	e062      	b.n	8006b68 <USB_EPStartXfer+0x490>
 8006aa2:	bf00      	nop
 8006aa4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d123      	bne.n	8006af8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006abc:	691a      	ldr	r2, [r3, #16]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ac6:	69b9      	ldr	r1, [r7, #24]
 8006ac8:	0148      	lsls	r0, r1, #5
 8006aca:	69f9      	ldr	r1, [r7, #28]
 8006acc:	4401      	add	r1, r0
 8006ace:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006af0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006af4:	6113      	str	r3, [r2, #16]
 8006af6:	e037      	b.n	8006b68 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	4413      	add	r3, r2
 8006b02:	1e5a      	subs	r2, r3, #1
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	8afa      	ldrh	r2, [r7, #22]
 8006b14:	fb03 f202 	mul.w	r2, r3, r2
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	8afb      	ldrh	r3, [r7, #22]
 8006b2c:	04d9      	lsls	r1, r3, #19
 8006b2e:	4b38      	ldr	r3, [pc, #224]	@ (8006c10 <USB_EPStartXfer+0x538>)
 8006b30:	400b      	ands	r3, r1
 8006b32:	69b9      	ldr	r1, [r7, #24]
 8006b34:	0148      	lsls	r0, r1, #5
 8006b36:	69f9      	ldr	r1, [r7, #28]
 8006b38:	4401      	add	r1, r0
 8006b3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b4e:	691a      	ldr	r2, [r3, #16]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b58:	69b9      	ldr	r1, [r7, #24]
 8006b5a:	0148      	lsls	r0, r1, #5
 8006b5c:	69f9      	ldr	r1, [r7, #28]
 8006b5e:	4401      	add	r1, r0
 8006b60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b64:	4313      	orrs	r3, r2
 8006b66:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006b68:	79fb      	ldrb	r3, [r7, #7]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d10d      	bne.n	8006b8a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d009      	beq.n	8006b8a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	68d9      	ldr	r1, [r3, #12]
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b86:	460a      	mov	r2, r1
 8006b88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	791b      	ldrb	r3, [r3, #4]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d128      	bne.n	8006be4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d110      	bne.n	8006bc4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	0151      	lsls	r1, r2, #5
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	440a      	add	r2, r1
 8006bb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	e00f      	b.n	8006be4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	0151      	lsls	r1, r2, #5
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	440a      	add	r2, r1
 8006bda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006be2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bfe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3720      	adds	r7, #32
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	1ff80000 	.word	0x1ff80000

08006c14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	785b      	ldrb	r3, [r3, #1]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d14a      	bne.n	8006cc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c4a:	f040 8086 	bne.w	8006d5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	7812      	ldrb	r2, [r2, #0]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	7812      	ldrb	r2, [r2, #0]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d902      	bls.n	8006cac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8006caa:	e056      	b.n	8006d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cc4:	d0e7      	beq.n	8006c96 <USB_EPStopXfer+0x82>
 8006cc6:	e048      	b.n	8006d5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ce0:	d13b      	bne.n	8006d5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	7812      	ldrb	r2, [r2, #0]
 8006cf6:	0151      	lsls	r1, r2, #5
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	7812      	ldrb	r2, [r2, #0]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d902      	bls.n	8006d40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d3e:	e00c      	b.n	8006d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d58:	d0e7      	beq.n	8006d2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	371c      	adds	r7, #28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b089      	sub	sp, #36	@ 0x24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4611      	mov	r1, r2
 8006d74:	461a      	mov	r2, r3
 8006d76:	460b      	mov	r3, r1
 8006d78:	71fb      	strb	r3, [r7, #7]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d123      	bne.n	8006dd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d8e:	88bb      	ldrh	r3, [r7, #4]
 8006d90:	3303      	adds	r3, #3
 8006d92:	089b      	lsrs	r3, r3, #2
 8006d94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d96:	2300      	movs	r3, #0
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	e018      	b.n	8006dce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d9c:	79fb      	ldrb	r3, [r7, #7]
 8006d9e:	031a      	lsls	r2, r3, #12
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006da8:	461a      	mov	r2, r3
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	3301      	adds	r3, #1
 8006db4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	3301      	adds	r3, #1
 8006dba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d3e2      	bcc.n	8006d9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3724      	adds	r7, #36	@ 0x24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b08b      	sub	sp, #44	@ 0x2c
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4613      	mov	r3, r2
 8006df0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006dfa:	88fb      	ldrh	r3, [r7, #6]
 8006dfc:	089b      	lsrs	r3, r3, #2
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e02:	88fb      	ldrh	r3, [r7, #6]
 8006e04:	f003 0303 	and.w	r3, r3, #3
 8006e08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	623b      	str	r3, [r7, #32]
 8006e0e:	e014      	b.n	8006e3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1e:	3301      	adds	r3, #1
 8006e20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	3301      	adds	r3, #1
 8006e26:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	3301      	adds	r3, #1
 8006e32:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	3301      	adds	r3, #1
 8006e38:	623b      	str	r3, [r7, #32]
 8006e3a:	6a3a      	ldr	r2, [r7, #32]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d3e6      	bcc.n	8006e10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e42:	8bfb      	ldrh	r3, [r7, #30]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01e      	beq.n	8006e86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e52:	461a      	mov	r2, r3
 8006e54:	f107 0310 	add.w	r3, r7, #16
 8006e58:	6812      	ldr	r2, [r2, #0]
 8006e5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	701a      	strb	r2, [r3, #0]
      i++;
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	3301      	adds	r3, #1
 8006e72:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	3301      	adds	r3, #1
 8006e78:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006e7a:	8bfb      	ldrh	r3, [r7, #30]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e80:	8bfb      	ldrh	r3, [r7, #30]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1ea      	bne.n	8006e5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	372c      	adds	r7, #44	@ 0x2c
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	785b      	ldrb	r3, [r3, #1]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d12c      	bne.n	8006f0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	db12      	blt.n	8006ee8 <USB_EPSetStall+0x54>
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00f      	beq.n	8006ee8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	0151      	lsls	r1, r2, #5
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	440a      	add	r2, r1
 8006ede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ee2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ee6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	0151      	lsls	r1, r2, #5
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	440a      	add	r2, r1
 8006efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	e02b      	b.n	8006f62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	db12      	blt.n	8006f42 <USB_EPSetStall+0xae>
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00f      	beq.n	8006f42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	785b      	ldrb	r3, [r3, #1]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d128      	bne.n	8006fde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fa6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006faa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	791b      	ldrb	r3, [r3, #4]
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d003      	beq.n	8006fbc <USB_EPClearStall+0x4c>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	791b      	ldrb	r3, [r3, #4]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d138      	bne.n	800702e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	0151      	lsls	r1, r2, #5
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	440a      	add	r2, r1
 8006fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	e027      	b.n	800702e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ff8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ffc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	791b      	ldrb	r3, [r3, #4]
 8007002:	2b03      	cmp	r3, #3
 8007004:	d003      	beq.n	800700e <USB_EPClearStall+0x9e>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	791b      	ldrb	r3, [r3, #4]
 800700a:	2b02      	cmp	r3, #2
 800700c:	d10f      	bne.n	800702e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	440a      	add	r2, r1
 8007024:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800702c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800705a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800705e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007070:	68f9      	ldr	r1, [r7, #12]
 8007072:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007076:	4313      	orrs	r3, r2
 8007078:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80070a2:	f023 0303 	bic.w	r3, r3, #3
 80070a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070b6:	f023 0302 	bic.w	r3, r3, #2
 80070ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80070e4:	f023 0303 	bic.w	r3, r3, #3
 80070e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070f8:	f043 0302 	orr.w	r3, r3, #2
 80070fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4013      	ands	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007124:	68fb      	ldr	r3, [r7, #12]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	4013      	ands	r3, r2
 8007154:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	0c1b      	lsrs	r3, r3, #16
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	4013      	ands	r3, r2
 8007188:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	b29b      	uxth	r3, r3
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800719a:	b480      	push	{r7}
 800719c:	b085      	sub	sp, #20
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	4013      	ands	r3, r2
 80071c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071c8:	68bb      	ldr	r3, [r7, #8]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b087      	sub	sp, #28
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	fa22 f303 	lsr.w	r3, r2, r3
 8007206:	01db      	lsls	r3, r3, #7
 8007208:	b2db      	uxtb	r3, r3
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4013      	ands	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007224:	68bb      	ldr	r3, [r7, #8]
}
 8007226:	4618      	mov	r0, r3
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	f003 0301 	and.w	r3, r3, #1
}
 8007242:	4618      	mov	r0, r3
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007268:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800726c:	f023 0307 	bic.w	r3, r3, #7
 8007270:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007284:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	460b      	mov	r3, r1
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	333c      	adds	r3, #60	@ 0x3c
 80072aa:	3304      	adds	r3, #4
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	4a26      	ldr	r2, [pc, #152]	@ (800734c <USB_EP0_OutStart+0xb8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d90a      	bls.n	80072ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072c8:	d101      	bne.n	80072ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e037      	b.n	800733e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d4:	461a      	mov	r2, r3
 80072d6:	2300      	movs	r3, #0
 80072d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072fc:	f043 0318 	orr.w	r3, r3, #24
 8007300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007310:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007314:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007316:	7afb      	ldrb	r3, [r7, #11]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d10f      	bne.n	800733c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007322:	461a      	mov	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007336:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800733a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	4f54300a 	.word	0x4f54300a

08007350 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007368:	d901      	bls.n	800736e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e01b      	b.n	80073a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	daf2      	bge.n	800735c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f043 0201 	orr.w	r2, r3, #1
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3301      	adds	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007392:	d901      	bls.n	8007398 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e006      	b.n	80073a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d0f0      	beq.n	8007386 <USB_CoreReset+0x36>

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
	...

080073b4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80073c0:	2054      	movs	r0, #84	@ 0x54
 80073c2:	f002 fb0f 	bl	80099e4 <USBD_static_malloc>
 80073c6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d109      	bne.n	80073e2 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	32b0      	adds	r2, #176	@ 0xb0
 80073d8:	2100      	movs	r1, #0
 80073da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80073de:	2302      	movs	r3, #2
 80073e0:	e08b      	b.n	80074fa <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	32b0      	adds	r2, #176	@ 0xb0
 80073ec:	68f9      	ldr	r1, [r7, #12]
 80073ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	32b0      	adds	r2, #176	@ 0xb0
 80073fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	7c1b      	ldrb	r3, [r3, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d11b      	bne.n	8007446 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800740e:	4b3d      	ldr	r3, [pc, #244]	@ (8007504 <USBD_CUSTOM_HID_Init+0x150>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	f003 020f 	and.w	r2, r3, #15
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	440b      	add	r3, r1
 8007422:	3326      	adds	r3, #38	@ 0x26
 8007424:	2205      	movs	r2, #5
 8007426:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007428:	4b37      	ldr	r3, [pc, #220]	@ (8007508 <USBD_CUSTOM_HID_Init+0x154>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	f003 020f 	and.w	r2, r3, #15
 8007430:	6879      	ldr	r1, [r7, #4]
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	440b      	add	r3, r1
 800743c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007440:	2205      	movs	r2, #5
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	e01a      	b.n	800747c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007446:	4b2f      	ldr	r3, [pc, #188]	@ (8007504 <USBD_CUSTOM_HID_Init+0x150>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	f003 020f 	and.w	r2, r3, #15
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	4613      	mov	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	440b      	add	r3, r1
 800745a:	3326      	adds	r3, #38	@ 0x26
 800745c:	2205      	movs	r2, #5
 800745e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007460:	4b29      	ldr	r3, [pc, #164]	@ (8007508 <USBD_CUSTOM_HID_Init+0x154>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	f003 020f 	and.w	r2, r3, #15
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	440b      	add	r3, r1
 8007474:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007478:	2205      	movs	r2, #5
 800747a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800747c:	4b21      	ldr	r3, [pc, #132]	@ (8007504 <USBD_CUSTOM_HID_Init+0x150>)
 800747e:	7819      	ldrb	r1, [r3, #0]
 8007480:	2302      	movs	r3, #2
 8007482:	2203      	movs	r2, #3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f002 f99c 	bl	80097c2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800748a:	4b1e      	ldr	r3, [pc, #120]	@ (8007504 <USBD_CUSTOM_HID_Init+0x150>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	f003 020f 	and.w	r2, r3, #15
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	3324      	adds	r3, #36	@ 0x24
 80074a0:	2201      	movs	r2, #1
 80074a2:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80074a4:	4b18      	ldr	r3, [pc, #96]	@ (8007508 <USBD_CUSTOM_HID_Init+0x154>)
 80074a6:	7819      	ldrb	r1, [r3, #0]
 80074a8:	2302      	movs	r3, #2
 80074aa:	2203      	movs	r2, #3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f002 f988 	bl	80097c2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80074b2:	4b15      	ldr	r3, [pc, #84]	@ (8007508 <USBD_CUSTOM_HID_Init+0x154>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	f003 020f 	and.w	r2, r3, #15
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80074ca:	2201      	movs	r2, #1
 80074cc:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	33b0      	adds	r3, #176	@ 0xb0
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80074ea:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <USBD_CUSTOM_HID_Init+0x154>)
 80074ec:	7819      	ldrb	r1, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	2340      	movs	r3, #64	@ 0x40
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f002 fa54 	bl	80099a0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20000086 	.word	0x20000086
 8007508:	20000087 	.word	0x20000087

0800750c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8007518:	4b37      	ldr	r3, [pc, #220]	@ (80075f8 <USBD_CUSTOM_HID_DeInit+0xec>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f002 f975 	bl	800980e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8007524:	4b34      	ldr	r3, [pc, #208]	@ (80075f8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	f003 020f 	and.w	r2, r3, #15
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	440b      	add	r3, r1
 8007538:	3324      	adds	r3, #36	@ 0x24
 800753a:	2200      	movs	r2, #0
 800753c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800753e:	4b2e      	ldr	r3, [pc, #184]	@ (80075f8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	f003 020f 	and.w	r2, r3, #15
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	440b      	add	r3, r1
 8007552:	3326      	adds	r3, #38	@ 0x26
 8007554:	2200      	movs	r2, #0
 8007556:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8007558:	4b28      	ldr	r3, [pc, #160]	@ (80075fc <USBD_CUSTOM_HID_DeInit+0xf0>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f002 f955 	bl	800980e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8007564:	4b25      	ldr	r3, [pc, #148]	@ (80075fc <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	f003 020f 	and.w	r2, r3, #15
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	440b      	add	r3, r1
 8007578:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800757c:	2200      	movs	r2, #0
 800757e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8007580:	4b1e      	ldr	r3, [pc, #120]	@ (80075fc <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	f003 020f 	and.w	r2, r3, #15
 8007588:	6879      	ldr	r1, [r7, #4]
 800758a:	4613      	mov	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	440b      	add	r3, r1
 8007594:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007598:	2200      	movs	r2, #0
 800759a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	32b0      	adds	r2, #176	@ 0xb0
 80075a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01f      	beq.n	80075ee <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	33b0      	adds	r3, #176	@ 0xb0
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	32b0      	adds	r2, #176	@ 0xb0
 80075cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f002 fa15 	bl	8009a00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	32b0      	adds	r2, #176	@ 0xb0
 80075e0:	2100      	movs	r1, #0
 80075e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	20000086 	.word	0x20000086
 80075fc:	20000087 	.word	0x20000087

08007600 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	32b0      	adds	r2, #176	@ 0xb0
 8007614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007618:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8007630:	2303      	movs	r3, #3
 8007632:	e102      	b.n	800783a <USBD_CUSTOM_HID_Setup+0x23a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800763c:	2b00      	cmp	r3, #0
 800763e:	d056      	beq.n	80076ee <USBD_CUSTOM_HID_Setup+0xee>
 8007640:	2b20      	cmp	r3, #32
 8007642:	f040 80f2 	bne.w	800782a <USBD_CUSTOM_HID_Setup+0x22a>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	3b02      	subs	r3, #2
 800764c:	2b09      	cmp	r3, #9
 800764e:	d846      	bhi.n	80076de <USBD_CUSTOM_HID_Setup+0xde>
 8007650:	a201      	add	r2, pc, #4	@ (adr r2, 8007658 <USBD_CUSTOM_HID_Setup+0x58>)
 8007652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007656:	bf00      	nop
 8007658:	080076b1 	.word	0x080076b1
 800765c:	0800768f 	.word	0x0800768f
 8007660:	080076df 	.word	0x080076df
 8007664:	080076df 	.word	0x080076df
 8007668:	080076df 	.word	0x080076df
 800766c:	080076df 	.word	0x080076df
 8007670:	080076df 	.word	0x080076df
 8007674:	080076c1 	.word	0x080076c1
 8007678:	0800769f 	.word	0x0800769f
 800767c:	08007681 	.word	0x08007681
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	885b      	ldrh	r3, [r3, #2]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	461a      	mov	r2, r3
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 800768c:	e02e      	b.n	80076ec <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	3340      	adds	r3, #64	@ 0x40
 8007692:	2201      	movs	r2, #1
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 fcaa 	bl	8008ff0 <USBD_CtlSendData>
          break;
 800769c:	e026      	b.n	80076ec <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	885b      	ldrh	r3, [r3, #2]
 80076a2:	0a1b      	lsrs	r3, r3, #8
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 80076ae:	e01d      	b.n	80076ec <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	3344      	adds	r3, #68	@ 0x44
 80076b4:	2201      	movs	r2, #1
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 fc99 	bl	8008ff0 <USBD_CtlSendData>
          break;
 80076be:	e015      	b.n	80076ec <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	2201      	movs	r2, #1
 80076c4:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80076c6:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	88db      	ldrh	r3, [r3, #6]
 80076cc:	2b40      	cmp	r3, #64	@ 0x40
 80076ce:	bf28      	it	cs
 80076d0:	2340      	movcs	r3, #64	@ 0x40
 80076d2:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80076d4:	461a      	mov	r2, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f001 fcb6 	bl	8009048 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 80076dc:	e006      	b.n	80076ec <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 fc08 	bl	8008ef6 <USBD_CtlError>
          ret = USBD_FAIL;
 80076e6:	2303      	movs	r3, #3
 80076e8:	75fb      	strb	r3, [r7, #23]
          break;
 80076ea:	bf00      	nop
      }
      break;
 80076ec:	e0a4      	b.n	8007838 <USBD_CUSTOM_HID_Setup+0x238>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	785b      	ldrb	r3, [r3, #1]
 80076f2:	2b0b      	cmp	r3, #11
 80076f4:	f200 8090 	bhi.w	8007818 <USBD_CUSTOM_HID_Setup+0x218>
 80076f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <USBD_CUSTOM_HID_Setup+0x100>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007731 	.word	0x08007731
 8007704:	08007827 	.word	0x08007827
 8007708:	08007819 	.word	0x08007819
 800770c:	08007819 	.word	0x08007819
 8007710:	08007819 	.word	0x08007819
 8007714:	08007819 	.word	0x08007819
 8007718:	0800775b 	.word	0x0800775b
 800771c:	08007819 	.word	0x08007819
 8007720:	08007819 	.word	0x08007819
 8007724:	08007819 	.word	0x08007819
 8007728:	080077c7 	.word	0x080077c7
 800772c:	080077f1 	.word	0x080077f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b03      	cmp	r3, #3
 800773a:	d107      	bne.n	800774c <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800773c:	f107 030e 	add.w	r3, r7, #14
 8007740:	2202      	movs	r2, #2
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f001 fc53 	bl	8008ff0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800774a:	e06d      	b.n	8007828 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 fbd1 	bl	8008ef6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007754:	2303      	movs	r3, #3
 8007756:	75fb      	strb	r3, [r7, #23]
          break;
 8007758:	e066      	b.n	8007828 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	885b      	ldrh	r3, [r3, #2]
 800775e:	0a1b      	lsrs	r3, r3, #8
 8007760:	b29b      	uxth	r3, r3
 8007762:	2b22      	cmp	r3, #34	@ 0x22
 8007764:	d110      	bne.n	8007788 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	88db      	ldrh	r3, [r3, #6]
 800776a:	2b21      	cmp	r3, #33	@ 0x21
 800776c:	bf28      	it	cs
 800776e:	2321      	movcs	r3, #33	@ 0x21
 8007770:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	33b0      	adds	r3, #176	@ 0xb0
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	e00d      	b.n	80077a4 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	885b      	ldrh	r3, [r3, #2]
 800778c:	0a1b      	lsrs	r3, r3, #8
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b21      	cmp	r3, #33	@ 0x21
 8007792:	d107      	bne.n	80077a4 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007794:	4b2b      	ldr	r3, [pc, #172]	@ (8007844 <USBD_CUSTOM_HID_Setup+0x244>)
 8007796:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	88db      	ldrh	r3, [r3, #6]
 800779c:	2b09      	cmp	r3, #9
 800779e:	bf28      	it	cs
 80077a0:	2309      	movcs	r3, #9
 80077a2:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d006      	beq.n	80077b8 <USBD_CUSTOM_HID_Setup+0x1b8>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 80077aa:	8bfb      	ldrh	r3, [r7, #30]
 80077ac:	461a      	mov	r2, r3
 80077ae:	69b9      	ldr	r1, [r7, #24]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 fc1d 	bl	8008ff0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077b6:	e037      	b.n	8007828 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 fb9b 	bl	8008ef6 <USBD_CtlError>
            ret = USBD_FAIL;
 80077c0:	2303      	movs	r3, #3
 80077c2:	75fb      	strb	r3, [r7, #23]
          break;
 80077c4:	e030      	b.n	8007828 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d107      	bne.n	80077e2 <USBD_CUSTOM_HID_Setup+0x1e2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	3348      	adds	r3, #72	@ 0x48
 80077d6:	2201      	movs	r2, #1
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 fc08 	bl	8008ff0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077e0:	e022      	b.n	8007828 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 fb86 	bl	8008ef6 <USBD_CtlError>
            ret = USBD_FAIL;
 80077ea:	2303      	movs	r3, #3
 80077ec:	75fb      	strb	r3, [r7, #23]
          break;
 80077ee:	e01b      	b.n	8007828 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d106      	bne.n	800780a <USBD_CUSTOM_HID_Setup+0x20a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	885b      	ldrh	r3, [r3, #2]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	461a      	mov	r2, r3
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007808:	e00e      	b.n	8007828 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f001 fb72 	bl	8008ef6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007812:	2303      	movs	r3, #3
 8007814:	75fb      	strb	r3, [r7, #23]
          break;
 8007816:	e007      	b.n	8007828 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 fb6b 	bl	8008ef6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007820:	2303      	movs	r3, #3
 8007822:	75fb      	strb	r3, [r7, #23]
          break;
 8007824:	e000      	b.n	8007828 <USBD_CUSTOM_HID_Setup+0x228>
          break;
 8007826:	bf00      	nop
      }
      break;
 8007828:	e006      	b.n	8007838 <USBD_CUSTOM_HID_Setup+0x238>

    default:
      USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 fb62 	bl	8008ef6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007832:	2303      	movs	r3, #3
 8007834:	75fb      	strb	r3, [r7, #23]
      break;
 8007836:	bf00      	nop
  }
  return (uint8_t)ret;
 8007838:	7dfb      	ldrb	r3, [r7, #23]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3720      	adds	r7, #32
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20000070 	.word	0x20000070

08007848 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007850:	2181      	movs	r1, #129	@ 0x81
 8007852:	4815      	ldr	r0, [pc, #84]	@ (80078a8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007854:	f000 fd19 	bl	800828a <USBD_GetEpDesc>
 8007858:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800785a:	2101      	movs	r1, #1
 800785c:	4812      	ldr	r0, [pc, #72]	@ (80078a8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800785e:	f000 fd14 	bl	800828a <USBD_GetEpDesc>
 8007862:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d009      	beq.n	800787e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f042 0202 	orr.w	r2, r2, #2
 8007872:	711a      	strb	r2, [r3, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2205      	movs	r2, #5
 800787c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d009      	beq.n	8007898 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2200      	movs	r2, #0
 8007888:	f042 0202 	orr.w	r2, r2, #2
 800788c:	711a      	strb	r2, [r3, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2205      	movs	r2, #5
 8007896:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2229      	movs	r2, #41	@ 0x29
 800789c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800789e:	4b02      	ldr	r3, [pc, #8]	@ (80078a8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20000044 	.word	0x20000044

080078ac <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80078b4:	2181      	movs	r1, #129	@ 0x81
 80078b6:	4815      	ldr	r0, [pc, #84]	@ (800790c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80078b8:	f000 fce7 	bl	800828a <USBD_GetEpDesc>
 80078bc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80078be:	2101      	movs	r1, #1
 80078c0:	4812      	ldr	r0, [pc, #72]	@ (800790c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80078c2:	f000 fce2 	bl	800828a <USBD_GetEpDesc>
 80078c6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d009      	beq.n	80078e2 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f042 0202 	orr.w	r2, r2, #2
 80078d6:	711a      	strb	r2, [r3, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2205      	movs	r2, #5
 80078e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d009      	beq.n	80078fc <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f042 0202 	orr.w	r2, r2, #2
 80078f0:	711a      	strb	r2, [r3, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2205      	movs	r2, #5
 80078fa:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2229      	movs	r2, #41	@ 0x29
 8007900:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007902:	4b02      	ldr	r3, [pc, #8]	@ (800790c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	20000044 	.word	0x20000044

08007910 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007918:	2181      	movs	r1, #129	@ 0x81
 800791a:	4815      	ldr	r0, [pc, #84]	@ (8007970 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800791c:	f000 fcb5 	bl	800828a <USBD_GetEpDesc>
 8007920:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007922:	2101      	movs	r1, #1
 8007924:	4812      	ldr	r0, [pc, #72]	@ (8007970 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8007926:	f000 fcb0 	bl	800828a <USBD_GetEpDesc>
 800792a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f042 0202 	orr.w	r2, r2, #2
 800793a:	711a      	strb	r2, [r3, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2205      	movs	r2, #5
 8007944:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d009      	beq.n	8007960 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2200      	movs	r2, #0
 8007950:	f042 0202 	orr.w	r2, r2, #2
 8007954:	711a      	strb	r2, [r3, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2205      	movs	r2, #5
 800795e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2229      	movs	r2, #41	@ 0x29
 8007964:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007966:	4b02      	ldr	r3, [pc, #8]	@ (8007970 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20000044 	.word	0x20000044

08007974 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	32b0      	adds	r2, #176	@ 0xb0
 800798a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	460b      	mov	r3, r1
 80079ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	32b0      	adds	r2, #176	@ 0xb0
 80079b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e014      	b.n	80079ee <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	32b0      	adds	r2, #176	@ 0xb0
 80079ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	33b0      	adds	r3, #176	@ 0xb0
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	4610      	mov	r0, r2
 80079ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	32b0      	adds	r2, #176	@ 0xb0
 8007a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e00f      	b.n	8007a36 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	32b0      	adds	r2, #176	@ 0xb0
 8007a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8007a26:	4b06      	ldr	r3, [pc, #24]	@ (8007a40 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8007a28:	7819      	ldrb	r1, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	2340      	movs	r3, #64	@ 0x40
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 ffb6 	bl	80099a0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000087 	.word	0x20000087

08007a44 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	32b0      	adds	r2, #176	@ 0xb0
 8007a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e013      	b.n	8007a8e <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d10e      	bne.n	8007a8c <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	33b0      	adds	r3, #176	@ 0xb0
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4610      	mov	r0, r2
 8007a84:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	220a      	movs	r2, #10
 8007aa4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007aa6:	4b03      	ldr	r3, [pc, #12]	@ (8007ab4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	2000007c 	.word	0x2000007c

08007ab8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e009      	b.n	8007ae0 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	33b0      	adds	r3, #176	@ 0xb0
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	4613      	mov	r3, r2
 8007af8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e01f      	b.n	8007b44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	79fa      	ldrb	r2, [r7, #7]
 8007b36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f001 fddb 	bl	80096f4 <USBD_LL_Init>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e025      	b.n	8007bb0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	32ae      	adds	r2, #174	@ 0xae
 8007b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00f      	beq.n	8007ba0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	32ae      	adds	r2, #174	@ 0xae
 8007b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b90:	f107 020e 	add.w	r2, r7, #14
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	4602      	mov	r2, r0
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 fde3 	bl	800978c <USBD_LL_Start>
 8007bc6:	4603      	mov	r3, r0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bd8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d009      	beq.n	8007c14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	78fa      	ldrb	r2, [r7, #3]
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	4798      	blx	r3
 8007c10:	4603      	mov	r3, r0
 8007c12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	460b      	mov	r3, r1
 8007c28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	78fa      	ldrb	r2, [r7, #3]
 8007c38:	4611      	mov	r1, r2
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	4798      	blx	r3
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c44:	2303      	movs	r3, #3
 8007c46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f001 f90c 	bl	8008e82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007c78:	461a      	mov	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c86:	f003 031f 	and.w	r3, r3, #31
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d01a      	beq.n	8007cc4 <USBD_LL_SetupStage+0x72>
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d822      	bhi.n	8007cd8 <USBD_LL_SetupStage+0x86>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <USBD_LL_SetupStage+0x4a>
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d00a      	beq.n	8007cb0 <USBD_LL_SetupStage+0x5e>
 8007c9a:	e01d      	b.n	8007cd8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fb63 	bl	8008370 <USBD_StdDevReq>
 8007caa:	4603      	mov	r3, r0
 8007cac:	73fb      	strb	r3, [r7, #15]
      break;
 8007cae:	e020      	b.n	8007cf2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fbcb 	bl	8008454 <USBD_StdItfReq>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc2:	e016      	b.n	8007cf2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fc2d 	bl	800852c <USBD_StdEPReq>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd6:	e00c      	b.n	8007cf2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007cde:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 fdb0 	bl	800984c <USBD_LL_StallEP>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	bf00      	nop
  }

  return ret;
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	460b      	mov	r3, r1
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007d0e:	7afb      	ldrb	r3, [r7, #11]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d16e      	bne.n	8007df2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007d1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	f040 8098 	bne.w	8007e58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d913      	bls.n	8007d5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	1ad2      	subs	r2, r2, r3
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	bf28      	it	cs
 8007d4e:	4613      	movcs	r3, r2
 8007d50:	461a      	mov	r2, r3
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f001 f994 	bl	8009082 <USBD_CtlContinueRx>
 8007d5a:	e07d      	b.n	8007e58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d62:	f003 031f 	and.w	r3, r3, #31
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d014      	beq.n	8007d94 <USBD_LL_DataOutStage+0x98>
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d81d      	bhi.n	8007daa <USBD_LL_DataOutStage+0xae>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <USBD_LL_DataOutStage+0x7c>
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d003      	beq.n	8007d7e <USBD_LL_DataOutStage+0x82>
 8007d76:	e018      	b.n	8007daa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	75bb      	strb	r3, [r7, #22]
            break;
 8007d7c:	e018      	b.n	8007db0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	4619      	mov	r1, r3
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 fa64 	bl	8008256 <USBD_CoreFindIF>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	75bb      	strb	r3, [r7, #22]
            break;
 8007d92:	e00d      	b.n	8007db0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 fa66 	bl	8008270 <USBD_CoreFindEP>
 8007da4:	4603      	mov	r3, r0
 8007da6:	75bb      	strb	r3, [r7, #22]
            break;
 8007da8:	e002      	b.n	8007db0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	75bb      	strb	r3, [r7, #22]
            break;
 8007dae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007db0:	7dbb      	ldrb	r3, [r7, #22]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d119      	bne.n	8007dea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d113      	bne.n	8007dea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007dc2:	7dba      	ldrb	r2, [r7, #22]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	32ae      	adds	r2, #174	@ 0xae
 8007dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00b      	beq.n	8007dea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007dd2:	7dba      	ldrb	r2, [r7, #22]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007dda:	7dba      	ldrb	r2, [r7, #22]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	32ae      	adds	r2, #174	@ 0xae
 8007de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f001 f95a 	bl	80090a4 <USBD_CtlSendStatus>
 8007df0:	e032      	b.n	8007e58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007df2:	7afb      	ldrb	r3, [r7, #11]
 8007df4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 fa37 	bl	8008270 <USBD_CoreFindEP>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e06:	7dbb      	ldrb	r3, [r7, #22]
 8007e08:	2bff      	cmp	r3, #255	@ 0xff
 8007e0a:	d025      	beq.n	8007e58 <USBD_LL_DataOutStage+0x15c>
 8007e0c:	7dbb      	ldrb	r3, [r7, #22]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d122      	bne.n	8007e58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d117      	bne.n	8007e4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e1e:	7dba      	ldrb	r2, [r7, #22]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	32ae      	adds	r2, #174	@ 0xae
 8007e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00f      	beq.n	8007e4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e2e:	7dba      	ldrb	r2, [r7, #22]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e36:	7dba      	ldrb	r2, [r7, #22]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	32ae      	adds	r2, #174	@ 0xae
 8007e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	7afa      	ldrb	r2, [r7, #11]
 8007e44:	4611      	mov	r1, r2
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	4798      	blx	r3
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	e000      	b.n	8007e5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b086      	sub	sp, #24
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	607a      	str	r2, [r7, #4]
 8007e6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d16f      	bne.n	8007f56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3314      	adds	r3, #20
 8007e7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d15a      	bne.n	8007f3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d914      	bls.n	8007ebc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	689a      	ldr	r2, [r3, #8]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	1ad2      	subs	r2, r2, r3
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f001 f8bc 	bl	8009026 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f001 fd73 	bl	80099a0 <USBD_LL_PrepareReceive>
 8007eba:	e03f      	b.n	8007f3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d11c      	bne.n	8007f02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d316      	bcc.n	8007f02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d20f      	bcs.n	8007f02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f001 f89d 	bl	8009026 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2100      	movs	r1, #0
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f001 fd50 	bl	80099a0 <USBD_LL_PrepareReceive>
 8007f00:	e01c      	b.n	8007f3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d10f      	bne.n	8007f2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f2e:	2180      	movs	r1, #128	@ 0x80
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f001 fc8b 	bl	800984c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f001 f8c7 	bl	80090ca <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d03a      	beq.n	8007fbc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f7ff fe42 	bl	8007bd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007f54:	e032      	b.n	8007fbc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f56:	7afb      	ldrb	r3, [r7, #11]
 8007f58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	4619      	mov	r1, r3
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 f985 	bl	8008270 <USBD_CoreFindEP>
 8007f66:	4603      	mov	r3, r0
 8007f68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f6a:	7dfb      	ldrb	r3, [r7, #23]
 8007f6c:	2bff      	cmp	r3, #255	@ 0xff
 8007f6e:	d025      	beq.n	8007fbc <USBD_LL_DataInStage+0x15a>
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d122      	bne.n	8007fbc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d11c      	bne.n	8007fbc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f82:	7dfa      	ldrb	r2, [r7, #23]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	32ae      	adds	r2, #174	@ 0xae
 8007f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d014      	beq.n	8007fbc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f92:	7dfa      	ldrb	r2, [r7, #23]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f9a:	7dfa      	ldrb	r2, [r7, #23]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	32ae      	adds	r2, #174	@ 0xae
 8007fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	7afa      	ldrb	r2, [r7, #11]
 8007fa8:	4611      	mov	r1, r2
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	4798      	blx	r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007fb2:	7dbb      	ldrb	r3, [r7, #22]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007fb8:	7dbb      	ldrb	r3, [r7, #22]
 8007fba:	e000      	b.n	8007fbe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d014      	beq.n	800802c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00e      	beq.n	800802c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	6852      	ldr	r2, [r2, #4]
 800801a:	b2d2      	uxtb	r2, r2
 800801c:	4611      	mov	r1, r2
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008028:	2303      	movs	r3, #3
 800802a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800802c:	2340      	movs	r3, #64	@ 0x40
 800802e:	2200      	movs	r2, #0
 8008030:	2100      	movs	r1, #0
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f001 fbc5 	bl	80097c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2240      	movs	r2, #64	@ 0x40
 8008044:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008048:	2340      	movs	r3, #64	@ 0x40
 800804a:	2200      	movs	r2, #0
 800804c:	2180      	movs	r1, #128	@ 0x80
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 fbb7 	bl	80097c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2240      	movs	r2, #64	@ 0x40
 800805e:	621a      	str	r2, [r3, #32]

  return ret;
 8008060:	7bfb      	ldrb	r3, [r7, #15]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	460b      	mov	r3, r1
 8008074:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	78fa      	ldrb	r2, [r7, #3]
 800807a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b04      	cmp	r3, #4
 800809c:	d006      	beq.n	80080ac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2204      	movs	r2, #4
 80080b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d106      	bne.n	80080e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b03      	cmp	r3, #3
 8008104:	d110      	bne.n	8008128 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00b      	beq.n	8008128 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d005      	beq.n	8008128 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	460b      	mov	r3, r1
 800813c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	32ae      	adds	r2, #174	@ 0xae
 8008148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008150:	2303      	movs	r3, #3
 8008152:	e01c      	b.n	800818e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b03      	cmp	r3, #3
 800815e:	d115      	bne.n	800818c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	32ae      	adds	r2, #174	@ 0xae
 800816a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00b      	beq.n	800818c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	32ae      	adds	r2, #174	@ 0xae
 800817e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	4611      	mov	r1, r2
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	460b      	mov	r3, r1
 80081a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	32ae      	adds	r2, #174	@ 0xae
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e01c      	b.n	80081f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d115      	bne.n	80081f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	32ae      	adds	r2, #174	@ 0xae
 80081ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	32ae      	adds	r2, #174	@ 0xae
 80081e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e8:	78fa      	ldrb	r2, [r7, #3]
 80081ea:	4611      	mov	r1, r2
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00e      	beq.n	800824c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	6852      	ldr	r2, [r2, #4]
 800823a:	b2d2      	uxtb	r2, r2
 800823c:	4611      	mov	r1, r2
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	4798      	blx	r3
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008248:	2303      	movs	r3, #3
 800824a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008262:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800827c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800827e:	4618      	mov	r0, r3
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b086      	sub	sp, #24
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	885b      	ldrh	r3, [r3, #2]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	7812      	ldrb	r2, [r2, #0]
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d91f      	bls.n	80082f0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082b6:	e013      	b.n	80082e0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082b8:	f107 030a 	add.w	r3, r7, #10
 80082bc:	4619      	mov	r1, r3
 80082be:	6978      	ldr	r0, [r7, #20]
 80082c0:	f000 f81b 	bl	80082fa <USBD_GetNextDesc>
 80082c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	785b      	ldrb	r3, [r3, #1]
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	d108      	bne.n	80082e0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	789b      	ldrb	r3, [r3, #2]
 80082d6:	78fa      	ldrb	r2, [r7, #3]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d008      	beq.n	80082ee <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082dc:	2300      	movs	r3, #0
 80082de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	885b      	ldrh	r3, [r3, #2]
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	897b      	ldrh	r3, [r7, #10]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d8e5      	bhi.n	80082b8 <USBD_GetEpDesc+0x2e>
 80082ec:	e000      	b.n	80082f0 <USBD_GetEpDesc+0x66>
          break;
 80082ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80082f0:	693b      	ldr	r3, [r7, #16]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b085      	sub	sp, #20
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	7812      	ldrb	r2, [r2, #0]
 8008310:	4413      	add	r3, r2
 8008312:	b29a      	uxth	r2, r3
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	461a      	mov	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4413      	add	r3, r2
 8008322:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008324:	68fb      	ldr	r3, [r7, #12]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008332:	b480      	push	{r7}
 8008334:	b087      	sub	sp, #28
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	3301      	adds	r3, #1
 8008348:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008350:	8a3b      	ldrh	r3, [r7, #16]
 8008352:	021b      	lsls	r3, r3, #8
 8008354:	b21a      	sxth	r2, r3
 8008356:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800835a:	4313      	orrs	r3, r2
 800835c:	b21b      	sxth	r3, r3
 800835e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008360:	89fb      	ldrh	r3, [r7, #14]
}
 8008362:	4618      	mov	r0, r3
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
	...

08008370 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008386:	2b40      	cmp	r3, #64	@ 0x40
 8008388:	d005      	beq.n	8008396 <USBD_StdDevReq+0x26>
 800838a:	2b40      	cmp	r3, #64	@ 0x40
 800838c:	d857      	bhi.n	800843e <USBD_StdDevReq+0xce>
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00f      	beq.n	80083b2 <USBD_StdDevReq+0x42>
 8008392:	2b20      	cmp	r3, #32
 8008394:	d153      	bne.n	800843e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	32ae      	adds	r2, #174	@ 0xae
 80083a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	4798      	blx	r3
 80083ac:	4603      	mov	r3, r0
 80083ae:	73fb      	strb	r3, [r7, #15]
      break;
 80083b0:	e04a      	b.n	8008448 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	785b      	ldrb	r3, [r3, #1]
 80083b6:	2b09      	cmp	r3, #9
 80083b8:	d83b      	bhi.n	8008432 <USBD_StdDevReq+0xc2>
 80083ba:	a201      	add	r2, pc, #4	@ (adr r2, 80083c0 <USBD_StdDevReq+0x50>)
 80083bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c0:	08008415 	.word	0x08008415
 80083c4:	08008429 	.word	0x08008429
 80083c8:	08008433 	.word	0x08008433
 80083cc:	0800841f 	.word	0x0800841f
 80083d0:	08008433 	.word	0x08008433
 80083d4:	080083f3 	.word	0x080083f3
 80083d8:	080083e9 	.word	0x080083e9
 80083dc:	08008433 	.word	0x08008433
 80083e0:	0800840b 	.word	0x0800840b
 80083e4:	080083fd 	.word	0x080083fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fa3c 	bl	8008868 <USBD_GetDescriptor>
          break;
 80083f0:	e024      	b.n	800843c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fba1 	bl	8008b3c <USBD_SetAddress>
          break;
 80083fa:	e01f      	b.n	800843c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fbe0 	bl	8008bc4 <USBD_SetConfig>
 8008404:	4603      	mov	r3, r0
 8008406:	73fb      	strb	r3, [r7, #15]
          break;
 8008408:	e018      	b.n	800843c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fc83 	bl	8008d18 <USBD_GetConfig>
          break;
 8008412:	e013      	b.n	800843c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fcb4 	bl	8008d84 <USBD_GetStatus>
          break;
 800841c:	e00e      	b.n	800843c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fce3 	bl	8008dec <USBD_SetFeature>
          break;
 8008426:	e009      	b.n	800843c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fd07 	bl	8008e3e <USBD_ClrFeature>
          break;
 8008430:	e004      	b.n	800843c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fd5e 	bl	8008ef6 <USBD_CtlError>
          break;
 800843a:	bf00      	nop
      }
      break;
 800843c:	e004      	b.n	8008448 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fd58 	bl	8008ef6 <USBD_CtlError>
      break;
 8008446:	bf00      	nop
  }

  return ret;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop

08008454 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800846a:	2b40      	cmp	r3, #64	@ 0x40
 800846c:	d005      	beq.n	800847a <USBD_StdItfReq+0x26>
 800846e:	2b40      	cmp	r3, #64	@ 0x40
 8008470:	d852      	bhi.n	8008518 <USBD_StdItfReq+0xc4>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <USBD_StdItfReq+0x26>
 8008476:	2b20      	cmp	r3, #32
 8008478:	d14e      	bne.n	8008518 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008480:	b2db      	uxtb	r3, r3
 8008482:	3b01      	subs	r3, #1
 8008484:	2b02      	cmp	r3, #2
 8008486:	d840      	bhi.n	800850a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	889b      	ldrh	r3, [r3, #4]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b01      	cmp	r3, #1
 8008490:	d836      	bhi.n	8008500 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	889b      	ldrh	r3, [r3, #4]
 8008496:	b2db      	uxtb	r3, r3
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff fedb 	bl	8008256 <USBD_CoreFindIF>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	2bff      	cmp	r3, #255	@ 0xff
 80084a8:	d01d      	beq.n	80084e6 <USBD_StdItfReq+0x92>
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d11a      	bne.n	80084e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80084b0:	7bba      	ldrb	r2, [r7, #14]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	32ae      	adds	r2, #174	@ 0xae
 80084b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00f      	beq.n	80084e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80084c0:	7bba      	ldrb	r2, [r7, #14]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084c8:	7bba      	ldrb	r2, [r7, #14]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	32ae      	adds	r2, #174	@ 0xae
 80084ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	4798      	blx	r3
 80084da:	4603      	mov	r3, r0
 80084dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084de:	e004      	b.n	80084ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084e0:	2303      	movs	r3, #3
 80084e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084e4:	e001      	b.n	80084ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80084e6:	2303      	movs	r3, #3
 80084e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	88db      	ldrh	r3, [r3, #6]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d110      	bne.n	8008514 <USBD_StdItfReq+0xc0>
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10d      	bne.n	8008514 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fdd3 	bl	80090a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084fe:	e009      	b.n	8008514 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fcf7 	bl	8008ef6 <USBD_CtlError>
          break;
 8008508:	e004      	b.n	8008514 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fcf2 	bl	8008ef6 <USBD_CtlError>
          break;
 8008512:	e000      	b.n	8008516 <USBD_StdItfReq+0xc2>
          break;
 8008514:	bf00      	nop
      }
      break;
 8008516:	e004      	b.n	8008522 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fceb 	bl	8008ef6 <USBD_CtlError>
      break;
 8008520:	bf00      	nop
  }

  return ret;
 8008522:	7bfb      	ldrb	r3, [r7, #15]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	889b      	ldrh	r3, [r3, #4]
 800853e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008548:	2b40      	cmp	r3, #64	@ 0x40
 800854a:	d007      	beq.n	800855c <USBD_StdEPReq+0x30>
 800854c:	2b40      	cmp	r3, #64	@ 0x40
 800854e:	f200 817f 	bhi.w	8008850 <USBD_StdEPReq+0x324>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d02a      	beq.n	80085ac <USBD_StdEPReq+0x80>
 8008556:	2b20      	cmp	r3, #32
 8008558:	f040 817a 	bne.w	8008850 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800855c:	7bbb      	ldrb	r3, [r7, #14]
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff fe85 	bl	8008270 <USBD_CoreFindEP>
 8008566:	4603      	mov	r3, r0
 8008568:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800856a:	7b7b      	ldrb	r3, [r7, #13]
 800856c:	2bff      	cmp	r3, #255	@ 0xff
 800856e:	f000 8174 	beq.w	800885a <USBD_StdEPReq+0x32e>
 8008572:	7b7b      	ldrb	r3, [r7, #13]
 8008574:	2b00      	cmp	r3, #0
 8008576:	f040 8170 	bne.w	800885a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800857a:	7b7a      	ldrb	r2, [r7, #13]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008582:	7b7a      	ldrb	r2, [r7, #13]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	32ae      	adds	r2, #174	@ 0xae
 8008588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 8163 	beq.w	800885a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008594:	7b7a      	ldrb	r2, [r7, #13]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	32ae      	adds	r2, #174	@ 0xae
 800859a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	4798      	blx	r3
 80085a6:	4603      	mov	r3, r0
 80085a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085aa:	e156      	b.n	800885a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	785b      	ldrb	r3, [r3, #1]
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d008      	beq.n	80085c6 <USBD_StdEPReq+0x9a>
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	f300 8145 	bgt.w	8008844 <USBD_StdEPReq+0x318>
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f000 809b 	beq.w	80086f6 <USBD_StdEPReq+0x1ca>
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d03c      	beq.n	800863e <USBD_StdEPReq+0x112>
 80085c4:	e13e      	b.n	8008844 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d002      	beq.n	80085d8 <USBD_StdEPReq+0xac>
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d016      	beq.n	8008604 <USBD_StdEPReq+0xd8>
 80085d6:	e02c      	b.n	8008632 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00d      	beq.n	80085fa <USBD_StdEPReq+0xce>
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	2b80      	cmp	r3, #128	@ 0x80
 80085e2:	d00a      	beq.n	80085fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f001 f92f 	bl	800984c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ee:	2180      	movs	r1, #128	@ 0x80
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 f92b 	bl	800984c <USBD_LL_StallEP>
 80085f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085f8:	e020      	b.n	800863c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fc7a 	bl	8008ef6 <USBD_CtlError>
              break;
 8008602:	e01b      	b.n	800863c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	885b      	ldrh	r3, [r3, #2]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10e      	bne.n	800862a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00b      	beq.n	800862a <USBD_StdEPReq+0xfe>
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	2b80      	cmp	r3, #128	@ 0x80
 8008616:	d008      	beq.n	800862a <USBD_StdEPReq+0xfe>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	88db      	ldrh	r3, [r3, #6]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d104      	bne.n	800862a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 f911 	bl	800984c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fd3a 	bl	80090a4 <USBD_CtlSendStatus>

              break;
 8008630:	e004      	b.n	800863c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fc5e 	bl	8008ef6 <USBD_CtlError>
              break;
 800863a:	bf00      	nop
          }
          break;
 800863c:	e107      	b.n	800884e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b02      	cmp	r3, #2
 8008648:	d002      	beq.n	8008650 <USBD_StdEPReq+0x124>
 800864a:	2b03      	cmp	r3, #3
 800864c:	d016      	beq.n	800867c <USBD_StdEPReq+0x150>
 800864e:	e04b      	b.n	80086e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00d      	beq.n	8008672 <USBD_StdEPReq+0x146>
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	2b80      	cmp	r3, #128	@ 0x80
 800865a:	d00a      	beq.n	8008672 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 f8f3 	bl	800984c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008666:	2180      	movs	r1, #128	@ 0x80
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f001 f8ef 	bl	800984c <USBD_LL_StallEP>
 800866e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008670:	e040      	b.n	80086f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fc3e 	bl	8008ef6 <USBD_CtlError>
              break;
 800867a:	e03b      	b.n	80086f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	885b      	ldrh	r3, [r3, #2]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d136      	bne.n	80086f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800868a:	2b00      	cmp	r3, #0
 800868c:	d004      	beq.n	8008698 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 f8f9 	bl	800988a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fd03 	bl	80090a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff fde4 	bl	8008270 <USBD_CoreFindEP>
 80086a8:	4603      	mov	r3, r0
 80086aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086ac:	7b7b      	ldrb	r3, [r7, #13]
 80086ae:	2bff      	cmp	r3, #255	@ 0xff
 80086b0:	d01f      	beq.n	80086f2 <USBD_StdEPReq+0x1c6>
 80086b2:	7b7b      	ldrb	r3, [r7, #13]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d11c      	bne.n	80086f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086b8:	7b7a      	ldrb	r2, [r7, #13]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80086c0:	7b7a      	ldrb	r2, [r7, #13]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	32ae      	adds	r2, #174	@ 0xae
 80086c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d010      	beq.n	80086f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086d0:	7b7a      	ldrb	r2, [r7, #13]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	32ae      	adds	r2, #174	@ 0xae
 80086d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	4798      	blx	r3
 80086e2:	4603      	mov	r3, r0
 80086e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80086e6:	e004      	b.n	80086f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fc03 	bl	8008ef6 <USBD_CtlError>
              break;
 80086f0:	e000      	b.n	80086f4 <USBD_StdEPReq+0x1c8>
              break;
 80086f2:	bf00      	nop
          }
          break;
 80086f4:	e0ab      	b.n	800884e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d002      	beq.n	8008708 <USBD_StdEPReq+0x1dc>
 8008702:	2b03      	cmp	r3, #3
 8008704:	d032      	beq.n	800876c <USBD_StdEPReq+0x240>
 8008706:	e097      	b.n	8008838 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d007      	beq.n	800871e <USBD_StdEPReq+0x1f2>
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	2b80      	cmp	r3, #128	@ 0x80
 8008712:	d004      	beq.n	800871e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fbed 	bl	8008ef6 <USBD_CtlError>
                break;
 800871c:	e091      	b.n	8008842 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800871e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008722:	2b00      	cmp	r3, #0
 8008724:	da0b      	bge.n	800873e <USBD_StdEPReq+0x212>
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800872c:	4613      	mov	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	3310      	adds	r3, #16
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	4413      	add	r3, r2
 800873a:	3304      	adds	r3, #4
 800873c:	e00b      	b.n	8008756 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008744:	4613      	mov	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	4413      	add	r3, r2
 8008754:	3304      	adds	r3, #4
 8008756:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2202      	movs	r2, #2
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fc43 	bl	8008ff0 <USBD_CtlSendData>
              break;
 800876a:	e06a      	b.n	8008842 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800876c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008770:	2b00      	cmp	r3, #0
 8008772:	da11      	bge.n	8008798 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	f003 020f 	and.w	r2, r3, #15
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	4613      	mov	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	440b      	add	r3, r1
 8008786:	3324      	adds	r3, #36	@ 0x24
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d117      	bne.n	80087be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fbb0 	bl	8008ef6 <USBD_CtlError>
                  break;
 8008796:	e054      	b.n	8008842 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	f003 020f 	and.w	r2, r3, #15
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	440b      	add	r3, r1
 80087aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d104      	bne.n	80087be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fb9d 	bl	8008ef6 <USBD_CtlError>
                  break;
 80087bc:	e041      	b.n	8008842 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	da0b      	bge.n	80087de <USBD_StdEPReq+0x2b2>
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
 80087c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	3310      	adds	r3, #16
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	4413      	add	r3, r2
 80087da:	3304      	adds	r3, #4
 80087dc:	e00b      	b.n	80087f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087e4:	4613      	mov	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	4413      	add	r3, r2
 80087f4:	3304      	adds	r3, #4
 80087f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d002      	beq.n	8008804 <USBD_StdEPReq+0x2d8>
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	2b80      	cmp	r3, #128	@ 0x80
 8008802:	d103      	bne.n	800880c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2200      	movs	r2, #0
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	e00e      	b.n	800882a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 f859 	bl	80098c8 <USBD_LL_IsStallEP>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2201      	movs	r2, #1
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	e002      	b.n	800882a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2200      	movs	r2, #0
 8008828:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2202      	movs	r2, #2
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fbdd 	bl	8008ff0 <USBD_CtlSendData>
              break;
 8008836:	e004      	b.n	8008842 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fb5b 	bl	8008ef6 <USBD_CtlError>
              break;
 8008840:	bf00      	nop
          }
          break;
 8008842:	e004      	b.n	800884e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fb55 	bl	8008ef6 <USBD_CtlError>
          break;
 800884c:	bf00      	nop
      }
      break;
 800884e:	e005      	b.n	800885c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fb4f 	bl	8008ef6 <USBD_CtlError>
      break;
 8008858:	e000      	b.n	800885c <USBD_StdEPReq+0x330>
      break;
 800885a:	bf00      	nop
  }

  return ret;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008876:	2300      	movs	r3, #0
 8008878:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	885b      	ldrh	r3, [r3, #2]
 8008882:	0a1b      	lsrs	r3, r3, #8
 8008884:	b29b      	uxth	r3, r3
 8008886:	3b01      	subs	r3, #1
 8008888:	2b06      	cmp	r3, #6
 800888a:	f200 8128 	bhi.w	8008ade <USBD_GetDescriptor+0x276>
 800888e:	a201      	add	r2, pc, #4	@ (adr r2, 8008894 <USBD_GetDescriptor+0x2c>)
 8008890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008894:	080088b1 	.word	0x080088b1
 8008898:	080088c9 	.word	0x080088c9
 800889c:	08008909 	.word	0x08008909
 80088a0:	08008adf 	.word	0x08008adf
 80088a4:	08008adf 	.word	0x08008adf
 80088a8:	08008a7f 	.word	0x08008a7f
 80088ac:	08008aab 	.word	0x08008aab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	7c12      	ldrb	r2, [r2, #16]
 80088bc:	f107 0108 	add.w	r1, r7, #8
 80088c0:	4610      	mov	r0, r2
 80088c2:	4798      	blx	r3
 80088c4:	60f8      	str	r0, [r7, #12]
      break;
 80088c6:	e112      	b.n	8008aee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	7c1b      	ldrb	r3, [r3, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10d      	bne.n	80088ec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d8:	f107 0208 	add.w	r2, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3301      	adds	r3, #1
 80088e6:	2202      	movs	r2, #2
 80088e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088ea:	e100      	b.n	8008aee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f4:	f107 0208 	add.w	r2, r7, #8
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	2202      	movs	r2, #2
 8008904:	701a      	strb	r2, [r3, #0]
      break;
 8008906:	e0f2      	b.n	8008aee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	885b      	ldrh	r3, [r3, #2]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b05      	cmp	r3, #5
 8008910:	f200 80ac 	bhi.w	8008a6c <USBD_GetDescriptor+0x204>
 8008914:	a201      	add	r2, pc, #4	@ (adr r2, 800891c <USBD_GetDescriptor+0xb4>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	08008935 	.word	0x08008935
 8008920:	08008969 	.word	0x08008969
 8008924:	0800899d 	.word	0x0800899d
 8008928:	080089d1 	.word	0x080089d1
 800892c:	08008a05 	.word	0x08008a05
 8008930:	08008a39 	.word	0x08008a39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00b      	beq.n	8008958 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	7c12      	ldrb	r2, [r2, #16]
 800894c:	f107 0108 	add.w	r1, r7, #8
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
 8008954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008956:	e091      	b.n	8008a7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 facb 	bl	8008ef6 <USBD_CtlError>
            err++;
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	3301      	adds	r3, #1
 8008964:	72fb      	strb	r3, [r7, #11]
          break;
 8008966:	e089      	b.n	8008a7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00b      	beq.n	800898c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	7c12      	ldrb	r2, [r2, #16]
 8008980:	f107 0108 	add.w	r1, r7, #8
 8008984:	4610      	mov	r0, r2
 8008986:	4798      	blx	r3
 8008988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898a:	e077      	b.n	8008a7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fab1 	bl	8008ef6 <USBD_CtlError>
            err++;
 8008994:	7afb      	ldrb	r3, [r7, #11]
 8008996:	3301      	adds	r3, #1
 8008998:	72fb      	strb	r3, [r7, #11]
          break;
 800899a:	e06f      	b.n	8008a7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	f107 0108 	add.w	r1, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089be:	e05d      	b.n	8008a7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa97 	bl	8008ef6 <USBD_CtlError>
            err++;
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	3301      	adds	r3, #1
 80089cc:	72fb      	strb	r3, [r7, #11]
          break;
 80089ce:	e055      	b.n	8008a7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	f107 0108 	add.w	r1, r7, #8
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f2:	e043      	b.n	8008a7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa7d 	bl	8008ef6 <USBD_CtlError>
            err++;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	3301      	adds	r3, #1
 8008a00:	72fb      	strb	r3, [r7, #11]
          break;
 8008a02:	e03b      	b.n	8008a7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7c12      	ldrb	r2, [r2, #16]
 8008a1c:	f107 0108 	add.w	r1, r7, #8
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a26:	e029      	b.n	8008a7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa63 	bl	8008ef6 <USBD_CtlError>
            err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
          break;
 8008a36:	e021      	b.n	8008a7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	7c12      	ldrb	r2, [r2, #16]
 8008a50:	f107 0108 	add.w	r1, r7, #8
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
 8008a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5a:	e00f      	b.n	8008a7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa49 	bl	8008ef6 <USBD_CtlError>
            err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6a:	e007      	b.n	8008a7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fa41 	bl	8008ef6 <USBD_CtlError>
          err++;
 8008a74:	7afb      	ldrb	r3, [r7, #11]
 8008a76:	3301      	adds	r3, #1
 8008a78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a7a:	bf00      	nop
      }
      break;
 8008a7c:	e037      	b.n	8008aee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	7c1b      	ldrb	r3, [r3, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d109      	bne.n	8008a9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a8e:	f107 0208 	add.w	r2, r7, #8
 8008a92:	4610      	mov	r0, r2
 8008a94:	4798      	blx	r3
 8008a96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a98:	e029      	b.n	8008aee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fa2a 	bl	8008ef6 <USBD_CtlError>
        err++;
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	72fb      	strb	r3, [r7, #11]
      break;
 8008aa8:	e021      	b.n	8008aee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	7c1b      	ldrb	r3, [r3, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10d      	bne.n	8008ace <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aba:	f107 0208 	add.w	r2, r7, #8
 8008abe:	4610      	mov	r0, r2
 8008ac0:	4798      	blx	r3
 8008ac2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	2207      	movs	r2, #7
 8008aca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008acc:	e00f      	b.n	8008aee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fa10 	bl	8008ef6 <USBD_CtlError>
        err++;
 8008ad6:	7afb      	ldrb	r3, [r7, #11]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	72fb      	strb	r3, [r7, #11]
      break;
 8008adc:	e007      	b.n	8008aee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fa08 	bl	8008ef6 <USBD_CtlError>
      err++;
 8008ae6:	7afb      	ldrb	r3, [r7, #11]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	72fb      	strb	r3, [r7, #11]
      break;
 8008aec:	bf00      	nop
  }

  if (err != 0U)
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d11e      	bne.n	8008b32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	88db      	ldrh	r3, [r3, #6]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d016      	beq.n	8008b2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008afc:	893b      	ldrh	r3, [r7, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00e      	beq.n	8008b20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	88da      	ldrh	r2, [r3, #6]
 8008b06:	893b      	ldrh	r3, [r7, #8]
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	bf28      	it	cs
 8008b0c:	4613      	movcs	r3, r2
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b12:	893b      	ldrh	r3, [r7, #8]
 8008b14:	461a      	mov	r2, r3
 8008b16:	68f9      	ldr	r1, [r7, #12]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fa69 	bl	8008ff0 <USBD_CtlSendData>
 8008b1e:	e009      	b.n	8008b34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f9e7 	bl	8008ef6 <USBD_CtlError>
 8008b28:	e004      	b.n	8008b34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 faba 	bl	80090a4 <USBD_CtlSendStatus>
 8008b30:	e000      	b.n	8008b34 <USBD_GetDescriptor+0x2cc>
    return;
 8008b32:	bf00      	nop
  }
}
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop

08008b3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	889b      	ldrh	r3, [r3, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d131      	bne.n	8008bb2 <USBD_SetAddress+0x76>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	88db      	ldrh	r3, [r3, #6]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d12d      	bne.n	8008bb2 <USBD_SetAddress+0x76>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	885b      	ldrh	r3, [r3, #2]
 8008b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b5c:	d829      	bhi.n	8008bb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	885b      	ldrh	r3, [r3, #2]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	d104      	bne.n	8008b80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f9bc 	bl	8008ef6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7e:	e01d      	b.n	8008bbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	7bfa      	ldrb	r2, [r7, #15]
 8008b84:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fec7 	bl	8009920 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fa86 	bl	80090a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d004      	beq.n	8008ba8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba6:	e009      	b.n	8008bbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb0:	e004      	b.n	8008bbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f99e 	bl	8008ef6 <USBD_CtlError>
  }
}
 8008bba:	bf00      	nop
 8008bbc:	bf00      	nop
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	885b      	ldrh	r3, [r3, #2]
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	4b4e      	ldr	r3, [pc, #312]	@ (8008d14 <USBD_SetConfig+0x150>)
 8008bda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8008d14 <USBD_SetConfig+0x150>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d905      	bls.n	8008bf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f985 	bl	8008ef6 <USBD_CtlError>
    return USBD_FAIL;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e08c      	b.n	8008d0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d002      	beq.n	8008c02 <USBD_SetConfig+0x3e>
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d029      	beq.n	8008c54 <USBD_SetConfig+0x90>
 8008c00:	e075      	b.n	8008cee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c02:	4b44      	ldr	r3, [pc, #272]	@ (8008d14 <USBD_SetConfig+0x150>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d020      	beq.n	8008c4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008c0a:	4b42      	ldr	r3, [pc, #264]	@ (8008d14 <USBD_SetConfig+0x150>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c14:	4b3f      	ldr	r3, [pc, #252]	@ (8008d14 <USBD_SetConfig+0x150>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7fe ffe3 	bl	8007be6 <USBD_SetClassConfig>
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d008      	beq.n	8008c3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f962 	bl	8008ef6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2202      	movs	r2, #2
 8008c36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c3a:	e065      	b.n	8008d08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fa31 	bl	80090a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2203      	movs	r2, #3
 8008c46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c4a:	e05d      	b.n	8008d08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fa29 	bl	80090a4 <USBD_CtlSendStatus>
      break;
 8008c52:	e059      	b.n	8008d08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c54:	4b2f      	ldr	r3, [pc, #188]	@ (8008d14 <USBD_SetConfig+0x150>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d112      	bne.n	8008c82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008c64:	4b2b      	ldr	r3, [pc, #172]	@ (8008d14 <USBD_SetConfig+0x150>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c6e:	4b29      	ldr	r3, [pc, #164]	@ (8008d14 <USBD_SetConfig+0x150>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7fe ffd2 	bl	8007c1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa12 	bl	80090a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c80:	e042      	b.n	8008d08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c82:	4b24      	ldr	r3, [pc, #144]	@ (8008d14 <USBD_SetConfig+0x150>)
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d02a      	beq.n	8008ce6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7fe ffc0 	bl	8007c1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8008d14 <USBD_SetConfig+0x150>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8008d14 <USBD_SetConfig+0x150>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7fe ff99 	bl	8007be6 <USBD_SetClassConfig>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00f      	beq.n	8008cde <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f918 	bl	8008ef6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7fe ffa5 	bl	8007c1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008cdc:	e014      	b.n	8008d08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f9e0 	bl	80090a4 <USBD_CtlSendStatus>
      break;
 8008ce4:	e010      	b.n	8008d08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f9dc 	bl	80090a4 <USBD_CtlSendStatus>
      break;
 8008cec:	e00c      	b.n	8008d08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f900 	bl	8008ef6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cf6:	4b07      	ldr	r3, [pc, #28]	@ (8008d14 <USBD_SetConfig+0x150>)
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7fe ff8e 	bl	8007c1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d02:	2303      	movs	r3, #3
 8008d04:	73fb      	strb	r3, [r7, #15]
      break;
 8008d06:	bf00      	nop
  }

  return ret;
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20000288 	.word	0x20000288

08008d18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	88db      	ldrh	r3, [r3, #6]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d004      	beq.n	8008d34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f8e2 	bl	8008ef6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d32:	e023      	b.n	8008d7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	dc02      	bgt.n	8008d46 <USBD_GetConfig+0x2e>
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	dc03      	bgt.n	8008d4c <USBD_GetConfig+0x34>
 8008d44:	e015      	b.n	8008d72 <USBD_GetConfig+0x5a>
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d00b      	beq.n	8008d62 <USBD_GetConfig+0x4a>
 8008d4a:	e012      	b.n	8008d72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3308      	adds	r3, #8
 8008d56:	2201      	movs	r2, #1
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f948 	bl	8008ff0 <USBD_CtlSendData>
        break;
 8008d60:	e00c      	b.n	8008d7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	3304      	adds	r3, #4
 8008d66:	2201      	movs	r2, #1
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f940 	bl	8008ff0 <USBD_CtlSendData>
        break;
 8008d70:	e004      	b.n	8008d7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f8be 	bl	8008ef6 <USBD_CtlError>
        break;
 8008d7a:	bf00      	nop
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	3b01      	subs	r3, #1
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d81e      	bhi.n	8008dda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	88db      	ldrh	r3, [r3, #6]
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d004      	beq.n	8008dae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f8a5 	bl	8008ef6 <USBD_CtlError>
        break;
 8008dac:	e01a      	b.n	8008de4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f043 0202 	orr.w	r2, r3, #2
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	330c      	adds	r3, #12
 8008dce:	2202      	movs	r2, #2
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f90c 	bl	8008ff0 <USBD_CtlSendData>
      break;
 8008dd8:	e004      	b.n	8008de4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f88a 	bl	8008ef6 <USBD_CtlError>
      break;
 8008de2:	bf00      	nop
  }
}
 8008de4:	bf00      	nop
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	885b      	ldrh	r3, [r3, #2]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d107      	bne.n	8008e0e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f94c 	bl	80090a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e0c:	e013      	b.n	8008e36 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	885b      	ldrh	r3, [r3, #2]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d10b      	bne.n	8008e2e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	889b      	ldrh	r3, [r3, #4]
 8008e1a:	0a1b      	lsrs	r3, r3, #8
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f93c 	bl	80090a4 <USBD_CtlSendStatus>
}
 8008e2c:	e003      	b.n	8008e36 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f860 	bl	8008ef6 <USBD_CtlError>
}
 8008e36:	bf00      	nop
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	3b01      	subs	r3, #1
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d80b      	bhi.n	8008e6e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	885b      	ldrh	r3, [r3, #2]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d10c      	bne.n	8008e78 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f91c 	bl	80090a4 <USBD_CtlSendStatus>
      }
      break;
 8008e6c:	e004      	b.n	8008e78 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f840 	bl	8008ef6 <USBD_CtlError>
      break;
 8008e76:	e000      	b.n	8008e7a <USBD_ClrFeature+0x3c>
      break;
 8008e78:	bf00      	nop
  }
}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	781a      	ldrb	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	781a      	ldrb	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f7ff fa40 	bl	8008332 <SWAPBYTE>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f7ff fa33 	bl	8008332 <SWAPBYTE>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	461a      	mov	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3301      	adds	r3, #1
 8008ede:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f7ff fa26 	bl	8008332 <SWAPBYTE>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	461a      	mov	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	80da      	strh	r2, [r3, #6]
}
 8008eee:	bf00      	nop
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f00:	2180      	movs	r1, #128	@ 0x80
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fca2 	bl	800984c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f08:	2100      	movs	r1, #0
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fc9e 	bl	800984c <USBD_LL_StallEP>
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d042      	beq.n	8008fb4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008f32:	6938      	ldr	r0, [r7, #16]
 8008f34:	f000 f842 	bl	8008fbc <USBD_GetLen>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f42:	d808      	bhi.n	8008f56 <USBD_GetString+0x3e>
 8008f44:	6938      	ldr	r0, [r7, #16]
 8008f46:	f000 f839 	bl	8008fbc <USBD_GetLen>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	e001      	b.n	8008f5a <USBD_GetString+0x42>
 8008f56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	4413      	add	r3, r2
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	7812      	ldrb	r2, [r2, #0]
 8008f68:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	4413      	add	r3, r2
 8008f76:	2203      	movs	r2, #3
 8008f78:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f80:	e013      	b.n	8008faa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	4413      	add	r3, r2
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	7812      	ldrb	r2, [r2, #0]
 8008f8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	3301      	adds	r3, #1
 8008f92:	613b      	str	r3, [r7, #16]
    idx++;
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
 8008f96:	3301      	adds	r3, #1
 8008f98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	701a      	strb	r2, [r3, #0]
    idx++;
 8008fa4:	7dfb      	ldrb	r3, [r7, #23]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e7      	bne.n	8008f82 <USBD_GetString+0x6a>
 8008fb2:	e000      	b.n	8008fb6 <USBD_GetString+0x9e>
    return;
 8008fb4:	bf00      	nop
  }
}
 8008fb6:	3718      	adds	r7, #24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fcc:	e005      	b.n	8008fda <USBD_GetLen+0x1e>
  {
    len++;
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1f5      	bne.n	8008fce <USBD_GetLen+0x12>
  }

  return len;
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2202      	movs	r2, #2
 8009000:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	2100      	movs	r1, #0
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 fca1 	bl	800995e <USBD_LL_Transmit>

  return USBD_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	2100      	movs	r1, #0
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 fc90 	bl	800995e <USBD_LL_Transmit>

  return USBD_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2203      	movs	r2, #3
 8009058:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	2100      	movs	r1, #0
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f000 fc94 	bl	80099a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	60f8      	str	r0, [r7, #12]
 800908a:	60b9      	str	r1, [r7, #8]
 800908c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	2100      	movs	r1, #0
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f000 fc83 	bl	80099a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2204      	movs	r2, #4
 80090b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090b4:	2300      	movs	r3, #0
 80090b6:	2200      	movs	r2, #0
 80090b8:	2100      	movs	r1, #0
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fc4f 	bl	800995e <USBD_LL_Transmit>

  return USBD_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2205      	movs	r2, #5
 80090d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090da:	2300      	movs	r3, #0
 80090dc:	2200      	movs	r2, #0
 80090de:	2100      	movs	r1, #0
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fc5d 	bl	80099a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090f4:	2200      	movs	r2, #0
 80090f6:	4912      	ldr	r1, [pc, #72]	@ (8009140 <MX_USB_DEVICE_Init+0x50>)
 80090f8:	4812      	ldr	r0, [pc, #72]	@ (8009144 <MX_USB_DEVICE_Init+0x54>)
 80090fa:	f7fe fcf7 	bl	8007aec <USBD_Init>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009104:	f7f9 fe74 	bl	8002df0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009108:	490f      	ldr	r1, [pc, #60]	@ (8009148 <MX_USB_DEVICE_Init+0x58>)
 800910a:	480e      	ldr	r0, [pc, #56]	@ (8009144 <MX_USB_DEVICE_Init+0x54>)
 800910c:	f7fe fd1e 	bl	8007b4c <USBD_RegisterClass>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009116:	f7f9 fe6b 	bl	8002df0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800911a:	490c      	ldr	r1, [pc, #48]	@ (800914c <MX_USB_DEVICE_Init+0x5c>)
 800911c:	4809      	ldr	r0, [pc, #36]	@ (8009144 <MX_USB_DEVICE_Init+0x54>)
 800911e:	f7fe fccb 	bl	8007ab8 <USBD_CUSTOM_HID_RegisterInterface>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009128:	f7f9 fe62 	bl	8002df0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800912c:	4805      	ldr	r0, [pc, #20]	@ (8009144 <MX_USB_DEVICE_Init+0x54>)
 800912e:	f7fe fd43 	bl	8007bb8 <USBD_Start>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009138:	f7f9 fe5a 	bl	8002df0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800913c:	bf00      	nop
 800913e:	bd80      	pop	{r7, pc}
 8009140:	200000bc 	.word	0x200000bc
 8009144:	2000028c 	.word	0x2000028c
 8009148:	2000000c 	.word	0x2000000c
 800914c:	200000ac 	.word	0x200000ac

08009150 <_ZL18CUSTOM_HID_Init_FSv>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009150:	b480      	push	{r7}
 8009152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009154:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009156:	4618      	mov	r0, r3
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <_ZL20CUSTOM_HID_DeInit_FSv>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009160:	b480      	push	{r7}
 8009162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009164:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009166:	4618      	mov	r0, r3
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <_ZL22CUSTOM_HID_OutEvent_FSPh>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* report_buffer)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8009178:	4829      	ldr	r0, [pc, #164]	@ (8009220 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb0>)
 800917a:	f7fe fc3d 	bl	80079f8 <USBD_CUSTOM_HID_ReceivePacket>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	bf14      	ite	ne
 8009184:	2301      	movne	r3, #1
 8009186:	2300      	moveq	r3, #0
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x24>
  {
    return -1;
 800918e:	f04f 33ff 	mov.w	r3, #4294967295
 8009192:	e040      	b.n	8009216 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xa6>
//  }

//  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report_buffer, 0x08);

//  memcpy(buffer, report_buffer, 0x08);
  if (report_buffer[0] == 0x01)  // Zakładamy, że 0x01 to komenda dla obrotu w lewo
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d11b      	bne.n	80091d4 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x64>
  {
//	  rotate_steering_wheel_left();
	  if(HAL_GPIO_ReadPin(LED_ERR_GPIO_Port, LED_ERR_Pin) == GPIO_PIN_SET){
 800919c:	2102      	movs	r1, #2
 800919e:	4821      	ldr	r0, [pc, #132]	@ (8009224 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb4>)
 80091a0:	f7fa fa92 	bl	80036c8 <HAL_GPIO_ReadPin>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	bf0c      	ite	eq
 80091aa:	2301      	moveq	r3, #1
 80091ac:	2300      	movne	r3, #0
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d005      	beq.n	80091c0 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x50>
	    	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 80091b4:	2200      	movs	r2, #0
 80091b6:	2102      	movs	r1, #2
 80091b8:	481a      	ldr	r0, [pc, #104]	@ (8009224 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb4>)
 80091ba:	f7fa fa9d 	bl	80036f8 <HAL_GPIO_WritePin>
 80091be:	e004      	b.n	80091ca <_ZL22CUSTOM_HID_OutEvent_FSPh+0x5a>
	  }
	  else {
	    	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80091c0:	2201      	movs	r2, #1
 80091c2:	2102      	movs	r1, #2
 80091c4:	4817      	ldr	r0, [pc, #92]	@ (8009224 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb4>)
 80091c6:	f7fa fa97 	bl	80036f8 <HAL_GPIO_WritePin>
	  }
	  tmc4671.moveBy(90);
 80091ca:	215a      	movs	r1, #90	@ 0x5a
 80091cc:	4816      	ldr	r0, [pc, #88]	@ (8009228 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb8>)
 80091ce:	f7f9 fbd7 	bl	8002980 <_ZN14TMC4671_Driver6moveByEs>
 80091d2:	e01f      	b.n	8009214 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xa4>
  }
  else if (report_buffer[0] == 0x02)  // Zakładamy, że 0x02 to komenda dla obrotu w prawo
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d11b      	bne.n	8009214 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xa4>
  {
//	  rotate_steering_wheel_right();
	  if(HAL_GPIO_ReadPin(LED_CLIP_GPIO_Port, LED_CLIP_Pin) == GPIO_PIN_SET){
 80091dc:	2101      	movs	r1, #1
 80091de:	4811      	ldr	r0, [pc, #68]	@ (8009224 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb4>)
 80091e0:	f7fa fa72 	bl	80036c8 <HAL_GPIO_ReadPin>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	bf0c      	ite	eq
 80091ea:	2301      	moveq	r3, #1
 80091ec:	2300      	movne	r3, #0
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d005      	beq.n	8009200 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x90>
	    	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
 80091f4:	2200      	movs	r2, #0
 80091f6:	2101      	movs	r1, #1
 80091f8:	480a      	ldr	r0, [pc, #40]	@ (8009224 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb4>)
 80091fa:	f7fa fa7d 	bl	80036f8 <HAL_GPIO_WritePin>
 80091fe:	e004      	b.n	800920a <_ZL22CUSTOM_HID_OutEvent_FSPh+0x9a>
	  }
	  else {
	    	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 8009200:	2201      	movs	r2, #1
 8009202:	2101      	movs	r1, #1
 8009204:	4807      	ldr	r0, [pc, #28]	@ (8009224 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb4>)
 8009206:	f7fa fa77 	bl	80036f8 <HAL_GPIO_WritePin>
	  }
	  tmc4671.moveBy(-90);
 800920a:	f06f 0159 	mvn.w	r1, #89	@ 0x59
 800920e:	4806      	ldr	r0, [pc, #24]	@ (8009228 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb8>)
 8009210:	f7f9 fbb6 	bl	8002980 <_ZN14TMC4671_Driver6moveByEs>
  }

//  buffer[0] = 0x01;
//  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, buffer, 0x08);

  return (USBD_OK);
 8009214:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	2000028c 	.word	0x2000028c
 8009224:	40021000 	.word	0x40021000
 8009228:	20000128 	.word	0x20000128

0800922c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	6039      	str	r1, [r7, #0]
 8009236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2212      	movs	r2, #18
 800923c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800923e:	4b03      	ldr	r3, [pc, #12]	@ (800924c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009240:	4618      	mov	r0, r3
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	200000d8 	.word	0x200000d8

08009250 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	4603      	mov	r3, r0
 8009258:	6039      	str	r1, [r7, #0]
 800925a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2204      	movs	r2, #4
 8009260:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009262:	4b03      	ldr	r3, [pc, #12]	@ (8009270 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009264:	4618      	mov	r0, r3
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	200000ec 	.word	0x200000ec

08009274 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	4603      	mov	r3, r0
 800927c:	6039      	str	r1, [r7, #0]
 800927e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009280:	79fb      	ldrb	r3, [r7, #7]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d105      	bne.n	8009292 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	4907      	ldr	r1, [pc, #28]	@ (80092a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800928a:	4808      	ldr	r0, [pc, #32]	@ (80092ac <USBD_FS_ProductStrDescriptor+0x38>)
 800928c:	f7ff fe44 	bl	8008f18 <USBD_GetString>
 8009290:	e004      	b.n	800929c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	4904      	ldr	r1, [pc, #16]	@ (80092a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009296:	4805      	ldr	r0, [pc, #20]	@ (80092ac <USBD_FS_ProductStrDescriptor+0x38>)
 8009298:	f7ff fe3e 	bl	8008f18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800929c:	4b02      	ldr	r3, [pc, #8]	@ (80092a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20000568 	.word	0x20000568
 80092ac:	08009b04 	.word	0x08009b04

080092b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	6039      	str	r1, [r7, #0]
 80092ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	4904      	ldr	r1, [pc, #16]	@ (80092d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092c0:	4804      	ldr	r0, [pc, #16]	@ (80092d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092c2:	f7ff fe29 	bl	8008f18 <USBD_GetString>
  return USBD_StrDesc;
 80092c6:	4b02      	ldr	r3, [pc, #8]	@ (80092d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	20000568 	.word	0x20000568
 80092d4:	08009b24 	.word	0x08009b24

080092d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	4603      	mov	r3, r0
 80092e0:	6039      	str	r1, [r7, #0]
 80092e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	221a      	movs	r2, #26
 80092e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092ea:	f000 f843 	bl	8009374 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092ee:	4b02      	ldr	r3, [pc, #8]	@ (80092f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	200000f0 	.word	0x200000f0

080092fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009308:	79fb      	ldrb	r3, [r7, #7]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d105      	bne.n	800931a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	4907      	ldr	r1, [pc, #28]	@ (8009330 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009312:	4808      	ldr	r0, [pc, #32]	@ (8009334 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009314:	f7ff fe00 	bl	8008f18 <USBD_GetString>
 8009318:	e004      	b.n	8009324 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	4904      	ldr	r1, [pc, #16]	@ (8009330 <USBD_FS_ConfigStrDescriptor+0x34>)
 800931e:	4805      	ldr	r0, [pc, #20]	@ (8009334 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009320:	f7ff fdfa 	bl	8008f18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009324:	4b02      	ldr	r3, [pc, #8]	@ (8009330 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20000568 	.word	0x20000568
 8009334:	08009b38 	.word	0x08009b38

08009338 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	4603      	mov	r3, r0
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d105      	bne.n	8009356 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	4907      	ldr	r1, [pc, #28]	@ (800936c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800934e:	4808      	ldr	r0, [pc, #32]	@ (8009370 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009350:	f7ff fde2 	bl	8008f18 <USBD_GetString>
 8009354:	e004      	b.n	8009360 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	4904      	ldr	r1, [pc, #16]	@ (800936c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800935a:	4805      	ldr	r0, [pc, #20]	@ (8009370 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800935c:	f7ff fddc 	bl	8008f18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009360:	4b02      	ldr	r3, [pc, #8]	@ (800936c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000568 	.word	0x20000568
 8009370:	08009b4c 	.word	0x08009b4c

08009374 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800937a:	4b0f      	ldr	r3, [pc, #60]	@ (80093b8 <Get_SerialNum+0x44>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009380:	4b0e      	ldr	r3, [pc, #56]	@ (80093bc <Get_SerialNum+0x48>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009386:	4b0e      	ldr	r3, [pc, #56]	@ (80093c0 <Get_SerialNum+0x4c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4413      	add	r3, r2
 8009392:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d009      	beq.n	80093ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800939a:	2208      	movs	r2, #8
 800939c:	4909      	ldr	r1, [pc, #36]	@ (80093c4 <Get_SerialNum+0x50>)
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 f814 	bl	80093cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093a4:	2204      	movs	r2, #4
 80093a6:	4908      	ldr	r1, [pc, #32]	@ (80093c8 <Get_SerialNum+0x54>)
 80093a8:	68b8      	ldr	r0, [r7, #8]
 80093aa:	f000 f80f 	bl	80093cc <IntToUnicode>
  }
}
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	1fff7a10 	.word	0x1fff7a10
 80093bc:	1fff7a14 	.word	0x1fff7a14
 80093c0:	1fff7a18 	.word	0x1fff7a18
 80093c4:	200000f2 	.word	0x200000f2
 80093c8:	20000102 	.word	0x20000102

080093cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	4613      	mov	r3, r2
 80093d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093de:	2300      	movs	r3, #0
 80093e0:	75fb      	strb	r3, [r7, #23]
 80093e2:	e027      	b.n	8009434 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	0f1b      	lsrs	r3, r3, #28
 80093e8:	2b09      	cmp	r3, #9
 80093ea:	d80b      	bhi.n	8009404 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	0f1b      	lsrs	r3, r3, #28
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	7dfb      	ldrb	r3, [r7, #23]
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	4619      	mov	r1, r3
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	440b      	add	r3, r1
 80093fc:	3230      	adds	r2, #48	@ 0x30
 80093fe:	b2d2      	uxtb	r2, r2
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	e00a      	b.n	800941a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	0f1b      	lsrs	r3, r3, #28
 8009408:	b2da      	uxtb	r2, r3
 800940a:	7dfb      	ldrb	r3, [r7, #23]
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	4619      	mov	r1, r3
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	440b      	add	r3, r1
 8009414:	3237      	adds	r2, #55	@ 0x37
 8009416:	b2d2      	uxtb	r2, r2
 8009418:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	011b      	lsls	r3, r3, #4
 800941e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009420:	7dfb      	ldrb	r3, [r7, #23]
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	3301      	adds	r3, #1
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	4413      	add	r3, r2
 800942a:	2200      	movs	r2, #0
 800942c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800942e:	7dfb      	ldrb	r3, [r7, #23]
 8009430:	3301      	adds	r3, #1
 8009432:	75fb      	strb	r3, [r7, #23]
 8009434:	7dfa      	ldrb	r2, [r7, #23]
 8009436:	79fb      	ldrb	r3, [r7, #7]
 8009438:	429a      	cmp	r2, r3
 800943a:	d3d3      	bcc.n	80093e4 <IntToUnicode+0x18>
  }
}
 800943c:	bf00      	nop
 800943e:	bf00      	nop
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
	...

0800944c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b08a      	sub	sp, #40	@ 0x28
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009454:	f107 0314 	add.w	r3, r7, #20
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	605a      	str	r2, [r3, #4]
 800945e:	609a      	str	r2, [r3, #8]
 8009460:	60da      	str	r2, [r3, #12]
 8009462:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800946c:	d147      	bne.n	80094fe <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800946e:	2300      	movs	r3, #0
 8009470:	613b      	str	r3, [r7, #16]
 8009472:	4b25      	ldr	r3, [pc, #148]	@ (8009508 <HAL_PCD_MspInit+0xbc>)
 8009474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009476:	4a24      	ldr	r2, [pc, #144]	@ (8009508 <HAL_PCD_MspInit+0xbc>)
 8009478:	f043 0301 	orr.w	r3, r3, #1
 800947c:	6313      	str	r3, [r2, #48]	@ 0x30
 800947e:	4b22      	ldr	r3, [pc, #136]	@ (8009508 <HAL_PCD_MspInit+0xbc>)
 8009480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	613b      	str	r3, [r7, #16]
 8009488:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800948a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800948e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009490:	2300      	movs	r3, #0
 8009492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009494:	2300      	movs	r3, #0
 8009496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009498:	f107 0314 	add.w	r3, r7, #20
 800949c:	4619      	mov	r1, r3
 800949e:	481b      	ldr	r0, [pc, #108]	@ (800950c <HAL_PCD_MspInit+0xc0>)
 80094a0:	f7f9 ff76 	bl	8003390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80094a4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80094a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094aa:	2302      	movs	r3, #2
 80094ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ae:	2300      	movs	r3, #0
 80094b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094b2:	2303      	movs	r3, #3
 80094b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094b6:	230a      	movs	r3, #10
 80094b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094ba:	f107 0314 	add.w	r3, r7, #20
 80094be:	4619      	mov	r1, r3
 80094c0:	4812      	ldr	r0, [pc, #72]	@ (800950c <HAL_PCD_MspInit+0xc0>)
 80094c2:	f7f9 ff65 	bl	8003390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094c6:	4b10      	ldr	r3, [pc, #64]	@ (8009508 <HAL_PCD_MspInit+0xbc>)
 80094c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ca:	4a0f      	ldr	r2, [pc, #60]	@ (8009508 <HAL_PCD_MspInit+0xbc>)
 80094cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094d0:	6353      	str	r3, [r2, #52]	@ 0x34
 80094d2:	2300      	movs	r3, #0
 80094d4:	60fb      	str	r3, [r7, #12]
 80094d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009508 <HAL_PCD_MspInit+0xbc>)
 80094d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094da:	4a0b      	ldr	r2, [pc, #44]	@ (8009508 <HAL_PCD_MspInit+0xbc>)
 80094dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80094e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80094e2:	4b09      	ldr	r3, [pc, #36]	@ (8009508 <HAL_PCD_MspInit+0xbc>)
 80094e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094ee:	2200      	movs	r2, #0
 80094f0:	2100      	movs	r1, #0
 80094f2:	2043      	movs	r0, #67	@ 0x43
 80094f4:	f7f9 ff15 	bl	8003322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094f8:	2043      	movs	r0, #67	@ 0x43
 80094fa:	f7f9 ff2e 	bl	800335a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094fe:	bf00      	nop
 8009500:	3728      	adds	r7, #40	@ 0x28
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	40023800 	.word	0x40023800
 800950c:	40020000 	.word	0x40020000

08009510 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009524:	4619      	mov	r1, r3
 8009526:	4610      	mov	r0, r2
 8009528:	f7fe fb93 	bl	8007c52 <USBD_LL_SetupStage>
}
 800952c:	bf00      	nop
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009546:	78fa      	ldrb	r2, [r7, #3]
 8009548:	6879      	ldr	r1, [r7, #4]
 800954a:	4613      	mov	r3, r2
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	4413      	add	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	440b      	add	r3, r1
 8009554:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	4619      	mov	r1, r3
 800955e:	f7fe fbcd 	bl	8007cfc <USBD_LL_DataOutStage>
}
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	460b      	mov	r3, r1
 8009574:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800957c:	78fa      	ldrb	r2, [r7, #3]
 800957e:	6879      	ldr	r1, [r7, #4]
 8009580:	4613      	mov	r3, r2
 8009582:	00db      	lsls	r3, r3, #3
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	440b      	add	r3, r1
 800958a:	3320      	adds	r3, #32
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	78fb      	ldrb	r3, [r7, #3]
 8009590:	4619      	mov	r1, r3
 8009592:	f7fe fc66 	bl	8007e62 <USBD_LL_DataInStage>
}
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b082      	sub	sp, #8
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fe fda0 	bl	80080f2 <USBD_LL_SOF>
}
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095c2:	2301      	movs	r3, #1
 80095c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	79db      	ldrb	r3, [r3, #7]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d102      	bne.n	80095d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80095ce:	2300      	movs	r3, #0
 80095d0:	73fb      	strb	r3, [r7, #15]
 80095d2:	e008      	b.n	80095e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	79db      	ldrb	r3, [r3, #7]
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d102      	bne.n	80095e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80095dc:	2301      	movs	r3, #1
 80095de:	73fb      	strb	r3, [r7, #15]
 80095e0:	e001      	b.n	80095e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80095e2:	f7f9 fc05 	bl	8002df0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095ec:	7bfa      	ldrb	r2, [r7, #15]
 80095ee:	4611      	mov	r1, r2
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fe fd3a 	bl	800806a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe fce2 	bl	8007fc6 <USBD_LL_Reset>
}
 8009602:	bf00      	nop
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe fd35 	bl	800808a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	6812      	ldr	r2, [r2, #0]
 800962e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009632:	f043 0301 	orr.w	r3, r3, #1
 8009636:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	7adb      	ldrb	r3, [r3, #11]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d005      	beq.n	800964c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009640:	4b04      	ldr	r3, [pc, #16]	@ (8009654 <HAL_PCD_SuspendCallback+0x48>)
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	4a03      	ldr	r2, [pc, #12]	@ (8009654 <HAL_PCD_SuspendCallback+0x48>)
 8009646:	f043 0306 	orr.w	r3, r3, #6
 800964a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800964c:	bf00      	nop
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	e000ed00 	.word	0xe000ed00

08009658 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009666:	4618      	mov	r0, r3
 8009668:	f7fe fd2b 	bl	80080c2 <USBD_LL_Resume>
}
 800966c:	bf00      	nop
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	4611      	mov	r1, r2
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fd83 	bl	8008196 <USBD_LL_IsoOUTIncomplete>
}
 8009690:	bf00      	nop
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	460b      	mov	r3, r1
 80096a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096aa:	78fa      	ldrb	r2, [r7, #3]
 80096ac:	4611      	mov	r1, r2
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fe fd3f 	bl	8008132 <USBD_LL_IsoINIncomplete>
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe fd95 	bl	80081fa <USBD_LL_DevConnected>
}
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fe fd92 	bl	8008210 <USBD_LL_DevDisconnected>
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d13c      	bne.n	800977e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009704:	4a20      	ldr	r2, [pc, #128]	@ (8009788 <USBD_LL_Init+0x94>)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a1e      	ldr	r2, [pc, #120]	@ (8009788 <USBD_LL_Init+0x94>)
 8009710:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009714:	4b1c      	ldr	r3, [pc, #112]	@ (8009788 <USBD_LL_Init+0x94>)
 8009716:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800971a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800971c:	4b1a      	ldr	r3, [pc, #104]	@ (8009788 <USBD_LL_Init+0x94>)
 800971e:	2204      	movs	r2, #4
 8009720:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009722:	4b19      	ldr	r3, [pc, #100]	@ (8009788 <USBD_LL_Init+0x94>)
 8009724:	2202      	movs	r2, #2
 8009726:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009728:	4b17      	ldr	r3, [pc, #92]	@ (8009788 <USBD_LL_Init+0x94>)
 800972a:	2200      	movs	r2, #0
 800972c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800972e:	4b16      	ldr	r3, [pc, #88]	@ (8009788 <USBD_LL_Init+0x94>)
 8009730:	2202      	movs	r2, #2
 8009732:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009734:	4b14      	ldr	r3, [pc, #80]	@ (8009788 <USBD_LL_Init+0x94>)
 8009736:	2200      	movs	r2, #0
 8009738:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800973a:	4b13      	ldr	r3, [pc, #76]	@ (8009788 <USBD_LL_Init+0x94>)
 800973c:	2200      	movs	r2, #0
 800973e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009740:	4b11      	ldr	r3, [pc, #68]	@ (8009788 <USBD_LL_Init+0x94>)
 8009742:	2200      	movs	r2, #0
 8009744:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009746:	4b10      	ldr	r3, [pc, #64]	@ (8009788 <USBD_LL_Init+0x94>)
 8009748:	2201      	movs	r2, #1
 800974a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800974c:	4b0e      	ldr	r3, [pc, #56]	@ (8009788 <USBD_LL_Init+0x94>)
 800974e:	2200      	movs	r2, #0
 8009750:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009752:	480d      	ldr	r0, [pc, #52]	@ (8009788 <USBD_LL_Init+0x94>)
 8009754:	f7f9 ffe9 	bl	800372a <HAL_PCD_Init>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800975e:	f7f9 fb47 	bl	8002df0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009762:	2180      	movs	r1, #128	@ 0x80
 8009764:	4808      	ldr	r0, [pc, #32]	@ (8009788 <USBD_LL_Init+0x94>)
 8009766:	f7fb f9fe 	bl	8004b66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800976a:	2240      	movs	r2, #64	@ 0x40
 800976c:	2100      	movs	r1, #0
 800976e:	4806      	ldr	r0, [pc, #24]	@ (8009788 <USBD_LL_Init+0x94>)
 8009770:	f7fb f9b2 	bl	8004ad8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009774:	2280      	movs	r2, #128	@ 0x80
 8009776:	2101      	movs	r1, #1
 8009778:	4803      	ldr	r0, [pc, #12]	@ (8009788 <USBD_LL_Init+0x94>)
 800977a:	f7fb f9ad 	bl	8004ad8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	20000768 	.word	0x20000768

0800978c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fa f8d0 	bl	8003948 <HAL_PCD_Start>
 80097a8:	4603      	mov	r3, r0
 80097aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 f930 	bl	8009a14 <USBD_Get_USB_Status>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	4608      	mov	r0, r1
 80097cc:	4611      	mov	r1, r2
 80097ce:	461a      	mov	r2, r3
 80097d0:	4603      	mov	r3, r0
 80097d2:	70fb      	strb	r3, [r7, #3]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70bb      	strb	r3, [r7, #2]
 80097d8:	4613      	mov	r3, r2
 80097da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80097ea:	78bb      	ldrb	r3, [r7, #2]
 80097ec:	883a      	ldrh	r2, [r7, #0]
 80097ee:	78f9      	ldrb	r1, [r7, #3]
 80097f0:	f7fa fda4 	bl	800433c <HAL_PCD_EP_Open>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 f90a 	bl	8009a14 <USBD_Get_USB_Status>
 8009800:	4603      	mov	r3, r0
 8009802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009804:	7bbb      	ldrb	r3, [r7, #14]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b084      	sub	sp, #16
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	460b      	mov	r3, r1
 8009818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009828:	78fa      	ldrb	r2, [r7, #3]
 800982a:	4611      	mov	r1, r2
 800982c:	4618      	mov	r0, r3
 800982e:	f7fa fdef 	bl	8004410 <HAL_PCD_EP_Close>
 8009832:	4603      	mov	r3, r0
 8009834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	4618      	mov	r0, r3
 800983a:	f000 f8eb 	bl	8009a14 <USBD_Get_USB_Status>
 800983e:	4603      	mov	r3, r0
 8009840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009842:	7bbb      	ldrb	r3, [r7, #14]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	460b      	mov	r3, r1
 8009856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009866:	78fa      	ldrb	r2, [r7, #3]
 8009868:	4611      	mov	r1, r2
 800986a:	4618      	mov	r0, r3
 800986c:	f7fa fe8f 	bl	800458e <HAL_PCD_EP_SetStall>
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	4618      	mov	r0, r3
 8009878:	f000 f8cc 	bl	8009a14 <USBD_Get_USB_Status>
 800987c:	4603      	mov	r3, r0
 800987e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009880:	7bbb      	ldrb	r3, [r7, #14]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b084      	sub	sp, #16
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	460b      	mov	r3, r1
 8009894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098a4:	78fa      	ldrb	r2, [r7, #3]
 80098a6:	4611      	mov	r1, r2
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fa fed3 	bl	8004654 <HAL_PCD_EP_ClrStall>
 80098ae:	4603      	mov	r3, r0
 80098b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 f8ad 	bl	8009a14 <USBD_Get_USB_Status>
 80098ba:	4603      	mov	r3, r0
 80098bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098be:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	460b      	mov	r3, r1
 80098d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	da0b      	bge.n	80098fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098ea:	68f9      	ldr	r1, [r7, #12]
 80098ec:	4613      	mov	r3, r2
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	4413      	add	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	440b      	add	r3, r1
 80098f6:	3316      	adds	r3, #22
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	e00b      	b.n	8009914 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009902:	68f9      	ldr	r1, [r7, #12]
 8009904:	4613      	mov	r3, r2
 8009906:	00db      	lsls	r3, r3, #3
 8009908:	4413      	add	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009912:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800993a:	78fa      	ldrb	r2, [r7, #3]
 800993c:	4611      	mov	r1, r2
 800993e:	4618      	mov	r0, r3
 8009940:	f7fa fcd8 	bl	80042f4 <HAL_PCD_SetAddress>
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	4618      	mov	r0, r3
 800994c:	f000 f862 	bl	8009a14 <USBD_Get_USB_Status>
 8009950:	4603      	mov	r3, r0
 8009952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009954:	7bbb      	ldrb	r3, [r7, #14]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b086      	sub	sp, #24
 8009962:	af00      	add	r7, sp, #0
 8009964:	60f8      	str	r0, [r7, #12]
 8009966:	607a      	str	r2, [r7, #4]
 8009968:	603b      	str	r3, [r7, #0]
 800996a:	460b      	mov	r3, r1
 800996c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800997c:	7af9      	ldrb	r1, [r7, #11]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	f7fa fdca 	bl	800451a <HAL_PCD_EP_Transmit>
 8009986:	4603      	mov	r3, r0
 8009988:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800998a:	7dfb      	ldrb	r3, [r7, #23]
 800998c:	4618      	mov	r0, r3
 800998e:	f000 f841 	bl	8009a14 <USBD_Get_USB_Status>
 8009992:	4603      	mov	r3, r0
 8009994:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009996:	7dbb      	ldrb	r3, [r7, #22]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3718      	adds	r7, #24
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	607a      	str	r2, [r7, #4]
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	460b      	mov	r3, r1
 80099ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80099be:	7af9      	ldrb	r1, [r7, #11]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	f7fa fd6e 	bl	80044a4 <HAL_PCD_EP_Receive>
 80099c8:	4603      	mov	r3, r0
 80099ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 f820 	bl	8009a14 <USBD_Get_USB_Status>
 80099d4:	4603      	mov	r3, r0
 80099d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3718      	adds	r7, #24
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
	...

080099e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80099ec:	4b03      	ldr	r3, [pc, #12]	@ (80099fc <USBD_static_malloc+0x18>)
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	20000c4c 	.word	0x20000c4c

08009a00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]

}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a22:	79fb      	ldrb	r3, [r7, #7]
 8009a24:	2b03      	cmp	r3, #3
 8009a26:	d817      	bhi.n	8009a58 <USBD_Get_USB_Status+0x44>
 8009a28:	a201      	add	r2, pc, #4	@ (adr r2, 8009a30 <USBD_Get_USB_Status+0x1c>)
 8009a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2e:	bf00      	nop
 8009a30:	08009a41 	.word	0x08009a41
 8009a34:	08009a47 	.word	0x08009a47
 8009a38:	08009a4d 	.word	0x08009a4d
 8009a3c:	08009a53 	.word	0x08009a53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	73fb      	strb	r3, [r7, #15]
    break;
 8009a44:	e00b      	b.n	8009a5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a46:	2303      	movs	r3, #3
 8009a48:	73fb      	strb	r3, [r7, #15]
    break;
 8009a4a:	e008      	b.n	8009a5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a50:	e005      	b.n	8009a5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a52:	2303      	movs	r3, #3
 8009a54:	73fb      	strb	r3, [r7, #15]
    break;
 8009a56:	e002      	b.n	8009a5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a5c:	bf00      	nop
  }
  return usb_status;
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <memset>:
 8009a6c:	4402      	add	r2, r0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d100      	bne.n	8009a76 <memset+0xa>
 8009a74:	4770      	bx	lr
 8009a76:	f803 1b01 	strb.w	r1, [r3], #1
 8009a7a:	e7f9      	b.n	8009a70 <memset+0x4>

08009a7c <__libc_init_array>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	4d0d      	ldr	r5, [pc, #52]	@ (8009ab4 <__libc_init_array+0x38>)
 8009a80:	4c0d      	ldr	r4, [pc, #52]	@ (8009ab8 <__libc_init_array+0x3c>)
 8009a82:	1b64      	subs	r4, r4, r5
 8009a84:	10a4      	asrs	r4, r4, #2
 8009a86:	2600      	movs	r6, #0
 8009a88:	42a6      	cmp	r6, r4
 8009a8a:	d109      	bne.n	8009aa0 <__libc_init_array+0x24>
 8009a8c:	4d0b      	ldr	r5, [pc, #44]	@ (8009abc <__libc_init_array+0x40>)
 8009a8e:	4c0c      	ldr	r4, [pc, #48]	@ (8009ac0 <__libc_init_array+0x44>)
 8009a90:	f000 f826 	bl	8009ae0 <_init>
 8009a94:	1b64      	subs	r4, r4, r5
 8009a96:	10a4      	asrs	r4, r4, #2
 8009a98:	2600      	movs	r6, #0
 8009a9a:	42a6      	cmp	r6, r4
 8009a9c:	d105      	bne.n	8009aaa <__libc_init_array+0x2e>
 8009a9e:	bd70      	pop	{r4, r5, r6, pc}
 8009aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aa4:	4798      	blx	r3
 8009aa6:	3601      	adds	r6, #1
 8009aa8:	e7ee      	b.n	8009a88 <__libc_init_array+0xc>
 8009aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aae:	4798      	blx	r3
 8009ab0:	3601      	adds	r6, #1
 8009ab2:	e7f2      	b.n	8009a9a <__libc_init_array+0x1e>
 8009ab4:	08009da4 	.word	0x08009da4
 8009ab8:	08009da4 	.word	0x08009da4
 8009abc:	08009da4 	.word	0x08009da4
 8009ac0:	08009dac 	.word	0x08009dac

08009ac4 <memcpy>:
 8009ac4:	440a      	add	r2, r1
 8009ac6:	4291      	cmp	r1, r2
 8009ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009acc:	d100      	bne.n	8009ad0 <memcpy+0xc>
 8009ace:	4770      	bx	lr
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ada:	4291      	cmp	r1, r2
 8009adc:	d1f9      	bne.n	8009ad2 <memcpy+0xe>
 8009ade:	bd10      	pop	{r4, pc}

08009ae0 <_init>:
 8009ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae2:	bf00      	nop
 8009ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ae6:	bc08      	pop	{r3}
 8009ae8:	469e      	mov	lr, r3
 8009aea:	4770      	bx	lr

08009aec <_fini>:
 8009aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aee:	bf00      	nop
 8009af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009af2:	bc08      	pop	{r3}
 8009af4:	469e      	mov	lr, r3
 8009af6:	4770      	bx	lr
