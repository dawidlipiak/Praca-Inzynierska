
Praca-Inzynierksa-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08009474  08009474  0000a474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009718  08009718  0000b10c  2**0
                  CONTENTS
  4 .ARM          00000008  08009718  08009718  0000a718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009720  08009720  0000b10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009720  08009720  0000a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009728  08009728  0000a728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  0800972c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b10c  2**0
                  CONTENTS
 10 .bss          00000be0  2000010c  2000010c  0000b10c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000cec  20000cec  0000b10c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd02  00000000  00000000  0000b13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040e9  00000000  00000000  0002ae3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001408  00000000  00000000  0002ef28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2f  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006320  00000000  00000000  0003125f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b61  00000000  00000000  0003757f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd49d  00000000  00000000  000510e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e57d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005388  00000000  00000000  0012e5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  00133948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000010c 	.word	0x2000010c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800945c 	.word	0x0800945c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000110 	.word	0x20000110
 80001c4:	0800945c 	.word	0x0800945c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	bfb8      	it	lt
 80004c6:	425b      	neglt	r3, r3
 80004c8:	4618      	mov	r0, r3
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <_ZL20tmc4671_readRegisterh>:
#define STATE_WAIT_INIT_TIME   2
#define STATE_ESTIMATE_OFFSET  3

// spi access
static uint32_t tmc4671_readRegister(uint8_t address)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	@ 0x28
 80004d8:	af02      	add	r7, sp, #8
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[5] = { 0 };
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]
 80004e2:	2300      	movs	r3, #0
 80004e4:	763b      	strb	r3, [r7, #24]
    uint8_t rxBuf[5];

    // clear write bit
    txBuf[0] = TMC4671_ADDRESS_MASK & address;
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	753b      	strb	r3, [r7, #20]

    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2110      	movs	r1, #16
 80004f4:	480f      	ldr	r0, [pc, #60]	@ (8000534 <_ZL20tmc4671_readRegisterh+0x60>)
 80004f6:	f002 fcbf 	bl	8002e78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, txBuf, rxBuf, 5, 200);
 80004fa:	f107 020c 	add.w	r2, r7, #12
 80004fe:	f107 0114 	add.w	r1, r7, #20
 8000502:	23c8      	movs	r3, #200	@ 0xc8
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2305      	movs	r3, #5
 8000508:	480b      	ldr	r0, [pc, #44]	@ (8000538 <_ZL20tmc4671_readRegisterh+0x64>)
 800050a:	f004 fd46 	bl	8004f9a <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2110      	movs	r1, #16
 8000512:	4808      	ldr	r0, [pc, #32]	@ (8000534 <_ZL20tmc4671_readRegisterh+0x60>)
 8000514:	f002 fcb0 	bl	8002e78 <HAL_GPIO_WritePin>

    uint32_t ret;
	memcpy(&ret, &rxBuf[1], 4);  // Bajty danych zaczynają się od rxBuf[1]
 8000518:	f8d7 300d 	ldr.w	r3, [r7, #13]
 800051c:	60bb      	str	r3, [r7, #8]
	ret = __REV(ret);  // Konwersja do little-endian
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	61fb      	str	r3, [r7, #28]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	ba1b      	rev	r3, r3
 8000526:	bf00      	nop
 8000528:	60bb      	str	r3, [r7, #8]

	return ret;
 800052a:	68bb      	ldr	r3, [r7, #8]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40020000 	.word	0x40020000
 8000538:	2000022c 	.word	0x2000022c

0800053c <_ZL21tmc4671_writeRegisterhm>:

static void tmc4671_writeRegister(uint8_t address, uint32_t value)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	6039      	str	r1, [r7, #0]
 8000546:	71fb      	strb	r3, [r7, #7]
    uint8_t data[5] = { 0 };
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	2300      	movs	r3, #0
 800054e:	743b      	strb	r3, [r7, #16]

    data[0] = TMC4671_WRITE_BIT | address;
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000556:	b2db      	uxtb	r3, r3
 8000558:	733b      	strb	r3, [r7, #12]

    value =__REV(value);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	ba1b      	rev	r3, r3
 8000562:	bf00      	nop
 8000564:	603b      	str	r3, [r7, #0]
	memcpy(data+1,&value,4);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	3301      	adds	r3, #1
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	601a      	str	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2110      	movs	r1, #16
 8000574:	4809      	ldr	r0, [pc, #36]	@ (800059c <_ZL21tmc4671_writeRegisterhm+0x60>)
 8000576:	f002 fc7f 	bl	8002e78 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, 5, 200);
 800057a:	f107 010c 	add.w	r1, r7, #12
 800057e:	23c8      	movs	r3, #200	@ 0xc8
 8000580:	2205      	movs	r2, #5
 8000582:	4807      	ldr	r0, [pc, #28]	@ (80005a0 <_ZL21tmc4671_writeRegisterhm+0x64>)
 8000584:	f004 fbc5 	bl	8004d12 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2110      	movs	r1, #16
 800058c:	4803      	ldr	r0, [pc, #12]	@ (800059c <_ZL21tmc4671_writeRegisterhm+0x60>)
 800058e:	f002 fc73 	bl	8002e78 <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40020000 	.word	0x40020000
 80005a0:	2000022c 	.word	0x2000022c

080005a4 <_ZL20tmc4671_fieldExtractm13RegisterField>:

static uint32_t tmc4671_fieldExtract(uint32_t data, RegisterField field)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b089      	sub	sp, #36	@ 0x24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	e883 0006 	stmia.w	r3, {r1, r2}
    uint32_t value = (data & field.mask) >> field.shift;
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4013      	ands	r3, r2
 80005b8:	7a3a      	ldrb	r2, [r7, #8]
 80005ba:	40d3      	lsrs	r3, r2
 80005bc:	61fb      	str	r3, [r7, #28]

    if (field.isSigned)
 80005be:	7abb      	ldrb	r3, [r7, #10]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d00f      	beq.n	80005e4 <_ZL20tmc4671_fieldExtractm13RegisterField+0x40>
    {
        uint32_t baseMask = field.mask >> field.shift;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	7a3a      	ldrb	r2, [r7, #8]
 80005c8:	40d3      	lsrs	r3, r2
 80005ca:	61bb      	str	r3, [r7, #24]
        uint32_t signMask = baseMask & (~baseMask >> 1);
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	43db      	mvns	r3, r3
 80005d0:	085b      	lsrs	r3, r3, #1
 80005d2:	69ba      	ldr	r2, [r7, #24]
 80005d4:	4013      	ands	r3, r2
 80005d6:	617b      	str	r3, [r7, #20]
        value = (value ^ signMask) - signMask;
 80005d8:	69fa      	ldr	r2, [r7, #28]
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	405a      	eors	r2, r3
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	61fb      	str	r3, [r7, #28]
    }

    return value;
 80005e4:	69fb      	ldr	r3, [r7, #28]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3724      	adds	r7, #36	@ 0x24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <_ZL17tmc4671_fieldRead13RegisterField>:

static inline uint32_t tmc4671_fieldRead(RegisterField field)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b084      	sub	sp, #16
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	463b      	mov	r3, r7
 80005fa:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t value = tmc4671_readRegister(field.address);
 80005fe:	797b      	ldrb	r3, [r7, #5]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ff67 	bl	80004d4 <_ZL20tmc4671_readRegisterh>
 8000606:	60f8      	str	r0, [r7, #12]
    return tmc4671_fieldExtract(value, field);
 8000608:	463b      	mov	r3, r7
 800060a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800060e:	68f8      	ldr	r0, [r7, #12]
 8000610:	f7ff ffc8 	bl	80005a4 <_ZL20tmc4671_fieldExtractm13RegisterField>
 8000614:	4603      	mov	r3, r0
}
 8000616:	4618      	mov	r0, r3
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <_ZL19tmc4671_fieldUpdatem13RegisterFieldm>:

static inline uint32_t tmc4671_fieldUpdate(uint32_t data, RegisterField field, uint32_t value)
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	1d38      	adds	r0, r7, #4
 8000628:	e880 0006 	stmia.w	r0, {r1, r2}
 800062c:	603b      	str	r3, [r7, #0]
    return (data & (~field.mask)) | ((value << field.shift) & field.mask);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	43da      	mvns	r2, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	401a      	ands	r2, r3
 8000636:	7a3b      	ldrb	r3, [r7, #8]
 8000638:	4619      	mov	r1, r3
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	fa03 f101 	lsl.w	r1, r3, r1
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	400b      	ands	r3, r1
 8000644:	4313      	orrs	r3, r2
}
 8000646:	4618      	mov	r0, r3
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>:

static inline void tmc4671_fieldWrite(RegisterField field, uint32_t value)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b086      	sub	sp, #24
 8000656:	af00      	add	r7, sp, #0
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000660:	607a      	str	r2, [r7, #4]
    uint32_t regValue = tmc4671_readRegister(field.address);
 8000662:	7b7b      	ldrb	r3, [r7, #13]
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff35 	bl	80004d4 <_ZL20tmc4671_readRegisterh>
 800066a:	6178      	str	r0, [r7, #20]
    regValue = tmc4671_fieldUpdate(regValue, field, value);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f107 0208 	add.w	r2, r7, #8
 8000672:	ca06      	ldmia	r2, {r1, r2}
 8000674:	6978      	ldr	r0, [r7, #20]
 8000676:	f7ff ffd2 	bl	800061e <_ZL19tmc4671_fieldUpdatem13RegisterFieldm>
 800067a:	6178      	str	r0, [r7, #20]
    tmc4671_writeRegister(field.address, regValue);
 800067c:	7b7b      	ldrb	r3, [r7, #13]
 800067e:	6979      	ldr	r1, [r7, #20]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff5b 	bl	800053c <_ZL21tmc4671_writeRegisterhm>
}
 8000686:	bf00      	nop
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZN15TMC4671Biquad_tC1Ev>:
	int16_t phiMoffset 		= 0;
	uint16_t dPhiMax 		= 10922;
};

enum class TMCbiquadpreset : uint8_t {none=0,lowpass=1,notch=2,peak=3};
struct TMC4671Biquad_t{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	751a      	strb	r2, [r3, #20]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <_ZN13TMC4671BiquadC1Eb>:
	float gain = 10.0; // Gain for peak mode
};

class TMC4671Biquad{
public:
	TMC4671Biquad(bool enable = false){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffd9 	bl	800068e <_ZN15TMC4671Biquad_tC1Ev>
		params.enable = enable;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	78fa      	ldrb	r2, [r7, #3]
 80006e0:	751a      	strb	r2, [r3, #20]
	}
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <_ZN10HallConfigC1Ev>:
struct HallConfig{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2201      	movs	r2, #1
 80006fe:	705a      	strb	r2, [r3, #1]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2201      	movs	r2, #1
 8000704:	709a      	strb	r2, [r3, #2]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	70da      	strb	r2, [r3, #3]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2201      	movs	r2, #1
 8000710:	711a      	strb	r2, [r3, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2264      	movs	r2, #100	@ 0x64
 8000716:	80da      	strh	r2, [r3, #6]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	811a      	strh	r2, [r3, #8]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f642 22aa 	movw	r2, #10922	@ 0x2aaa
 8000724:	815a      	strh	r2, [r3, #10]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f245 5255 	movw	r2, #21845	@ 0x5555
 800072c:	819a      	strh	r2, [r3, #12]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000734:	81da      	strh	r2, [r3, #14]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800073c:	821a      	strh	r2, [r3, #16]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f24d 5255 	movw	r2, #54613	@ 0xd555
 8000744:	825a      	strh	r2, [r3, #18]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	829a      	strh	r2, [r3, #20]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	82da      	strh	r2, [r3, #22]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f642 22aa 	movw	r2, #10922	@ 0x2aaa
 8000758:	831a      	strh	r2, [r3, #24]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <_ZN9PIDConfigC1Ev>:
	TMC4671Biquad pos;
	TMC4671Biquad vel;
};


struct PIDConfig{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000776:	801a      	strh	r2, [r3, #0]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800077e:	805a      	strh	r2, [r3, #2]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000786:	809a      	strh	r2, [r3, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800078e:	80da      	strh	r2, [r3, #6]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	811a      	strh	r2, [r3, #8]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800079c:	815a      	strh	r2, [r3, #10]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	819a      	strh	r2, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2280      	movs	r2, #128	@ 0x80
 80007a8:	81da      	strh	r2, [r3, #14]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2201      	movs	r2, #1
 80007ae:	741a      	strb	r2, [r3, #16]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <_ZN13TMC4671LimitsC1Ev>:
	bool velocity_P	= false;
	bool position_I	= false;
	bool position_P	= false;
};

struct TMC4671Limits{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80007ce:	801a      	strh	r2, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f247 5230 	movw	r2, #30000	@ 0x7530
 80007d6:	805a      	strh	r2, [r3, #2]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f247 5230 	movw	r2, #30000	@ 0x7530
 80007de:	809a      	strh	r2, [r3, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a06      	ldr	r2, [pc, #24]	@ (800080c <_ZN13TMC4671LimitsC1Ev+0x4c>)
 80007f4:	611a      	str	r2, [r3, #16]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80007fc:	615a      	str	r2, [r3, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	80000001 	.word	0x80000001

08000810 <_ZN9AdcConfigC1Ev>:
struct AdcConfig{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800081e:	801a      	strh	r2, [r3, #0]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000826:	805a      	strh	r2, [r3, #2]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f248 2287 	movw	r2, #33415	@ 0x8287
 800083e:	819a      	strh	r2, [r3, #12]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f248 2287 	movw	r2, #33415	@ 0x8287
 8000846:	81da      	strh	r2, [r3, #14]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800084e:	821a      	strh	r2, [r3, #16]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000856:	825a      	strh	r2, [r3, #18]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <_ZN10ABNencoderC1Ev>:
struct ABNencoder{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f242 7210 	movw	r2, #10000	@ 0x2710
 800087a:	801a      	strh	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	b29a      	uxth	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	805a      	strh	r2, [r3, #2]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2204      	movs	r2, #4
 800088c:	711a      	strb	r2, [r3, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	715a      	strb	r2, [r3, #5]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	719a      	strb	r2, [r3, #6]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	71da      	strb	r2, [r3, #7]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2201      	movs	r2, #1
 80008a4:	721a      	strb	r2, [r3, #8]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	725a      	strb	r2, [r3, #9]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	729a      	strb	r2, [r3, #10]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	819a      	strh	r2, [r3, #12]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	81da      	strh	r2, [r3, #14]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	821a      	strh	r2, [r3, #16]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	749a      	strb	r2, [r3, #18]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	74da      	strb	r2, [r3, #19]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	751a      	strb	r2, [r3, #20]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	755a      	strb	r2, [r3, #21]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	759a      	strb	r2, [r3, #22]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <_ZN12PidPrecisionC1Ev>:
struct PidPrecision{ // Switch between Q8.8 (false) and Q4.12 (true) precision for pid controller
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	705a      	strb	r2, [r3, #1]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	709a      	strb	r2, [r3, #2]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	70da      	strb	r2, [r3, #3]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	711a      	strb	r2, [r3, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	715a      	strb	r2, [r3, #5]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <_ZN18TMC4671Biquad_confC1Ev>:
struct TMC4671Biquad_conf{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a06      	ldr	r2, [pc, #24]	@ (8000958 <_ZN18TMC4671Biquad_confC1Ev+0x2c>)
 800093e:	3302      	adds	r3, #2
 8000940:	6810      	ldr	r0, [r2, #0]
 8000942:	6018      	str	r0, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a05      	ldr	r2, [pc, #20]	@ (800095c <_ZN18TMC4671Biquad_confC1Ev+0x30>)
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	08009474 	.word	0x08009474
 800095c:	41200000 	.word	0x41200000

08000960 <_ZN20TMC4671BiquadFiltersC1Ev>:
struct TMC4671BiquadFilters{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff feab 	bl	80006c8 <_ZN13TMC4671BiquadC1Eb>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3318      	adds	r3, #24
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fea5 	bl	80006c8 <_ZN13TMC4671BiquadC1Eb>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3330      	adds	r3, #48	@ 0x30
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fe9f 	bl	80006c8 <_ZN13TMC4671BiquadC1Eb>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3348      	adds	r3, #72	@ 0x48
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe99 	bl	80006c8 <_ZN13TMC4671BiquadC1Eb>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_ZN14TMC4671_DriverC1Ev>:
	TMC_ERROR_MOTOR 	= 0x08,
	TMC_ERROR_VALUE 	= 0x10,
	TMC_ERROR_CHIP 		= 0x40
} TMCError;

class TMC4671_Driver {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fe9e 	bl	80006ec <_ZN10HallConfigC1Ev>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	331a      	adds	r3, #26
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fed7 	bl	8000768 <_ZN9PIDConfigC1Ev>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	332c      	adds	r3, #44	@ 0x2c
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fefe 	bl	80007c0 <_ZN13TMC4671LimitsC1Ev>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3344      	adds	r3, #68	@ 0x44
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff21 	bl	8000810 <_ZN9AdcConfigC1Ev>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	335c      	adds	r3, #92	@ 0x5c
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff4a 	bl	800086c <_ZN10ABNencoderC1Ev>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3374      	adds	r3, #116	@ 0x74
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff87 	bl	80008f0 <_ZN12PidPrecisionC1Ev>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	337c      	adds	r3, #124	@ 0x7c
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ffa0 	bl	800092c <_ZN18TMC4671Biquad_confC1Ev>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3388      	adds	r3, #136	@ 0x88
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ffb5 	bl	8000960 <_ZN20TMC4671BiquadFiltersC1Ev>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2203      	movs	r2, #3
 80009fa:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000a2c:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2232      	movs	r2, #50	@ 0x32
 8000a34:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2232      	movs	r2, #50	@ 0x32
 8000a3c:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f24c 620c 	movw	r2, #50700	@ 0xc60c
 8000a46:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f24c 62d4 	movw	r2, #50900	@ 0xc6d4
 8000a50:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f242 3228 	movw	r2, #9000	@ 0x2328
 8000a5a:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>:

#include <TMC4671_controller.h>

TMC4671_Driver tmc4671;

void TMC4671_Driver::setDriverState(DriverState state) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
	if (state == DRIVER_DISABLE) {
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d109      	bne.n	8000aae <_ZN14TMC4671_Driver14setDriverStateE11DriverState+0x26>
		this->driverState = DRIVER_DISABLE;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
		HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2180      	movs	r1, #128	@ 0x80
 8000aa6:	4808      	ldr	r0, [pc, #32]	@ (8000ac8 <_ZN14TMC4671_Driver14setDriverStateE11DriverState+0x40>)
 8000aa8:	f002 f9e6 	bl	8002e78 <HAL_GPIO_WritePin>
	} else {
		this->driverState = DRIVER_ENABLE;
		HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_SET);
	}
}
 8000aac:	e008      	b.n	8000ac0 <_ZN14TMC4671_Driver14setDriverStateE11DriverState+0x38>
		this->driverState = DRIVER_ENABLE;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
		HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2180      	movs	r1, #128	@ 0x80
 8000aba:	4803      	ldr	r0, [pc, #12]	@ (8000ac8 <_ZN14TMC4671_Driver14setDriverStateE11DriverState+0x40>)
 8000abc:	f002 f9dc 	bl	8002e78 <HAL_GPIO_WritePin>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000

08000acc <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>:

void TMC4671_Driver::setMotionMode(MotionMode mode){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	70fb      	strb	r3, [r7, #3]
//		return;
//	}
//	if(mode != curMotionMode){
//		lastMotionMode = curMotionMode;
//	}
	this->curr_motionMode = mode;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	78fa      	ldrb	r2, [r7, #3]
 8000adc:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
	tmc4671_fieldWrite(TMC4671_MODE_MOTION_FIELD, (uint8_t) mode);
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	4904      	ldr	r1, [pc, #16]	@ (8000af4 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode+0x28>)
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	c903      	ldmia	r1, {r0, r1}
 8000ae8:	f7ff fdb3 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	080096e0 	.word	0x080096e0

08000af8 <_ZN14TMC4671_Driver13getMotionModeEv>:

MotionMode TMC4671_Driver::getMotionMode(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	this->curr_motionMode = (MotionMode) tmc4671_fieldRead(TMC4671_MODE_MOTION_FIELD);
 8000b00:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <_ZN14TMC4671_Driver13getMotionModeEv+0x2c>)
 8000b02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b06:	f7ff fd74 	bl	80005f2 <_ZL17tmc4671_fieldRead13RegisterField>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
	return this->curr_motionMode;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	080096e0 	.word	0x080096e0

08000b28 <_ZN14TMC4671_Driver11getPhiETypeEv>:

PhiE TMC4671_Driver::getPhiEType(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	this->phiEType = (PhiE) (tmc4671_fieldRead(TMC4671_PHI_E_SELECTION_FIELD) & 0x07);
 8000b30:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <_ZN14TMC4671_Driver11getPhiETypeEv+0x30>)
 8000b32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b36:	f7ff fd5c 	bl	80005f2 <_ZL17tmc4671_fieldRead13RegisterField>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
	return this->phiEType;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	08009698 	.word	0x08009698

08000b5c <_ZN14TMC4671_Driver7getPhiEEv>:

int16_t TMC4671_Driver::getPhiE(){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	return (int16_t)tmc4671_readRegister(TMC4671_PHI_E);
 8000b64:	2053      	movs	r0, #83	@ 0x53
 8000b66:	f7ff fcb5 	bl	80004d4 <_ZL20tmc4671_readRegisterh>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	b21b      	sxth	r3, r3
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <_ZN14TMC4671_Driver11getPhiE_EncEv>:

/**
 * Reads phiE directly from the encoder selection instead of the current phiE selection
 */
int16_t TMC4671_Driver::getPhiE_Enc(){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	if(this->encoderType == EncoderType::abn){
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d107      	bne.n	8000b9a <_ZN14TMC4671_Driver11getPhiE_EncEv+0x22>
		return (int16_t)tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_E_FIELD);
 8000b8a:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <_ZN14TMC4671_Driver11getPhiE_EncEv+0x74>)
 8000b8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b90:	f7ff fd2f 	bl	80005f2 <_ZL17tmc4671_fieldRead13RegisterField>
 8000b94:	4603      	mov	r3, r0
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	e023      	b.n	8000be2 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x6a>
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d004      	beq.n	8000bae <_ZN14TMC4671_Driver11getPhiE_EncEv+0x36>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d107      	bne.n	8000bbe <_ZN14TMC4671_Driver11getPhiE_EncEv+0x46>
		return (int16_t)tmc4671_fieldRead(TMC4671_AENC_DECODER_PHI_E_FIELD);
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x78>)
 8000bb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bb4:	f7ff fd1d 	bl	80005f2 <_ZL17tmc4671_fieldRead13RegisterField>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	e011      	b.n	8000be2 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x6a>
	}
	else if(this->encoderType == EncoderType::hall){
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d107      	bne.n	8000bd8 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x60>
		return (int16_t)tmc4671_fieldRead(TMC4671_HALL_PHI_E_FIELD);
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x7c>)
 8000bca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bce:	f7ff fd10 	bl	80005f2 <_ZL17tmc4671_fieldRead13RegisterField>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	e004      	b.n	8000be2 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x6a>
	}
//	else if(usingExternalEncoder()){
//		return getPhiEfromExternalEncoder();
//	}
	else{
		return getPhiE();
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ffbf 	bl	8000b5c <_ZN14TMC4671_Driver7getPhiEEv>
 8000bde:	4603      	mov	r3, r0
 8000be0:	bf00      	nop
	}
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	080095e0 	.word	0x080095e0
 8000bf0:	08009678 	.word	0x08009678
 8000bf4:	08009658 	.word	0x08009658

08000bf8 <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet>:

void TMC4671_Driver::setMotorTypeAndPoles(MotorType motor, uint16_t poles){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
 8000c04:	4613      	mov	r3, r2
 8000c06:	803b      	strh	r3, [r7, #0]
	if(motor == MotorType::DC){
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d101      	bne.n	8000c12 <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet+0x1a>
		poles = 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	803b      	strh	r3, [r7, #0]
	}
	this->motorType = motor;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	78fa      	ldrb	r2, [r7, #3]
 8000c16:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	this->encoder.pole_pairs = poles;
 8000c1a:	883b      	ldrh	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

	tmc4671_fieldWrite(TMC4671_N_POLE_PAIRS_FIELD, poles);
 8000c24:	883b      	ldrh	r3, [r7, #0]
 8000c26:	4907      	ldr	r1, [pc, #28]	@ (8000c44 <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet+0x4c>)
 8000c28:	461a      	mov	r2, r3
 8000c2a:	c903      	ldmia	r1, {r0, r1}
 8000c2c:	f7ff fd11 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_MOTOR_TYPE_FIELD, (uint8_t)motor);
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	4905      	ldr	r1, [pc, #20]	@ (8000c48 <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet+0x50>)
 8000c34:	461a      	mov	r2, r3
 8000c36:	c903      	ldmia	r1, {r0, r1}
 8000c38:	f7ff fd0b 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>

}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	08009578 	.word	0x08009578
 8000c48:	08009580 	.word	0x08009580

08000c4c <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>:

void TMC4671_Driver::setPhiEType(PhiE phiEType){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	70fb      	strb	r3, [r7, #3]
	if(phiEType == PhiE::extEncoder){
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	2b09      	cmp	r3, #9
 8000c5c:	d101      	bne.n	8000c62 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE+0x16>
		phiEType = PhiE::ext;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	70fb      	strb	r3, [r7, #3]
	}
	this->phiEType = phiEType;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	78fa      	ldrb	r2, [r7, #3]
 8000c66:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9

	tmc4671_fieldWrite(TMC4671_PHI_E_SELECTION_FIELD, (uint8_t)phiEType && 0xFF);
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	bf14      	ite	ne
 8000c70:	2301      	movne	r3, #1
 8000c72:	2300      	moveq	r3, #0
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <_ZN14TMC4671_Driver11setPhiETypeE4PhiE+0x40>)
 8000c7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c7e:	f7ff fce8 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	08009698 	.word	0x08009698

08000c90 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig>:

void TMC4671_Driver::setHallConfig(HallConfig* hallConfig_p){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
	memcpy(&this->hallConfig, hallConfig_p, sizeof(this->hallConfig));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	221a      	movs	r2, #26
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f008 fbcd 	bl	8009440 <memcpy>

	tmc4671_fieldWrite(TMC4671_HALL_POLARITY_FIELD, hallConfig_p->polarity);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	785b      	ldrb	r3, [r3, #1]
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b3c      	ldr	r3, [pc, #240]	@ (8000da0 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x110>)
 8000cae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cb2:	f7ff fcce 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_SYNCHRONOUS_PWM_SAMPLING_FIELD, hallConfig_p->pwmSamplingFilter);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	791b      	ldrb	r3, [r3, #4]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b39      	ldr	r3, [pc, #228]	@ (8000da4 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x114>)
 8000cbe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cc2:	f7ff fcc6 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_INTERPOLATION_FIELD, hallConfig_p->interpolation);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	789b      	ldrb	r3, [r3, #2]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b36      	ldr	r3, [pc, #216]	@ (8000da8 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x118>)
 8000cce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cd2:	f7ff fcbe 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_DIRECTION_FIELD, hallConfig_p->direction);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	78db      	ldrb	r3, [r3, #3]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b33      	ldr	r3, [pc, #204]	@ (8000dac <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x11c>)
 8000cde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ce2:	f7ff fcb6 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_BLANK_FIELD, hallConfig_p->blank);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	88db      	ldrh	r3, [r3, #6]
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b30      	ldr	r3, [pc, #192]	@ (8000db0 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x120>)
 8000cee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cf2:	f7ff fcae 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_HALL_POSITION_000_FIELD, hallConfig_p->pos0);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000db4 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x124>)
 8000d00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d04:	f7ff fca5 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_060_FIELD, hallConfig_p->pos60);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x128>)
 8000d12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d16:	f7ff fc9c 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_120_FIELD, hallConfig_p->pos120);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b26      	ldr	r3, [pc, #152]	@ (8000dbc <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x12c>)
 8000d24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d28:	f7ff fc93 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_180_FIELD, hallConfig_p->pos180);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x130>)
 8000d36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d3a:	f7ff fc8a 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_240_FIELD, hallConfig_p->pos240);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc4 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x134>)
 8000d48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d4c:	f7ff fc81 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_300_FIELD, hallConfig_p->pos300);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x138>)
 8000d5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d5e:	f7ff fc78 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_HALL_PHI_M_OFFSET_FIELD, hallConfig_p->phiMoffset);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x13c>)
 8000d6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d70:	f7ff fc6f 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_PHI_E_OFFSET_FIELD, hallConfig_p->phiEoffset);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x140>)
 8000d7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d82:	f7ff fc66 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_DPHI_MAX_FIELD, hallConfig_p->dPhiMax);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	8b1b      	ldrh	r3, [r3, #24]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x144>)
 8000d8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d92:	f7ff fc5e 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	080095e8 	.word	0x080095e8
 8000da4:	080095f0 	.word	0x080095f0
 8000da8:	080095f8 	.word	0x080095f8
 8000dac:	08009600 	.word	0x08009600
 8000db0:	08009608 	.word	0x08009608
 8000db4:	08009610 	.word	0x08009610
 8000db8:	08009618 	.word	0x08009618
 8000dbc:	08009620 	.word	0x08009620
 8000dc0:	08009628 	.word	0x08009628
 8000dc4:	08009630 	.word	0x08009630
 8000dc8:	08009638 	.word	0x08009638
 8000dcc:	08009640 	.word	0x08009640
 8000dd0:	08009648 	.word	0x08009648
 8000dd4:	08009650 	.word	0x08009650

08000dd8 <_ZN14TMC4671_Driver6setPWME7PwmMode>:

void TMC4671_Driver::setPWM(PwmMode pwmMode){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]
	this->pwmMode = pwmMode;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	78fa      	ldrb	r2, [r7, #3]
 8000de8:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	tmc4671_fieldWrite(TMC4671_PWM_CHOP_FIELD, (uint8_t)pwmMode);
 8000dec:	78fb      	ldrb	r3, [r7, #3]
 8000dee:	4904      	ldr	r1, [pc, #16]	@ (8000e00 <_ZN14TMC4671_Driver6setPWME7PwmMode+0x28>)
 8000df0:	461a      	mov	r2, r3
 8000df2:	c903      	ldmia	r1, {r0, r1}
 8000df4:	f7ff fc2d 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	08009570 	.word	0x08009570

08000e04 <_ZN14TMC4671_Driver6setPWME7PwmModethh>:

void TMC4671_Driver::setPWM(PwmMode pwmMode,uint16_t maxcnt,uint8_t bbmL,uint8_t bbmH){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	4611      	mov	r1, r2
 8000e10:	461a      	mov	r2, r3
 8000e12:	4603      	mov	r3, r0
 8000e14:	70fb      	strb	r3, [r7, #3]
 8000e16:	460b      	mov	r3, r1
 8000e18:	803b      	strh	r3, [r7, #0]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	70bb      	strb	r3, [r7, #2]
	maxcnt = clip(maxcnt, 255, 4095);
 8000e1e:	883b      	ldrh	r3, [r7, #0]
 8000e20:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000e24:	21ff      	movs	r1, #255	@ 0xff
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 f9ce 	bl	80021c8 <_Z4clipItiET_S0_T0_S1_>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	803b      	strh	r3, [r7, #0]
	this->pwmMode = pwmMode;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	this->pwmCnt = maxcnt;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	883a      	ldrh	r2, [r7, #0]
 8000e3c:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
	this->bbmL = bbmL;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	78ba      	ldrb	r2, [r7, #2]
 8000e44:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	this->bbmH = bbmH;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7c3a      	ldrb	r2, [r7, #16]
 8000e4c:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1

	tmc4671_fieldWrite(TMC4671_PWM_MAXCNT_FIELD, maxcnt);
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	490f      	ldr	r1, [pc, #60]	@ (8000e90 <_ZN14TMC4671_Driver6setPWME7PwmModethh+0x8c>)
 8000e54:	461a      	mov	r2, r3
 8000e56:	c903      	ldmia	r1, {r0, r1}
 8000e58:	f7ff fbfb 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PWM_CHOP_FIELD, (uint8_t)pwmMode);
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <_ZN14TMC4671_Driver6setPWME7PwmModethh+0x90>)
 8000e60:	461a      	mov	r2, r3
 8000e62:	c903      	ldmia	r1, {r0, r1}
 8000e64:	f7ff fbf5 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PWM_BBM_L_FIELD, bbmL);
 8000e68:	78bb      	ldrb	r3, [r7, #2]
 8000e6a:	490b      	ldr	r1, [pc, #44]	@ (8000e98 <_ZN14TMC4671_Driver6setPWME7PwmModethh+0x94>)
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	c903      	ldmia	r1, {r0, r1}
 8000e70:	f7ff fbef 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PWM_BBM_H_FIELD, bbmH);
 8000e74:	7c3b      	ldrb	r3, [r7, #16]
 8000e76:	4909      	ldr	r1, [pc, #36]	@ (8000e9c <_ZN14TMC4671_Driver6setPWME7PwmModethh+0x98>)
 8000e78:	461a      	mov	r2, r3
 8000e7a:	c903      	ldmia	r1, {r0, r1}
 8000e7c:	f7ff fbe9 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_writeRegister(TMC4671_PWM_POLARITIES, 0x00);
 8000e80:	2100      	movs	r1, #0
 8000e82:	2017      	movs	r0, #23
 8000e84:	f7ff fb5a 	bl	800053c <_ZL21tmc4671_writeRegisterhm>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	08009558 	.word	0x08009558
 8000e94:	08009570 	.word	0x08009570
 8000e98:	08009560 	.word	0x08009560
 8000e9c:	08009568 	.word	0x08009568

08000ea0 <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig>:

void TMC4671_Driver::setAdcOffset(AdcConfig* adcConfig_p){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	this->adcConfig.adc_I0_offset = adcConfig_p->adc_I0_offset;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	899a      	ldrh	r2, [r3, #12]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	this->adcConfig.adc_I1_offset = adcConfig_p->adc_I1_offset;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	89da      	ldrh	r2, [r3, #14]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

	tmc4671_fieldWrite(TMC4671_ADC_I0_OFFSET_FIELD, adcConfig_p->adc_I0_offset);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	899b      	ldrh	r3, [r3, #12]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig+0x48>)
 8000ec6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000eca:	f7ff fbc2 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I1_OFFSET_FIELD, adcConfig_p->adc_I1_offset);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	89db      	ldrh	r3, [r3, #14]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig+0x4c>)
 8000ed6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000eda:	f7ff fbba 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	08009520 	.word	0x08009520
 8000eec:	08009510 	.word	0x08009510

08000ef0 <_ZN14TMC4671_Driver11setAdcScaleEP9AdcConfig>:

void TMC4671_Driver::setAdcScale(AdcConfig* adcConfig_p){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	this->adcConfig.adc_I0_scale = adcConfig_p->adc_I0_scale;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	8a1a      	ldrh	r2, [r3, #16]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	this->adcConfig.adc_I1_scale = adcConfig_p->adc_I1_scale;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	8a5a      	ldrh	r2, [r3, #18]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

	tmc4671_fieldWrite(TMC4671_ADC_I0_SCALE_FIELD, adcConfig_p->adc_I0_scale);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	8a1b      	ldrh	r3, [r3, #16]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <_ZN14TMC4671_Driver11setAdcScaleEP9AdcConfig+0x48>)
 8000f16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f1a:	f7ff fb9a 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I1_SCALE_FIELD, adcConfig_p->adc_I1_scale);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	8a5b      	ldrh	r3, [r3, #18]
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <_ZN14TMC4671_Driver11setAdcScaleEP9AdcConfig+0x4c>)
 8000f26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f2a:	f7ff fb92 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	08009528 	.word	0x08009528
 8000f3c:	08009518 	.word	0x08009518

08000f40 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig>:

void TMC4671_Driver::initAdc(AdcConfig* adcConfig_p){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	this->adcConfig.mclkA = adcConfig_p->mclkA;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	649a      	str	r2, [r3, #72]	@ 0x48
	this->adcConfig.mclkB = adcConfig_p->mclkB;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	64da      	str	r2, [r3, #76]	@ 0x4c
	this->adcConfig.mdecA = adcConfig_p->mdecA;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	881a      	ldrh	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	this->adcConfig.mdecB = adcConfig_p->mdecB;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	885a      	ldrh	r2, [r3, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	tmc4671_fieldWrite(TMC4671_DSADC_MDEC_A_FIELD, adcConfig_p->mdecA);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b2f      	ldr	r3, [pc, #188]	@ (8001034 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0xf4>)
 8000f76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f7a:	f7ff fb6a 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_DSADC_MDEC_B_FIELD, adcConfig_p->mdecB);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	885b      	ldrh	r3, [r3, #2]
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b2c      	ldr	r3, [pc, #176]	@ (8001038 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0xf8>)
 8000f86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f8a:	f7ff fb62 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_DSADC_MCLK_A_FIELD, adcConfig_p->mclkA);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	492a      	ldr	r1, [pc, #168]	@ (800103c <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0xfc>)
 8000f94:	461a      	mov	r2, r3
 8000f96:	c903      	ldmia	r1, {r0, r1}
 8000f98:	f7ff fb5b 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_DSADC_MCLK_B_FIELD, adcConfig_p->mclkB);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	4927      	ldr	r1, [pc, #156]	@ (8001040 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x100>)
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	c903      	ldmia	r1, {r0, r1}
 8000fa6:	f7ff fb54 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_SEL_NCLK_MCLK_I_A_FIELD, adcConfig_p->mclkA == 0 ? 0 : 1);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf14      	ite	ne
 8000fb2:	2301      	movne	r3, #1
 8000fb4:	2300      	moveq	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x104>)
 8000fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fc0:	f7ff fb47 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_SEL_NCLK_MCLK_I_B_FIELD, adcConfig_p->mclkB == 0 ? 0 : 1);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf14      	ite	ne
 8000fcc:	2301      	movne	r3, #1
 8000fce:	2300      	moveq	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x108>)
 8000fd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fda:	f7ff fb3a 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_ADC_I0_SELECT_FIELD, 0x0);   // 0: ADCSD_I0_RAW (sigma delta ADC)
 8000fde:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x10c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fe6:	f7ff fb34 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I1_SELECT_FIELD, 0x01);  // 1: ADCSD_I1_RAW (sigma delta ADC)
 8000fea:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x110>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ff2:	f7ff fb2e 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I_UX_SELECT_FIELD,0x00); // 0: UX = ADC_I0 (default)
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x114>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ffe:	f7ff fb28 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I_V_SELECT_FIELD, 0x02); // 2: V = ADC_I2
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x118>)
 8001004:	2202      	movs	r2, #2
 8001006:	e893 0003 	ldmia.w	r3, {r0, r1}
 800100a:	f7ff fb22 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I_WY_SELECT_FIELD, 0x01);// 1: WY = ADC_I1
 800100e:	4b13      	ldr	r3, [pc, #76]	@ (800105c <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x11c>)
 8001010:	2201      	movs	r2, #1
 8001012:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001016:	f7ff fb1c 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	setAdcOffset(adcConfig_p);
 800101a:	6839      	ldr	r1, [r7, #0]
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff3f 	bl	8000ea0 <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig>
	setAdcScale(adcConfig_p);
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff63 	bl	8000ef0 <_ZN14TMC4671_Driver11setAdcScaleEP9AdcConfig>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	08009500 	.word	0x08009500
 8001038:	08009508 	.word	0x08009508
 800103c:	080094f0 	.word	0x080094f0
 8001040:	080094f8 	.word	0x080094f8
 8001044:	080094e0 	.word	0x080094e0
 8001048:	080094e8 	.word	0x080094e8
 800104c:	08009530 	.word	0x08009530
 8001050:	08009538 	.word	0x08009538
 8001054:	08009540 	.word	0x08009540
 8001058:	08009548 	.word	0x08009548
 800105c:	08009550 	.word	0x08009550

08001060 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig>:

void TMC4671_Driver::setPids(PIDConfig* pidConfig_p){
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	memcpy(&this->pidConfig, pidConfig_p, sizeof(this->pidConfig));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	331a      	adds	r3, #26
 800106e:	2212      	movs	r2, #18
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f008 f9e4 	bl	8009440 <memcpy>

	tmc4671_fieldWrite(TMC4671_PID_FLUX_I_FIELD, pidConfig_p->fluxI);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b24      	ldr	r3, [pc, #144]	@ (8001110 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xb0>)
 8001080:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001084:	f7ff fae5 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_FLUX_P_FIELD, pidConfig_p->fluxP);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	885b      	ldrh	r3, [r3, #2]
 800108c:	461a      	mov	r2, r3
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xb4>)
 8001090:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001094:	f7ff fadd 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_TORQUE_I_FIELD, pidConfig_p->torqueI);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	889b      	ldrh	r3, [r3, #4]
 800109c:	461a      	mov	r2, r3
 800109e:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xb8>)
 80010a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010a4:	f7ff fad5 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_TORQUE_P_FIELD, pidConfig_p->fluxP);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	885b      	ldrh	r3, [r3, #2]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xbc>)
 80010b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010b4:	f7ff facd 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_VELOCITY_I_FIELD, pidConfig_p->velocityI);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	891b      	ldrh	r3, [r3, #8]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xc0>)
 80010c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010c4:	f7ff fac5 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_VELOCITY_P_FIELD, pidConfig_p->velocityP);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	895b      	ldrh	r3, [r3, #10]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xc4>)
 80010d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010d4:	f7ff fabd 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_POSITION_I_FIELD, pidConfig_p->positionI);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	899b      	ldrh	r3, [r3, #12]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xc8>)
 80010e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010e4:	f7ff fab5 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_POSITION_P_FIELD, pidConfig_p->positionP);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	89db      	ldrh	r3, [r3, #14]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xcc>)
 80010f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010f4:	f7ff faad 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_MODE_PID_TYPE_FIELD, pidConfig_p->sequentialPI);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	7c1b      	ldrb	r3, [r3, #16]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xd0>)
 8001100:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001104:	f7ff faa5 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	080096a0 	.word	0x080096a0
 8001114:	080096a8 	.word	0x080096a8
 8001118:	080096b0 	.word	0x080096b0
 800111c:	080096b8 	.word	0x080096b8
 8001120:	080096c0 	.word	0x080096c0
 8001124:	080096c8 	.word	0x080096c8
 8001128:	080096d0 	.word	0x080096d0
 800112c:	080096d8 	.word	0x080096d8
 8001130:	080096e8 	.word	0x080096e8

08001134 <_ZN14TMC4671_Driver17setAdcBrakeLimitsEtt>:
/**
 *  Sets the raw brake resistor limits.
 *  Centered at 0x7fff
 *  Set both 0 to deactivate
 */
void TMC4671_Driver::setAdcBrakeLimits(uint16_t low,uint16_t high){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	803b      	strh	r3, [r7, #0]
	this->brakeLimLow = low;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	this->brakeLimHigh = high;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	883a      	ldrh	r2, [r7, #0]
 8001150:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4

	tmc4671_fieldWrite(TMC4671_ADC_VM_LIMIT_LOW_FIELD, low);
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	4907      	ldr	r1, [pc, #28]	@ (8001174 <_ZN14TMC4671_Driver17setAdcBrakeLimitsEtt+0x40>)
 8001158:	461a      	mov	r2, r3
 800115a:	c903      	ldmia	r1, {r0, r1}
 800115c:	f7ff fa79 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_VM_LIMIT_LOW_FIELD, high);
 8001160:	883b      	ldrh	r3, [r7, #0]
 8001162:	4904      	ldr	r1, [pc, #16]	@ (8001174 <_ZN14TMC4671_Driver17setAdcBrakeLimitsEtt+0x40>)
 8001164:	461a      	mov	r2, r3
 8001166:	c903      	ldmia	r1, {r0, r1}
 8001168:	f7ff fa73 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	080096f8 	.word	0x080096f8

08001178 <_ZN14TMC4671_Driver17setActualPositionEl>:

// Changes actual multi turn position for positioning
void TMC4671_Driver::setActualPosition(int32_t pos){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	tmc4671_fieldWrite(TMC4671_PID_POSITION_ACTUAL_FIELD, (uint32_t)pos);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	4904      	ldr	r1, [pc, #16]	@ (8001198 <_ZN14TMC4671_Driver17setActualPositionEl+0x20>)
 8001186:	461a      	mov	r2, r3
 8001188:	c903      	ldmia	r1, {r0, r1}
 800118a:	f7ff fa62 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	080096f0 	.word	0x080096f0

0800119c <_ZN14TMC4671_Driver17getActualPositionEv>:

// Returns actual multi turn position from tmc
int32_t TMC4671_Driver::getActualPosition(){
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	return (int32_t)tmc4671_fieldRead(TMC4671_PID_POSITION_ACTUAL_FIELD);
 80011a4:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <_ZN14TMC4671_Driver17getActualPositionEv+0x1c>)
 80011a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011aa:	f7ff fa22 	bl	80005f2 <_ZL17tmc4671_fieldRead13RegisterField>
 80011ae:	4603      	mov	r3, r0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	080096f0 	.word	0x080096f0

080011bc <_ZN14TMC4671_Driver19getAbsolutePositionEv>:

int32_t TMC4671_Driver::getAbsolutePosition(){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	int16_t pos;

	if(this->encoderType == EncoderType::abn){
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d107      	bne.n	80011de <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x22>
		pos = (int16_t)tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_M_FIELD);
 80011ce:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x6c>)
 80011d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011d4:	f7ff fa0d 	bl	80005f2 <_ZL17tmc4671_fieldRead13RegisterField>
 80011d8:	4603      	mov	r3, r0
 80011da:	81fb      	strh	r3, [r7, #14]
 80011dc:	e01d      	b.n	800121a <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x5e>
	}
	else if(this->encoderType == EncoderType::hall){
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d107      	bne.n	80011f8 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x3c>
		pos = (int16_t)tmc4671_fieldRead(TMC4671_HALL_PHI_M_FIELD);
 80011e8:	4b10      	ldr	r3, [pc, #64]	@ (800122c <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x70>)
 80011ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011ee:	f7ff fa00 	bl	80005f2 <_ZL17tmc4671_fieldRead13RegisterField>
 80011f2:	4603      	mov	r3, r0
 80011f4:	81fb      	strh	r3, [r7, #14]
 80011f6:	e010      	b.n	800121a <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x5e>
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d004      	beq.n	800120c <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x50>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001208:	2b03      	cmp	r3, #3
 800120a:	d106      	bne.n	800121a <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x5e>
		pos = (int16_t)tmc4671_fieldRead(TMC4671_AENC_DECODER_PHI_M_FIELD);
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x74>)
 800120e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001212:	f7ff f9ee 	bl	80005f2 <_ZL17tmc4671_fieldRead13RegisterField>
 8001216:	4603      	mov	r3, r0
 8001218:	81fb      	strh	r3, [r7, #14]
	}
	else{
//		pos = getPos(); // read phiM
	}

	return pos;
 800121a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	080095d8 	.word	0x080095d8
 800122c:	08009660 	.word	0x08009660
 8001230:	08009670 	.word	0x08009670

08001234 <_ZN14TMC4671_Driver13setFluxTorqueEss>:

void TMC4671_Driver::setFluxTorque(int16_t flux, int16_t torque){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	803b      	strh	r3, [r7, #0]
//	if(curr_motionMode != MotionMode::torque){
		setMotionMode(MotionMode::torque);
 8001244:	2101      	movs	r1, #1
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fc40 	bl	8000acc <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
//	}

//	tmc4671_fieldWrite(TMC4671_PID_FLUX_TARGET_FIELD, flux);
//	tmc4671_fieldWrite(TMC4671_PID_TORQUE_TARGET_FIELD, torque);
	tmc4671_writeRegister(0x64, (flux & 0xffff) | (torque << 16));
 800124c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001250:	b29a      	uxth	r2, r3
 8001252:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001256:	041b      	lsls	r3, r3, #16
 8001258:	4313      	orrs	r3, r2
 800125a:	4619      	mov	r1, r3
 800125c:	2064      	movs	r0, #100	@ 0x64
 800125e:	f7ff f96d 	bl	800053c <_ZL21tmc4671_writeRegisterhm>
	tmc4671_writeRegister(0x64, (flux & 0xffff) | (torque << 16));
 8001262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001266:	b29a      	uxth	r2, r3
 8001268:	f9b7 3000 	ldrsh.w	r3, [r7]
 800126c:	041b      	lsls	r3, r3, #16
 800126e:	4313      	orrs	r3, r2
 8001270:	4619      	mov	r1, r3
 8001272:	2064      	movs	r0, #100	@ 0x64
 8001274:	f7ff f962 	bl	800053c <_ZL21tmc4671_writeRegisterhm>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZN14TMC4671_Driver13setStatusMaskE11StatusFlags>:

void TMC4671_Driver::setStatusFlags(StatusFlags flag){
	tmc4671_writeRegister(TMC4671_STATUS_MASK, flag.asInt);
}

void TMC4671_Driver::setStatusMask(StatusFlags mask){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	tmc4671_writeRegister(TMC4671_STATUS_MASK, mask.asInt);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	207d      	movs	r0, #125	@ 0x7d
 8001290:	f7ff f954 	bl	800053c <_ZL21tmc4671_writeRegisterhm>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <_ZN14TMC4671_Driver11setPhiE_extEs>:
void TMC4671_Driver::setUdUq(int16_t ud,int16_t uq){
	tmc4671_fieldWrite(TMC4671_UD_EXT_FIELD, ud);
	tmc4671_fieldWrite(TMC4671_UQ_EXT_FIELD, uq);
}

void TMC4671_Driver::setPhiE_ext(int16_t phiE){
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
	tmc4671_fieldWrite(TMC4671_PHI_E_EXT_FIELD, (uint32_t)phiE);
 80012a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012ac:	4904      	ldr	r1, [pc, #16]	@ (80012c0 <_ZN14TMC4671_Driver11setPhiE_extEs+0x24>)
 80012ae:	461a      	mov	r2, r3
 80012b0:	c903      	ldmia	r1, {r0, r1}
 80012b2:	f7ff f9ce 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	08009588 	.word	0x08009588

080012c4 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt>:

/**
 * Calibrates the ADC by disabling the power stage and sampling a mean value. Takes time!
 */
bool TMC4671_Driver::calibrateAdcOffset(uint16_t time){
 80012c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012c8:	b096      	sub	sp, #88	@ 0x58
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	61f8      	str	r0, [r7, #28]
 80012ce:	460b      	mov	r3, r1
 80012d0:	837b      	strh	r3, [r7, #26]

	uint16_t measuretime_idle = time;
 80012d2:	8b7b      	ldrh	r3, [r7, #26]
 80012d4:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint32_t measurements_idle = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	657b      	str	r3, [r7, #84]	@ 0x54
	uint64_t totalA=0;
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	uint64_t totalB=0;
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	tmc4671_writeRegister(TMC4671_ADC_RAW_ADDR, 0); // Read raw adc
 80012f2:	2100      	movs	r1, #0
 80012f4:	2003      	movs	r0, #3
 80012f6:	f7ff f921 	bl	800053c <_ZL21tmc4671_writeRegisterhm>
	PhiE lastphie = getPhiEType();
 80012fa:	69f8      	ldr	r0, [r7, #28]
 80012fc:	f7ff fc14 	bl	8000b28 <_ZN14TMC4671_Driver11getPhiETypeEv>
 8001300:	4603      	mov	r3, r0
 8001302:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	MotionMode lastmode = getMotionMode();
 8001306:	69f8      	ldr	r0, [r7, #28]
 8001308:	f7ff fbf6 	bl	8000af8 <_ZN14TMC4671_Driver13getMotionModeEv>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	setMotionMode(MotionMode::stopped);
 8001312:	2100      	movs	r1, #0
 8001314:	69f8      	ldr	r0, [r7, #28]
 8001316:	f7ff fbd9 	bl	8000acc <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
	HAL_Delay(100); // Wait a bit before sampling
 800131a:	2064      	movs	r0, #100	@ 0x64
 800131c:	f001 fac2 	bl	80028a4 <HAL_Delay>
	uint16_t lastrawA = this->adcConfig.adc_I0_offset, lastrawB = this->adcConfig.adc_I1_offset;
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001326:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800132e:	87bb      	strh	r3, [r7, #60]	@ 0x3c

	//pulseClipLed(); // Turn on led
	// Disable drivers and measure many samples of zero current
	//enablePin.reset();
	uint32_t tick = HAL_GetTick();
 8001330:	f001 faac 	bl	800288c <HAL_GetTick>
 8001334:	6378      	str	r0, [r7, #52]	@ 0x34
	while(HAL_GetTick() - tick < measuretime_idle){ // Measure idle
 8001336:	e043      	b.n	80013c0 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0xfc>
		tmc4671_writeRegister(TMC4671_ADC_RAW_ADDR, 0); // Read raw adc
 8001338:	2100      	movs	r1, #0
 800133a:	2003      	movs	r0, #3
 800133c:	f7ff f8fe 	bl	800053c <_ZL21tmc4671_writeRegisterhm>
		uint32_t adcraw = tmc4671_readRegister(TMC4671_ADC_RAW_DATA);
 8001340:	2002      	movs	r0, #2
 8001342:	f7ff f8c7 	bl	80004d4 <_ZL20tmc4671_readRegisterh>
 8001346:	62b8      	str	r0, [r7, #40]	@ 0x28
		uint16_t rawA = adcraw & 0xffff;
 8001348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800134a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		uint16_t rawB = (adcraw >> 16) & 0xffff;
 800134c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800134e:	0c1b      	lsrs	r3, r3, #16
 8001350:	84bb      	strh	r3, [r7, #36]	@ 0x24

		// Signflip filter for SPI bug
		if(abs(lastrawA-rawA) < 10000 && abs(lastrawB-rawB) < 10000){
 8001352:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001354:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	bfb8      	it	lt
 800135c:	425b      	neglt	r3, r3
 800135e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001362:	4293      	cmp	r3, r2
 8001364:	dc2c      	bgt.n	80013c0 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0xfc>
 8001366:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001368:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	bfb8      	it	lt
 8001370:	425b      	neglt	r3, r3
 8001372:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001376:	4293      	cmp	r3, r2
 8001378:	dc22      	bgt.n	80013c0 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0xfc>
			totalA += rawA;
 800137a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800137c:	2200      	movs	r2, #0
 800137e:	461c      	mov	r4, r3
 8001380:	4615      	mov	r5, r2
 8001382:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001386:	eb12 0a04 	adds.w	sl, r2, r4
 800138a:	eb43 0b05 	adc.w	fp, r3, r5
 800138e:	e9c7 ab12 	strd	sl, fp, [r7, #72]	@ 0x48
			totalB += rawB;
 8001392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001394:	2200      	movs	r2, #0
 8001396:	4698      	mov	r8, r3
 8001398:	4691      	mov	r9, r2
 800139a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800139e:	eb12 0108 	adds.w	r1, r2, r8
 80013a2:	6039      	str	r1, [r7, #0]
 80013a4:	eb43 0309 	adc.w	r3, r3, r9
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			measurements_idle++;
 80013b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013b4:	3301      	adds	r3, #1
 80013b6:	657b      	str	r3, [r7, #84]	@ 0x54
			lastrawA = rawA;
 80013b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			lastrawB = rawB;
 80013bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013be:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	while(HAL_GetTick() - tick < measuretime_idle){ // Measure idle
 80013c0:	f001 fa64 	bl	800288c <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013c8:	1ad2      	subs	r2, r2, r3
 80013ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80013cc:	429a      	cmp	r2, r3
 80013ce:	bf34      	ite	cc
 80013d0:	2301      	movcc	r3, #1
 80013d2:	2300      	movcs	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1ae      	bne.n	8001338 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x74>
		}
//		uint32_t lastMicros = micros();
//		while(micros()-lastMicros < 100){} // Wait 100µs at least
	}
	//enablePin.set();
	int32_t offsetAidle = totalA / (measurements_idle);
 80013da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013dc:	2200      	movs	r2, #0
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	617a      	str	r2, [r7, #20]
 80013e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80013ea:	f7fe feed 	bl	80001c8 <__aeabi_uldivmod>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4613      	mov	r3, r2
 80013f4:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t offsetBidle = totalB / (measurements_idle);
 80013f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013f8:	2200      	movs	r2, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	60fa      	str	r2, [r7, #12]
 80013fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001402:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001406:	f7fe fedf 	bl	80001c8 <__aeabi_uldivmod>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4613      	mov	r3, r2
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Check if offsets are in a valid range
	if(totalA < 100 || totalB < 100 || ((abs(offsetAidle - 0x7fff) > TMC_ADCOFFSETFAIL) || (abs(offsetBidle - 0x7fff) > TMC_ADCOFFSETFAIL)) ){
 8001412:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001416:	2a64      	cmp	r2, #100	@ 0x64
 8001418:	f173 0300 	sbcs.w	r3, r3, #0
 800141c:	d31d      	bcc.n	800145a <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x196>
 800141e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001422:	2a64      	cmp	r2, #100	@ 0x64
 8001424:	f173 0300 	sbcs.w	r3, r3, #0
 8001428:	d317      	bcc.n	800145a <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x196>
 800142a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800142c:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001430:	3b7f      	subs	r3, #127	@ 0x7f
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f840 	bl	80004b8 <_ZSt3absl>
 8001438:	4603      	mov	r3, r0
 800143a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	dc0b      	bgt.n	800145a <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x196>
 8001442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001444:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001448:	3b7f      	subs	r3, #127	@ 0x7f
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f834 	bl	80004b8 <_ZSt3absl>
 8001450:	4603      	mov	r3, r0
 8001452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	dd01      	ble.n	800145e <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x19a>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x19c>
 800145e:	2300      	movs	r3, #0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00a      	beq.n	800147a <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x1b6>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2102      	movs	r1, #2
 8001468:	4817      	ldr	r0, [pc, #92]	@ (80014c8 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x204>)
 800146a:	f001 fd05 	bl	8002e78 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
//		ErrorHandler::addError(Error(ErrorCode::adcCalibrationError,ErrorType::critical,"TMC ADC offset calibration failed."));
//		blinkErrLed(100, 0); // Blink forever
//		setPwm(TMC_PwmMode::off); //Disable pwm
//		this->changeState(TMC_ControlState::HardError);
		this->adcConfig.adcCalibrated = false;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		return false; // An adc or shunt amp is likely broken. do not proceed.
 8001476:	2300      	movs	r3, #0
 8001478:	e020      	b.n	80014bc <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x1f8>
	}
	this->adcConfig.adc_I0_offset = offsetAidle;
 800147a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800147c:	b29a      	uxth	r2, r3
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	this->adcConfig.adc_I1_offset = offsetBidle;
 8001484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001486:	b29a      	uxth	r2, r3
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	setAdcOffset(&this->adcConfig);
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3344      	adds	r3, #68	@ 0x44
 8001492:	4619      	mov	r1, r3
 8001494:	69f8      	ldr	r0, [r7, #28]
 8001496:	f7ff fd03 	bl	8000ea0 <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig>
	// ADC Offsets should now be close to perfect

	setPhiEType(lastphie);
 800149a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800149e:	4619      	mov	r1, r3
 80014a0:	69f8      	ldr	r0, [r7, #28]
 80014a2:	f7ff fbd3 	bl	8000c4c <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 80014a6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80014aa:	4619      	mov	r1, r3
 80014ac:	69f8      	ldr	r0, [r7, #28]
 80014ae:	f7ff fb0d 	bl	8000acc <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
	this->adcConfig.adcCalibrated = true;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	return true;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3758      	adds	r7, #88	@ 0x58
 80014c0:	46bd      	mov	sp, r7
 80014c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <_ZN14TMC4671_Driver17estimateABNparamsEv>:
/**
 * Moves the rotor and estimates polarity and direction of the encoder
 * Polarity is found by measuring the n pulse.
 * If polarity was found to be reversed during the test direction will be reversed again to account for that
 */
void TMC4671_Driver::estimateABNparams(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	int32_t pos = getActualPosition();
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fe61 	bl	800119c <_ZN14TMC4671_Driver17getActualPositionEv>
 80014da:	6138      	str	r0, [r7, #16]
	setActualPosition(0);
 80014dc:	2100      	movs	r1, #0
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fe4a 	bl	8001178 <_ZN14TMC4671_Driver17setActualPositionEl>
	PhiE lastphie = getPhiEType();
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff fb1f 	bl	8000b28 <_ZN14TMC4671_Driver11getPhiETypeEv>
 80014ea:	4603      	mov	r3, r0
 80014ec:	73fb      	strb	r3, [r7, #15]
	MotionMode lastmode = getMotionMode();
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fb02 	bl	8000af8 <_ZN14TMC4671_Driver13getMotionModeEv>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73bb      	strb	r3, [r7, #14]
	tmc4671_fieldWrite(TMC4671_ABN_DIRECTION_FIELD, 0); // Set direction positive (0)
 80014f8:	4b70      	ldr	r3, [pc, #448]	@ (80016bc <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1f0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001500:	f7ff f8a7 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	setPhiE_ext(0); // Electrical angle phi_e_ext for external writing into this register
 8001504:	2100      	movs	r1, #0
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fec8 	bl	800129c <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(PhiE::ext);
 800150c:	2101      	movs	r1, #1
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fb9c 	bl	8000c4c <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setFluxTorque(0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff fe8b 	bl	8001234 <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setMotionMode(MotionMode::torque);
 800151e:	2101      	movs	r1, #1
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fad3 	bl	8000acc <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>

	for(int16_t flux = 0; flux <= initPower; flux+=20){
 8001526:	2300      	movs	r3, #0
 8001528:	83fb      	strh	r3, [r7, #30]
 800152a:	e00d      	b.n	8001548 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x7c>
		setFluxTorque(flux, 0);
 800152c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001530:	2200      	movs	r2, #0
 8001532:	4619      	mov	r1, r3
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fe7d 	bl	8001234 <_ZN14TMC4671_Driver13setFluxTorqueEss>
		HAL_Delay(5);
 800153a:	2005      	movs	r0, #5
 800153c:	f001 f9b2 	bl	80028a4 <HAL_Delay>
	for(int16_t flux = 0; flux <= initPower; flux+=20){
 8001540:	8bfb      	ldrh	r3, [r7, #30]
 8001542:	3314      	adds	r3, #20
 8001544:	b29b      	uxth	r3, r3
 8001546:	83fb      	strh	r3, [r7, #30]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	@ 0xf6
 800154e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001552:	429a      	cmp	r2, r3
 8001554:	ddea      	ble.n	800152c <_ZN14TMC4671_Driver17estimateABNparamsEv+0x60>
	}

	int16_t phiE_abn = tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_E_FIELD);
 8001556:	4b5a      	ldr	r3, [pc, #360]	@ (80016c0 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1f4>)
 8001558:	e893 0003 	ldmia.w	r3, {r0, r1}
 800155c:	f7ff f849 	bl	80005f2 <_ZL17tmc4671_fieldRead13RegisterField>
 8001560:	4603      	mov	r3, r0
 8001562:	83bb      	strh	r3, [r7, #28]
	int16_t phiE_abn_old = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	81bb      	strh	r3, [r7, #12]
	int16_t rcount = 0, c = 0; // Count how often direction was in reverse
 8001568:	2300      	movs	r3, #0
 800156a:	837b      	strh	r3, [r7, #26]
 800156c:	2300      	movs	r3, #0
 800156e:	833b      	strh	r3, [r7, #24]
	uint16_t highcount = 0; // Count high state of n pulse for polarity estimation
 8001570:	2300      	movs	r3, #0
 8001572:	82fb      	strh	r3, [r7, #22]

	// Rotate a bit
	for(int16_t p = 0;p<0x0fff;p+=0x2f){
 8001574:	2300      	movs	r3, #0
 8001576:	82bb      	strh	r3, [r7, #20]
 8001578:	e037      	b.n	80015ea <_ZN14TMC4671_Driver17estimateABNparamsEv+0x11e>
		setPhiE_ext(p);
 800157a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800157e:	4619      	mov	r1, r3
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fe8b 	bl	800129c <_ZN14TMC4671_Driver11setPhiE_extEs>
		HAL_Delay(10);
 8001586:	200a      	movs	r0, #10
 8001588:	f001 f98c 	bl	80028a4 <HAL_Delay>
		c++;
 800158c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001590:	b29b      	uxth	r3, r3
 8001592:	3301      	adds	r3, #1
 8001594:	b29b      	uxth	r3, r3
 8001596:	833b      	strh	r3, [r7, #24]
		phiE_abn_old = phiE_abn;
 8001598:	8bbb      	ldrh	r3, [r7, #28]
 800159a:	81bb      	strh	r3, [r7, #12]
		phiE_abn = tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_E_FIELD);
 800159c:	4b48      	ldr	r3, [pc, #288]	@ (80016c0 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1f4>)
 800159e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015a2:	f7ff f826 	bl	80005f2 <_ZL17tmc4671_fieldRead13RegisterField>
 80015a6:	4603      	mov	r3, r0
 80015a8:	83bb      	strh	r3, [r7, #28]

		// Count how often the new position was lower than the previous indicating a reversed encoder or motor direction
		if(phiE_abn < phiE_abn_old){
 80015aa:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80015ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	da05      	bge.n	80015c2 <_ZN14TMC4671_Driver17estimateABNparamsEv+0xf6>
			rcount++;
 80015b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	837b      	strh	r3, [r7, #26]
		}

		if(tmc4671_fieldRead(TMC4671_N_OF_ABN_RAW_FIELD)){
 80015c2:	4b40      	ldr	r3, [pc, #256]	@ (80016c4 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1f8>)
 80015c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015c8:	f7ff f813 	bl	80005f2 <_ZL17tmc4671_fieldRead13RegisterField>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	bf14      	ite	ne
 80015d2:	2301      	movne	r3, #1
 80015d4:	2300      	moveq	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x116>
			highcount++;
 80015dc:	8afb      	ldrh	r3, [r7, #22]
 80015de:	3301      	adds	r3, #1
 80015e0:	82fb      	strh	r3, [r7, #22]
	for(int16_t p = 0;p<0x0fff;p+=0x2f){
 80015e2:	8abb      	ldrh	r3, [r7, #20]
 80015e4:	332f      	adds	r3, #47	@ 0x2f
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	82bb      	strh	r3, [r7, #20]
 80015ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015ee:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80015f2:	4293      	cmp	r3, r2
 80015f4:	ddc1      	ble.n	800157a <_ZN14TMC4671_Driver17estimateABNparamsEv+0xae>
		}
	}
	setActualPosition(pos + getActualPosition());
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fdd0 	bl	800119c <_ZN14TMC4671_Driver17getActualPositionEv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4413      	add	r3, r2
 8001602:	4619      	mov	r1, r3
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fdb7 	bl	8001178 <_ZN14TMC4671_Driver17setActualPositionEl>

	setFluxTorque(0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fe10 	bl	8001234 <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setPhiEType(lastphie);
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	4619      	mov	r1, r3
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fb17 	bl	8000c4c <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	4619      	mov	r1, r3
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fa52 	bl	8000acc <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>

	bool npol = highcount > c/2;
 8001628:	8afa      	ldrh	r2, [r7, #22]
 800162a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800162e:	0fd9      	lsrs	r1, r3, #31
 8001630:	440b      	add	r3, r1
 8001632:	105b      	asrs	r3, r3, #1
 8001634:	b21b      	sxth	r3, r3
 8001636:	429a      	cmp	r2, r3
 8001638:	bfcc      	ite	gt
 800163a:	2301      	movgt	r3, #1
 800163c:	2300      	movle	r3, #0
 800163e:	72fb      	strb	r3, [r7, #11]
	encoder.rdir = rcount > c/2;
 8001640:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001644:	0fda      	lsrs	r2, r3, #31
 8001646:	4413      	add	r3, r2
 8001648:	105b      	asrs	r3, r3, #1
 800164a:	b21b      	sxth	r3, r3
 800164c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001650:	429a      	cmp	r2, r3
 8001652:	bfcc      	ite	gt
 8001654:	2301      	movgt	r3, #1
 8001656:	2300      	movle	r3, #0
 8001658:	b2da      	uxtb	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

	if(npol != encoder.npol){ // Invert dir if polarity was reversed TODO correct? likely wrong at the moment
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 8001666:	7afa      	ldrb	r2, [r7, #11]
 8001668:	429a      	cmp	r2, r3
 800166a:	d016      	beq.n	800169a <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1ce>
		encoder.rdir = !encoder.rdir;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001672:	f083 0301 	eor.w	r3, r3, #1
 8001676:	b2da      	uxtb	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 800167e:	2201      	movs	r2, #1
 8001680:	2102      	movs	r1, #2
 8001682:	4811      	ldr	r0, [pc, #68]	@ (80016c8 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1fc>)
 8001684:	f001 fbf8 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8001688:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800168c:	f001 f90a 	bl	80028a4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2102      	movs	r1, #2
 8001694:	480c      	ldr	r0, [pc, #48]	@ (80016c8 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1fc>)
 8001696:	f001 fbef 	bl	8002e78 <HAL_GPIO_WritePin>
	}


	encoder.apol = npol;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7afa      	ldrb	r2, [r7, #11]
 800169e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
	encoder.bpol = npol;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7afa      	ldrb	r2, [r7, #11]
 80016a6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	encoder.npol = npol;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7afa      	ldrb	r2, [r7, #11]
 80016ae:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63

//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
//	HAL_Delay(200);
//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
}
 80016b2:	bf00      	nop
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	080095b8 	.word	0x080095b8
 80016c0:	080095e0 	.word	0x080095e0
 80016c4:	08009700 	.word	0x08009700
 80016c8:	40021000 	.word	0x40021000

080016cc <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb>:

void TMC4671_Driver::zeroAbnUsingPhiM(bool offsetPhiE = false){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70fb      	strb	r3, [r7, #3]
	int32_t npos = tmc4671_readRegister(TMC4671_ABN_DECODER_COUNT_N); // raw encoder counts at index hit
 80016d8:	2028      	movs	r0, #40	@ 0x28
 80016da:	f7fe fefb 	bl	80004d4 <_ZL20tmc4671_readRegisterh>
 80016de:	4603      	mov	r3, r0
 80016e0:	60fb      	str	r3, [r7, #12]
	int32_t npos_M = (npos * 0xffff) / encoder.cpr; // Scaled encoder angle at index
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4613      	mov	r3, r2
 80016e6:	041b      	lsls	r3, r3, #16
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80016f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80016f4:	60bb      	str	r3, [r7, #8]
	encoder.phiMoffset = -npos_M;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	425b      	negs	r3, r3
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b21a      	sxth	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

	if(offsetPhiE){
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb+0x68>
		encoder.phiEoffset += npos_M * encoder.pole_pairs;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	@ 0x68
 8001712:	b29a      	uxth	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800171a:	4619      	mov	r1, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	b29b      	uxth	r3, r3
 8001720:	fb11 f303 	smulbb	r3, r1, r3
 8001724:	b29b      	uxth	r3, r3
 8001726:	4413      	add	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	b21a      	sxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8001732:	e008      	b.n	8001746 <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb+0x7a>
	}else{
		tmc4671_fieldWrite(TMC4671_ABN_DECODER_PHI_M_OFFSET_FIELD, encoder.phiMoffset);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	@ 0x6a
 800173a:	461a      	mov	r2, r3
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb+0x94>)
 800173e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001742:	f7fe ff86 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	}

	setActualPosition(getAbsolutePosition()); // Set position to absolute position = ~zero
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fd38 	bl	80011bc <_ZN14TMC4671_Driver19getAbsolutePositionEv>
 800174c:	4603      	mov	r3, r0
 800174e:	4619      	mov	r1, r3
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fd11 	bl	8001178 <_ZN14TMC4671_Driver17setActualPositionEl>
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	080095c8 	.word	0x080095c8

08001764 <_ZN14TMC4671_Driver16powerInitEncoderEs>:
/**
 * Aligns ABN encoders by forcing an angle with high current and calculating the offset
 * Will start at the current phiE to minimize any extra movements (useful if motor was turned in openloop mode before already)
 * @param power Maximum current reached during flux ramp
 */
void TMC4671_Driver::powerInitEncoder(int16_t power){
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
	// This aligning technique is only for stepper and bldc motors
	if(motorType != MotorType::STEPPER && motorType != MotorType::BLDC){
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8001776:	2b02      	cmp	r3, #2
 8001778:	d005      	beq.n	8001786 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x22>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8001780:	2b03      	cmp	r3, #3
 8001782:	f040 80f7 	bne.w	8001974 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x210>
		return;
	}

	PhiE lastphie = getPhiEType();
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff f9ce 	bl	8000b28 <_ZN14TMC4671_Driver11getPhiETypeEv>
 800178c:	4603      	mov	r3, r0
 800178e:	74fb      	strb	r3, [r7, #19]
	MotionMode lastmode = getMotionMode();
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff f9b1 	bl	8000af8 <_ZN14TMC4671_Driver13getMotionModeEv>
 8001796:	4603      	mov	r3, r0
 8001798:	74bb      	strb	r3, [r7, #18]
	setFluxTorque(0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fd48 	bl	8001234 <_ZN14TMC4671_Driver13setFluxTorqueEss>

	RegisterField phiEoffsetReg = TMC4671_ABN_DECODER_PHI_E_OFFSET_FIELD;
 80017a4:	4a75      	ldr	r2, [pc, #468]	@ (800197c <_ZN14TMC4671_Driver16powerInitEncoderEs+0x218>)
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ae:	e883 0003 	stmia.w	r3, {r0, r1}

	if(this->encoderType == EncoderType::abn){
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d113      	bne.n	80017e4 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x80>
		phiEoffsetReg = TMC4671_ABN_DECODER_PHI_E_OFFSET_FIELD;
 80017bc:	4a70      	ldr	r2, [pc, #448]	@ (8001980 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x21c>)
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017c6:	e883 0003 	stmia.w	r3, {r0, r1}

		if(!encoder.indexHitFlag){
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80017d0:	f083 0301 	eor.w	r3, r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d01d      	beq.n	8001816 <_ZN14TMC4671_Driver16powerInitEncoderEs+0xb2>
			zeroAbnUsingPhiM();
 80017da:	2100      	movs	r1, #0
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff75 	bl	80016cc <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb>
 80017e2:	e018      	b.n	8001816 <_ZN14TMC4671_Driver16powerInitEncoderEs+0xb2>
		}
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d004      	beq.n	80017f8 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x94>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d10e      	bne.n	8001816 <_ZN14TMC4671_Driver16powerInitEncoderEs+0xb2>
		tmc4671_writeRegister(TMC4671_AENC_DECODER_COUNT, 0); //Zero encoder
 80017f8:	2100      	movs	r1, #0
 80017fa:	2041      	movs	r0, #65	@ 0x41
 80017fc:	f7fe fe9e 	bl	800053c <_ZL21tmc4671_writeRegisterhm>
		tmc4671_writeRegister(TMC4671_AENC_DECODER_POSITION, 0); //Zero encoder
 8001800:	2100      	movs	r1, #0
 8001802:	2047      	movs	r0, #71	@ 0x47
 8001804:	f7fe fe9a 	bl	800053c <_ZL21tmc4671_writeRegisterhm>
		phiEoffsetReg = TMC4671_AENC_DECODER_PHI_E_OFFSET_FIELD;
 8001808:	4a5e      	ldr	r2, [pc, #376]	@ (8001984 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x220>)
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001812:	e883 0003 	stmia.w	r3, {r0, r1}
//	}
//	else{
//		return; // Not relevant
//	}

	int16_t phiEpos = getPhiE(); // starts at current encoder position
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff f9a0 	bl	8000b5c <_ZN14TMC4671_Driver7getPhiEEv>
 800181c:	4603      	mov	r3, r0
 800181e:	823b      	strh	r3, [r7, #16]
	tmc4671_fieldWrite(phiEoffsetReg, 0); // Set phiE offset to zero
 8001820:	2200      	movs	r2, #0
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	e893 0003 	ldmia.w	r3, {r0, r1}
 800182a:	f7fe ff12 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	setPhiE_ext(phiEpos);
 800182e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001832:	4619      	mov	r1, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fd31 	bl	800129c <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(PhiE::ext);
 800183a:	2101      	movs	r1, #1
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fa05 	bl	8000c4c <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>

	// Ramp up flux
	for(int16_t flux = 0; flux <= power; flux+=10){
 8001842:	2300      	movs	r3, #0
 8001844:	83fb      	strh	r3, [r7, #30]
 8001846:	e00d      	b.n	8001864 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x100>
		setFluxTorque(flux, 0);
 8001848:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fcef 	bl	8001234 <_ZN14TMC4671_Driver13setFluxTorqueEss>
		HAL_Delay(3);
 8001856:	2003      	movs	r0, #3
 8001858:	f001 f824 	bl	80028a4 <HAL_Delay>
	for(int16_t flux = 0; flux <= power; flux+=10){
 800185c:	8bfb      	ldrh	r3, [r7, #30]
 800185e:	330a      	adds	r3, #10
 8001860:	b29b      	uxth	r3, r3
 8001862:	83fb      	strh	r3, [r7, #30]
 8001864:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001868:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800186c:	429a      	cmp	r2, r3
 800186e:	ddeb      	ble.n	8001848 <_ZN14TMC4671_Driver16powerInitEncoderEs+0xe4>
	}

	int16_t phiE_enc = getPhiE_Enc();
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff f981 	bl	8000b78 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8001876:	4603      	mov	r3, r0
 8001878:	83bb      	strh	r3, [r7, #28]
	HAL_Delay(50);
 800187a:	2032      	movs	r0, #50	@ 0x32
 800187c:	f001 f812 	bl	80028a4 <HAL_Delay>
	int16_t phiE_abn_old = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	837b      	strh	r3, [r7, #26]
	int16_t c = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	833b      	strh	r3, [r7, #24]
	uint16_t still = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	82fb      	strh	r3, [r7, #22]

//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
	while(still < 30 && c++ < 1000){
 800188c:	e019      	b.n	80018c2 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x15e>
		// Wait for motor to stop moving
		if(abs(phiE_enc - phiE_abn_old) < 100){
 800188e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001892:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	bfb8      	it	lt
 800189c:	425b      	neglt	r3, r3
 800189e:	2b63      	cmp	r3, #99	@ 0x63
 80018a0:	dc03      	bgt.n	80018aa <_ZN14TMC4671_Driver16powerInitEncoderEs+0x146>
			still++;
 80018a2:	8afb      	ldrh	r3, [r7, #22]
 80018a4:	3301      	adds	r3, #1
 80018a6:	82fb      	strh	r3, [r7, #22]
 80018a8:	e001      	b.n	80018ae <_ZN14TMC4671_Driver16powerInitEncoderEs+0x14a>
		}
		else{
			still = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	82fb      	strh	r3, [r7, #22]
		}
		phiE_abn_old = phiE_enc;
 80018ae:	8bbb      	ldrh	r3, [r7, #28]
 80018b0:	837b      	strh	r3, [r7, #26]
		phiE_enc = getPhiE_Enc();
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff f960 	bl	8000b78 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 80018b8:	4603      	mov	r3, r0
 80018ba:	83bb      	strh	r3, [r7, #28]
		HAL_Delay(10);
 80018bc:	200a      	movs	r0, #10
 80018be:	f000 fff1 	bl	80028a4 <HAL_Delay>
	while(still < 30 && c++ < 1000){
 80018c2:	8afb      	ldrh	r3, [r7, #22]
 80018c4:	2b1d      	cmp	r3, #29
 80018c6:	d80a      	bhi.n	80018de <_ZN14TMC4671_Driver16powerInitEncoderEs+0x17a>
 80018c8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	3201      	adds	r2, #1
 80018d0:	b292      	uxth	r2, r2
 80018d2:	833a      	strh	r2, [r7, #24]
 80018d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018d8:	da01      	bge.n	80018de <_ZN14TMC4671_Driver16powerInitEncoderEs+0x17a>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x17c>
 80018de:	2300      	movs	r3, #0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1d4      	bne.n	800188e <_ZN14TMC4671_Driver16powerInitEncoderEs+0x12a>
	}
	setFluxTorque(0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fca3 	bl	8001234 <_ZN14TMC4671_Driver13setFluxTorqueEss>
//	HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);

	//Write offset
	int16_t phiEoffset =  phiEpos-phiE_enc;
 80018ee:	8a3a      	ldrh	r2, [r7, #16]
 80018f0:	8bbb      	ldrh	r3, [r7, #28]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	82bb      	strh	r3, [r7, #20]

	if(phiEoffset == 0){ // 0 invalid
 80018f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1b0>
		HAL_Delay(200);
 8001900:	20c8      	movs	r0, #200	@ 0xc8
 8001902:	f000 ffcf 	bl	80028a4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	2102      	movs	r1, #2
 800190a:	481f      	ldr	r0, [pc, #124]	@ (8001988 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x224>)
 800190c:	f001 fab4 	bl	8002e78 <HAL_GPIO_WritePin>
//		HAL_Delay(5000);
		phiEoffset = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	82bb      	strh	r3, [r7, #20]

//	if (usingExternalEncoder()){
//		externalEncoderPhieOffset = phiEoffset;
//	}
//	else{
	tmc4671_fieldWrite(phiEoffsetReg, phiEoffset);
 8001914:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001918:	461a      	mov	r2, r3
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001922:	f7fe fe96 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
//	}

	if(this->encoderType == EncoderType::abn){
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800192c:	2b01      	cmp	r3, #1
 800192e:	d104      	bne.n	800193a <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1d6>
		encoder.phiEoffset = phiEoffset;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	8aba      	ldrh	r2, [r7, #20]
 8001934:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8001938:	e00d      	b.n	8001956 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1f2>
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001940:	2b02      	cmp	r3, #2
 8001942:	d004      	beq.n	800194e <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1ea>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800194a:	2b03      	cmp	r3, #3
 800194c:	d103      	bne.n	8001956 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1f2>
		encoder.phiEoffset = phiEoffset;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	8aba      	ldrh	r2, [r7, #20]
 8001952:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	}


	setPhiE_ext(0);
 8001956:	2100      	movs	r1, #0
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fc9f 	bl	800129c <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(lastphie);
 800195e:	7cfb      	ldrb	r3, [r7, #19]
 8001960:	4619      	mov	r1, r3
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff f972 	bl	8000c4c <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 8001968:	7cbb      	ldrb	r3, [r7, #18]
 800196a:	4619      	mov	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff f8ad 	bl	8000acc <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
 8001972:	e000      	b.n	8001976 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x212>
		return;
 8001974:	bf00      	nop
}
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	08009478 	.word	0x08009478
 8001980:	080095d0 	.word	0x080095d0
 8001984:	08009668 	.word	0x08009668
 8001988:	40021000 	.word	0x40021000

0800198c <_ZN14TMC4671_Driver12checkEncoderEv>:

/**
 * Steps the motor a few times to check if the encoder follows correctly
 */
bool TMC4671_Driver::checkEncoder(){
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	@ 0x30
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	if(this->motorType != MotorType::STEPPER && this->motorType != MotorType::BLDC){
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800199a:	2b02      	cmp	r3, #2
 800199c:	d006      	beq.n	80019ac <_ZN14TMC4671_Driver12checkEncoderEv+0x20>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d001      	beq.n	80019ac <_ZN14TMC4671_Driver12checkEncoderEv+0x20>
		// If not stepper or bldc return
		return true;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e1ee      	b.n	8001d8a <_ZN14TMC4671_Driver12checkEncoderEv+0x3fe>
	}

	const uint16_t maxcount = 80; // Allowed reversals
 80019ac:	2350      	movs	r3, #80	@ 0x50
 80019ae:	82fb      	strh	r3, [r7, #22]
	const uint16_t maxfail = 10; // Allowed fails
 80019b0:	230a      	movs	r3, #10
 80019b2:	82bb      	strh	r3, [r7, #20]

	// Start angle offsets all angles later so there is no jump if angle is already properly aligned
	const int16_t startAngle = getPhiE_Enc();
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff f8df 	bl	8000b78 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 80019ba:	4603      	mov	r3, r0
 80019bc:	827b      	strh	r3, [r7, #18]
	const int16_t targetAngle = 0x3FFF;
 80019be:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80019c2:	823b      	strh	r3, [r7, #16]

	bool result = true;
 80019c4:	2301      	movs	r3, #1
 80019c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	PhiE lastphie = getPhiEType();
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff f8ac 	bl	8000b28 <_ZN14TMC4671_Driver11getPhiETypeEv>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]
	MotionMode lastmode = getMotionMode();
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff f88f 	bl	8000af8 <_ZN14TMC4671_Driver13getMotionModeEv>
 80019da:	4603      	mov	r3, r0
 80019dc:	73bb      	strb	r3, [r7, #14]

//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
//	HAL_Delay(200);
//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);

	setFluxTorque(0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fc26 	bl	8001234 <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setPhiEType(PhiE::ext);
 80019e8:	2101      	movs	r1, #1
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff f92e 	bl	8000c4c <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setPhiE_ext(startAngle);
 80019f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fc50 	bl	800129c <_ZN14TMC4671_Driver11setPhiE_extEs>

	// Ramp up flux
	for(int16_t flux = 0; flux <= 2*this->initPower/3; flux+=20){
 80019fc:	2300      	movs	r3, #0
 80019fe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001a00:	e00d      	b.n	8001a1e <_ZN14TMC4671_Driver12checkEncoderEv+0x92>
		setFluxTorque(flux, 0);
 8001a02:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001a06:	2200      	movs	r2, #0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fc12 	bl	8001234 <_ZN14TMC4671_Driver13setFluxTorqueEss>
		HAL_Delay(2);
 8001a10:	2002      	movs	r0, #2
 8001a12:	f000 ff47 	bl	80028a4 <HAL_Delay>
	for(int16_t flux = 0; flux <= 2*this->initPower/3; flux+=20){
 8001a16:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a18:	3314      	adds	r3, #20
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001a1e:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	@ 0xf6
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	49ab      	ldr	r1, [pc, #684]	@ (8001cd8 <_ZN14TMC4671_Driver12checkEncoderEv+0x34c>)
 8001a2c:	fb81 0103 	smull	r0, r1, r1, r3
 8001a30:	17db      	asrs	r3, r3, #31
 8001a32:	1acb      	subs	r3, r1, r3
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dde4      	ble.n	8001a02 <_ZN14TMC4671_Driver12checkEncoderEv+0x76>
	}

	//Forward
	int16_t phiE_enc = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	81bb      	strh	r3, [r7, #12]
	uint16_t failcount = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	857b      	strh	r3, [r7, #42]	@ 0x2a
	int16_t revCount = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	853b      	strh	r3, [r7, #40]	@ 0x28
	for(int16_t angle = 0; angle<targetAngle; angle+=0x00ff){
 8001a44:	2300      	movs	r3, #0
 8001a46:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001a48:	e088      	b.n	8001b5c <_ZN14TMC4671_Driver12checkEncoderEv+0x1d0>
		uint16_t c = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		setPhiE_ext(angle+startAngle);
 8001a4e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001a50:	8a7b      	ldrh	r3, [r7, #18]
 8001a52:	4413      	add	r3, r2
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fc1e 	bl	800129c <_ZN14TMC4671_Driver11setPhiE_extEs>
		HAL_Delay(5);
 8001a60:	2005      	movs	r0, #5
 8001a62:	f000 ff1f 	bl	80028a4 <HAL_Delay>

		phiE_enc = getPhiE_Enc() - startAngle;
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff f886 	bl	8000b78 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	8a7b      	ldrh	r3, [r7, #18]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	81bb      	strh	r3, [r7, #12]
		int16_t err = abs(phiE_enc - angle);
 8001a78:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001a7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	bfb8      	it	lt
 8001a86:	425b      	neglt	r3, r3
 8001a88:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t nErr = abs(phiE_enc + angle);
 8001a8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001a8e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001a92:	4413      	add	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bfb8      	it	lt
 8001a98:	425b      	neglt	r3, r3
 8001a9a:	843b      	strh	r3, [r7, #32]

		// Wait more until encoder settles a bit
		while(err > 2500 && nErr > 2500 && c++ < maxcount){
 8001a9c:	e01d      	b.n	8001ada <_ZN14TMC4671_Driver12checkEncoderEv+0x14e>
			phiE_enc = getPhiE_Enc() - startAngle;
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff f86a 	bl	8000b78 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	8a7b      	ldrh	r3, [r7, #18]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	81bb      	strh	r3, [r7, #12]
			err = abs(phiE_enc - angle);
 8001ab0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ab4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bfb8      	it	lt
 8001abe:	425b      	neglt	r3, r3
 8001ac0:	847b      	strh	r3, [r7, #34]	@ 0x22
			nErr = abs(angle - phiE_enc);
 8001ac2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8001ac6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bfb8      	it	lt
 8001ad0:	425b      	neglt	r3, r3
 8001ad2:	843b      	strh	r3, [r7, #32]
			HAL_Delay(10);
 8001ad4:	200a      	movs	r0, #10
 8001ad6:	f000 fee5 	bl	80028a4 <HAL_Delay>
		while(err > 2500 && nErr > 2500 && c++ < maxcount){
 8001ada:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001ade:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	dd0c      	ble.n	8001b00 <_ZN14TMC4671_Driver12checkEncoderEv+0x174>
 8001ae6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001aea:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001aee:	4293      	cmp	r3, r2
 8001af0:	dd06      	ble.n	8001b00 <_ZN14TMC4671_Driver12checkEncoderEv+0x174>
 8001af2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8001af8:	2b4f      	cmp	r3, #79	@ 0x4f
 8001afa:	d801      	bhi.n	8001b00 <_ZN14TMC4671_Driver12checkEncoderEv+0x174>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <_ZN14TMC4671_Driver12checkEncoderEv+0x176>
 8001b00:	2300      	movs	r3, #0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1cb      	bne.n	8001a9e <_ZN14TMC4671_Driver12checkEncoderEv+0x112>
		}

		if(err > nErr){
 8001b06:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8001b0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	dd05      	ble.n	8001b1e <_ZN14TMC4671_Driver12checkEncoderEv+0x192>
			revCount++;
 8001b12:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	853b      	strh	r3, [r7, #40]	@ 0x28
		}

		if(c >= maxcount){
 8001b1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b20:	2b4f      	cmp	r3, #79	@ 0x4f
 8001b22:	d917      	bls.n	8001b54 <_ZN14TMC4671_Driver12checkEncoderEv+0x1c8>
			failcount++;
 8001b24:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001b26:	3301      	adds	r3, #1
 8001b28:	857b      	strh	r3, [r7, #42]	@ 0x2a
			if(failcount > maxfail){
 8001b2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001b2c:	2b0a      	cmp	r3, #10
 8001b2e:	d911      	bls.n	8001b54 <_ZN14TMC4671_Driver12checkEncoderEv+0x1c8>
				result = false;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2102      	movs	r1, #2
 8001b3a:	4868      	ldr	r0, [pc, #416]	@ (8001cdc <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8001b3c:	f001 f99c 	bl	8002e78 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8001b40:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b44:	f000 feae 	bl	80028a4 <HAL_Delay>
				HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4863      	ldr	r0, [pc, #396]	@ (8001cdc <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8001b4e:	f001 f993 	bl	8002e78 <HAL_GPIO_WritePin>
				break;
 8001b52:	e00a      	b.n	8001b6a <_ZN14TMC4671_Driver12checkEncoderEv+0x1de>
	for(int16_t angle = 0; angle<targetAngle; angle+=0x00ff){
 8001b54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b56:	33ff      	adds	r3, #255	@ 0xff
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b5c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001b60:	f643 72fe 	movw	r2, #16382	@ 0x3ffe
 8001b64:	4293      	cmp	r3, r2
 8001b66:	f77f af70 	ble.w	8001a4a <_ZN14TMC4671_Driver12checkEncoderEv+0xbe>
	 * Encoder connection wrong
	 * Wrong encoder selection
	 * No motor movement
	 * No encoder power
	 */
	if(startAngle == getPhiE_Enc()){
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff f804 	bl	8000b78 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d010      	beq.n	8001ba8 <_ZN14TMC4671_Driver12checkEncoderEv+0x21c>
		// TODO: error handler
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001b86:	2201      	movs	r2, #1
 8001b88:	2102      	movs	r1, #2
 8001b8a:	4854      	ldr	r0, [pc, #336]	@ (8001cdc <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8001b8c:	f001 f974 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001b90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b94:	f000 fe86 	bl	80028a4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	484f      	ldr	r0, [pc, #316]	@ (8001cdc <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8001b9e:	f001 f96b 	bl	8002e78 <HAL_GPIO_WritePin>
		result = false;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	// Backward

	if(result){ // Only if not already failed
 8001ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80a0 	beq.w	8001cf2 <_ZN14TMC4671_Driver12checkEncoderEv+0x366>
		for(int16_t angle = targetAngle;angle>0;angle -= 0x00ff){
 8001bb2:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8001bb6:	83fb      	strh	r3, [r7, #30]
 8001bb8:	e096      	b.n	8001ce8 <_ZN14TMC4671_Driver12checkEncoderEv+0x35c>
			uint16_t c = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	83bb      	strh	r3, [r7, #28]
			setPhiE_ext(angle+startAngle);
 8001bbe:	8bfa      	ldrh	r2, [r7, #30]
 8001bc0:	8a7b      	ldrh	r3, [r7, #18]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	4619      	mov	r1, r3
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fb66 	bl	800129c <_ZN14TMC4671_Driver11setPhiE_extEs>
			HAL_Delay(5);
 8001bd0:	2005      	movs	r0, #5
 8001bd2:	f000 fe67 	bl	80028a4 <HAL_Delay>

			phiE_enc = getPhiE_Enc() - startAngle;
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7fe ffce 	bl	8000b78 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	8a7b      	ldrh	r3, [r7, #18]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	81bb      	strh	r3, [r7, #12]
			int16_t err = abs(phiE_enc - angle);
 8001be8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001bec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	bfb8      	it	lt
 8001bf6:	425b      	neglt	r3, r3
 8001bf8:	837b      	strh	r3, [r7, #26]
			int16_t nErr = abs(phiE_enc + angle);
 8001bfa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001bfe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c02:	4413      	add	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bfb8      	it	lt
 8001c08:	425b      	neglt	r3, r3
 8001c0a:	833b      	strh	r3, [r7, #24]

			// Wait more
			while(err > 2500 && nErr > 2500 && c++ < maxcount){
 8001c0c:	e01d      	b.n	8001c4a <_ZN14TMC4671_Driver12checkEncoderEv+0x2be>
				phiE_enc = getPhiE_Enc() - startAngle;
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe ffb2 	bl	8000b78 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	8a7b      	ldrh	r3, [r7, #18]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	81bb      	strh	r3, [r7, #12]
				err = abs(phiE_enc - angle);
 8001c20:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bfb8      	it	lt
 8001c2e:	425b      	neglt	r3, r3
 8001c30:	837b      	strh	r3, [r7, #26]
				nErr = abs(angle - phiE_enc);
 8001c32:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001c36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bfb8      	it	lt
 8001c40:	425b      	neglt	r3, r3
 8001c42:	833b      	strh	r3, [r7, #24]
				HAL_Delay(10);
 8001c44:	200a      	movs	r0, #10
 8001c46:	f000 fe2d 	bl	80028a4 <HAL_Delay>
			while(err > 2500 && nErr > 2500 && c++ < maxcount){
 8001c4a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001c4e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001c52:	4293      	cmp	r3, r2
 8001c54:	dd0c      	ble.n	8001c70 <_ZN14TMC4671_Driver12checkEncoderEv+0x2e4>
 8001c56:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c5a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	dd06      	ble.n	8001c70 <_ZN14TMC4671_Driver12checkEncoderEv+0x2e4>
 8001c62:	8bbb      	ldrh	r3, [r7, #28]
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	83ba      	strh	r2, [r7, #28]
 8001c68:	2b4f      	cmp	r3, #79	@ 0x4f
 8001c6a:	d801      	bhi.n	8001c70 <_ZN14TMC4671_Driver12checkEncoderEv+0x2e4>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <_ZN14TMC4671_Driver12checkEncoderEv+0x2e6>
 8001c70:	2300      	movs	r3, #0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1cb      	bne.n	8001c0e <_ZN14TMC4671_Driver12checkEncoderEv+0x282>
			}

			if(err > nErr){
 8001c76:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001c7a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	dd05      	ble.n	8001c8e <_ZN14TMC4671_Driver12checkEncoderEv+0x302>
				revCount++;
 8001c82:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3301      	adds	r3, #1
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	853b      	strh	r3, [r7, #40]	@ 0x28
			}

			if(c >= maxcount){
 8001c8e:	8bbb      	ldrh	r3, [r7, #28]
 8001c90:	2b4f      	cmp	r3, #79	@ 0x4f
 8001c92:	d925      	bls.n	8001ce0 <_ZN14TMC4671_Driver12checkEncoderEv+0x354>
				failcount++;
 8001c94:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001c96:	3301      	adds	r3, #1
 8001c98:	857b      	strh	r3, [r7, #42]	@ 0x2a
				if(failcount > maxfail){
 8001c9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001c9c:	2b0a      	cmp	r3, #10
 8001c9e:	d91f      	bls.n	8001ce0 <_ZN14TMC4671_Driver12checkEncoderEv+0x354>
					result = false;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2101      	movs	r1, #1
 8001caa:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8001cac:	f001 f8e4 	bl	8002e78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	4809      	ldr	r0, [pc, #36]	@ (8001cdc <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8001cb6:	f001 f8df 	bl	8002e78 <HAL_GPIO_WritePin>
					HAL_Delay(150);
 8001cba:	2096      	movs	r0, #150	@ 0x96
 8001cbc:	f000 fdf2 	bl	80028a4 <HAL_Delay>
					HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8001cc6:	f001 f8d7 	bl	8002e78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2102      	movs	r1, #2
 8001cce:	4803      	ldr	r0, [pc, #12]	@ (8001cdc <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8001cd0:	f001 f8d2 	bl	8002e78 <HAL_GPIO_WritePin>
					break;
 8001cd4:	e00d      	b.n	8001cf2 <_ZN14TMC4671_Driver12checkEncoderEv+0x366>
 8001cd6:	bf00      	nop
 8001cd8:	55555556 	.word	0x55555556
 8001cdc:	40021000 	.word	0x40021000
		for(int16_t angle = targetAngle;angle>0;angle -= 0x00ff){
 8001ce0:	8bfb      	ldrh	r3, [r7, #30]
 8001ce2:	3bff      	subs	r3, #255	@ 0xff
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	83fb      	strh	r3, [r7, #30]
 8001ce8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f73f af64 	bgt.w	8001bba <_ZN14TMC4671_Driver12checkEncoderEv+0x22e>
			}
		}
	}

	// TODO check if we want that
	if(revCount > maxcount){ // Encoder seems reversed
 8001cf2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001cf6:	2b50      	cmp	r3, #80	@ 0x50
 8001cf8:	dd2a      	ble.n	8001d50 <_ZN14TMC4671_Driver12checkEncoderEv+0x3c4>
		// reverse encoder
		if(this->encoderType == EncoderType::abn){
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d112      	bne.n	8001d2a <_ZN14TMC4671_Driver12checkEncoderEv+0x39e>
			this->encoder.rdir = !this->encoder.rdir;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001d0a:	f083 0301 	eor.w	r3, r3, #1
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
//			this->encoder.bpol = !this->encoder.bpol;
//			this->encoder.npol = !this->encoder.npol;
//			HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
//			HAL_Delay(500);
//			HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
			tmc4671_fieldWrite(TMC4671_ABN_DIRECTION_FIELD, this->encoder.rdir);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d94 <_ZN14TMC4671_Driver12checkEncoderEv+0x408>)
 8001d20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d24:	f7fe fc95 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
 8001d28:	e012      	b.n	8001d50 <_ZN14TMC4671_Driver12checkEncoderEv+0x3c4>
//			tmc4671_fieldWrite(TMC4671_ABN_BPOL_FIELD, this->encoder.bpol);
//			tmc4671_fieldWrite(TMC4671_ABN_NPOL_FIELD, this->encoder.npol);
//			result = false;
//			setupAbnEncoder(&encoder);
		}
		else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d004      	beq.n	8001d3e <_ZN14TMC4671_Driver12checkEncoderEv+0x3b2>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d108      	bne.n	8001d50 <_ZN14TMC4671_Driver12checkEncoderEv+0x3c4>
			this->encoder.rdir = !this->encoder.rdir;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
//			this->encoderReversed = !this->encoderReversed;
		}
//		ErrorHandler::addError(Error(ErrorCode::encoderReversed,ErrorType::warning,"Encoder direction reversed during check"));
	}

	setFluxTorque(0, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fa6d 	bl	8001234 <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setPhiE_ext(0);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fa9d 	bl	800129c <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(lastphie);
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	4619      	mov	r1, r3
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe ff70 	bl	8000c4c <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7fe feab 	bl	8000acc <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>

	if(result){
 8001d76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <_ZN14TMC4671_Driver12checkEncoderEv+0x3fa>
		encoder.isAligned = true;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
	}

	return result;
 8001d86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3730      	adds	r7, #48	@ 0x30
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	080095b8 	.word	0x080095b8

08001d98 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder>:

void TMC4671_Driver::setupAbnEncoder(ABNencoder* abnEncoder_p){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
	this->statusMask.flags.AENC_N = 0;
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	f892 30ff 	ldrb.w	r3, [r2, #255]	@ 0xff
 8001da8:	f36f 1386 	bfc	r3, #6, #1
 8001dac:	f882 30ff 	strb.w	r3, [r2, #255]	@ 0xff
	this->statusMask.flags.ENC_N = 0;
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	f892 30ff 	ldrb.w	r3, [r2, #255]	@ 0xff
 8001db6:	f36f 1304 	bfc	r3, #4, #1
 8001dba:	f882 30ff 	strb.w	r3, [r2, #255]	@ 0xff
	setStatusMask(statusMask);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8d3 10fc 	ldr.w	r1, [r3, #252]	@ 0xfc
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fa5b 	bl	8001280 <_ZN14TMC4671_Driver13setStatusMaskE11StatusFlags>

	memcpy(&this->encoder, abnEncoder_p, sizeof(this->encoder));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	335c      	adds	r3, #92	@ 0x5c
 8001dce:	2218      	movs	r2, #24
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f007 fb34 	bl	8009440 <memcpy>

	tmc4671_fieldWrite(TMC4671_ABN_APOL_FIELD, abnEncoder_p->apol);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	795b      	ldrb	r3, [r3, #5]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b5f      	ldr	r3, [pc, #380]	@ (8001f5c <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1c4>)
 8001de0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001de4:	f7fe fc35 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_BPOL_FIELD, abnEncoder_p->bpol);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	799b      	ldrb	r3, [r3, #6]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b5c      	ldr	r3, [pc, #368]	@ (8001f60 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1c8>)
 8001df0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001df4:	f7fe fc2d 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_NPOL_FIELD, abnEncoder_p->npol);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	79db      	ldrb	r3, [r3, #7]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b59      	ldr	r3, [pc, #356]	@ (8001f64 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1cc>)
 8001e00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e04:	f7fe fc25 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_USE_ABN_AS_N_FIELD, abnEncoder_p->ab_as_n);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	7a5b      	ldrb	r3, [r3, #9]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b56      	ldr	r3, [pc, #344]	@ (8001f68 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1d0>)
 8001e10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e14:	f7fe fc1d 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_CLN_FIELD, abnEncoder_p->latch_on_N);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	7a9b      	ldrb	r3, [r3, #10]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b53      	ldr	r3, [pc, #332]	@ (8001f6c <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1d4>)
 8001e20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e24:	f7fe fc15 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_DIRECTION_FIELD, abnEncoder_p->rdir);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	7a1b      	ldrb	r3, [r3, #8]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b50      	ldr	r3, [pc, #320]	@ (8001f70 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1d8>)
 8001e30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e34:	f7fe fc0d 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_ABN_DECODER_PPR_FIELD, abnEncoder_p->cpr);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	885b      	ldrh	r3, [r3, #2]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f74 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1dc>)
 8001e40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e44:	f7fe fc05 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_ABN_DECODER_PHI_E_OFFSET_FIELD, abnEncoder_p->phiEoffset);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b49      	ldr	r3, [pc, #292]	@ (8001f78 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1e0>)
 8001e52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e56:	f7fe fbfc 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_DECODER_PHI_M_OFFSET_FIELD, abnEncoder_p->phiMoffset);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b46      	ldr	r3, [pc, #280]	@ (8001f7c <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1e4>)
 8001e64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e68:	f7fe fbf3 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	// Set mechanical angle
	this->encoder.posSelection = PosAndVelSelection::PhiM_abn;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2209      	movs	r2, #9
 8001e70:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	this->encoder.velSelection = PosAndVelSelection::PhiM_abn;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2209      	movs	r2, #9
 8001e78:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	tmc4671_fieldWrite(TMC4671_POSITION_SELECTION_FIELD, (uint8_t)this->encoder.posSelection);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b3e      	ldr	r3, [pc, #248]	@ (8001f80 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1e8>)
 8001e86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e8a:	f7fe fbe2 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_VELOCITY_SELECTION_FIELD, (uint8_t)this->encoder.velSelection);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1ec>)
 8001e98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e9c:	f7fe fbd9 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_VELOCITY_METER_SELECTION_FIELD, 0); // 0: default velocity meter (fixed frequency sampling)
 8001ea0:	4b39      	ldr	r3, [pc, #228]	@ (8001f88 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1f0>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ea8:	f7fe fbd3 	bl	8000652 <_ZL18tmc4671_fieldWrite13RegisterFieldm>


	estimateABNparams();
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff fb0d 	bl	80014cc <_ZN14TMC4671_Driver17estimateABNparamsEv>
//		HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
//		HAL_Delay(400);
//		HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
//	}
//	else{
		setPhiE_ext(tmc4671_readRegister(TMC4671_PHI_E));
 8001eb2:	2053      	movs	r0, #83	@ 0x53
 8001eb4:	f7fe fb0e 	bl	80004d4 <_ZL20tmc4671_readRegisterh>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff f9ec 	bl	800129c <_ZN14TMC4671_Driver11setPhiE_extEs>
		setPhiEType(PhiE::ext);
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fec0 	bl	8000c4c <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
//		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
//	}

	// Align encoder
	powerInitEncoder(this->initPower);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	@ 0xf6
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fc45 	bl	8001764 <_ZN14TMC4671_Driver16powerInitEncoderEs>

	uint8_t enc_retry = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]
	while(!encoder.isAligned && enc_retry < 3){
 8001ede:	e005      	b.n	8001eec <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x154>
		checkEncoder();
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fd53 	bl	800198c <_ZN14TMC4671_Driver12checkEncoderEv>
		enc_retry++;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
	while(!encoder.isAligned && enc_retry < 3){
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 8001ef2:	f083 0301 	eor.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x16a>
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d9ee      	bls.n	8001ee0 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x148>
	}
	if(!encoder.isAligned) {
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 8001f08:	f083 0301 	eor.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x18e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001f12:	2201      	movs	r2, #1
 8001f14:	2102      	movs	r1, #2
 8001f16:	481d      	ldr	r0, [pc, #116]	@ (8001f8c <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1f4>)
 8001f18:	f000 ffae 	bl	8002e78 <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fdb2 	bl	8000a88 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
		return;
 8001f24:	e017      	b.n	8001f56 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1be>
//		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
//		HAL_Delay(400);
//		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
//	}

	if(this->encoderType == EncoderType::abn){
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d104      	bne.n	8001f3a <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1a2>
		setPhiEType(PhiE::abn);
 8001f30:	2103      	movs	r1, #3
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fe8a 	bl	8000c4c <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
 8001f38:	e00d      	b.n	8001f56 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1be>
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d004      	beq.n	8001f4e <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1b6>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d103      	bne.n	8001f56 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder+0x1be>
		setPhiEType(PhiE::aenc);
 8001f4e:	2106      	movs	r1, #6
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7fe fe7b 	bl	8000c4c <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
//	HAL_Delay(1000);
//	else if(usingExternalEncoder()){
//		setPhiEType(PhiE::extEncoder);
//	}

}
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	08009590 	.word	0x08009590
 8001f60:	08009598 	.word	0x08009598
 8001f64:	080095a0 	.word	0x080095a0
 8001f68:	080095a8 	.word	0x080095a8
 8001f6c:	080095b0 	.word	0x080095b0
 8001f70:	080095b8 	.word	0x080095b8
 8001f74:	080095c0 	.word	0x080095c0
 8001f78:	080095d0 	.word	0x080095d0
 8001f7c:	080095c8 	.word	0x080095c8
 8001f80:	08009690 	.word	0x08009690
 8001f84:	08009680 	.word	0x08009680
 8001f88:	08009688 	.word	0x08009688
 8001f8c:	40021000 	.word	0x40021000

08001f90 <_ZN14TMC4671_Driver4initEv>:
//	uint16_t intV = getIntV();
//	return (intV > 10000) && (getExtV() > 10000) && (intV < 78000);
}

void TMC4671_Driver::init()
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	6078      	str	r0, [r7, #4]
	setDriverState(DRIVER_DISABLE);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fd74 	bl	8000a88 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
	// Ping driver
	tmc4671_writeRegister(TMC4671_CHIPINFO_ADDR, 0);
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7fe faca 	bl	800053c <_ZL21tmc4671_writeRegisterhm>
	if (tmc4671_readRegister(TMC4671_CHIPINFO_DATA) == 0x34363731) {
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7fe fa93 	bl	80004d4 <_ZL20tmc4671_readRegisterh>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a77      	ldr	r2, [pc, #476]	@ (8002190 <_ZN14TMC4671_Driver4initEv+0x200>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	bf0c      	ite	eq
 8001fb6:	2301      	moveq	r3, #1
 8001fb8:	2300      	movne	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01d      	beq.n	8001ffc <_ZN14TMC4671_Driver4initEv+0x6c>
		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2180      	movs	r1, #128	@ 0x80
 8001fc4:	4873      	ldr	r0, [pc, #460]	@ (8002194 <_ZN14TMC4671_Driver4initEv+0x204>)
 8001fc6:	f000 ff57 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001fca:	20c8      	movs	r0, #200	@ 0xc8
 8001fcc:	f000 fc6a 	bl	80028a4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2180      	movs	r1, #128	@ 0x80
 8001fd4:	486f      	ldr	r0, [pc, #444]	@ (8002194 <_ZN14TMC4671_Driver4initEv+0x204>)
 8001fd6:	f000 ff4f 	bl	8002e78 <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
	  return;
	}

	// Check TMC version if it is not ES
	tmc4671_writeRegister(TMC4671_CHIPINFO_ADDR, 1);
 8001fda:	2101      	movs	r1, #1
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7fe faad 	bl	800053c <_ZL21tmc4671_writeRegisterhm>
	if(tmc4671_readRegister(TMC4671_CHIPINFO_DATA) == 0x00010000){
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7fe fa76 	bl	80004d4 <_ZL20tmc4671_readRegisterh>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d019      	beq.n	800202e <_ZN14TMC4671_Driver4initEv+0x9e>
 8001ffa:	e009      	b.n	8002010 <_ZN14TMC4671_Driver4initEv+0x80>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2102      	movs	r1, #2
 8002000:	4865      	ldr	r0, [pc, #404]	@ (8002198 <_ZN14TMC4671_Driver4initEv+0x208>)
 8002002:	f000 ff39 	bl	8002e78 <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
 8002006:	2100      	movs	r1, #0
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7fe fd3d 	bl	8000a88 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
	  return;
 800200e:	e0bc      	b.n	800218a <_ZN14TMC4671_Driver4initEv+0x1fa>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8002010:	2201      	movs	r2, #1
 8002012:	2102      	movs	r1, #2
 8002014:	4860      	ldr	r0, [pc, #384]	@ (8002198 <_ZN14TMC4671_Driver4initEv+0x208>)
 8002016:	f000 ff2f 	bl	8002e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 800201a:	2201      	movs	r2, #1
 800201c:	2101      	movs	r1, #1
 800201e:	485e      	ldr	r0, [pc, #376]	@ (8002198 <_ZN14TMC4671_Driver4initEv+0x208>)
 8002020:	f000 ff2a 	bl	8002e78 <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
 8002024:	2100      	movs	r1, #0
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fd2e 	bl	8000a88 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
		return;
 800202c:	e0ad      	b.n	800218a <_ZN14TMC4671_Driver4initEv+0x1fa>
	}

	// Setup main constants
//	setDriverState(DRIVER_ENABLE);
//	setPidPrecision(&pidPrecision);
	tmc4671_writeRegister(TMC4671_PID_TORQUE_FLUX_TARGET, 0);
 800202e:	2100      	movs	r1, #0
 8002030:	2064      	movs	r0, #100	@ 0x64
 8002032:	f7fe fa83 	bl	800053c <_ZL21tmc4671_writeRegisterhm>
	setPWM(PwmMode::off ,pwmCnt, bbmL, bbmH);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	@ 0xee
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 10f0 	ldrb.w	r1, [r3, #240]	@ 0xf0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	460b      	mov	r3, r1
 800204c:	2100      	movs	r1, #0
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7fe fed8 	bl	8000e04 <_ZN14TMC4671_Driver6setPWME7PwmModethh>
	setMotorTypeAndPoles(motorType, encoder.pole_pairs);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 10e8 	ldrb.w	r1, [r3, #232]	@ 0xe8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002060:	461a      	mov	r2, r3
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fdc8 	bl	8000bf8 <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet>
	setPhiEType(phiEType);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7fe fdeb 	bl	8000c4c <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setHallConfig(&hallConfig); //enables hall filter and masking
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4619      	mov	r1, r3
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe fe08 	bl	8000c90 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig>
	initAdc(&adcConfig);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3344      	adds	r3, #68	@ 0x44
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7fe ff5a 	bl	8000f40 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig>
//	setBiquadFlux(TMC4671Biquad(Biquad(BiquadType::lowpass, (float)350.0 / (float)((4.0*25e6)/(pwmCnt+1)), 0.7,0.0), true)); // Create flux filter

	if(!calibrateAdcOffset(300)){
 800208c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff f917 	bl	80012c4 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt>
 8002096:	4603      	mov	r3, r0
 8002098:	f083 0301 	eor.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <_ZN14TMC4671_Driver4initEv+0x126>
		// ADC or shunt amp is broken!
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80020a2:	2201      	movs	r2, #1
 80020a4:	2102      	movs	r1, #2
 80020a6:	483c      	ldr	r0, [pc, #240]	@ (8002198 <_ZN14TMC4671_Driver4initEv+0x208>)
 80020a8:	f000 fee6 	bl	8002e78 <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
 80020ac:	2100      	movs	r1, #0
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fcea 	bl	8000a88 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
		return;
 80020b4:	e069      	b.n	800218a <_ZN14TMC4671_Driver4initEv+0x1fa>
	}

	setAdcBrakeLimits(brakeLimLow, brakeLimHigh);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f8b3 10f2 	ldrh.w	r1, [r3, #242]	@ 0xf2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 80020c2:	461a      	mov	r2, r3
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff f835 	bl	8001134 <_ZN14TMC4671_Driver17setAdcBrakeLimitsEtt>
//	/*
//	 * Enable adc clipping and pll errors
//	 */
	statusMask.asInt = 0;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	statusMask.flags.adc_i_clipped = 1;
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	f892 30ff 	ldrb.w	r3, [r2, #255]	@ 0xff
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	f882 30ff 	strb.w	r3, [r2, #255]	@ 0xff
	statusMask.flags.not_PLL_locked = 1;
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	f892 30fe 	ldrb.w	r3, [r2, #254]	@ 0xfe
 80020e6:	f043 0308 	orr.w	r3, r3, #8
 80020ea:	f882 30fe 	strb.w	r3, [r2, #254]	@ 0xfe
	setStatusMask(statusMask);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 10fc 	ldr.w	r1, [r3, #252]	@ 0xfc
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff f8c3 	bl	8001280 <_ZN14TMC4671_Driver13setStatusMaskE11StatusFlags>

	setPids(&pidConfig);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	331a      	adds	r3, #26
 80020fe:	4619      	mov	r1, r3
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7fe ffad 	bl	8001060 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig>
	uint8_t flags = tmc4671_readRegister(TMC4671_STATUS_FLAGS);
 8002106:	207c      	movs	r0, #124	@ 0x7c
 8002108:	f7fe f9e4 	bl	80004d4 <_ZL20tmc4671_readRegisterh>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]
	this->statusFlags.asInt = flags;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

	// setting SD_STP (DIO6) and SD_DIR (DIO7) to High-Z
//	HAL.IOs->config->reset(&HAL.IOs->pins->DIO6);
//	HAL.IOs->config->reset(&HAL.IOs->pins->DIO7);
//
	setDriverState(DRIVER_ENABLE);
 8002118:	2101      	movs	r1, #1
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fcb4 	bl	8000a88 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
	setPWM(PwmMode::PWM_FOC);
 8002120:	2107      	movs	r1, #7
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fe58 	bl	8000dd8 <_ZN14TMC4671_Driver6setPWME7PwmMode>

	while(!encoder.isAligned){
 8002128:	e005      	b.n	8002136 <_ZN14TMC4671_Driver4initEv+0x1a6>
		setupAbnEncoder(&encoder);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	335c      	adds	r3, #92	@ 0x5c
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fe31 	bl	8001d98 <_ZN14TMC4671_Driver15setupAbnEncoderEP10ABNencoder>
	while(!encoder.isAligned){
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 800213c:	f083 0301 	eor.w	r3, r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f1      	bne.n	800212a <_ZN14TMC4671_Driver4initEv+0x19a>
	}

//	setMotionMode(MotionMode::stopped);
	HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
 8002146:	2201      	movs	r2, #1
 8002148:	2180      	movs	r1, #128	@ 0x80
 800214a:	4812      	ldr	r0, [pc, #72]	@ (8002194 <_ZN14TMC4671_Driver4initEv+0x204>)
 800214c:	f000 fe94 	bl	8002e78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 8002150:	2201      	movs	r2, #1
 8002152:	2101      	movs	r1, #1
 8002154:	4810      	ldr	r0, [pc, #64]	@ (8002198 <_ZN14TMC4671_Driver4initEv+0x208>)
 8002156:	f000 fe8f 	bl	8002e78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 800215a:	2201      	movs	r2, #1
 800215c:	2102      	movs	r1, #2
 800215e:	480e      	ldr	r0, [pc, #56]	@ (8002198 <_ZN14TMC4671_Driver4initEv+0x208>)
 8002160:	f000 fe8a 	bl	8002e78 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8002164:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002168:	f000 fb9c 	bl	80028a4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 800216c:	2200      	movs	r2, #0
 800216e:	2180      	movs	r1, #128	@ 0x80
 8002170:	4808      	ldr	r0, [pc, #32]	@ (8002194 <_ZN14TMC4671_Driver4initEv+0x204>)
 8002172:	f000 fe81 	bl	8002e78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	2101      	movs	r1, #1
 800217a:	4807      	ldr	r0, [pc, #28]	@ (8002198 <_ZN14TMC4671_Driver4initEv+0x208>)
 800217c:	f000 fe7c 	bl	8002e78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8002180:	2200      	movs	r2, #0
 8002182:	2102      	movs	r1, #2
 8002184:	4804      	ldr	r0, [pc, #16]	@ (8002198 <_ZN14TMC4671_Driver4initEv+0x208>)
 8002186:	f000 fe77 	bl	8002e78 <HAL_GPIO_WritePin>
}
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	34363731 	.word	0x34363731
 8002194:	40020c00 	.word	0x40020c00
 8002198:	40021000 	.word	0x40021000

0800219c <_ZN14TMC4671_Driver9setMoveByEbs>:
	setPhiE_ext(0);
	setPhiEType(lastphie);
	setMotionMode(lastmode);
}

void TMC4671_Driver::setMoveBy(bool state, int16_t angle){
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
 80021a8:	4613      	mov	r3, r2
 80021aa:	803b      	strh	r3, [r7, #0]
	this->moveAngle = angle;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	883a      	ldrh	r2, [r7, #0]
 80021b0:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	this->moveFlag = state;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_Z4clipItiET_S0_T0_S1_>:
#define INC_UTIL_FUNCTIONS_H_

#include <stdint.h>

template<class T,class C>
T clip(T v, C l, C h)
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	81fb      	strh	r3, [r7, #14]
{
  return { v > h ? h : v < l ? l : v };
 80021d6:	89fb      	ldrh	r3, [r7, #14]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	429a      	cmp	r2, r3
 80021dc:	db06      	blt.n	80021ec <_Z4clipItiET_S0_T0_S1_+0x24>
 80021de:	89fa      	ldrh	r2, [r7, #14]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4293      	cmp	r3, r2
 80021e4:	bfb8      	it	lt
 80021e6:	4613      	movlt	r3, r2
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	e001      	b.n	80021f0 <_Z4clipItiET_S0_T0_S1_+0x28>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	b29b      	uxth	r3, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_Z41__static_initialization_and_destruction_0ii>:
//	}
}

void TMC4671_Driver::resetAllRegisters()
{
}
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d107      	bne.n	800221c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002212:	4293      	cmp	r3, r2
 8002214:	d102      	bne.n	800221c <_Z41__static_initialization_and_destruction_0ii+0x20>
TMC4671_Driver tmc4671;
 8002216:	4803      	ldr	r0, [pc, #12]	@ (8002224 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002218:	f7fe fbc2 	bl	80009a0 <_ZN14TMC4671_DriverC1Ev>
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000128 	.word	0x20000128

08002228 <_GLOBAL__sub_I_tmc4671>:
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
 800222c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002230:	2001      	movs	r0, #1
 8002232:	f7ff ffe3 	bl	80021fc <_Z41__static_initialization_and_destruction_0ii>
 8002236:	bd80      	pop	{r7, pc}

08002238 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	@ 0x28
 800223c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
 800224c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	4b47      	ldr	r3, [pc, #284]	@ (8002370 <MX_GPIO_Init+0x138>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4a46      	ldr	r2, [pc, #280]	@ (8002370 <MX_GPIO_Init+0x138>)
 8002258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800225c:	6313      	str	r3, [r2, #48]	@ 0x30
 800225e:	4b44      	ldr	r3, [pc, #272]	@ (8002370 <MX_GPIO_Init+0x138>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b40      	ldr	r3, [pc, #256]	@ (8002370 <MX_GPIO_Init+0x138>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a3f      	ldr	r2, [pc, #252]	@ (8002370 <MX_GPIO_Init+0x138>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b3d      	ldr	r3, [pc, #244]	@ (8002370 <MX_GPIO_Init+0x138>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b39      	ldr	r3, [pc, #228]	@ (8002370 <MX_GPIO_Init+0x138>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	4a38      	ldr	r2, [pc, #224]	@ (8002370 <MX_GPIO_Init+0x138>)
 8002290:	f043 0310 	orr.w	r3, r3, #16
 8002294:	6313      	str	r3, [r2, #48]	@ 0x30
 8002296:	4b36      	ldr	r3, [pc, #216]	@ (8002370 <MX_GPIO_Init+0x138>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4b32      	ldr	r3, [pc, #200]	@ (8002370 <MX_GPIO_Init+0x138>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a31      	ldr	r2, [pc, #196]	@ (8002370 <MX_GPIO_Init+0x138>)
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002370 <MX_GPIO_Init+0x138>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002370 <MX_GPIO_Init+0x138>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002370 <MX_GPIO_Init+0x138>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ce:	4b28      	ldr	r3, [pc, #160]	@ (8002370 <MX_GPIO_Init+0x138>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port, SPI1_SS1_Pin, GPIO_PIN_SET);
 80022da:	2201      	movs	r2, #1
 80022dc:	2110      	movs	r1, #16
 80022de:	4825      	ldr	r0, [pc, #148]	@ (8002374 <MX_GPIO_Init+0x13c>)
 80022e0:	f000 fdca 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DRV_ENABLE_Pin|LED_CLIP_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2183      	movs	r1, #131	@ 0x83
 80022e8:	4823      	ldr	r0, [pc, #140]	@ (8002378 <MX_GPIO_Init+0x140>)
 80022ea:	f000 fdc5 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2180      	movs	r1, #128	@ 0x80
 80022f2:	4822      	ldr	r0, [pc, #136]	@ (800237c <MX_GPIO_Init+0x144>)
 80022f4:	f000 fdc0 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_SS1_Pin;
 80022f8:	2310      	movs	r3, #16
 80022fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fc:	2301      	movs	r3, #1
 80022fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_SS1_GPIO_Port, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	4819      	ldr	r0, [pc, #100]	@ (8002374 <MX_GPIO_Init+0x13c>)
 8002310:	f000 fbfe 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_ENABLE_Pin;
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2301      	movs	r3, #1
 800231a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800231c:	2302      	movs	r3, #2
 800231e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	4813      	ldr	r0, [pc, #76]	@ (8002378 <MX_GPIO_Init+0x140>)
 800232c:	f000 fbf0 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SYS_Pin;
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002334:	2301      	movs	r3, #1
 8002336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_SYS_GPIO_Port, &GPIO_InitStruct);
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	4619      	mov	r1, r3
 8002346:	480d      	ldr	r0, [pc, #52]	@ (800237c <MX_GPIO_Init+0x144>)
 8002348:	f000 fbe2 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_CLIP_Pin|LED_ERR_Pin;
 800234c:	2303      	movs	r3, #3
 800234e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002350:	2301      	movs	r3, #1
 8002352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4619      	mov	r1, r3
 8002362:	4805      	ldr	r0, [pc, #20]	@ (8002378 <MX_GPIO_Init+0x140>)
 8002364:	f000 fbd4 	bl	8002b10 <HAL_GPIO_Init>

}
 8002368:	bf00      	nop
 800236a:	3728      	adds	r7, #40	@ 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	40020000 	.word	0x40020000
 8002378:	40021000 	.word	0x40021000
 800237c:	40020c00 	.word	0x40020c00

08002380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002384:	f000 fa1c 	bl	80027c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002388:	f000 f838 	bl	80023fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800238c:	f7ff ff54 	bl	8002238 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8002390:	f006 fb6a 	bl	8008a68 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002394:	f000 f8b2 	bl	80024fc <MX_SPI1_Init>
  MX_TIM10_Init();
 8002398:	f000 f9a2 	bl	80026e0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 800239c:	2201      	movs	r2, #1
 800239e:	2102      	movs	r1, #2
 80023a0:	4813      	ldr	r0, [pc, #76]	@ (80023f0 <main+0x70>)
 80023a2:	f000 fd69 	bl	8002e78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	2101      	movs	r1, #1
 80023aa:	4811      	ldr	r0, [pc, #68]	@ (80023f0 <main+0x70>)
 80023ac:	f000 fd64 	bl	8002e78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
 80023b0:	2201      	movs	r2, #1
 80023b2:	2180      	movs	r1, #128	@ 0x80
 80023b4:	480f      	ldr	r0, [pc, #60]	@ (80023f4 <main+0x74>)
 80023b6:	f000 fd5f 	bl	8002e78 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80023ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023be:	f000 fa71 	bl	80028a4 <HAL_Delay>
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2102      	movs	r1, #2
 80023c6:	480a      	ldr	r0, [pc, #40]	@ (80023f0 <main+0x70>)
 80023c8:	f000 fd56 	bl	8002e78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2101      	movs	r1, #1
 80023d0:	4807      	ldr	r0, [pc, #28]	@ (80023f0 <main+0x70>)
 80023d2:	f000 fd51 	bl	8002e78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2180      	movs	r1, #128	@ 0x80
 80023da:	4806      	ldr	r0, [pc, #24]	@ (80023f4 <main+0x74>)
 80023dc:	f000 fd4c 	bl	8002e78 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80023e0:	2064      	movs	r0, #100	@ 0x64
 80023e2:	f000 fa5f 	bl	80028a4 <HAL_Delay>
  /* USER CODE END 2 */
  tmc4671.init();
 80023e6:	4804      	ldr	r0, [pc, #16]	@ (80023f8 <main+0x78>)
 80023e8:	f7ff fdd2 	bl	8001f90 <_ZN14TMC4671_Driver4initEv>
//  HAL_TIM_Base_Start_IT(&htim10);

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <main+0x6c>
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	20000128 	.word	0x20000128

080023fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b094      	sub	sp, #80	@ 0x50
 8002400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002402:	f107 0320 	add.w	r3, r7, #32
 8002406:	2230      	movs	r2, #48	@ 0x30
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f006 ffec 	bl	80093e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	4b2d      	ldr	r3, [pc, #180]	@ (80024dc <_Z18SystemClock_Configv+0xe0>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	4a2c      	ldr	r2, [pc, #176]	@ (80024dc <_Z18SystemClock_Configv+0xe0>)
 800242a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002430:	4b2a      	ldr	r3, [pc, #168]	@ (80024dc <_Z18SystemClock_Configv+0xe0>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800243c:	2300      	movs	r3, #0
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <_Z18SystemClock_Configv+0xe4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a26      	ldr	r2, [pc, #152]	@ (80024e0 <_Z18SystemClock_Configv+0xe4>)
 8002446:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b24      	ldr	r3, [pc, #144]	@ (80024e0 <_Z18SystemClock_Configv+0xe4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002458:	2301      	movs	r3, #1
 800245a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800245c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002462:	2302      	movs	r3, #2
 8002464:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002466:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800246a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800246c:	2304      	movs	r3, #4
 800246e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002470:	23a8      	movs	r3, #168	@ 0xa8
 8002472:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002474:	2302      	movs	r3, #2
 8002476:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002478:	2307      	movs	r3, #7
 800247a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800247c:	f107 0320 	add.w	r3, r7, #32
 8002480:	4618      	mov	r0, r3
 8002482:	f001 ff4d 	bl	8004320 <HAL_RCC_OscConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002496:	f000 f825 	bl	80024e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800249a:	230f      	movs	r3, #15
 800249c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800249e:	2302      	movs	r3, #2
 80024a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024b2:	f107 030c 	add.w	r3, r7, #12
 80024b6:	2105      	movs	r1, #5
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 f9a9 	bl	8004810 <HAL_RCC_ClockConfig>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80024ce:	f000 f809 	bl	80024e4 <Error_Handler>
  }
}
 80024d2:	bf00      	nop
 80024d4:	3750      	adds	r7, #80	@ 0x50
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40007000 	.word	0x40007000

080024e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e8:	b672      	cpsid	i
}
 80024ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80024ec:	2201      	movs	r2, #1
 80024ee:	2102      	movs	r1, #2
 80024f0:	4801      	ldr	r0, [pc, #4]	@ (80024f8 <Error_Handler+0x14>)
 80024f2:	f000 fcc1 	bl	8002e78 <HAL_GPIO_WritePin>
 80024f6:	e7f9      	b.n	80024ec <Error_Handler+0x8>
 80024f8:	40021000 	.word	0x40021000

080024fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002500:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <MX_SPI1_Init+0x64>)
 8002502:	4a18      	ldr	r2, [pc, #96]	@ (8002564 <MX_SPI1_Init+0x68>)
 8002504:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002506:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <MX_SPI1_Init+0x64>)
 8002508:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800250c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800250e:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <MX_SPI1_Init+0x64>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002514:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <MX_SPI1_Init+0x64>)
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800251a:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <MX_SPI1_Init+0x64>)
 800251c:	2202      	movs	r2, #2
 800251e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002520:	4b0f      	ldr	r3, [pc, #60]	@ (8002560 <MX_SPI1_Init+0x64>)
 8002522:	2201      	movs	r2, #1
 8002524:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002526:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <MX_SPI1_Init+0x64>)
 8002528:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800252c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800252e:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <MX_SPI1_Init+0x64>)
 8002530:	2210      	movs	r2, #16
 8002532:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002534:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <MX_SPI1_Init+0x64>)
 8002536:	2200      	movs	r2, #0
 8002538:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800253a:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <MX_SPI1_Init+0x64>)
 800253c:	2200      	movs	r2, #0
 800253e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002540:	4b07      	ldr	r3, [pc, #28]	@ (8002560 <MX_SPI1_Init+0x64>)
 8002542:	2200      	movs	r2, #0
 8002544:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <MX_SPI1_Init+0x64>)
 8002548:	220a      	movs	r2, #10
 800254a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800254c:	4804      	ldr	r0, [pc, #16]	@ (8002560 <MX_SPI1_Init+0x64>)
 800254e:	f002 fb57 	bl	8004c00 <HAL_SPI_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002558:	f7ff ffc4 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2000022c 	.word	0x2000022c
 8002564:	40013000 	.word	0x40013000

08002568 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a19      	ldr	r2, [pc, #100]	@ (80025ec <HAL_SPI_MspInit+0x84>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d12b      	bne.n	80025e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	4b18      	ldr	r3, [pc, #96]	@ (80025f0 <HAL_SPI_MspInit+0x88>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	4a17      	ldr	r2, [pc, #92]	@ (80025f0 <HAL_SPI_MspInit+0x88>)
 8002594:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002598:	6453      	str	r3, [r2, #68]	@ 0x44
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <HAL_SPI_MspInit+0x88>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_SPI_MspInit+0x88>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a10      	ldr	r2, [pc, #64]	@ (80025f0 <HAL_SPI_MspInit+0x88>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <HAL_SPI_MspInit+0x88>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025c2:	23e0      	movs	r3, #224	@ 0xe0
 80025c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025d2:	2305      	movs	r3, #5
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4619      	mov	r1, r3
 80025dc:	4805      	ldr	r0, [pc, #20]	@ (80025f4 <HAL_SPI_MspInit+0x8c>)
 80025de:	f000 fa97 	bl	8002b10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025e2:	bf00      	nop
 80025e4:	3728      	adds	r7, #40	@ 0x28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40013000 	.word	0x40013000
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020000 	.word	0x40020000

080025f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <HAL_MspInit+0x4c>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	4a0f      	ldr	r2, [pc, #60]	@ (8002644 <HAL_MspInit+0x4c>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800260c:	6453      	str	r3, [r2, #68]	@ 0x44
 800260e:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <HAL_MspInit+0x4c>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_MspInit+0x4c>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	4a08      	ldr	r2, [pc, #32]	@ (8002644 <HAL_MspInit+0x4c>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	@ 0x40
 800262a:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <HAL_MspInit+0x4c>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800

08002648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <NMI_Handler+0x4>

08002650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <HardFault_Handler+0x4>

08002658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <MemManage_Handler+0x4>

08002660 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <BusFault_Handler+0x4>

08002668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <UsageFault_Handler+0x4>

08002670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269e:	f000 f8e1 	bl	8002864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80026ac:	4802      	ldr	r0, [pc, #8]	@ (80026b8 <OTG_FS_IRQHandler+0x10>)
 80026ae:	f000 fd40 	bl	8003132 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200007b0 	.word	0x200007b0

080026bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c0:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <SystemInit+0x20>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c6:	4a05      	ldr	r2, [pc, #20]	@ (80026dc <SystemInit+0x20>)
 80026c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80026e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <MX_TIM10_Init+0x40>)
 80026e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002724 <MX_TIM10_Init+0x44>)
 80026e8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80026ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <MX_TIM10_Init+0x40>)
 80026ec:	f242 720f 	movw	r2, #9999	@ 0x270f
 80026f0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <MX_TIM10_Init+0x40>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 41;
 80026f8:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <MX_TIM10_Init+0x40>)
 80026fa:	2229      	movs	r2, #41	@ 0x29
 80026fc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fe:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <MX_TIM10_Init+0x40>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002704:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <MX_TIM10_Init+0x40>)
 8002706:	2200      	movs	r2, #0
 8002708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800270a:	4805      	ldr	r0, [pc, #20]	@ (8002720 <MX_TIM10_Init+0x40>)
 800270c:	f002 feca 	bl	80054a4 <HAL_TIM_Base_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002716:	f7ff fee5 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000284 	.word	0x20000284
 8002724:	40014400 	.word	0x40014400

08002728 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0b      	ldr	r2, [pc, #44]	@ (8002764 <HAL_TIM_Base_MspInit+0x3c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10d      	bne.n	8002756 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <HAL_TIM_Base_MspInit+0x40>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	4a09      	ldr	r2, [pc, #36]	@ (8002768 <HAL_TIM_Base_MspInit+0x40>)
 8002744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002748:	6453      	str	r3, [r2, #68]	@ 0x44
 800274a:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <HAL_TIM_Base_MspInit+0x40>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40014400 	.word	0x40014400
 8002768:	40023800 	.word	0x40023800

0800276c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800276c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002770:	f7ff ffa4 	bl	80026bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002774:	480c      	ldr	r0, [pc, #48]	@ (80027a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002776:	490d      	ldr	r1, [pc, #52]	@ (80027ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002778:	4a0d      	ldr	r2, [pc, #52]	@ (80027b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800277c:	e002      	b.n	8002784 <LoopCopyDataInit>

0800277e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002782:	3304      	adds	r3, #4

08002784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002788:	d3f9      	bcc.n	800277e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278a:	4a0a      	ldr	r2, [pc, #40]	@ (80027b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800278c:	4c0a      	ldr	r4, [pc, #40]	@ (80027b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002790:	e001      	b.n	8002796 <LoopFillZerobss>

08002792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002794:	3204      	adds	r2, #4

08002796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002798:	d3fb      	bcc.n	8002792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800279a:	f006 fe2d 	bl	80093f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800279e:	f7ff fdef 	bl	8002380 <main>
  bx  lr    
 80027a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ac:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80027b0:	0800972c 	.word	0x0800972c
  ldr r2, =_sbss
 80027b4:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80027b8:	20000cec 	.word	0x20000cec

080027bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027bc:	e7fe      	b.n	80027bc <ADC_IRQHandler>
	...

080027c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002800 <HAL_Init+0x40>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002800 <HAL_Init+0x40>)
 80027ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <HAL_Init+0x40>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <HAL_Init+0x40>)
 80027d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027dc:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <HAL_Init+0x40>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a07      	ldr	r2, [pc, #28]	@ (8002800 <HAL_Init+0x40>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e8:	2003      	movs	r0, #3
 80027ea:	f000 f94f 	bl	8002a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ee:	200f      	movs	r0, #15
 80027f0:	f000 f808 	bl	8002804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027f4:	f7ff ff00 	bl	80025f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40023c00 	.word	0x40023c00

08002804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800280c:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <HAL_InitTick+0x54>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b12      	ldr	r3, [pc, #72]	@ (800285c <HAL_InitTick+0x58>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4619      	mov	r1, r3
 8002816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800281a:	fbb3 f3f1 	udiv	r3, r3, r1
 800281e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f967 	bl	8002af6 <HAL_SYSTICK_Config>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e00e      	b.n	8002850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b0f      	cmp	r3, #15
 8002836:	d80a      	bhi.n	800284e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002838:	2200      	movs	r2, #0
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
 8002840:	f000 f92f 	bl	8002aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002844:	4a06      	ldr	r2, [pc, #24]	@ (8002860 <HAL_InitTick+0x5c>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
}
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000000 	.word	0x20000000
 800285c:	20000008 	.word	0x20000008
 8002860:	20000004 	.word	0x20000004

08002864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002868:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_IncTick+0x20>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_IncTick+0x24>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4413      	add	r3, r2
 8002874:	4a04      	ldr	r2, [pc, #16]	@ (8002888 <HAL_IncTick+0x24>)
 8002876:	6013      	str	r3, [r2, #0]
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000008 	.word	0x20000008
 8002888:	200002cc 	.word	0x200002cc

0800288c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return uwTick;
 8002890:	4b03      	ldr	r3, [pc, #12]	@ (80028a0 <HAL_GetTick+0x14>)
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	200002cc 	.word	0x200002cc

080028a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028ac:	f7ff ffee 	bl	800288c <HAL_GetTick>
 80028b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d005      	beq.n	80028ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028be:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <HAL_Delay+0x44>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4413      	add	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ca:	bf00      	nop
 80028cc:	f7ff ffde 	bl	800288c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d8f7      	bhi.n	80028cc <HAL_Delay+0x28>
  {
  }
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000008 	.word	0x20000008

080028ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002908:	4013      	ands	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002914:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800291c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291e:	4a04      	ldr	r2, [pc, #16]	@ (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	60d3      	str	r3, [r2, #12]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002938:	4b04      	ldr	r3, [pc, #16]	@ (800294c <__NVIC_GetPriorityGrouping+0x18>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	f003 0307 	and.w	r3, r3, #7
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	2b00      	cmp	r3, #0
 8002960:	db0b      	blt.n	800297a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	f003 021f 	and.w	r2, r3, #31
 8002968:	4907      	ldr	r1, [pc, #28]	@ (8002988 <__NVIC_EnableIRQ+0x38>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2001      	movs	r0, #1
 8002972:	fa00 f202 	lsl.w	r2, r0, r2
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000e100 	.word	0xe000e100

0800298c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	2b00      	cmp	r3, #0
 800299e:	db0a      	blt.n	80029b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	490c      	ldr	r1, [pc, #48]	@ (80029d8 <__NVIC_SetPriority+0x4c>)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	0112      	lsls	r2, r2, #4
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	440b      	add	r3, r1
 80029b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b4:	e00a      	b.n	80029cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4908      	ldr	r1, [pc, #32]	@ (80029dc <__NVIC_SetPriority+0x50>)
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	3b04      	subs	r3, #4
 80029c4:	0112      	lsls	r2, r2, #4
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	440b      	add	r3, r1
 80029ca:	761a      	strb	r2, [r3, #24]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000e100 	.word	0xe000e100
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b089      	sub	sp, #36	@ 0x24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f1c3 0307 	rsb	r3, r3, #7
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	bf28      	it	cs
 80029fe:	2304      	movcs	r3, #4
 8002a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2b06      	cmp	r3, #6
 8002a08:	d902      	bls.n	8002a10 <NVIC_EncodePriority+0x30>
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3b03      	subs	r3, #3
 8002a0e:	e000      	b.n	8002a12 <NVIC_EncodePriority+0x32>
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	f04f 32ff 	mov.w	r2, #4294967295
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	401a      	ands	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a28:	f04f 31ff 	mov.w	r1, #4294967295
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	43d9      	mvns	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a38:	4313      	orrs	r3, r2
         );
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3724      	adds	r7, #36	@ 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
	...

08002a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a58:	d301      	bcc.n	8002a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e00f      	b.n	8002a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a88 <SysTick_Config+0x40>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a66:	210f      	movs	r1, #15
 8002a68:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6c:	f7ff ff8e 	bl	800298c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a70:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <SysTick_Config+0x40>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a76:	4b04      	ldr	r3, [pc, #16]	@ (8002a88 <SysTick_Config+0x40>)
 8002a78:	2207      	movs	r2, #7
 8002a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	e000e010 	.word	0xe000e010

08002a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ff29 	bl	80028ec <__NVIC_SetPriorityGrouping>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b086      	sub	sp, #24
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ab4:	f7ff ff3e 	bl	8002934 <__NVIC_GetPriorityGrouping>
 8002ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	6978      	ldr	r0, [r7, #20]
 8002ac0:	f7ff ff8e 	bl	80029e0 <NVIC_EncodePriority>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff5d 	bl	800298c <__NVIC_SetPriority>
}
 8002ad2:	bf00      	nop
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff31 	bl	8002950 <__NVIC_EnableIRQ>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ffa2 	bl	8002a48 <SysTick_Config>
 8002b04:	4603      	mov	r3, r0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b089      	sub	sp, #36	@ 0x24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
 8002b2a:	e16b      	b.n	8002e04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	f040 815a 	bne.w	8002dfe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d005      	beq.n	8002b62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d130      	bne.n	8002bc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b98:	2201      	movs	r2, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 0201 	and.w	r2, r3, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d017      	beq.n	8002c00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	2203      	movs	r2, #3
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d123      	bne.n	8002c54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	08da      	lsrs	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3208      	adds	r2, #8
 8002c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	220f      	movs	r2, #15
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	08da      	lsrs	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3208      	adds	r2, #8
 8002c4e:	69b9      	ldr	r1, [r7, #24]
 8002c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	2203      	movs	r2, #3
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0203 	and.w	r2, r3, #3
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80b4 	beq.w	8002dfe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	4b60      	ldr	r3, [pc, #384]	@ (8002e1c <HAL_GPIO_Init+0x30c>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	4a5f      	ldr	r2, [pc, #380]	@ (8002e1c <HAL_GPIO_Init+0x30c>)
 8002ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e1c <HAL_GPIO_Init+0x30c>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb2:	4a5b      	ldr	r2, [pc, #364]	@ (8002e20 <HAL_GPIO_Init+0x310>)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	089b      	lsrs	r3, r3, #2
 8002cb8:	3302      	adds	r3, #2
 8002cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	220f      	movs	r2, #15
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a52      	ldr	r2, [pc, #328]	@ (8002e24 <HAL_GPIO_Init+0x314>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d02b      	beq.n	8002d36 <HAL_GPIO_Init+0x226>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a51      	ldr	r2, [pc, #324]	@ (8002e28 <HAL_GPIO_Init+0x318>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d025      	beq.n	8002d32 <HAL_GPIO_Init+0x222>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a50      	ldr	r2, [pc, #320]	@ (8002e2c <HAL_GPIO_Init+0x31c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d01f      	beq.n	8002d2e <HAL_GPIO_Init+0x21e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a4f      	ldr	r2, [pc, #316]	@ (8002e30 <HAL_GPIO_Init+0x320>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d019      	beq.n	8002d2a <HAL_GPIO_Init+0x21a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a4e      	ldr	r2, [pc, #312]	@ (8002e34 <HAL_GPIO_Init+0x324>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_GPIO_Init+0x216>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a4d      	ldr	r2, [pc, #308]	@ (8002e38 <HAL_GPIO_Init+0x328>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00d      	beq.n	8002d22 <HAL_GPIO_Init+0x212>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a4c      	ldr	r2, [pc, #304]	@ (8002e3c <HAL_GPIO_Init+0x32c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <HAL_GPIO_Init+0x20e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a4b      	ldr	r2, [pc, #300]	@ (8002e40 <HAL_GPIO_Init+0x330>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <HAL_GPIO_Init+0x20a>
 8002d16:	2307      	movs	r3, #7
 8002d18:	e00e      	b.n	8002d38 <HAL_GPIO_Init+0x228>
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	e00c      	b.n	8002d38 <HAL_GPIO_Init+0x228>
 8002d1e:	2306      	movs	r3, #6
 8002d20:	e00a      	b.n	8002d38 <HAL_GPIO_Init+0x228>
 8002d22:	2305      	movs	r3, #5
 8002d24:	e008      	b.n	8002d38 <HAL_GPIO_Init+0x228>
 8002d26:	2304      	movs	r3, #4
 8002d28:	e006      	b.n	8002d38 <HAL_GPIO_Init+0x228>
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e004      	b.n	8002d38 <HAL_GPIO_Init+0x228>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e002      	b.n	8002d38 <HAL_GPIO_Init+0x228>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <HAL_GPIO_Init+0x228>
 8002d36:	2300      	movs	r3, #0
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	f002 0203 	and.w	r2, r2, #3
 8002d3e:	0092      	lsls	r2, r2, #2
 8002d40:	4093      	lsls	r3, r2
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d48:	4935      	ldr	r1, [pc, #212]	@ (8002e20 <HAL_GPIO_Init+0x310>)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	3302      	adds	r3, #2
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d56:	4b3b      	ldr	r3, [pc, #236]	@ (8002e44 <HAL_GPIO_Init+0x334>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d7a:	4a32      	ldr	r2, [pc, #200]	@ (8002e44 <HAL_GPIO_Init+0x334>)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d80:	4b30      	ldr	r3, [pc, #192]	@ (8002e44 <HAL_GPIO_Init+0x334>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da4:	4a27      	ldr	r2, [pc, #156]	@ (8002e44 <HAL_GPIO_Init+0x334>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002daa:	4b26      	ldr	r3, [pc, #152]	@ (8002e44 <HAL_GPIO_Init+0x334>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dce:	4a1d      	ldr	r2, [pc, #116]	@ (8002e44 <HAL_GPIO_Init+0x334>)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e44 <HAL_GPIO_Init+0x334>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002df8:	4a12      	ldr	r2, [pc, #72]	@ (8002e44 <HAL_GPIO_Init+0x334>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3301      	adds	r3, #1
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	f67f ae90 	bls.w	8002b2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3724      	adds	r7, #36	@ 0x24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40013800 	.word	0x40013800
 8002e24:	40020000 	.word	0x40020000
 8002e28:	40020400 	.word	0x40020400
 8002e2c:	40020800 	.word	0x40020800
 8002e30:	40020c00 	.word	0x40020c00
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40021400 	.word	0x40021400
 8002e3c:	40021800 	.word	0x40021800
 8002e40:	40021c00 	.word	0x40021c00
 8002e44:	40013c00 	.word	0x40013c00

08002e48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	e001      	b.n	8002e6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e94:	e003      	b.n	8002e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af02      	add	r7, sp, #8
 8002eb0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e101      	b.n	80030c0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f005 ff76 	bl	8008dc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2203      	movs	r2, #3
 8002ee0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eea:	d102      	bne.n	8002ef2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 fce7 	bl	80058ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	7c1a      	ldrb	r2, [r3, #16]
 8002f04:	f88d 2000 	strb.w	r2, [sp]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f0c:	f002 fbc6 	bl	800569c <USB_CoreInit>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0ce      	b.n	80030c0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 fcdf 	bl	80058ec <USB_SetCurrentMode>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0bf      	b.n	80030c0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	e04a      	b.n	8002fdc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	3315      	adds	r3, #21
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3314      	adds	r3, #20
 8002f6a:	7bfa      	ldrb	r2, [r7, #15]
 8002f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	b298      	uxth	r0, r3
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	332e      	adds	r3, #46	@ 0x2e
 8002f82:	4602      	mov	r2, r0
 8002f84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	3318      	adds	r3, #24
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	331c      	adds	r3, #28
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3320      	adds	r3, #32
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	3324      	adds	r3, #36	@ 0x24
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	791b      	ldrb	r3, [r3, #4]
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d3af      	bcc.n	8002f46 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	e044      	b.n	8003076 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	3301      	adds	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	791b      	ldrb	r3, [r3, #4]
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	429a      	cmp	r2, r3
 800307e:	d3b5      	bcc.n	8002fec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	7c1a      	ldrb	r2, [r3, #16]
 8003088:	f88d 2000 	strb.w	r2, [sp]
 800308c:	3304      	adds	r3, #4
 800308e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003090:	f002 fc78 	bl	8005984 <USB_DevInit>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e00c      	b.n	80030c0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f003 fcc2 	bl	8006a42 <USB_DevDisconnect>

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_PCD_Start+0x1c>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e022      	b.n	800312a <HAL_PCD_Start+0x62>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d009      	beq.n	800310c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f002 fbc9 	bl	80058a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f003 fc70 	bl	8006a00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003132:	b590      	push	{r4, r7, lr}
 8003134:	b08d      	sub	sp, #52	@ 0x34
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fd2e 	bl	8006baa <USB_GetMode>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 848c 	bne.w	8003a6e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f003 fc92 	bl	8006a84 <USB_ReadInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 8482 	beq.w	8003a6c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	0a1b      	lsrs	r3, r3, #8
 8003172:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f003 fc7f 	bl	8006a84 <USB_ReadInterrupts>
 8003186:	4603      	mov	r3, r0
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d107      	bne.n	80031a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f002 0202 	and.w	r2, r2, #2
 800319e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f003 fc6d 	bl	8006a84 <USB_ReadInterrupts>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d161      	bne.n	8003278 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0210 	bic.w	r2, r2, #16
 80031c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f003 020f 	and.w	r2, r3, #15
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	3304      	adds	r3, #4
 80031e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	0c5b      	lsrs	r3, r3, #17
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d124      	bne.n	800323a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d035      	beq.n	8003268 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800320a:	b29b      	uxth	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	6a38      	ldr	r0, [r7, #32]
 8003210:	f003 faa4 	bl	800675c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003220:	441a      	add	r2, r3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003232:	441a      	add	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	615a      	str	r2, [r3, #20]
 8003238:	e016      	b.n	8003268 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	0c5b      	lsrs	r3, r3, #17
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	2b06      	cmp	r3, #6
 8003244:	d110      	bne.n	8003268 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800324c:	2208      	movs	r2, #8
 800324e:	4619      	mov	r1, r3
 8003250:	6a38      	ldr	r0, [r7, #32]
 8003252:	f003 fa83 	bl	800675c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003262:	441a      	add	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0210 	orr.w	r2, r2, #16
 8003276:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f003 fc01 	bl	8006a84 <USB_ReadInterrupts>
 8003282:	4603      	mov	r3, r0
 8003284:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003288:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800328c:	f040 80a7 	bne.w	80033de <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f003 fc06 	bl	8006aaa <USB_ReadDevAllOutEpInterrupt>
 800329e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80032a0:	e099      	b.n	80033d6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 808e 	beq.w	80033ca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 fc2a 	bl	8006b12 <USB_ReadDevOutEPInterrupt>
 80032be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032d6:	461a      	mov	r2, r3
 80032d8:	2301      	movs	r3, #1
 80032da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fe8c 	bl	8003ffc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00c      	beq.n	8003308 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032fa:	461a      	mov	r2, r3
 80032fc:	2308      	movs	r3, #8
 80032fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003300:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 ff62 	bl	80041cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	4413      	add	r3, r2
 800331a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800331e:	461a      	mov	r2, r3
 8003320:	2310      	movs	r3, #16
 8003322:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d030      	beq.n	8003390 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003336:	2b80      	cmp	r3, #128	@ 0x80
 8003338:	d109      	bne.n	800334e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003348:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800334c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800334e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	3304      	adds	r3, #4
 8003362:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	78db      	ldrb	r3, [r3, #3]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d108      	bne.n	800337e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2200      	movs	r2, #0
 8003370:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003374:	b2db      	uxtb	r3, r3
 8003376:	4619      	mov	r1, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f005 fe39 	bl	8008ff0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800338a:	461a      	mov	r2, r3
 800338c:	2302      	movs	r3, #2
 800338e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033a6:	461a      	mov	r2, r3
 80033a8:	2320      	movs	r3, #32
 80033aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033c2:	461a      	mov	r2, r3
 80033c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	3301      	adds	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80033d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80033d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f47f af62 	bne.w	80032a2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 fb4e 	bl	8006a84 <USB_ReadInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033f2:	f040 80db 	bne.w	80035ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 fb6f 	bl	8006ade <USB_ReadDevAllInEpInterrupt>
 8003400:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003406:	e0cd      	b.n	80035a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80c2 	beq.w	8003598 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f003 fb95 	bl	8006b4e <USB_ReadDevInEPInterrupt>
 8003424:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d057      	beq.n	80034e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	2201      	movs	r2, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	43db      	mvns	r3, r3
 800344a:	69f9      	ldr	r1, [r7, #28]
 800344c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003450:	4013      	ands	r3, r2
 8003452:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003460:	461a      	mov	r2, r3
 8003462:	2301      	movs	r3, #1
 8003464:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	799b      	ldrb	r3, [r3, #6]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d132      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	3320      	adds	r3, #32
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4403      	add	r3, r0
 800348e:	331c      	adds	r3, #28
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4419      	add	r1, r3
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4403      	add	r3, r0
 80034a2:	3320      	adds	r3, #32
 80034a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d113      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x3a2>
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3324      	adds	r3, #36	@ 0x24
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d108      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034cc:	461a      	mov	r2, r3
 80034ce:	2101      	movs	r1, #1
 80034d0:	f003 fb9c 	bl	8006c0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	4619      	mov	r1, r3
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f005 fd03 	bl	8008ee6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034f6:	461a      	mov	r2, r3
 80034f8:	2308      	movs	r3, #8
 80034fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003512:	461a      	mov	r2, r3
 8003514:	2310      	movs	r3, #16
 8003516:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800352e:	461a      	mov	r2, r3
 8003530:	2340      	movs	r3, #64	@ 0x40
 8003532:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d023      	beq.n	8003586 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800353e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003540:	6a38      	ldr	r0, [r7, #32]
 8003542:	f002 fb83 	bl	8005c4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	3310      	adds	r3, #16
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	3304      	adds	r3, #4
 8003558:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	78db      	ldrb	r3, [r3, #3]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d108      	bne.n	8003574 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	b2db      	uxtb	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f005 fd50 	bl	8009014 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003580:	461a      	mov	r2, r3
 8003582:	2302      	movs	r3, #2
 8003584:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003590:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fca5 	bl	8003ee2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	3301      	adds	r3, #1
 800359c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800359e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80035a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f47f af2e 	bne.w	8003408 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 fa67 	bl	8006a84 <USB_ReadInterrupts>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035c0:	d122      	bne.n	8003608 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d108      	bne.n	80035f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035e8:	2100      	movs	r1, #0
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fe8c 	bl	8004308 <HAL_PCDEx_LPM_Callback>
 80035f0:	e002      	b.n	80035f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f005 fcee 	bl	8008fd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f003 fa39 	bl	8006a84 <USB_ReadInterrupts>
 8003612:	4603      	mov	r3, r0
 8003614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800361c:	d112      	bne.n	8003644 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b01      	cmp	r3, #1
 800362c:	d102      	bne.n	8003634 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f005 fcaa 	bl	8008f88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003642:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f003 fa1b 	bl	8006a84 <USB_ReadInterrupts>
 800364e:	4603      	mov	r3, r0
 8003650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003658:	f040 80b7 	bne.w	80037ca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2110      	movs	r1, #16
 8003676:	4618      	mov	r0, r3
 8003678:	f002 fae8 	bl	8005c4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367c:	2300      	movs	r3, #0
 800367e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003680:	e046      	b.n	8003710 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800368e:	461a      	mov	r2, r3
 8003690:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003694:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036a6:	0151      	lsls	r1, r2, #5
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	440a      	add	r2, r1
 80036ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80036b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c2:	461a      	mov	r2, r3
 80036c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80036c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036da:	0151      	lsls	r1, r2, #5
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	440a      	add	r2, r1
 80036e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80036e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036fa:	0151      	lsls	r1, r2, #5
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	440a      	add	r2, r1
 8003700:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003704:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003708:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800370c:	3301      	adds	r3, #1
 800370e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	791b      	ldrb	r3, [r3, #4]
 8003714:	461a      	mov	r2, r3
 8003716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003718:	4293      	cmp	r3, r2
 800371a:	d3b2      	bcc.n	8003682 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800372a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800372e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7bdb      	ldrb	r3, [r3, #15]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d016      	beq.n	8003766 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800373e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003748:	f043 030b 	orr.w	r3, r3, #11
 800374c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800375e:	f043 030b 	orr.w	r3, r3, #11
 8003762:	6453      	str	r3, [r2, #68]	@ 0x44
 8003764:	e015      	b.n	8003792 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003774:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003778:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800377c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800378c:	f043 030b 	orr.w	r3, r3, #11
 8003790:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037a0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80037a4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037b4:	461a      	mov	r2, r3
 80037b6:	f003 fa29 	bl	8006c0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80037c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f003 f958 	bl	8006a84 <USB_ReadInterrupts>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037de:	d123      	bne.n	8003828 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f003 f9ee 	bl	8006bc6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f002 faa5 	bl	8005d3e <USB_GetDevSpeed>
 80037f4:	4603      	mov	r3, r0
 80037f6:	461a      	mov	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681c      	ldr	r4, [r3, #0]
 8003800:	f001 f9f2 	bl	8004be8 <HAL_RCC_GetHCLKFreq>
 8003804:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800380a:	461a      	mov	r2, r3
 800380c:	4620      	mov	r0, r4
 800380e:	f001 ffa9 	bl	8005764 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f005 fb8f 	bl	8008f36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003826:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f003 f929 	bl	8006a84 <USB_ReadInterrupts>
 8003832:	4603      	mov	r3, r0
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b08      	cmp	r3, #8
 800383a:	d10a      	bne.n	8003852 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f005 fb6c 	bl	8008f1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f002 0208 	and.w	r2, r2, #8
 8003850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f003 f914 	bl	8006a84 <USB_ReadInterrupts>
 800385c:	4603      	mov	r3, r0
 800385e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003862:	2b80      	cmp	r3, #128	@ 0x80
 8003864:	d123      	bne.n	80038ae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003872:	2301      	movs	r3, #1
 8003874:	627b      	str	r3, [r7, #36]	@ 0x24
 8003876:	e014      	b.n	80038a2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003892:	b2db      	uxtb	r3, r3
 8003894:	4619      	mov	r1, r3
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 faf2 	bl	8003e80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	3301      	adds	r3, #1
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	791b      	ldrb	r3, [r3, #4]
 80038a6:	461a      	mov	r2, r3
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d3e4      	bcc.n	8003878 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f003 f8e6 	bl	8006a84 <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038c2:	d13c      	bne.n	800393e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c4:	2301      	movs	r3, #1
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c8:	e02b      	b.n	8003922 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	3318      	adds	r3, #24
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d115      	bne.n	800391c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80038f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	da12      	bge.n	800391c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	3317      	adds	r3, #23
 8003906:	2201      	movs	r2, #1
 8003908:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003912:	b2db      	uxtb	r3, r3
 8003914:	4619      	mov	r1, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fab2 	bl	8003e80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	3301      	adds	r3, #1
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	791b      	ldrb	r3, [r3, #4]
 8003926:	461a      	mov	r2, r3
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	4293      	cmp	r3, r2
 800392c:	d3cd      	bcc.n	80038ca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800393c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f003 f89e 	bl	8006a84 <USB_ReadInterrupts>
 8003948:	4603      	mov	r3, r0
 800394a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800394e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003952:	d156      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003954:	2301      	movs	r3, #1
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
 8003958:	e045      	b.n	80039e6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d12e      	bne.n	80039e0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003982:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003984:	2b00      	cmp	r3, #0
 8003986:	da2b      	bge.n	80039e0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003994:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003998:	429a      	cmp	r2, r3
 800399a:	d121      	bne.n	80039e0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80039ae:	2201      	movs	r2, #1
 80039b0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039dc:	6053      	str	r3, [r2, #4]
            break;
 80039de:	e008      	b.n	80039f2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	3301      	adds	r3, #1
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	791b      	ldrb	r3, [r3, #4]
 80039ea:	461a      	mov	r2, r3
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d3b3      	bcc.n	800395a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f003 f83c 	bl	8006a84 <USB_ReadInterrupts>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a16:	d10a      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f005 fb0d 	bl	8009038 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f003 f826 	bl	8006a84 <USB_ReadInterrupts>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d115      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f005 fafd 	bl	8009054 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6859      	ldr	r1, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	e000      	b.n	8003a6e <HAL_PCD_IRQHandler+0x93c>
      return;
 8003a6c:	bf00      	nop
    }
  }
}
 8003a6e:	3734      	adds	r7, #52	@ 0x34
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd90      	pop	{r4, r7, pc}

08003a74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_PCD_SetAddress+0x1a>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e012      	b.n	8003ab4 <HAL_PCD_SetAddress+0x40>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f002 ff85 	bl	80069b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	70fb      	strb	r3, [r7, #3]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	803b      	strh	r3, [r7, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ada:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da0f      	bge.n	8003b02 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	f003 020f 	and.w	r2, r3, #15
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	3310      	adds	r3, #16
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	3304      	adds	r3, #4
 8003af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	705a      	strb	r2, [r3, #1]
 8003b00:	e00f      	b.n	8003b22 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	f003 020f 	and.w	r2, r3, #15
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4413      	add	r3, r2
 8003b18:	3304      	adds	r3, #4
 8003b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003b2e:	883b      	ldrh	r3, [r7, #0]
 8003b30:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	78ba      	ldrb	r2, [r7, #2]
 8003b3c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	785b      	ldrb	r3, [r3, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b50:	78bb      	ldrb	r3, [r7, #2]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d102      	bne.n	8003b5c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_PCD_EP_Open+0xae>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e00e      	b.n	8003b88 <HAL_PCD_EP_Open+0xcc>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68f9      	ldr	r1, [r7, #12]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f002 f905 	bl	8005d88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003b86:	7afb      	ldrb	r3, [r7, #11]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	da0f      	bge.n	8003bc4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	f003 020f 	and.w	r2, r3, #15
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	3310      	adds	r3, #16
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3304      	adds	r3, #4
 8003bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	705a      	strb	r2, [r3, #1]
 8003bc2:	e00f      	b.n	8003be4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	f003 020f 	and.w	r2, r3, #15
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3304      	adds	r3, #4
 8003bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_PCD_EP_Close+0x6e>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e00e      	b.n	8003c1c <HAL_PCD_EP_Close+0x8c>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68f9      	ldr	r1, [r7, #12]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f002 f943 	bl	8005e98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	460b      	mov	r3, r1
 8003c32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c34:	7afb      	ldrb	r3, [r7, #11]
 8003c36:	f003 020f 	and.w	r2, r3, #15
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4413      	add	r3, r2
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2200      	movs	r2, #0
 8003c64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c66:	7afb      	ldrb	r3, [r7, #11]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	799b      	ldrb	r3, [r3, #6]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d102      	bne.n	8003c80 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	799b      	ldrb	r3, [r3, #6]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6979      	ldr	r1, [r7, #20]
 8003c8c:	f002 f9e0 	bl	8006050 <USB_EPStartXfer>

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b086      	sub	sp, #24
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003caa:	7afb      	ldrb	r3, [r7, #11]
 8003cac:	f003 020f 	and.w	r2, r3, #15
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	3310      	adds	r3, #16
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cda:	7afb      	ldrb	r3, [r7, #11]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	799b      	ldrb	r3, [r3, #6]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d102      	bne.n	8003cf4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	799b      	ldrb	r3, [r3, #6]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6979      	ldr	r1, [r7, #20]
 8003d00:	f002 f9a6 	bl	8006050 <USB_EPStartXfer>

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	460b      	mov	r3, r1
 8003d18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	7912      	ldrb	r2, [r2, #4]
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d901      	bls.n	8003d2c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e04f      	b.n	8003dcc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	da0f      	bge.n	8003d54 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	f003 020f 	and.w	r2, r3, #15
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	3310      	adds	r3, #16
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	4413      	add	r3, r2
 8003d48:	3304      	adds	r3, #4
 8003d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	705a      	strb	r2, [r3, #1]
 8003d52:	e00d      	b.n	8003d70 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	3304      	adds	r3, #4
 8003d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_PCD_EP_SetStall+0x82>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e01d      	b.n	8003dcc <HAL_PCD_EP_SetStall+0xbe>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68f9      	ldr	r1, [r7, #12]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f002 fd34 	bl	800680c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7999      	ldrb	r1, [r3, #6]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f002 ff25 	bl	8006c0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	7912      	ldrb	r2, [r2, #4]
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d901      	bls.n	8003df2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e042      	b.n	8003e78 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	da0f      	bge.n	8003e1a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	f003 020f 	and.w	r2, r3, #15
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	3310      	adds	r3, #16
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3304      	adds	r3, #4
 8003e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	705a      	strb	r2, [r3, #1]
 8003e18:	e00f      	b.n	8003e3a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	f003 020f 	and.w	r2, r3, #15
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	4413      	add	r3, r2
 8003e30:	3304      	adds	r3, #4
 8003e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_PCD_EP_ClrStall+0x86>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e00e      	b.n	8003e78 <HAL_PCD_EP_ClrStall+0xa4>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68f9      	ldr	r1, [r7, #12]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f002 fd3d 	bl	80068e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da0c      	bge.n	8003eae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	f003 020f 	and.w	r2, r3, #15
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	3310      	adds	r3, #16
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e00c      	b.n	8003ec8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	f003 020f 	and.w	r2, r3, #15
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68f9      	ldr	r1, [r7, #12]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f002 fb5c 	bl	800658c <USB_EPStopXfer>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ed8:	7afb      	ldrb	r3, [r7, #11]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b08a      	sub	sp, #40	@ 0x28
 8003ee6:	af02      	add	r7, sp, #8
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	3310      	adds	r3, #16
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	3304      	adds	r3, #4
 8003f08:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d901      	bls.n	8003f1a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e06b      	b.n	8003ff2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d902      	bls.n	8003f36 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3303      	adds	r3, #3
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f3e:	e02a      	b.n	8003f96 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d902      	bls.n	8003f5c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	3303      	adds	r3, #3
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68d9      	ldr	r1, [r3, #12]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	4603      	mov	r3, r0
 8003f78:	6978      	ldr	r0, [r7, #20]
 8003f7a:	f002 fbb1 	bl	80066e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	441a      	add	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	441a      	add	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d809      	bhi.n	8003fc0 <PCD_WriteEmptyTxFifo+0xde>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d203      	bcs.n	8003fc0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1bf      	bne.n	8003f40 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d811      	bhi.n	8003ff0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	6939      	ldr	r1, [r7, #16]
 8003fe8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fec:	4013      	ands	r3, r2
 8003fee:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3720      	adds	r7, #32
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	333c      	adds	r3, #60	@ 0x3c
 8004014:	3304      	adds	r3, #4
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	799b      	ldrb	r3, [r3, #6]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d17b      	bne.n	800412a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d015      	beq.n	8004068 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	4a61      	ldr	r2, [pc, #388]	@ (80041c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	f240 80b9 	bls.w	80041b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80b3 	beq.w	80041b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800405e:	461a      	mov	r2, r3
 8004060:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004064:	6093      	str	r3, [r2, #8]
 8004066:	e0a7      	b.n	80041b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800407e:	461a      	mov	r2, r3
 8004080:	2320      	movs	r3, #32
 8004082:	6093      	str	r3, [r2, #8]
 8004084:	e098      	b.n	80041b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 8093 	bne.w	80041b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	4a4b      	ldr	r2, [pc, #300]	@ (80041c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d90f      	bls.n	80040ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b0:	461a      	mov	r2, r3
 80040b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040b6:	6093      	str	r3, [r2, #8]
 80040b8:	e07e      	b.n	80041b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	4413      	add	r3, r2
 80040cc:	3304      	adds	r3, #4
 80040ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1a      	ldr	r2, [r3, #32]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	0159      	lsls	r1, r3, #5
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	440b      	add	r3, r1
 80040dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e6:	1ad2      	subs	r2, r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d114      	bne.n	800411c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004104:	461a      	mov	r2, r3
 8004106:	2101      	movs	r1, #1
 8004108:	f002 fd80 	bl	8006c0c <USB_EP0_OutStart>
 800410c:	e006      	b.n	800411c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	441a      	add	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	4619      	mov	r1, r3
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f004 fec4 	bl	8008eb0 <HAL_PCD_DataOutStageCallback>
 8004128:	e046      	b.n	80041b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	4a26      	ldr	r2, [pc, #152]	@ (80041c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d124      	bne.n	800417c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004148:	461a      	mov	r2, r3
 800414a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800414e:	6093      	str	r3, [r2, #8]
 8004150:	e032      	b.n	80041b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004168:	461a      	mov	r2, r3
 800416a:	2320      	movs	r3, #32
 800416c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	4619      	mov	r1, r3
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f004 fe9b 	bl	8008eb0 <HAL_PCD_DataOutStageCallback>
 800417a:	e01d      	b.n	80041b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d114      	bne.n	80041ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d108      	bne.n	80041ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041a4:	461a      	mov	r2, r3
 80041a6:	2100      	movs	r1, #0
 80041a8:	f002 fd30 	bl	8006c0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	4619      	mov	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f004 fe7c 	bl	8008eb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	4f54300a 	.word	0x4f54300a
 80041c8:	4f54310a 	.word	0x4f54310a

080041cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	333c      	adds	r3, #60	@ 0x3c
 80041e4:	3304      	adds	r3, #4
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a15      	ldr	r2, [pc, #84]	@ (8004254 <PCD_EP_OutSetupPacket_int+0x88>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d90e      	bls.n	8004220 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004218:	461a      	mov	r2, r3
 800421a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800421e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f004 fe33 	bl	8008e8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4a0a      	ldr	r2, [pc, #40]	@ (8004254 <PCD_EP_OutSetupPacket_int+0x88>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d90c      	bls.n	8004248 <PCD_EP_OutSetupPacket_int+0x7c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	799b      	ldrb	r3, [r3, #6]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d108      	bne.n	8004248 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004240:	461a      	mov	r2, r3
 8004242:	2101      	movs	r1, #1
 8004244:	f002 fce2 	bl	8006c0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	4f54300a 	.word	0x4f54300a

08004258 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	70fb      	strb	r3, [r7, #3]
 8004264:	4613      	mov	r3, r2
 8004266:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d107      	bne.n	8004286 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004276:	883b      	ldrh	r3, [r7, #0]
 8004278:	0419      	lsls	r1, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	430a      	orrs	r2, r1
 8004282:	629a      	str	r2, [r3, #40]	@ 0x28
 8004284:	e028      	b.n	80042d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	4413      	add	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004294:	2300      	movs	r3, #0
 8004296:	73fb      	strb	r3, [r7, #15]
 8004298:	e00d      	b.n	80042b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	3340      	adds	r3, #64	@ 0x40
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	4413      	add	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	3301      	adds	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
 80042b6:	7bfa      	ldrb	r2, [r7, #15]
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	429a      	cmp	r2, r3
 80042be:	d3ec      	bcc.n	800429a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042c0:	883b      	ldrh	r3, [r7, #0]
 80042c2:	0418      	lsls	r0, r3, #16
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6819      	ldr	r1, [r3, #0]
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	4302      	orrs	r2, r0
 80042d0:	3340      	adds	r3, #64	@ 0x40
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	460b      	mov	r3, r1
 80042f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	887a      	ldrh	r2, [r7, #2]
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e267      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d075      	beq.n	800442a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800433e:	4b88      	ldr	r3, [pc, #544]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b04      	cmp	r3, #4
 8004348:	d00c      	beq.n	8004364 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434a:	4b85      	ldr	r3, [pc, #532]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004352:	2b08      	cmp	r3, #8
 8004354:	d112      	bne.n	800437c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004356:	4b82      	ldr	r3, [pc, #520]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800435e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004362:	d10b      	bne.n	800437c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	4b7e      	ldr	r3, [pc, #504]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d05b      	beq.n	8004428 <HAL_RCC_OscConfig+0x108>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d157      	bne.n	8004428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e242      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004384:	d106      	bne.n	8004394 <HAL_RCC_OscConfig+0x74>
 8004386:	4b76      	ldr	r3, [pc, #472]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a75      	ldr	r2, [pc, #468]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e01d      	b.n	80043d0 <HAL_RCC_OscConfig+0xb0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x98>
 800439e:	4b70      	ldr	r3, [pc, #448]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6f      	ldr	r2, [pc, #444]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b6d      	ldr	r3, [pc, #436]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6c      	ldr	r2, [pc, #432]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e00b      	b.n	80043d0 <HAL_RCC_OscConfig+0xb0>
 80043b8:	4b69      	ldr	r3, [pc, #420]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a68      	ldr	r2, [pc, #416]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b66      	ldr	r3, [pc, #408]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a65      	ldr	r2, [pc, #404]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fe fa58 	bl	800288c <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e0:	f7fe fa54 	bl	800288c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	@ 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e207      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0xc0>
 80043fe:	e014      	b.n	800442a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fe fa44 	bl	800288c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004408:	f7fe fa40 	bl	800288c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	@ 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e1f3      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	4b51      	ldr	r3, [pc, #324]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0xe8>
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d063      	beq.n	80044fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004436:	4b4a      	ldr	r3, [pc, #296]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004442:	4b47      	ldr	r3, [pc, #284]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800444a:	2b08      	cmp	r3, #8
 800444c:	d11c      	bne.n	8004488 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444e:	4b44      	ldr	r3, [pc, #272]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d116      	bne.n	8004488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	4b41      	ldr	r3, [pc, #260]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCC_OscConfig+0x152>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e1c7      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	4b3b      	ldr	r3, [pc, #236]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4937      	ldr	r1, [pc, #220]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	e03a      	b.n	80044fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004490:	4b34      	ldr	r3, [pc, #208]	@ (8004564 <HAL_RCC_OscConfig+0x244>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7fe f9f9 	bl	800288c <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449e:	f7fe f9f5 	bl	800288c <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1a8      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b28      	ldr	r3, [pc, #160]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4925      	ldr	r1, [pc, #148]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d2:	4b24      	ldr	r3, [pc, #144]	@ (8004564 <HAL_RCC_OscConfig+0x244>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe f9d8 	bl	800288c <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e0:	f7fe f9d4 	bl	800288c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e187      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d036      	beq.n	8004578 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004512:	4b15      	ldr	r3, [pc, #84]	@ (8004568 <HAL_RCC_OscConfig+0x248>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fe f9b8 	bl	800288c <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004520:	f7fe f9b4 	bl	800288c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e167      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	4b0b      	ldr	r3, [pc, #44]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x200>
 800453e:	e01b      	b.n	8004578 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004540:	4b09      	ldr	r3, [pc, #36]	@ (8004568 <HAL_RCC_OscConfig+0x248>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004546:	f7fe f9a1 	bl	800288c <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454c:	e00e      	b.n	800456c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454e:	f7fe f99d 	bl	800288c <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d907      	bls.n	800456c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e150      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
 8004560:	40023800 	.word	0x40023800
 8004564:	42470000 	.word	0x42470000
 8004568:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456c:	4b88      	ldr	r3, [pc, #544]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800456e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ea      	bne.n	800454e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8097 	beq.w	80046b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458a:	4b81      	ldr	r3, [pc, #516]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	4b7d      	ldr	r3, [pc, #500]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	4a7c      	ldr	r2, [pc, #496]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a6:	4b7a      	ldr	r3, [pc, #488]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b6:	4b77      	ldr	r3, [pc, #476]	@ (8004794 <HAL_RCC_OscConfig+0x474>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d118      	bne.n	80045f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c2:	4b74      	ldr	r3, [pc, #464]	@ (8004794 <HAL_RCC_OscConfig+0x474>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a73      	ldr	r2, [pc, #460]	@ (8004794 <HAL_RCC_OscConfig+0x474>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ce:	f7fe f95d 	bl	800288c <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d6:	f7fe f959 	bl	800288c <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e10c      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004794 <HAL_RCC_OscConfig+0x474>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d106      	bne.n	800460a <HAL_RCC_OscConfig+0x2ea>
 80045fc:	4b64      	ldr	r3, [pc, #400]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004600:	4a63      	ldr	r2, [pc, #396]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6713      	str	r3, [r2, #112]	@ 0x70
 8004608:	e01c      	b.n	8004644 <HAL_RCC_OscConfig+0x324>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b05      	cmp	r3, #5
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0x30c>
 8004612:	4b5f      	ldr	r3, [pc, #380]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004616:	4a5e      	ldr	r2, [pc, #376]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004618:	f043 0304 	orr.w	r3, r3, #4
 800461c:	6713      	str	r3, [r2, #112]	@ 0x70
 800461e:	4b5c      	ldr	r3, [pc, #368]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004622:	4a5b      	ldr	r2, [pc, #364]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6713      	str	r3, [r2, #112]	@ 0x70
 800462a:	e00b      	b.n	8004644 <HAL_RCC_OscConfig+0x324>
 800462c:	4b58      	ldr	r3, [pc, #352]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004630:	4a57      	ldr	r2, [pc, #348]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	6713      	str	r3, [r2, #112]	@ 0x70
 8004638:	4b55      	ldr	r3, [pc, #340]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463c:	4a54      	ldr	r2, [pc, #336]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800463e:	f023 0304 	bic.w	r3, r3, #4
 8004642:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d015      	beq.n	8004678 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fe f91e 	bl	800288c <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004652:	e00a      	b.n	800466a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fe f91a 	bl	800288c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e0cb      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466a:	4b49      	ldr	r3, [pc, #292]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0ee      	beq.n	8004654 <HAL_RCC_OscConfig+0x334>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004678:	f7fe f908 	bl	800288c <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467e:	e00a      	b.n	8004696 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004680:	f7fe f904 	bl	800288c <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0b5      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004696:	4b3e      	ldr	r3, [pc, #248]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1ee      	bne.n	8004680 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d105      	bne.n	80046b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a8:	4b39      	ldr	r3, [pc, #228]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ac:	4a38      	ldr	r2, [pc, #224]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80046ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80a1 	beq.w	8004800 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046be:	4b34      	ldr	r3, [pc, #208]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d05c      	beq.n	8004784 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d141      	bne.n	8004756 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d2:	4b31      	ldr	r3, [pc, #196]	@ (8004798 <HAL_RCC_OscConfig+0x478>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fe f8d8 	bl	800288c <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fe f8d4 	bl	800288c <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e087      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	4b27      	ldr	r3, [pc, #156]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	3b01      	subs	r3, #1
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	491b      	ldr	r1, [pc, #108]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004728:	4b1b      	ldr	r3, [pc, #108]	@ (8004798 <HAL_RCC_OscConfig+0x478>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472e:	f7fe f8ad 	bl	800288c <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004736:	f7fe f8a9 	bl	800288c <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e05c      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004748:	4b11      	ldr	r3, [pc, #68]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x416>
 8004754:	e054      	b.n	8004800 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004756:	4b10      	ldr	r3, [pc, #64]	@ (8004798 <HAL_RCC_OscConfig+0x478>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fe f896 	bl	800288c <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fe f892 	bl	800288c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e045      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x444>
 8004782:	e03d      	b.n	8004800 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d107      	bne.n	800479c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e038      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
 8004790:	40023800 	.word	0x40023800
 8004794:	40007000 	.word	0x40007000
 8004798:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800479c:	4b1b      	ldr	r3, [pc, #108]	@ (800480c <HAL_RCC_OscConfig+0x4ec>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d028      	beq.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d121      	bne.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d11a      	bne.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047cc:	4013      	ands	r3, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d111      	bne.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	3b01      	subs	r3, #1
 80047e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d107      	bne.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800

08004810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e0cc      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004824:	4b68      	ldr	r3, [pc, #416]	@ (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d90c      	bls.n	800484c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b65      	ldr	r3, [pc, #404]	@ (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b63      	ldr	r3, [pc, #396]	@ (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0b8      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d020      	beq.n	800489a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004864:	4b59      	ldr	r3, [pc, #356]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a58      	ldr	r2, [pc, #352]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800486e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800487c:	4b53      	ldr	r3, [pc, #332]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4a52      	ldr	r2, [pc, #328]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004888:	4b50      	ldr	r3, [pc, #320]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	494d      	ldr	r1, [pc, #308]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d044      	beq.n	8004930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d107      	bne.n	80048be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	4b47      	ldr	r3, [pc, #284]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d119      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e07f      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d003      	beq.n	80048ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d107      	bne.n	80048de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ce:	4b3f      	ldr	r3, [pc, #252]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e06f      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048de:	4b3b      	ldr	r3, [pc, #236]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e067      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ee:	4b37      	ldr	r3, [pc, #220]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f023 0203 	bic.w	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4934      	ldr	r1, [pc, #208]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004900:	f7fd ffc4 	bl	800288c <HAL_GetTick>
 8004904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	e00a      	b.n	800491e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004908:	f7fd ffc0 	bl	800288c <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e04f      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491e:	4b2b      	ldr	r3, [pc, #172]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 020c 	and.w	r2, r3, #12
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	429a      	cmp	r2, r3
 800492e:	d1eb      	bne.n	8004908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004930:	4b25      	ldr	r3, [pc, #148]	@ (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d20c      	bcs.n	8004958 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b22      	ldr	r3, [pc, #136]	@ (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b20      	ldr	r3, [pc, #128]	@ (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e032      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004964:	4b19      	ldr	r3, [pc, #100]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4916      	ldr	r1, [pc, #88]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004982:	4b12      	ldr	r3, [pc, #72]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	490e      	ldr	r1, [pc, #56]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004996:	f000 f821 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b0b      	ldr	r3, [pc, #44]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490a      	ldr	r1, [pc, #40]	@ (80049d0 <HAL_RCC_ClockConfig+0x1c0>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	4a09      	ldr	r2, [pc, #36]	@ (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 80049b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049b2:	4b09      	ldr	r3, [pc, #36]	@ (80049d8 <HAL_RCC_ClockConfig+0x1c8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fd ff24 	bl	8002804 <HAL_InitTick>

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40023c00 	.word	0x40023c00
 80049cc:	40023800 	.word	0x40023800
 80049d0:	08009708 	.word	0x08009708
 80049d4:	20000000 	.word	0x20000000
 80049d8:	20000004 	.word	0x20000004

080049dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e0:	b094      	sub	sp, #80	@ 0x50
 80049e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f4:	4b79      	ldr	r3, [pc, #484]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x200>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 030c 	and.w	r3, r3, #12
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d00d      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x40>
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	f200 80e1 	bhi.w	8004bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x34>
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d003      	beq.n	8004a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a0e:	e0db      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a10:	4b73      	ldr	r3, [pc, #460]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a14:	e0db      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a16:	4b73      	ldr	r3, [pc, #460]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a1a:	e0d8      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a26:	4b6d      	ldr	r3, [pc, #436]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d063      	beq.n	8004afa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a32:	4b6a      	ldr	r3, [pc, #424]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	2200      	movs	r2, #0
 8004a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a46:	2300      	movs	r3, #0
 8004a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a4e:	4622      	mov	r2, r4
 8004a50:	462b      	mov	r3, r5
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f04f 0100 	mov.w	r1, #0
 8004a5a:	0159      	lsls	r1, r3, #5
 8004a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a60:	0150      	lsls	r0, r2, #5
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4621      	mov	r1, r4
 8004a68:	1a51      	subs	r1, r2, r1
 8004a6a:	6139      	str	r1, [r7, #16]
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a80:	4659      	mov	r1, fp
 8004a82:	018b      	lsls	r3, r1, #6
 8004a84:	4651      	mov	r1, sl
 8004a86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a8a:	4651      	mov	r1, sl
 8004a8c:	018a      	lsls	r2, r1, #6
 8004a8e:	4651      	mov	r1, sl
 8004a90:	ebb2 0801 	subs.w	r8, r2, r1
 8004a94:	4659      	mov	r1, fp
 8004a96:	eb63 0901 	sbc.w	r9, r3, r1
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aae:	4690      	mov	r8, r2
 8004ab0:	4699      	mov	r9, r3
 8004ab2:	4623      	mov	r3, r4
 8004ab4:	eb18 0303 	adds.w	r3, r8, r3
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	462b      	mov	r3, r5
 8004abc:	eb49 0303 	adc.w	r3, r9, r3
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ace:	4629      	mov	r1, r5
 8004ad0:	024b      	lsls	r3, r1, #9
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ad8:	4621      	mov	r1, r4
 8004ada:	024a      	lsls	r2, r1, #9
 8004adc:	4610      	mov	r0, r2
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ae6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ae8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004aec:	f7fb fb6c 	bl	80001c8 <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4613      	mov	r3, r2
 8004af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004af8:	e058      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004afa:	4b38      	ldr	r3, [pc, #224]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	099b      	lsrs	r3, r3, #6
 8004b00:	2200      	movs	r2, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	4611      	mov	r1, r2
 8004b06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b0a:	623b      	str	r3, [r7, #32]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b14:	4642      	mov	r2, r8
 8004b16:	464b      	mov	r3, r9
 8004b18:	f04f 0000 	mov.w	r0, #0
 8004b1c:	f04f 0100 	mov.w	r1, #0
 8004b20:	0159      	lsls	r1, r3, #5
 8004b22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b26:	0150      	lsls	r0, r2, #5
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b32:	4649      	mov	r1, r9
 8004b34:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b4c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b50:	eb63 050b 	sbc.w	r5, r3, fp
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	00eb      	lsls	r3, r5, #3
 8004b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b62:	00e2      	lsls	r2, r4, #3
 8004b64:	4614      	mov	r4, r2
 8004b66:	461d      	mov	r5, r3
 8004b68:	4643      	mov	r3, r8
 8004b6a:	18e3      	adds	r3, r4, r3
 8004b6c:	603b      	str	r3, [r7, #0]
 8004b6e:	464b      	mov	r3, r9
 8004b70:	eb45 0303 	adc.w	r3, r5, r3
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b82:	4629      	mov	r1, r5
 8004b84:	028b      	lsls	r3, r1, #10
 8004b86:	4621      	mov	r1, r4
 8004b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	028a      	lsls	r2, r1, #10
 8004b90:	4610      	mov	r0, r2
 8004b92:	4619      	mov	r1, r3
 8004b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b96:	2200      	movs	r2, #0
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	61fa      	str	r2, [r7, #28]
 8004b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ba0:	f7fb fb12 	bl	80001c8 <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4613      	mov	r3, r2
 8004baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bac:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	0c1b      	lsrs	r3, r3, #16
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bc6:	e002      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bc8:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3750      	adds	r7, #80	@ 0x50
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bda:	bf00      	nop
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	00f42400 	.word	0x00f42400
 8004be4:	007a1200 	.word	0x007a1200

08004be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bec:	4b03      	ldr	r3, [pc, #12]	@ (8004bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bee:	681b      	ldr	r3, [r3, #0]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000000 	.word	0x20000000

08004c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e07b      	b.n	8004d0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d108      	bne.n	8004c2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c22:	d009      	beq.n	8004c38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	61da      	str	r2, [r3, #28]
 8004c2a:	e005      	b.n	8004c38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fd fc88 	bl	8002568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cbc:	ea42 0103 	orr.w	r1, r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	f003 0104 	and.w	r1, r3, #4
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cde:	f003 0210 	and.w	r2, r3, #16
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b088      	sub	sp, #32
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d22:	f7fd fdb3 	bl	800288c <HAL_GetTick>
 8004d26:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004d28:	88fb      	ldrh	r3, [r7, #6]
 8004d2a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d001      	beq.n	8004d3c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e12a      	b.n	8004f92 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_Transmit+0x36>
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e122      	b.n	8004f92 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_SPI_Transmit+0x48>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e11b      	b.n	8004f92 <HAL_SPI_Transmit+0x280>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2203      	movs	r2, #3
 8004d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	88fa      	ldrh	r2, [r7, #6]
 8004d7a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	88fa      	ldrh	r2, [r7, #6]
 8004d80:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004da8:	d10f      	bne.n	8004dca <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004db8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd4:	2b40      	cmp	r3, #64	@ 0x40
 8004dd6:	d007      	beq.n	8004de8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004de6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004df0:	d152      	bne.n	8004e98 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_Transmit+0xee>
 8004dfa:	8b7b      	ldrh	r3, [r7, #26]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d145      	bne.n	8004e8c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e04:	881a      	ldrh	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e10:	1c9a      	adds	r2, r3, #2
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e24:	e032      	b.n	8004e8c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d112      	bne.n	8004e5a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e38:	881a      	ldrh	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e44:	1c9a      	adds	r2, r3, #2
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e58:	e018      	b.n	8004e8c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e5a:	f7fd fd17 	bl	800288c <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d803      	bhi.n	8004e72 <HAL_SPI_Transmit+0x160>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e70:	d102      	bne.n	8004e78 <HAL_SPI_Transmit+0x166>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e082      	b.n	8004f92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1c7      	bne.n	8004e26 <HAL_SPI_Transmit+0x114>
 8004e96:	e053      	b.n	8004f40 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_SPI_Transmit+0x194>
 8004ea0:	8b7b      	ldrh	r3, [r7, #26]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d147      	bne.n	8004f36 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	7812      	ldrb	r2, [r2, #0]
 8004eb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ecc:	e033      	b.n	8004f36 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d113      	bne.n	8004f04 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	7812      	ldrb	r2, [r2, #0]
 8004ee8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f02:	e018      	b.n	8004f36 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f04:	f7fd fcc2 	bl	800288c <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d803      	bhi.n	8004f1c <HAL_SPI_Transmit+0x20a>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1a:	d102      	bne.n	8004f22 <HAL_SPI_Transmit+0x210>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e02d      	b.n	8004f92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1c6      	bne.n	8004ece <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f40:	69fa      	ldr	r2, [r7, #28]
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fa59 	bl	80053fc <SPI_EndRxTxTransaction>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004f90:	2300      	movs	r3, #0
  }
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3720      	adds	r7, #32
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b08a      	sub	sp, #40	@ 0x28
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fac:	f7fd fc6e 	bl	800288c <HAL_GetTick>
 8004fb0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fb8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004fc0:	887b      	ldrh	r3, [r7, #2]
 8004fc2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fc4:	7ffb      	ldrb	r3, [r7, #31]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d00c      	beq.n	8004fe4 <HAL_SPI_TransmitReceive+0x4a>
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fd0:	d106      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x46>
 8004fda:	7ffb      	ldrb	r3, [r7, #31]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d001      	beq.n	8004fe4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e17f      	b.n	80052e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_SPI_TransmitReceive+0x5c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <HAL_SPI_TransmitReceive+0x5c>
 8004ff0:	887b      	ldrh	r3, [r7, #2]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e174      	b.n	80052e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_SPI_TransmitReceive+0x6e>
 8005004:	2302      	movs	r3, #2
 8005006:	e16d      	b.n	80052e4 <HAL_SPI_TransmitReceive+0x34a>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b04      	cmp	r3, #4
 800501a:	d003      	beq.n	8005024 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2205      	movs	r2, #5
 8005020:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	887a      	ldrh	r2, [r7, #2]
 800503a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	887a      	ldrh	r2, [r7, #2]
 8005046:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	887a      	ldrh	r2, [r7, #2]
 800504c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005064:	2b40      	cmp	r3, #64	@ 0x40
 8005066:	d007      	beq.n	8005078 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005080:	d17e      	bne.n	8005180 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_SPI_TransmitReceive+0xf6>
 800508a:	8afb      	ldrh	r3, [r7, #22]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d16c      	bne.n	800516a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005094:	881a      	ldrh	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a0:	1c9a      	adds	r2, r3, #2
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b4:	e059      	b.n	800516a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d11b      	bne.n	80050fc <HAL_SPI_TransmitReceive+0x162>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d016      	beq.n	80050fc <HAL_SPI_TransmitReceive+0x162>
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d113      	bne.n	80050fc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d8:	881a      	ldrh	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e4:	1c9a      	adds	r2, r3, #2
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b01      	cmp	r3, #1
 8005108:	d119      	bne.n	800513e <HAL_SPI_TransmitReceive+0x1a4>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d014      	beq.n	800513e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511e:	b292      	uxth	r2, r2
 8005120:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005126:	1c9a      	adds	r2, r3, #2
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800513a:	2301      	movs	r3, #1
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800513e:	f7fd fba5 	bl	800288c <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800514a:	429a      	cmp	r2, r3
 800514c:	d80d      	bhi.n	800516a <HAL_SPI_TransmitReceive+0x1d0>
 800514e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d009      	beq.n	800516a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e0bc      	b.n	80052e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1a0      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x11c>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d19b      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x11c>
 800517e:	e082      	b.n	8005286 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <HAL_SPI_TransmitReceive+0x1f4>
 8005188:	8afb      	ldrh	r3, [r7, #22]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d171      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	330c      	adds	r3, #12
 8005198:	7812      	ldrb	r2, [r2, #0]
 800519a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051b4:	e05d      	b.n	8005272 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d11c      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x264>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d017      	beq.n	80051fe <HAL_SPI_TransmitReceive+0x264>
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d114      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	7812      	ldrb	r2, [r2, #0]
 80051e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d119      	bne.n	8005240 <HAL_SPI_TransmitReceive+0x2a6>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d014      	beq.n	8005240 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800523c:	2301      	movs	r3, #1
 800523e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005240:	f7fd fb24 	bl	800288c <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800524c:	429a      	cmp	r2, r3
 800524e:	d803      	bhi.n	8005258 <HAL_SPI_TransmitReceive+0x2be>
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005256:	d102      	bne.n	800525e <HAL_SPI_TransmitReceive+0x2c4>
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e038      	b.n	80052e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005276:	b29b      	uxth	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d19c      	bne.n	80051b6 <HAL_SPI_TransmitReceive+0x21c>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d197      	bne.n	80051b6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005286:	6a3a      	ldr	r2, [r7, #32]
 8005288:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f8b6 	bl	80053fc <SPI_EndRxTxTransaction>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e01d      	b.n	80052e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b0:	2300      	movs	r3, #0
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	613b      	str	r3, [r7, #16]
 80052c4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
  }
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3728      	adds	r7, #40	@ 0x28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052fc:	f7fd fac6 	bl	800288c <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	4413      	add	r3, r2
 800530a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800530c:	f7fd fabe 	bl	800288c <HAL_GetTick>
 8005310:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005312:	4b39      	ldr	r3, [pc, #228]	@ (80053f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	015b      	lsls	r3, r3, #5
 8005318:	0d1b      	lsrs	r3, r3, #20
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	fb02 f303 	mul.w	r3, r2, r3
 8005320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005322:	e054      	b.n	80053ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532a:	d050      	beq.n	80053ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800532c:	f7fd faae 	bl	800288c <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	429a      	cmp	r2, r3
 800533a:	d902      	bls.n	8005342 <SPI_WaitFlagStateUntilTimeout+0x56>
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d13d      	bne.n	80053be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800535a:	d111      	bne.n	8005380 <SPI_WaitFlagStateUntilTimeout+0x94>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005364:	d004      	beq.n	8005370 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800536e:	d107      	bne.n	8005380 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800537e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005388:	d10f      	bne.n	80053aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e017      	b.n	80053ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4013      	ands	r3, r2
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	429a      	cmp	r2, r3
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d19b      	bne.n	8005324 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3720      	adds	r7, #32
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000000 	.word	0x20000000

080053fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2201      	movs	r2, #1
 8005410:	2102      	movs	r1, #2
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f7ff ff6a 	bl	80052ec <SPI_WaitFlagStateUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005422:	f043 0220 	orr.w	r2, r3, #32
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e032      	b.n	8005494 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800542e:	4b1b      	ldr	r3, [pc, #108]	@ (800549c <SPI_EndRxTxTransaction+0xa0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1b      	ldr	r2, [pc, #108]	@ (80054a0 <SPI_EndRxTxTransaction+0xa4>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	0d5b      	lsrs	r3, r3, #21
 800543a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800543e:	fb02 f303 	mul.w	r3, r2, r3
 8005442:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800544c:	d112      	bne.n	8005474 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2200      	movs	r2, #0
 8005456:	2180      	movs	r1, #128	@ 0x80
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7ff ff47 	bl	80052ec <SPI_WaitFlagStateUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d016      	beq.n	8005492 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005468:	f043 0220 	orr.w	r2, r3, #32
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e00f      	b.n	8005494 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	3b01      	subs	r3, #1
 800547e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548a:	2b80      	cmp	r3, #128	@ 0x80
 800548c:	d0f2      	beq.n	8005474 <SPI_EndRxTxTransaction+0x78>
 800548e:	e000      	b.n	8005492 <SPI_EndRxTxTransaction+0x96>
        break;
 8005490:	bf00      	nop
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20000000 	.word	0x20000000
 80054a0:	165e9f81 	.word	0x165e9f81

080054a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e041      	b.n	800553a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fd f92c 	bl	8002728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f000 f82e 	bl	8005544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a46      	ldr	r2, [pc, #280]	@ (8005670 <TIM_Base_SetConfig+0x12c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005562:	d00f      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a43      	ldr	r2, [pc, #268]	@ (8005674 <TIM_Base_SetConfig+0x130>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00b      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a42      	ldr	r2, [pc, #264]	@ (8005678 <TIM_Base_SetConfig+0x134>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d007      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a41      	ldr	r2, [pc, #260]	@ (800567c <TIM_Base_SetConfig+0x138>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a40      	ldr	r2, [pc, #256]	@ (8005680 <TIM_Base_SetConfig+0x13c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d108      	bne.n	8005596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800558a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a35      	ldr	r2, [pc, #212]	@ (8005670 <TIM_Base_SetConfig+0x12c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d02b      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a4:	d027      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a32      	ldr	r2, [pc, #200]	@ (8005674 <TIM_Base_SetConfig+0x130>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d023      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a31      	ldr	r2, [pc, #196]	@ (8005678 <TIM_Base_SetConfig+0x134>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d01f      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a30      	ldr	r2, [pc, #192]	@ (800567c <TIM_Base_SetConfig+0x138>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d01b      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a2f      	ldr	r2, [pc, #188]	@ (8005680 <TIM_Base_SetConfig+0x13c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d017      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2e      	ldr	r2, [pc, #184]	@ (8005684 <TIM_Base_SetConfig+0x140>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d013      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005688 <TIM_Base_SetConfig+0x144>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00f      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2c      	ldr	r2, [pc, #176]	@ (800568c <TIM_Base_SetConfig+0x148>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00b      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005690 <TIM_Base_SetConfig+0x14c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d007      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2a      	ldr	r2, [pc, #168]	@ (8005694 <TIM_Base_SetConfig+0x150>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d003      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a29      	ldr	r2, [pc, #164]	@ (8005698 <TIM_Base_SetConfig+0x154>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d108      	bne.n	8005608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a10      	ldr	r2, [pc, #64]	@ (8005670 <TIM_Base_SetConfig+0x12c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d003      	beq.n	800563c <TIM_Base_SetConfig+0xf8>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a12      	ldr	r2, [pc, #72]	@ (8005680 <TIM_Base_SetConfig+0x13c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d103      	bne.n	8005644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b01      	cmp	r3, #1
 8005654:	d105      	bne.n	8005662 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f023 0201 	bic.w	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	611a      	str	r2, [r3, #16]
  }
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40010000 	.word	0x40010000
 8005674:	40000400 	.word	0x40000400
 8005678:	40000800 	.word	0x40000800
 800567c:	40000c00 	.word	0x40000c00
 8005680:	40010400 	.word	0x40010400
 8005684:	40014000 	.word	0x40014000
 8005688:	40014400 	.word	0x40014400
 800568c:	40014800 	.word	0x40014800
 8005690:	40001800 	.word	0x40001800
 8005694:	40001c00 	.word	0x40001c00
 8005698:	40002000 	.word	0x40002000

0800569c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800569c:	b084      	sub	sp, #16
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	f107 001c 	add.w	r0, r7, #28
 80056aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d123      	bne.n	80056fe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80056ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d105      	bne.n	80056f2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f001 fae8 	bl	8006cc8 <USB_CoreReset>
 80056f8:	4603      	mov	r3, r0
 80056fa:	73fb      	strb	r3, [r7, #15]
 80056fc:	e01b      	b.n	8005736 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 fadc 	bl	8006cc8 <USB_CoreReset>
 8005710:	4603      	mov	r3, r0
 8005712:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005714:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005720:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	639a      	str	r2, [r3, #56]	@ 0x38
 8005728:	e005      	b.n	8005736 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005736:	7fbb      	ldrb	r3, [r7, #30]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d10b      	bne.n	8005754 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f043 0206 	orr.w	r2, r3, #6
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f043 0220 	orr.w	r2, r3, #32
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005754:	7bfb      	ldrb	r3, [r7, #15]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005760:	b004      	add	sp, #16
 8005762:	4770      	bx	lr

08005764 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	4613      	mov	r3, r2
 8005770:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d165      	bne.n	8005844 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4a41      	ldr	r2, [pc, #260]	@ (8005880 <USB_SetTurnaroundTime+0x11c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d906      	bls.n	800578e <USB_SetTurnaroundTime+0x2a>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4a40      	ldr	r2, [pc, #256]	@ (8005884 <USB_SetTurnaroundTime+0x120>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d202      	bcs.n	800578e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005788:	230f      	movs	r3, #15
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	e062      	b.n	8005854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4a3c      	ldr	r2, [pc, #240]	@ (8005884 <USB_SetTurnaroundTime+0x120>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d306      	bcc.n	80057a4 <USB_SetTurnaroundTime+0x40>
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	4a3b      	ldr	r2, [pc, #236]	@ (8005888 <USB_SetTurnaroundTime+0x124>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d202      	bcs.n	80057a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800579e:	230e      	movs	r3, #14
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	e057      	b.n	8005854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4a38      	ldr	r2, [pc, #224]	@ (8005888 <USB_SetTurnaroundTime+0x124>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d306      	bcc.n	80057ba <USB_SetTurnaroundTime+0x56>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4a37      	ldr	r2, [pc, #220]	@ (800588c <USB_SetTurnaroundTime+0x128>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d202      	bcs.n	80057ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057b4:	230d      	movs	r3, #13
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	e04c      	b.n	8005854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4a33      	ldr	r2, [pc, #204]	@ (800588c <USB_SetTurnaroundTime+0x128>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d306      	bcc.n	80057d0 <USB_SetTurnaroundTime+0x6c>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	4a32      	ldr	r2, [pc, #200]	@ (8005890 <USB_SetTurnaroundTime+0x12c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d802      	bhi.n	80057d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057ca:	230c      	movs	r3, #12
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e041      	b.n	8005854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005890 <USB_SetTurnaroundTime+0x12c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d906      	bls.n	80057e6 <USB_SetTurnaroundTime+0x82>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4a2e      	ldr	r2, [pc, #184]	@ (8005894 <USB_SetTurnaroundTime+0x130>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d802      	bhi.n	80057e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80057e0:	230b      	movs	r3, #11
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e036      	b.n	8005854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4a2a      	ldr	r2, [pc, #168]	@ (8005894 <USB_SetTurnaroundTime+0x130>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d906      	bls.n	80057fc <USB_SetTurnaroundTime+0x98>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4a29      	ldr	r2, [pc, #164]	@ (8005898 <USB_SetTurnaroundTime+0x134>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d802      	bhi.n	80057fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80057f6:	230a      	movs	r3, #10
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e02b      	b.n	8005854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4a26      	ldr	r2, [pc, #152]	@ (8005898 <USB_SetTurnaroundTime+0x134>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d906      	bls.n	8005812 <USB_SetTurnaroundTime+0xae>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4a25      	ldr	r2, [pc, #148]	@ (800589c <USB_SetTurnaroundTime+0x138>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d202      	bcs.n	8005812 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800580c:	2309      	movs	r3, #9
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e020      	b.n	8005854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4a21      	ldr	r2, [pc, #132]	@ (800589c <USB_SetTurnaroundTime+0x138>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d306      	bcc.n	8005828 <USB_SetTurnaroundTime+0xc4>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4a20      	ldr	r2, [pc, #128]	@ (80058a0 <USB_SetTurnaroundTime+0x13c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d802      	bhi.n	8005828 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005822:	2308      	movs	r3, #8
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	e015      	b.n	8005854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4a1d      	ldr	r2, [pc, #116]	@ (80058a0 <USB_SetTurnaroundTime+0x13c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d906      	bls.n	800583e <USB_SetTurnaroundTime+0xda>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4a1c      	ldr	r2, [pc, #112]	@ (80058a4 <USB_SetTurnaroundTime+0x140>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d202      	bcs.n	800583e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005838:	2307      	movs	r3, #7
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	e00a      	b.n	8005854 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800583e:	2306      	movs	r3, #6
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	e007      	b.n	8005854 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800584a:	2309      	movs	r3, #9
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	e001      	b.n	8005854 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005850:	2309      	movs	r3, #9
 8005852:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	029b      	lsls	r3, r3, #10
 8005868:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800586c:	431a      	orrs	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	00d8acbf 	.word	0x00d8acbf
 8005884:	00e4e1c0 	.word	0x00e4e1c0
 8005888:	00f42400 	.word	0x00f42400
 800588c:	01067380 	.word	0x01067380
 8005890:	011a499f 	.word	0x011a499f
 8005894:	01312cff 	.word	0x01312cff
 8005898:	014ca43f 	.word	0x014ca43f
 800589c:	016e3600 	.word	0x016e3600
 80058a0:	01a6ab1f 	.word	0x01a6ab1f
 80058a4:	01e84800 	.word	0x01e84800

080058a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f043 0201 	orr.w	r2, r3, #1
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f023 0201 	bic.w	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d115      	bne.n	800593a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800591a:	200a      	movs	r0, #10
 800591c:	f7fc ffc2 	bl	80028a4 <HAL_Delay>
      ms += 10U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	330a      	adds	r3, #10
 8005924:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 f93f 	bl	8006baa <USB_GetMode>
 800592c:	4603      	mov	r3, r0
 800592e:	2b01      	cmp	r3, #1
 8005930:	d01e      	beq.n	8005970 <USB_SetCurrentMode+0x84>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2bc7      	cmp	r3, #199	@ 0xc7
 8005936:	d9f0      	bls.n	800591a <USB_SetCurrentMode+0x2e>
 8005938:	e01a      	b.n	8005970 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d115      	bne.n	800596c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800594c:	200a      	movs	r0, #10
 800594e:	f7fc ffa9 	bl	80028a4 <HAL_Delay>
      ms += 10U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	330a      	adds	r3, #10
 8005956:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 f926 	bl	8006baa <USB_GetMode>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <USB_SetCurrentMode+0x84>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2bc7      	cmp	r3, #199	@ 0xc7
 8005968:	d9f0      	bls.n	800594c <USB_SetCurrentMode+0x60>
 800596a:	e001      	b.n	8005970 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e005      	b.n	800597c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2bc8      	cmp	r3, #200	@ 0xc8
 8005974:	d101      	bne.n	800597a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005984:	b084      	sub	sp, #16
 8005986:	b580      	push	{r7, lr}
 8005988:	b086      	sub	sp, #24
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800599e:	2300      	movs	r3, #0
 80059a0:	613b      	str	r3, [r7, #16]
 80059a2:	e009      	b.n	80059b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	3340      	adds	r3, #64	@ 0x40
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	2200      	movs	r2, #0
 80059b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	3301      	adds	r3, #1
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b0e      	cmp	r3, #14
 80059bc:	d9f2      	bls.n	80059a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d11c      	bne.n	8005a00 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059d4:	f043 0302 	orr.w	r3, r3, #2
 80059d8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80059fe:	e00b      	b.n	8005a18 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a04:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a10:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d10d      	bne.n	8005a48 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d104      	bne.n	8005a3e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a34:	2100      	movs	r1, #0
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f968 	bl	8005d0c <USB_SetDevSpeed>
 8005a3c:	e008      	b.n	8005a50 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a3e:	2101      	movs	r1, #1
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f963 	bl	8005d0c <USB_SetDevSpeed>
 8005a46:	e003      	b.n	8005a50 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a48:	2103      	movs	r1, #3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f95e 	bl	8005d0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a50:	2110      	movs	r1, #16
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f8fa 	bl	8005c4c <USB_FlushTxFifo>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f924 	bl	8005cb0 <USB_FlushRxFifo>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a78:	461a      	mov	r2, r3
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a84:	461a      	mov	r2, r3
 8005a86:	2300      	movs	r3, #0
 8005a88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a90:	461a      	mov	r2, r3
 8005a92:	2300      	movs	r3, #0
 8005a94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	e043      	b.n	8005b24 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ab2:	d118      	bne.n	8005ae6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	e013      	b.n	8005af8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005adc:	461a      	mov	r2, r3
 8005ade:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	e008      	b.n	8005af8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af2:	461a      	mov	r2, r3
 8005af4:	2300      	movs	r3, #0
 8005af6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b04:	461a      	mov	r2, r3
 8005b06:	2300      	movs	r3, #0
 8005b08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b16:	461a      	mov	r2, r3
 8005b18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	3301      	adds	r3, #1
 8005b22:	613b      	str	r3, [r7, #16]
 8005b24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b28:	461a      	mov	r2, r3
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d3b5      	bcc.n	8005a9c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	e043      	b.n	8005bbe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b4c:	d118      	bne.n	8005b80 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b60:	461a      	mov	r2, r3
 8005b62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	e013      	b.n	8005b92 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b76:	461a      	mov	r2, r3
 8005b78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	e008      	b.n	8005b92 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d3b5      	bcc.n	8005b36 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bdc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005bea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d105      	bne.n	8005c00 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	f043 0210 	orr.w	r2, r3, #16
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699a      	ldr	r2, [r3, #24]
 8005c04:	4b10      	ldr	r3, [pc, #64]	@ (8005c48 <USB_DevInit+0x2c4>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f043 0208 	orr.w	r2, r3, #8
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d107      	bne.n	8005c38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c30:	f043 0304 	orr.w	r3, r3, #4
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c44:	b004      	add	sp, #16
 8005c46:	4770      	bx	lr
 8005c48:	803c3800 	.word	0x803c3800

08005c4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c66:	d901      	bls.n	8005c6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e01b      	b.n	8005ca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	daf2      	bge.n	8005c5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	019b      	lsls	r3, r3, #6
 8005c7c:	f043 0220 	orr.w	r2, r3, #32
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c90:	d901      	bls.n	8005c96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e006      	b.n	8005ca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d0f0      	beq.n	8005c84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cc8:	d901      	bls.n	8005cce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e018      	b.n	8005d00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	daf2      	bge.n	8005cbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2210      	movs	r2, #16
 8005cde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cec:	d901      	bls.n	8005cf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e006      	b.n	8005d00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0310 	and.w	r3, r3, #16
 8005cfa:	2b10      	cmp	r3, #16
 8005cfc:	d0f0      	beq.n	8005ce0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	68f9      	ldr	r1, [r7, #12]
 8005d28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b087      	sub	sp, #28
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 0306 	and.w	r3, r3, #6
 8005d56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d102      	bne.n	8005d64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	75fb      	strb	r3, [r7, #23]
 8005d62:	e00a      	b.n	8005d7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d002      	beq.n	8005d70 <USB_GetDevSpeed+0x32>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b06      	cmp	r3, #6
 8005d6e:	d102      	bne.n	8005d76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d70:	2302      	movs	r3, #2
 8005d72:	75fb      	strb	r3, [r7, #23]
 8005d74:	e001      	b.n	8005d7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d76:	230f      	movs	r3, #15
 8005d78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	371c      	adds	r7, #28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d13a      	bne.n	8005e1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	f003 030f 	and.w	r3, r3, #15
 8005db4:	2101      	movs	r1, #1
 8005db6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	68f9      	ldr	r1, [r7, #12]
 8005dbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d155      	bne.n	8005e88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	791b      	ldrb	r3, [r3, #4]
 8005df6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005df8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	059b      	lsls	r3, r3, #22
 8005dfe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e00:	4313      	orrs	r3, r2
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	0151      	lsls	r1, r2, #5
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	e036      	b.n	8005e88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e20:	69da      	ldr	r2, [r3, #28]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e30:	041b      	lsls	r3, r3, #16
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d11a      	bne.n	8005e88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	791b      	ldrb	r3, [r3, #4]
 8005e6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e6e:	430b      	orrs	r3, r1
 8005e70:	4313      	orrs	r3, r2
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
	...

08005e98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d161      	bne.n	8005f78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005eca:	d11f      	bne.n	8005f0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ee6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005eea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	43db      	mvns	r3, r3
 8005f26:	68f9      	ldr	r1, [r7, #12]
 8005f28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	2101      	movs	r1, #1
 8005f42:	fa01 f303 	lsl.w	r3, r1, r3
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f50:	4013      	ands	r3, r2
 8005f52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	0159      	lsls	r1, r3, #5
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	440b      	add	r3, r1
 8005f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4b35      	ldr	r3, [pc, #212]	@ (8006048 <USB_DeactivateEndpoint+0x1b0>)
 8005f72:	4013      	ands	r3, r2
 8005f74:	600b      	str	r3, [r1, #0]
 8005f76:	e060      	b.n	800603a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f8e:	d11f      	bne.n	8005fd0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005faa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe6:	041b      	lsls	r3, r3, #16
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	68f9      	ldr	r1, [r7, #12]
 8005fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ffa:	69da      	ldr	r2, [r3, #28]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	2101      	movs	r1, #1
 8006006:	fa01 f303 	lsl.w	r3, r1, r3
 800600a:	041b      	lsls	r3, r3, #16
 800600c:	43db      	mvns	r3, r3
 800600e:	68f9      	ldr	r1, [r7, #12]
 8006010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006014:	4013      	ands	r3, r2
 8006016:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	0159      	lsls	r1, r3, #5
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	440b      	add	r3, r1
 800602e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006032:	4619      	mov	r1, r3
 8006034:	4b05      	ldr	r3, [pc, #20]	@ (800604c <USB_DeactivateEndpoint+0x1b4>)
 8006036:	4013      	ands	r3, r2
 8006038:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	ec337800 	.word	0xec337800
 800604c:	eff37800 	.word	0xeff37800

08006050 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08a      	sub	sp, #40	@ 0x28
 8006054:	af02      	add	r7, sp, #8
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	785b      	ldrb	r3, [r3, #1]
 800606c:	2b01      	cmp	r3, #1
 800606e:	f040 817f 	bne.w	8006370 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d132      	bne.n	80060e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006094:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006098:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800609c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060d8:	0cdb      	lsrs	r3, r3, #19
 80060da:	04db      	lsls	r3, r3, #19
 80060dc:	6113      	str	r3, [r2, #16]
 80060de:	e097      	b.n	8006210 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060fa:	0cdb      	lsrs	r3, r3, #19
 80060fc:	04db      	lsls	r3, r3, #19
 80060fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	69fa      	ldr	r2, [r7, #28]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800611a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800611e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006122:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d11a      	bne.n	8006160 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	691a      	ldr	r2, [r3, #16]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	429a      	cmp	r2, r3
 8006134:	d903      	bls.n	800613e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	0151      	lsls	r1, r2, #5
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	440a      	add	r2, r1
 8006154:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006158:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800615c:	6113      	str	r3, [r2, #16]
 800615e:	e044      	b.n	80061ea <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	4413      	add	r3, r2
 800616a:	1e5a      	subs	r2, r3, #1
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	fbb2 f3f3 	udiv	r3, r2, r3
 8006174:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	8afb      	ldrh	r3, [r7, #22]
 8006186:	04d9      	lsls	r1, r3, #19
 8006188:	4ba4      	ldr	r3, [pc, #656]	@ (800641c <USB_EPStartXfer+0x3cc>)
 800618a:	400b      	ands	r3, r1
 800618c:	69b9      	ldr	r1, [r7, #24]
 800618e:	0148      	lsls	r0, r1, #5
 8006190:	69f9      	ldr	r1, [r7, #28]
 8006192:	4401      	add	r1, r0
 8006194:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006198:	4313      	orrs	r3, r2
 800619a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	791b      	ldrb	r3, [r3, #4]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d122      	bne.n	80061ea <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	0151      	lsls	r1, r2, #5
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	440a      	add	r2, r1
 80061ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061be:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80061c2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	8afb      	ldrh	r3, [r7, #22]
 80061d4:	075b      	lsls	r3, r3, #29
 80061d6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80061da:	69b9      	ldr	r1, [r7, #24]
 80061dc:	0148      	lsls	r0, r1, #5
 80061de:	69f9      	ldr	r1, [r7, #28]
 80061e0:	4401      	add	r1, r0
 80061e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061e6:	4313      	orrs	r3, r2
 80061e8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f6:	691a      	ldr	r2, [r3, #16]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006200:	69b9      	ldr	r1, [r7, #24]
 8006202:	0148      	lsls	r0, r1, #5
 8006204:	69f9      	ldr	r1, [r7, #28]
 8006206:	4401      	add	r1, r0
 8006208:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800620c:	4313      	orrs	r3, r2
 800620e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d14b      	bne.n	80062ae <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800622a:	461a      	mov	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	791b      	ldrb	r3, [r3, #4]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d128      	bne.n	800628c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d110      	bne.n	800626c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006264:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	e00f      	b.n	800628c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800628a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	e166      	b.n	800657c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	0151      	lsls	r1, r2, #5
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	440a      	add	r2, r1
 80062c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062cc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	791b      	ldrb	r3, [r3, #4]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d015      	beq.n	8006302 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 814e 	beq.w	800657c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	2101      	movs	r1, #1
 80062f2:	fa01 f303 	lsl.w	r3, r1, r3
 80062f6:	69f9      	ldr	r1, [r7, #28]
 80062f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062fc:	4313      	orrs	r3, r2
 80062fe:	634b      	str	r3, [r1, #52]	@ 0x34
 8006300:	e13c      	b.n	800657c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800630e:	2b00      	cmp	r3, #0
 8006310:	d110      	bne.n	8006334 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800632c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	e00f      	b.n	8006354 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	440a      	add	r2, r1
 800634a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800634e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006352:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	68d9      	ldr	r1, [r3, #12]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	781a      	ldrb	r2, [r3, #0]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	b298      	uxth	r0, r3
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	4603      	mov	r3, r0
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f9b9 	bl	80066e0 <USB_WritePacket>
 800636e:	e105      	b.n	800657c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	440a      	add	r2, r1
 8006386:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800638a:	0cdb      	lsrs	r3, r3, #19
 800638c:	04db      	lsls	r3, r3, #19
 800638e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	0151      	lsls	r1, r2, #5
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	440a      	add	r2, r1
 80063a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80063ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80063b2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d132      	bne.n	8006420 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063e8:	69b9      	ldr	r1, [r7, #24]
 80063ea:	0148      	lsls	r0, r1, #5
 80063ec:	69f9      	ldr	r1, [r7, #28]
 80063ee:	4401      	add	r1, r0
 80063f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063f4:	4313      	orrs	r3, r2
 80063f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	440a      	add	r2, r1
 800640e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006412:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006416:	6113      	str	r3, [r2, #16]
 8006418:	e062      	b.n	80064e0 <USB_EPStartXfer+0x490>
 800641a:	bf00      	nop
 800641c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d123      	bne.n	8006470 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006434:	691a      	ldr	r2, [r3, #16]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800643e:	69b9      	ldr	r1, [r7, #24]
 8006440:	0148      	lsls	r0, r1, #5
 8006442:	69f9      	ldr	r1, [r7, #28]
 8006444:	4401      	add	r1, r0
 8006446:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800644a:	4313      	orrs	r3, r2
 800644c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006468:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800646c:	6113      	str	r3, [r2, #16]
 800646e:	e037      	b.n	80064e0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	4413      	add	r3, r2
 800647a:	1e5a      	subs	r2, r3, #1
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	8afa      	ldrh	r2, [r7, #22]
 800648c:	fb03 f202 	mul.w	r2, r3, r2
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	8afb      	ldrh	r3, [r7, #22]
 80064a4:	04d9      	lsls	r1, r3, #19
 80064a6:	4b38      	ldr	r3, [pc, #224]	@ (8006588 <USB_EPStartXfer+0x538>)
 80064a8:	400b      	ands	r3, r1
 80064aa:	69b9      	ldr	r1, [r7, #24]
 80064ac:	0148      	lsls	r0, r1, #5
 80064ae:	69f9      	ldr	r1, [r7, #28]
 80064b0:	4401      	add	r1, r0
 80064b2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064b6:	4313      	orrs	r3, r2
 80064b8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c6:	691a      	ldr	r2, [r3, #16]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d0:	69b9      	ldr	r1, [r7, #24]
 80064d2:	0148      	lsls	r0, r1, #5
 80064d4:	69f9      	ldr	r1, [r7, #28]
 80064d6:	4401      	add	r1, r0
 80064d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064dc:	4313      	orrs	r3, r2
 80064de:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d10d      	bne.n	8006502 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d009      	beq.n	8006502 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	68d9      	ldr	r1, [r3, #12]
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064fe:	460a      	mov	r2, r1
 8006500:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	791b      	ldrb	r3, [r3, #4]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d128      	bne.n	800655c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006516:	2b00      	cmp	r3, #0
 8006518:	d110      	bne.n	800653c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	440a      	add	r2, r1
 8006530:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006534:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	e00f      	b.n	800655c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	69fa      	ldr	r2, [r7, #28]
 8006550:	440a      	add	r2, r1
 8006552:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800655a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	440a      	add	r2, r1
 8006572:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006576:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800657a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3720      	adds	r7, #32
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	1ff80000 	.word	0x1ff80000

0800658c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	785b      	ldrb	r3, [r3, #1]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d14a      	bne.n	8006640 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065c2:	f040 8086 	bne.w	80066d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	7812      	ldrb	r2, [r2, #0]
 80065da:	0151      	lsls	r1, r2, #5
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	440a      	add	r2, r1
 80065e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	7812      	ldrb	r2, [r2, #0]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	440a      	add	r2, r1
 8006604:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006608:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800660c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3301      	adds	r3, #1
 8006612:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f242 7210 	movw	r2, #10000	@ 0x2710
 800661a:	4293      	cmp	r3, r2
 800661c:	d902      	bls.n	8006624 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	75fb      	strb	r3, [r7, #23]
          break;
 8006622:	e056      	b.n	80066d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006638:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800663c:	d0e7      	beq.n	800660e <USB_EPStopXfer+0x82>
 800663e:	e048      	b.n	80066d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006654:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006658:	d13b      	bne.n	80066d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	7812      	ldrb	r2, [r2, #0]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	440a      	add	r2, r1
 8006674:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006678:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800667c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	7812      	ldrb	r2, [r2, #0]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800669c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d902      	bls.n	80066b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
          break;
 80066b6:	e00c      	b.n	80066d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066d0:	d0e7      	beq.n	80066a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b089      	sub	sp, #36	@ 0x24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	4611      	mov	r1, r2
 80066ec:	461a      	mov	r2, r3
 80066ee:	460b      	mov	r3, r1
 80066f0:	71fb      	strb	r3, [r7, #7]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006702:	2b00      	cmp	r3, #0
 8006704:	d123      	bne.n	800674e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006706:	88bb      	ldrh	r3, [r7, #4]
 8006708:	3303      	adds	r3, #3
 800670a:	089b      	lsrs	r3, r3, #2
 800670c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800670e:	2300      	movs	r3, #0
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	e018      	b.n	8006746 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	031a      	lsls	r2, r3, #12
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	4413      	add	r3, r2
 800671c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006720:	461a      	mov	r2, r3
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	3301      	adds	r3, #1
 800672c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	3301      	adds	r3, #1
 8006732:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	3301      	adds	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	3301      	adds	r3, #1
 800673e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	3301      	adds	r3, #1
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	429a      	cmp	r2, r3
 800674c:	d3e2      	bcc.n	8006714 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3724      	adds	r7, #36	@ 0x24
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800675c:	b480      	push	{r7}
 800675e:	b08b      	sub	sp, #44	@ 0x2c
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	089b      	lsrs	r3, r3, #2
 8006776:	b29b      	uxth	r3, r3
 8006778:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	f003 0303 	and.w	r3, r3, #3
 8006780:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006782:	2300      	movs	r3, #0
 8006784:	623b      	str	r3, [r7, #32]
 8006786:	e014      	b.n	80067b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	601a      	str	r2, [r3, #0]
    pDest++;
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	3301      	adds	r3, #1
 8006798:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	3301      	adds	r3, #1
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	3301      	adds	r3, #1
 80067a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	3301      	adds	r3, #1
 80067aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	3301      	adds	r3, #1
 80067b0:	623b      	str	r3, [r7, #32]
 80067b2:	6a3a      	ldr	r2, [r7, #32]
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d3e6      	bcc.n	8006788 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067ba:	8bfb      	ldrh	r3, [r7, #30]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01e      	beq.n	80067fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ca:	461a      	mov	r2, r3
 80067cc:	f107 0310 	add.w	r3, r7, #16
 80067d0:	6812      	ldr	r2, [r2, #0]
 80067d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e4:	701a      	strb	r2, [r3, #0]
      i++;
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	3301      	adds	r3, #1
 80067ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80067ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ee:	3301      	adds	r3, #1
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80067f2:	8bfb      	ldrh	r3, [r7, #30]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067f8:	8bfb      	ldrh	r3, [r7, #30]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1ea      	bne.n	80067d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006800:	4618      	mov	r0, r3
 8006802:	372c      	adds	r7, #44	@ 0x2c
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d12c      	bne.n	8006882 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	db12      	blt.n	8006860 <USB_EPSetStall+0x54>
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00f      	beq.n	8006860 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	0151      	lsls	r1, r2, #5
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	440a      	add	r2, r1
 8006856:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800685a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800685e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	0151      	lsls	r1, r2, #5
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	440a      	add	r2, r1
 8006876:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800687a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	e02b      	b.n	80068da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	db12      	blt.n	80068ba <USB_EPSetStall+0xae>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00f      	beq.n	80068ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	785b      	ldrb	r3, [r3, #1]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d128      	bne.n	8006956 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	0151      	lsls	r1, r2, #5
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	440a      	add	r2, r1
 800691a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800691e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006922:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	791b      	ldrb	r3, [r3, #4]
 8006928:	2b03      	cmp	r3, #3
 800692a:	d003      	beq.n	8006934 <USB_EPClearStall+0x4c>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	791b      	ldrb	r3, [r3, #4]
 8006930:	2b02      	cmp	r3, #2
 8006932:	d138      	bne.n	80069a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	440a      	add	r2, r1
 800694a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800694e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	e027      	b.n	80069a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	440a      	add	r2, r1
 800696c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006970:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006974:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	791b      	ldrb	r3, [r3, #4]
 800697a:	2b03      	cmp	r3, #3
 800697c:	d003      	beq.n	8006986 <USB_EPClearStall+0x9e>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	791b      	ldrb	r3, [r3, #4]
 8006982:	2b02      	cmp	r3, #2
 8006984:	d10f      	bne.n	80069a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	0151      	lsls	r1, r2, #5
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	440a      	add	r2, r1
 800699c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80069d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80069e8:	68f9      	ldr	r1, [r7, #12]
 80069ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069ee:	4313      	orrs	r3, r2
 80069f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a1a:	f023 0303 	bic.w	r3, r3, #3
 8006a1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a2e:	f023 0302 	bic.w	r3, r3, #2
 8006a32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b085      	sub	sp, #20
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a5c:	f023 0303 	bic.w	r3, r3, #3
 8006a60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a70:	f043 0302 	orr.w	r3, r3, #2
 8006a74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	4013      	ands	r3, r2
 8006acc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	0c1b      	lsrs	r3, r3, #16
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	4013      	ands	r3, r2
 8006b00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	b29b      	uxth	r3, r3
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b085      	sub	sp, #20
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b40:	68bb      	ldr	r3, [r7, #8]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b087      	sub	sp, #28
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	460b      	mov	r3, r1
 8006b58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b72:	78fb      	ldrb	r3, [r7, #3]
 8006b74:	f003 030f 	and.w	r3, r3, #15
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7e:	01db      	lsls	r3, r3, #7
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b085      	sub	sp, #20
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006be0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006be4:	f023 0307 	bic.w	r3, r3, #7
 8006be8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	460b      	mov	r3, r1
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	333c      	adds	r3, #60	@ 0x3c
 8006c22:	3304      	adds	r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	4a26      	ldr	r2, [pc, #152]	@ (8006cc4 <USB_EP0_OutStart+0xb8>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d90a      	bls.n	8006c46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c40:	d101      	bne.n	8006c46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	e037      	b.n	8006cb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	2300      	movs	r3, #0
 8006c50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c74:	f043 0318 	orr.w	r3, r3, #24
 8006c78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c88:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006c8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c8e:	7afb      	ldrb	r3, [r7, #11]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d10f      	bne.n	8006cb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006cb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	4f54300a 	.word	0x4f54300a

08006cc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ce0:	d901      	bls.n	8006ce6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e01b      	b.n	8006d1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	daf2      	bge.n	8006cd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f043 0201 	orr.w	r2, r3, #1
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3301      	adds	r3, #1
 8006d02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d0a:	d901      	bls.n	8006d10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e006      	b.n	8006d1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d0f0      	beq.n	8006cfe <USB_CoreReset+0x36>

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006d38:	2054      	movs	r0, #84	@ 0x54
 8006d3a:	f002 fb11 	bl	8009360 <USBD_static_malloc>
 8006d3e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	32b0      	adds	r2, #176	@ 0xb0
 8006d50:	2100      	movs	r1, #0
 8006d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d56:	2302      	movs	r3, #2
 8006d58:	e08b      	b.n	8006e72 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	32b0      	adds	r2, #176	@ 0xb0
 8006d64:	68f9      	ldr	r1, [r7, #12]
 8006d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	32b0      	adds	r2, #176	@ 0xb0
 8006d74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	7c1b      	ldrb	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d11b      	bne.n	8006dbe <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006d86:	4b3d      	ldr	r3, [pc, #244]	@ (8006e7c <USBD_CUSTOM_HID_Init+0x150>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	f003 020f 	and.w	r2, r3, #15
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	3326      	adds	r3, #38	@ 0x26
 8006d9c:	2205      	movs	r2, #5
 8006d9e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006da0:	4b37      	ldr	r3, [pc, #220]	@ (8006e80 <USBD_CUSTOM_HID_Init+0x154>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f003 020f 	and.w	r2, r3, #15
 8006da8:	6879      	ldr	r1, [r7, #4]
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	440b      	add	r3, r1
 8006db4:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006db8:	2205      	movs	r2, #5
 8006dba:	801a      	strh	r2, [r3, #0]
 8006dbc:	e01a      	b.n	8006df4 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8006e7c <USBD_CUSTOM_HID_Init+0x150>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	f003 020f 	and.w	r2, r3, #15
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	3326      	adds	r3, #38	@ 0x26
 8006dd4:	2205      	movs	r2, #5
 8006dd6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006dd8:	4b29      	ldr	r3, [pc, #164]	@ (8006e80 <USBD_CUSTOM_HID_Init+0x154>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f003 020f 	and.w	r2, r3, #15
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006df0:	2205      	movs	r2, #5
 8006df2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006df4:	4b21      	ldr	r3, [pc, #132]	@ (8006e7c <USBD_CUSTOM_HID_Init+0x150>)
 8006df6:	7819      	ldrb	r1, [r3, #0]
 8006df8:	2302      	movs	r3, #2
 8006dfa:	2203      	movs	r2, #3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f002 f99e 	bl	800913e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006e02:	4b1e      	ldr	r3, [pc, #120]	@ (8006e7c <USBD_CUSTOM_HID_Init+0x150>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	f003 020f 	and.w	r2, r3, #15
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	3324      	adds	r3, #36	@ 0x24
 8006e18:	2201      	movs	r2, #1
 8006e1a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006e1c:	4b18      	ldr	r3, [pc, #96]	@ (8006e80 <USBD_CUSTOM_HID_Init+0x154>)
 8006e1e:	7819      	ldrb	r1, [r3, #0]
 8006e20:	2302      	movs	r3, #2
 8006e22:	2203      	movs	r2, #3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f002 f98a 	bl	800913e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006e2a:	4b15      	ldr	r3, [pc, #84]	@ (8006e80 <USBD_CUSTOM_HID_Init+0x154>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	f003 020f 	and.w	r2, r3, #15
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e42:	2201      	movs	r2, #1
 8006e44:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	33b0      	adds	r3, #176	@ 0xb0
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006e62:	4b07      	ldr	r3, [pc, #28]	@ (8006e80 <USBD_CUSTOM_HID_Init+0x154>)
 8006e64:	7819      	ldrb	r1, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	2340      	movs	r3, #64	@ 0x40
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f002 fa56 	bl	800931c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000086 	.word	0x20000086
 8006e80:	20000087 	.word	0x20000087

08006e84 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006e90:	4b37      	ldr	r3, [pc, #220]	@ (8006f70 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f002 f977 	bl	800918a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006e9c:	4b34      	ldr	r3, [pc, #208]	@ (8006f70 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f003 020f 	and.w	r2, r3, #15
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	440b      	add	r3, r1
 8006eb0:	3324      	adds	r3, #36	@ 0x24
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8006f70 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	f003 020f 	and.w	r2, r3, #15
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	3326      	adds	r3, #38	@ 0x26
 8006ecc:	2200      	movs	r2, #0
 8006ece:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006ed0:	4b28      	ldr	r3, [pc, #160]	@ (8006f74 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f002 f957 	bl	800918a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006edc:	4b25      	ldr	r3, [pc, #148]	@ (8006f74 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	f003 020f 	and.w	r2, r3, #15
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8006f74 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	f003 020f 	and.w	r2, r3, #15
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006f10:	2200      	movs	r2, #0
 8006f12:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32b0      	adds	r2, #176	@ 0xb0
 8006f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d01f      	beq.n	8006f66 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	33b0      	adds	r3, #176	@ 0xb0
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	32b0      	adds	r2, #176	@ 0xb0
 8006f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f002 fa17 	bl	800937c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	32b0      	adds	r2, #176	@ 0xb0
 8006f58:	2100      	movs	r1, #0
 8006f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20000086 	.word	0x20000086
 8006f74:	20000087 	.word	0x20000087

08006f78 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	32b0      	adds	r2, #176	@ 0xb0
 8006f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f90:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e102      	b.n	80071b2 <USBD_CUSTOM_HID_Setup+0x23a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d056      	beq.n	8007066 <USBD_CUSTOM_HID_Setup+0xee>
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	f040 80f2 	bne.w	80071a2 <USBD_CUSTOM_HID_Setup+0x22a>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	785b      	ldrb	r3, [r3, #1]
 8006fc2:	3b02      	subs	r3, #2
 8006fc4:	2b09      	cmp	r3, #9
 8006fc6:	d846      	bhi.n	8007056 <USBD_CUSTOM_HID_Setup+0xde>
 8006fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <USBD_CUSTOM_HID_Setup+0x58>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	08007029 	.word	0x08007029
 8006fd4:	08007007 	.word	0x08007007
 8006fd8:	08007057 	.word	0x08007057
 8006fdc:	08007057 	.word	0x08007057
 8006fe0:	08007057 	.word	0x08007057
 8006fe4:	08007057 	.word	0x08007057
 8006fe8:	08007057 	.word	0x08007057
 8006fec:	08007039 	.word	0x08007039
 8006ff0:	08007017 	.word	0x08007017
 8006ff4:	08006ff9 	.word	0x08006ff9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	885b      	ldrh	r3, [r3, #2]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8007004:	e02e      	b.n	8007064 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	3340      	adds	r3, #64	@ 0x40
 800700a:	2201      	movs	r2, #1
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 fcaa 	bl	8008968 <USBD_CtlSendData>
          break;
 8007014:	e026      	b.n	8007064 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	885b      	ldrh	r3, [r3, #2]
 800701a:	0a1b      	lsrs	r3, r3, #8
 800701c:	b29b      	uxth	r3, r3
 800701e:	b2db      	uxtb	r3, r3
 8007020:	461a      	mov	r2, r3
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8007026:	e01d      	b.n	8007064 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	3344      	adds	r3, #68	@ 0x44
 800702c:	2201      	movs	r2, #1
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 fc99 	bl	8008968 <USBD_CtlSendData>
          break;
 8007036:	e015      	b.n	8007064 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	2201      	movs	r2, #1
 800703c:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800703e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	88db      	ldrh	r3, [r3, #6]
 8007044:	2b40      	cmp	r3, #64	@ 0x40
 8007046:	bf28      	it	cs
 8007048:	2340      	movcs	r3, #64	@ 0x40
 800704a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800704c:	461a      	mov	r2, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 fcb6 	bl	80089c0 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8007054:	e006      	b.n	8007064 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 fc08 	bl	800886e <USBD_CtlError>
          ret = USBD_FAIL;
 800705e:	2303      	movs	r3, #3
 8007060:	75fb      	strb	r3, [r7, #23]
          break;
 8007062:	bf00      	nop
      }
      break;
 8007064:	e0a4      	b.n	80071b0 <USBD_CUSTOM_HID_Setup+0x238>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	785b      	ldrb	r3, [r3, #1]
 800706a:	2b0b      	cmp	r3, #11
 800706c:	f200 8090 	bhi.w	8007190 <USBD_CUSTOM_HID_Setup+0x218>
 8007070:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <USBD_CUSTOM_HID_Setup+0x100>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	080070a9 	.word	0x080070a9
 800707c:	0800719f 	.word	0x0800719f
 8007080:	08007191 	.word	0x08007191
 8007084:	08007191 	.word	0x08007191
 8007088:	08007191 	.word	0x08007191
 800708c:	08007191 	.word	0x08007191
 8007090:	080070d3 	.word	0x080070d3
 8007094:	08007191 	.word	0x08007191
 8007098:	08007191 	.word	0x08007191
 800709c:	08007191 	.word	0x08007191
 80070a0:	0800713f 	.word	0x0800713f
 80070a4:	08007169 	.word	0x08007169
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d107      	bne.n	80070c4 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80070b4:	f107 030e 	add.w	r3, r7, #14
 80070b8:	2202      	movs	r2, #2
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 fc53 	bl	8008968 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070c2:	e06d      	b.n	80071a0 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f001 fbd1 	bl	800886e <USBD_CtlError>
            ret = USBD_FAIL;
 80070cc:	2303      	movs	r3, #3
 80070ce:	75fb      	strb	r3, [r7, #23]
          break;
 80070d0:	e066      	b.n	80071a0 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	885b      	ldrh	r3, [r3, #2]
 80070d6:	0a1b      	lsrs	r3, r3, #8
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b22      	cmp	r3, #34	@ 0x22
 80070dc:	d110      	bne.n	8007100 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	88db      	ldrh	r3, [r3, #6]
 80070e2:	2b21      	cmp	r3, #33	@ 0x21
 80070e4:	bf28      	it	cs
 80070e6:	2321      	movcs	r3, #33	@ 0x21
 80070e8:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	33b0      	adds	r3, #176	@ 0xb0
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	e00d      	b.n	800711c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	885b      	ldrh	r3, [r3, #2]
 8007104:	0a1b      	lsrs	r3, r3, #8
 8007106:	b29b      	uxth	r3, r3
 8007108:	2b21      	cmp	r3, #33	@ 0x21
 800710a:	d107      	bne.n	800711c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800710c:	4b2b      	ldr	r3, [pc, #172]	@ (80071bc <USBD_CUSTOM_HID_Setup+0x244>)
 800710e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	88db      	ldrh	r3, [r3, #6]
 8007114:	2b09      	cmp	r3, #9
 8007116:	bf28      	it	cs
 8007118:	2309      	movcs	r3, #9
 800711a:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d006      	beq.n	8007130 <USBD_CUSTOM_HID_Setup+0x1b8>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8007122:	8bfb      	ldrh	r3, [r7, #30]
 8007124:	461a      	mov	r2, r3
 8007126:	69b9      	ldr	r1, [r7, #24]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 fc1d 	bl	8008968 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800712e:	e037      	b.n	80071a0 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 fb9b 	bl	800886e <USBD_CtlError>
            ret = USBD_FAIL;
 8007138:	2303      	movs	r3, #3
 800713a:	75fb      	strb	r3, [r7, #23]
          break;
 800713c:	e030      	b.n	80071a0 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b03      	cmp	r3, #3
 8007148:	d107      	bne.n	800715a <USBD_CUSTOM_HID_Setup+0x1e2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	3348      	adds	r3, #72	@ 0x48
 800714e:	2201      	movs	r2, #1
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 fc08 	bl	8008968 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007158:	e022      	b.n	80071a0 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f001 fb86 	bl	800886e <USBD_CtlError>
            ret = USBD_FAIL;
 8007162:	2303      	movs	r3, #3
 8007164:	75fb      	strb	r3, [r7, #23]
          break;
 8007166:	e01b      	b.n	80071a0 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b03      	cmp	r3, #3
 8007172:	d106      	bne.n	8007182 <USBD_CUSTOM_HID_Setup+0x20a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	885b      	ldrh	r3, [r3, #2]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007180:	e00e      	b.n	80071a0 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 fb72 	bl	800886e <USBD_CtlError>
            ret = USBD_FAIL;
 800718a:	2303      	movs	r3, #3
 800718c:	75fb      	strb	r3, [r7, #23]
          break;
 800718e:	e007      	b.n	80071a0 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 fb6b 	bl	800886e <USBD_CtlError>
          ret = USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	75fb      	strb	r3, [r7, #23]
          break;
 800719c:	e000      	b.n	80071a0 <USBD_CUSTOM_HID_Setup+0x228>
          break;
 800719e:	bf00      	nop
      }
      break;
 80071a0:	e006      	b.n	80071b0 <USBD_CUSTOM_HID_Setup+0x238>

    default:
      USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fb62 	bl	800886e <USBD_CtlError>
      ret = USBD_FAIL;
 80071aa:	2303      	movs	r3, #3
 80071ac:	75fb      	strb	r3, [r7, #23]
      break;
 80071ae:	bf00      	nop
  }
  return (uint8_t)ret;
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20000070 	.word	0x20000070

080071c0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80071c8:	2181      	movs	r1, #129	@ 0x81
 80071ca:	4815      	ldr	r0, [pc, #84]	@ (8007220 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80071cc:	f000 fd19 	bl	8007c02 <USBD_GetEpDesc>
 80071d0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80071d2:	2101      	movs	r1, #1
 80071d4:	4812      	ldr	r0, [pc, #72]	@ (8007220 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80071d6:	f000 fd14 	bl	8007c02 <USBD_GetEpDesc>
 80071da:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d009      	beq.n	80071f6 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f042 0202 	orr.w	r2, r2, #2
 80071ea:	711a      	strb	r2, [r3, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2205      	movs	r2, #5
 80071f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2200      	movs	r2, #0
 8007200:	f042 0202 	orr.w	r2, r2, #2
 8007204:	711a      	strb	r2, [r3, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2205      	movs	r2, #5
 800720e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2229      	movs	r2, #41	@ 0x29
 8007214:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007216:	4b02      	ldr	r3, [pc, #8]	@ (8007220 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20000044 	.word	0x20000044

08007224 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800722c:	2181      	movs	r1, #129	@ 0x81
 800722e:	4815      	ldr	r0, [pc, #84]	@ (8007284 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007230:	f000 fce7 	bl	8007c02 <USBD_GetEpDesc>
 8007234:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007236:	2101      	movs	r1, #1
 8007238:	4812      	ldr	r0, [pc, #72]	@ (8007284 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800723a:	f000 fce2 	bl	8007c02 <USBD_GetEpDesc>
 800723e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d009      	beq.n	800725a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f042 0202 	orr.w	r2, r2, #2
 800724e:	711a      	strb	r2, [r3, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2205      	movs	r2, #5
 8007258:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d009      	beq.n	8007274 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2200      	movs	r2, #0
 8007264:	f042 0202 	orr.w	r2, r2, #2
 8007268:	711a      	strb	r2, [r3, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2205      	movs	r2, #5
 8007272:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2229      	movs	r2, #41	@ 0x29
 8007278:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800727a:	4b02      	ldr	r3, [pc, #8]	@ (8007284 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20000044 	.word	0x20000044

08007288 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007290:	2181      	movs	r1, #129	@ 0x81
 8007292:	4815      	ldr	r0, [pc, #84]	@ (80072e8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8007294:	f000 fcb5 	bl	8007c02 <USBD_GetEpDesc>
 8007298:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800729a:	2101      	movs	r1, #1
 800729c:	4812      	ldr	r0, [pc, #72]	@ (80072e8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800729e:	f000 fcb0 	bl	8007c02 <USBD_GetEpDesc>
 80072a2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f042 0202 	orr.w	r2, r2, #2
 80072b2:	711a      	strb	r2, [r3, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2205      	movs	r2, #5
 80072bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d009      	beq.n	80072d8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f042 0202 	orr.w	r2, r2, #2
 80072cc:	711a      	strb	r2, [r3, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2205      	movs	r2, #5
 80072d6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2229      	movs	r2, #41	@ 0x29
 80072dc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80072de:	4b02      	ldr	r3, [pc, #8]	@ (80072e8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	20000044 	.word	0x20000044

080072ec <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	32b0      	adds	r2, #176	@ 0xb0
 8007302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	460b      	mov	r3, r1
 8007324:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	32b0      	adds	r2, #176	@ 0xb0
 8007330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007338:	2303      	movs	r3, #3
 800733a:	e014      	b.n	8007366 <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	32b0      	adds	r2, #176	@ 0xb0
 8007346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734a:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	33b0      	adds	r3, #176	@ 0xb0
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4610      	mov	r0, r2
 8007362:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	32b0      	adds	r2, #176	@ 0xb0
 8007382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800738a:	2303      	movs	r3, #3
 800738c:	e00f      	b.n	80073ae <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	32b0      	adds	r2, #176	@ 0xb0
 8007398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800739e:	4b06      	ldr	r3, [pc, #24]	@ (80073b8 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80073a0:	7819      	ldrb	r1, [r3, #0]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	2340      	movs	r3, #64	@ 0x40
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 ffb8 	bl	800931c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000087 	.word	0x20000087

080073bc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	32b0      	adds	r2, #176	@ 0xb0
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073da:	2303      	movs	r3, #3
 80073dc:	e013      	b.n	8007406 <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d10e      	bne.n	8007404 <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	33b0      	adds	r3, #176	@ 0xb0
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4610      	mov	r0, r2
 80073fc:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	220a      	movs	r2, #10
 800741c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800741e:	4b03      	ldr	r3, [pc, #12]	@ (800742c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007420:	4618      	mov	r0, r3
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	2000007c 	.word	0x2000007c

08007430 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007440:	2303      	movs	r3, #3
 8007442:	e009      	b.n	8007458 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	33b0      	adds	r3, #176	@ 0xb0
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007478:	2303      	movs	r3, #3
 800747a:	e01f      	b.n	80074bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	79fa      	ldrb	r2, [r7, #7]
 80074ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f001 fddd 	bl	8009070 <USBD_LL_Init>
 80074b6:	4603      	mov	r3, r0
 80074b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074d8:	2303      	movs	r3, #3
 80074da:	e025      	b.n	8007528 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	32ae      	adds	r2, #174	@ 0xae
 80074ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00f      	beq.n	8007518 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	32ae      	adds	r2, #174	@ 0xae
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007508:	f107 020e 	add.w	r2, r7, #14
 800750c:	4610      	mov	r0, r2
 800750e:	4798      	blx	r3
 8007510:	4602      	mov	r2, r0
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 fde5 	bl	8009108 <USBD_LL_Start>
 800753e:	4603      	mov	r3, r0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007550:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007552:	4618      	mov	r0, r3
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	460b      	mov	r3, r1
 8007568:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007574:	2b00      	cmp	r3, #0
 8007576:	d009      	beq.n	800758c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	4611      	mov	r1, r2
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	78fa      	ldrb	r2, [r7, #3]
 80075b0:	4611      	mov	r1, r2
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	4798      	blx	r3
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80075bc:	2303      	movs	r3, #3
 80075be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	4618      	mov	r0, r3
 80075de:	f001 f90c 	bl	80087fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80075f0:	461a      	mov	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80075fe:	f003 031f 	and.w	r3, r3, #31
 8007602:	2b02      	cmp	r3, #2
 8007604:	d01a      	beq.n	800763c <USBD_LL_SetupStage+0x72>
 8007606:	2b02      	cmp	r3, #2
 8007608:	d822      	bhi.n	8007650 <USBD_LL_SetupStage+0x86>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <USBD_LL_SetupStage+0x4a>
 800760e:	2b01      	cmp	r3, #1
 8007610:	d00a      	beq.n	8007628 <USBD_LL_SetupStage+0x5e>
 8007612:	e01d      	b.n	8007650 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fb63 	bl	8007ce8 <USBD_StdDevReq>
 8007622:	4603      	mov	r3, r0
 8007624:	73fb      	strb	r3, [r7, #15]
      break;
 8007626:	e020      	b.n	800766a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fbcb 	bl	8007dcc <USBD_StdItfReq>
 8007636:	4603      	mov	r3, r0
 8007638:	73fb      	strb	r3, [r7, #15]
      break;
 800763a:	e016      	b.n	800766a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fc2d 	bl	8007ea4 <USBD_StdEPReq>
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]
      break;
 800764e:	e00c      	b.n	800766a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007656:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800765a:	b2db      	uxtb	r3, r3
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 fdb2 	bl	80091c8 <USBD_LL_StallEP>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]
      break;
 8007668:	bf00      	nop
  }

  return ret;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	460b      	mov	r3, r1
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007686:	7afb      	ldrb	r3, [r7, #11]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d16e      	bne.n	800776a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007692:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800769a:	2b03      	cmp	r3, #3
 800769c:	f040 8098 	bne.w	80077d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d913      	bls.n	80076d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	1ad2      	subs	r2, r2, r3
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	4293      	cmp	r3, r2
 80076c4:	bf28      	it	cs
 80076c6:	4613      	movcs	r3, r2
 80076c8:	461a      	mov	r2, r3
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f001 f994 	bl	80089fa <USBD_CtlContinueRx>
 80076d2:	e07d      	b.n	80077d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80076da:	f003 031f 	and.w	r3, r3, #31
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d014      	beq.n	800770c <USBD_LL_DataOutStage+0x98>
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d81d      	bhi.n	8007722 <USBD_LL_DataOutStage+0xae>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <USBD_LL_DataOutStage+0x7c>
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d003      	beq.n	80076f6 <USBD_LL_DataOutStage+0x82>
 80076ee:	e018      	b.n	8007722 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	75bb      	strb	r3, [r7, #22]
            break;
 80076f4:	e018      	b.n	8007728 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	4619      	mov	r1, r3
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 fa64 	bl	8007bce <USBD_CoreFindIF>
 8007706:	4603      	mov	r3, r0
 8007708:	75bb      	strb	r3, [r7, #22]
            break;
 800770a:	e00d      	b.n	8007728 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007712:	b2db      	uxtb	r3, r3
 8007714:	4619      	mov	r1, r3
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 fa66 	bl	8007be8 <USBD_CoreFindEP>
 800771c:	4603      	mov	r3, r0
 800771e:	75bb      	strb	r3, [r7, #22]
            break;
 8007720:	e002      	b.n	8007728 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	75bb      	strb	r3, [r7, #22]
            break;
 8007726:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007728:	7dbb      	ldrb	r3, [r7, #22]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d119      	bne.n	8007762 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b03      	cmp	r3, #3
 8007738:	d113      	bne.n	8007762 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800773a:	7dba      	ldrb	r2, [r7, #22]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	32ae      	adds	r2, #174	@ 0xae
 8007740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00b      	beq.n	8007762 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800774a:	7dba      	ldrb	r2, [r7, #22]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007752:	7dba      	ldrb	r2, [r7, #22]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	32ae      	adds	r2, #174	@ 0xae
 8007758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f001 f95a 	bl	8008a1c <USBD_CtlSendStatus>
 8007768:	e032      	b.n	80077d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800776a:	7afb      	ldrb	r3, [r7, #11]
 800776c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007770:	b2db      	uxtb	r3, r3
 8007772:	4619      	mov	r1, r3
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 fa37 	bl	8007be8 <USBD_CoreFindEP>
 800777a:	4603      	mov	r3, r0
 800777c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800777e:	7dbb      	ldrb	r3, [r7, #22]
 8007780:	2bff      	cmp	r3, #255	@ 0xff
 8007782:	d025      	beq.n	80077d0 <USBD_LL_DataOutStage+0x15c>
 8007784:	7dbb      	ldrb	r3, [r7, #22]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d122      	bne.n	80077d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b03      	cmp	r3, #3
 8007794:	d117      	bne.n	80077c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007796:	7dba      	ldrb	r2, [r7, #22]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	32ae      	adds	r2, #174	@ 0xae
 800779c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00f      	beq.n	80077c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80077a6:	7dba      	ldrb	r2, [r7, #22]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80077ae:	7dba      	ldrb	r2, [r7, #22]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	32ae      	adds	r2, #174	@ 0xae
 80077b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	7afa      	ldrb	r2, [r7, #11]
 80077bc:	4611      	mov	r1, r2
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	4798      	blx	r3
 80077c2:	4603      	mov	r3, r0
 80077c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
 80077ce:	e000      	b.n	80077d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b086      	sub	sp, #24
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	460b      	mov	r3, r1
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80077e8:	7afb      	ldrb	r3, [r7, #11]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d16f      	bne.n	80078ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3314      	adds	r3, #20
 80077f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d15a      	bne.n	80078b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	429a      	cmp	r2, r3
 8007808:	d914      	bls.n	8007834 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	1ad2      	subs	r2, r2, r3
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	461a      	mov	r2, r3
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f001 f8bc 	bl	800899e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007826:	2300      	movs	r3, #0
 8007828:	2200      	movs	r2, #0
 800782a:	2100      	movs	r1, #0
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f001 fd75 	bl	800931c <USBD_LL_PrepareReceive>
 8007832:	e03f      	b.n	80078b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	429a      	cmp	r2, r3
 800783e:	d11c      	bne.n	800787a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007848:	429a      	cmp	r2, r3
 800784a:	d316      	bcc.n	800787a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007856:	429a      	cmp	r2, r3
 8007858:	d20f      	bcs.n	800787a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800785a:	2200      	movs	r2, #0
 800785c:	2100      	movs	r1, #0
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f001 f89d 	bl	800899e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800786c:	2300      	movs	r3, #0
 800786e:	2200      	movs	r2, #0
 8007870:	2100      	movs	r1, #0
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f001 fd52 	bl	800931c <USBD_LL_PrepareReceive>
 8007878:	e01c      	b.n	80078b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b03      	cmp	r3, #3
 8007884:	d10f      	bne.n	80078a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d009      	beq.n	80078a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078a6:	2180      	movs	r1, #128	@ 0x80
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f001 fc8d 	bl	80091c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f001 f8c7 	bl	8008a42 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d03a      	beq.n	8007934 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f7ff fe42 	bl	8007548 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80078cc:	e032      	b.n	8007934 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80078ce:	7afb      	ldrb	r3, [r7, #11]
 80078d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	4619      	mov	r1, r3
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 f985 	bl	8007be8 <USBD_CoreFindEP>
 80078de:	4603      	mov	r3, r0
 80078e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
 80078e4:	2bff      	cmp	r3, #255	@ 0xff
 80078e6:	d025      	beq.n	8007934 <USBD_LL_DataInStage+0x15a>
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d122      	bne.n	8007934 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d11c      	bne.n	8007934 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078fa:	7dfa      	ldrb	r2, [r7, #23]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	32ae      	adds	r2, #174	@ 0xae
 8007900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d014      	beq.n	8007934 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800790a:	7dfa      	ldrb	r2, [r7, #23]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007912:	7dfa      	ldrb	r2, [r7, #23]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	32ae      	adds	r2, #174	@ 0xae
 8007918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	7afa      	ldrb	r2, [r7, #11]
 8007920:	4611      	mov	r1, r2
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	4798      	blx	r3
 8007926:	4603      	mov	r3, r0
 8007928:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800792a:	7dbb      	ldrb	r3, [r7, #22]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007930:	7dbb      	ldrb	r3, [r7, #22]
 8007932:	e000      	b.n	8007936 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007976:	2b00      	cmp	r3, #0
 8007978:	d014      	beq.n	80079a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00e      	beq.n	80079a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6852      	ldr	r2, [r2, #4]
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	4611      	mov	r1, r2
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	4798      	blx	r3
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80079a0:	2303      	movs	r3, #3
 80079a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079a4:	2340      	movs	r3, #64	@ 0x40
 80079a6:	2200      	movs	r2, #0
 80079a8:	2100      	movs	r1, #0
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 fbc7 	bl	800913e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2240      	movs	r2, #64	@ 0x40
 80079bc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079c0:	2340      	movs	r3, #64	@ 0x40
 80079c2:	2200      	movs	r2, #0
 80079c4:	2180      	movs	r1, #128	@ 0x80
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 fbb9 	bl	800913e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2240      	movs	r2, #64	@ 0x40
 80079d6:	621a      	str	r2, [r3, #32]

  return ret;
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	78fa      	ldrb	r2, [r7, #3]
 80079f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d006      	beq.n	8007a24 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2204      	movs	r2, #4
 8007a28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d106      	bne.n	8007a5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d110      	bne.n	8007aa0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00b      	beq.n	8007aa0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d005      	beq.n	8007aa0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	32ae      	adds	r2, #174	@ 0xae
 8007ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e01c      	b.n	8007b06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d115      	bne.n	8007b04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	32ae      	adds	r2, #174	@ 0xae
 8007ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	32ae      	adds	r2, #174	@ 0xae
 8007af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	78fa      	ldrb	r2, [r7, #3]
 8007afe:	4611      	mov	r1, r2
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	32ae      	adds	r2, #174	@ 0xae
 8007b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e01c      	b.n	8007b6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d115      	bne.n	8007b68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	32ae      	adds	r2, #174	@ 0xae
 8007b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	32ae      	adds	r2, #174	@ 0xae
 8007b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	4611      	mov	r1, r2
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00e      	beq.n	8007bc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6852      	ldr	r2, [r2, #4]
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	4798      	blx	r3
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bf4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b086      	sub	sp, #24
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	885b      	ldrh	r3, [r3, #2]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	7812      	ldrb	r2, [r2, #0]
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d91f      	bls.n	8007c68 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c2e:	e013      	b.n	8007c58 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c30:	f107 030a 	add.w	r3, r7, #10
 8007c34:	4619      	mov	r1, r3
 8007c36:	6978      	ldr	r0, [r7, #20]
 8007c38:	f000 f81b 	bl	8007c72 <USBD_GetNextDesc>
 8007c3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	785b      	ldrb	r3, [r3, #1]
 8007c42:	2b05      	cmp	r3, #5
 8007c44:	d108      	bne.n	8007c58 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	789b      	ldrb	r3, [r3, #2]
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d008      	beq.n	8007c66 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c54:	2300      	movs	r3, #0
 8007c56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	885b      	ldrh	r3, [r3, #2]
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	897b      	ldrh	r3, [r7, #10]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d8e5      	bhi.n	8007c30 <USBD_GetEpDesc+0x2e>
 8007c64:	e000      	b.n	8007c68 <USBD_GetEpDesc+0x66>
          break;
 8007c66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c68:	693b      	ldr	r3, [r7, #16]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b085      	sub	sp, #20
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	7812      	ldrb	r2, [r2, #0]
 8007c88:	4413      	add	r3, r2
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4413      	add	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b087      	sub	sp, #28
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cc8:	8a3b      	ldrh	r3, [r7, #16]
 8007cca:	021b      	lsls	r3, r3, #8
 8007ccc:	b21a      	sxth	r2, r3
 8007cce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	b21b      	sxth	r3, r3
 8007cd6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cd8:	89fb      	ldrh	r3, [r7, #14]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	371c      	adds	r7, #28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
	...

08007ce8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cfe:	2b40      	cmp	r3, #64	@ 0x40
 8007d00:	d005      	beq.n	8007d0e <USBD_StdDevReq+0x26>
 8007d02:	2b40      	cmp	r3, #64	@ 0x40
 8007d04:	d857      	bhi.n	8007db6 <USBD_StdDevReq+0xce>
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00f      	beq.n	8007d2a <USBD_StdDevReq+0x42>
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d153      	bne.n	8007db6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	32ae      	adds	r2, #174	@ 0xae
 8007d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]
      break;
 8007d28:	e04a      	b.n	8007dc0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	785b      	ldrb	r3, [r3, #1]
 8007d2e:	2b09      	cmp	r3, #9
 8007d30:	d83b      	bhi.n	8007daa <USBD_StdDevReq+0xc2>
 8007d32:	a201      	add	r2, pc, #4	@ (adr r2, 8007d38 <USBD_StdDevReq+0x50>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007d8d 	.word	0x08007d8d
 8007d3c:	08007da1 	.word	0x08007da1
 8007d40:	08007dab 	.word	0x08007dab
 8007d44:	08007d97 	.word	0x08007d97
 8007d48:	08007dab 	.word	0x08007dab
 8007d4c:	08007d6b 	.word	0x08007d6b
 8007d50:	08007d61 	.word	0x08007d61
 8007d54:	08007dab 	.word	0x08007dab
 8007d58:	08007d83 	.word	0x08007d83
 8007d5c:	08007d75 	.word	0x08007d75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fa3c 	bl	80081e0 <USBD_GetDescriptor>
          break;
 8007d68:	e024      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fba1 	bl	80084b4 <USBD_SetAddress>
          break;
 8007d72:	e01f      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fbe0 	bl	800853c <USBD_SetConfig>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]
          break;
 8007d80:	e018      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fc83 	bl	8008690 <USBD_GetConfig>
          break;
 8007d8a:	e013      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fcb4 	bl	80086fc <USBD_GetStatus>
          break;
 8007d94:	e00e      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fce3 	bl	8008764 <USBD_SetFeature>
          break;
 8007d9e:	e009      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fd07 	bl	80087b6 <USBD_ClrFeature>
          break;
 8007da8:	e004      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fd5e 	bl	800886e <USBD_CtlError>
          break;
 8007db2:	bf00      	nop
      }
      break;
 8007db4:	e004      	b.n	8007dc0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fd58 	bl	800886e <USBD_CtlError>
      break;
 8007dbe:	bf00      	nop
  }

  return ret;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop

08007dcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007de2:	2b40      	cmp	r3, #64	@ 0x40
 8007de4:	d005      	beq.n	8007df2 <USBD_StdItfReq+0x26>
 8007de6:	2b40      	cmp	r3, #64	@ 0x40
 8007de8:	d852      	bhi.n	8007e90 <USBD_StdItfReq+0xc4>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <USBD_StdItfReq+0x26>
 8007dee:	2b20      	cmp	r3, #32
 8007df0:	d14e      	bne.n	8007e90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d840      	bhi.n	8007e82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	889b      	ldrh	r3, [r3, #4]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d836      	bhi.n	8007e78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	889b      	ldrh	r3, [r3, #4]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff fedb 	bl	8007bce <USBD_CoreFindIF>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
 8007e1e:	2bff      	cmp	r3, #255	@ 0xff
 8007e20:	d01d      	beq.n	8007e5e <USBD_StdItfReq+0x92>
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d11a      	bne.n	8007e5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e28:	7bba      	ldrb	r2, [r7, #14]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	32ae      	adds	r2, #174	@ 0xae
 8007e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00f      	beq.n	8007e58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e38:	7bba      	ldrb	r2, [r7, #14]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e40:	7bba      	ldrb	r2, [r7, #14]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	32ae      	adds	r2, #174	@ 0xae
 8007e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4798      	blx	r3
 8007e52:	4603      	mov	r3, r0
 8007e54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e56:	e004      	b.n	8007e62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e5c:	e001      	b.n	8007e62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	88db      	ldrh	r3, [r3, #6]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d110      	bne.n	8007e8c <USBD_StdItfReq+0xc0>
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10d      	bne.n	8007e8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fdd3 	bl	8008a1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e76:	e009      	b.n	8007e8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fcf7 	bl	800886e <USBD_CtlError>
          break;
 8007e80:	e004      	b.n	8007e8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fcf2 	bl	800886e <USBD_CtlError>
          break;
 8007e8a:	e000      	b.n	8007e8e <USBD_StdItfReq+0xc2>
          break;
 8007e8c:	bf00      	nop
      }
      break;
 8007e8e:	e004      	b.n	8007e9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fceb 	bl	800886e <USBD_CtlError>
      break;
 8007e98:	bf00      	nop
  }

  return ret;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	889b      	ldrh	r3, [r3, #4]
 8007eb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ec0:	2b40      	cmp	r3, #64	@ 0x40
 8007ec2:	d007      	beq.n	8007ed4 <USBD_StdEPReq+0x30>
 8007ec4:	2b40      	cmp	r3, #64	@ 0x40
 8007ec6:	f200 817f 	bhi.w	80081c8 <USBD_StdEPReq+0x324>
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d02a      	beq.n	8007f24 <USBD_StdEPReq+0x80>
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	f040 817a 	bne.w	80081c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff fe85 	bl	8007be8 <USBD_CoreFindEP>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ee2:	7b7b      	ldrb	r3, [r7, #13]
 8007ee4:	2bff      	cmp	r3, #255	@ 0xff
 8007ee6:	f000 8174 	beq.w	80081d2 <USBD_StdEPReq+0x32e>
 8007eea:	7b7b      	ldrb	r3, [r7, #13]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f040 8170 	bne.w	80081d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007ef2:	7b7a      	ldrb	r2, [r7, #13]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007efa:	7b7a      	ldrb	r2, [r7, #13]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	32ae      	adds	r2, #174	@ 0xae
 8007f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 8163 	beq.w	80081d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f0c:	7b7a      	ldrb	r2, [r7, #13]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	32ae      	adds	r2, #174	@ 0xae
 8007f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f22:	e156      	b.n	80081d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	785b      	ldrb	r3, [r3, #1]
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d008      	beq.n	8007f3e <USBD_StdEPReq+0x9a>
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	f300 8145 	bgt.w	80081bc <USBD_StdEPReq+0x318>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 809b 	beq.w	800806e <USBD_StdEPReq+0x1ca>
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d03c      	beq.n	8007fb6 <USBD_StdEPReq+0x112>
 8007f3c:	e13e      	b.n	80081bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d002      	beq.n	8007f50 <USBD_StdEPReq+0xac>
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d016      	beq.n	8007f7c <USBD_StdEPReq+0xd8>
 8007f4e:	e02c      	b.n	8007faa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00d      	beq.n	8007f72 <USBD_StdEPReq+0xce>
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
 8007f58:	2b80      	cmp	r3, #128	@ 0x80
 8007f5a:	d00a      	beq.n	8007f72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 f931 	bl	80091c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f66:	2180      	movs	r1, #128	@ 0x80
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 f92d 	bl	80091c8 <USBD_LL_StallEP>
 8007f6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f70:	e020      	b.n	8007fb4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fc7a 	bl	800886e <USBD_CtlError>
              break;
 8007f7a:	e01b      	b.n	8007fb4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	885b      	ldrh	r3, [r3, #2]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10e      	bne.n	8007fa2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00b      	beq.n	8007fa2 <USBD_StdEPReq+0xfe>
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	2b80      	cmp	r3, #128	@ 0x80
 8007f8e:	d008      	beq.n	8007fa2 <USBD_StdEPReq+0xfe>
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	88db      	ldrh	r3, [r3, #6]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d104      	bne.n	8007fa2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 f913 	bl	80091c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fd3a 	bl	8008a1c <USBD_CtlSendStatus>

              break;
 8007fa8:	e004      	b.n	8007fb4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fc5e 	bl	800886e <USBD_CtlError>
              break;
 8007fb2:	bf00      	nop
          }
          break;
 8007fb4:	e107      	b.n	80081c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d002      	beq.n	8007fc8 <USBD_StdEPReq+0x124>
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d016      	beq.n	8007ff4 <USBD_StdEPReq+0x150>
 8007fc6:	e04b      	b.n	8008060 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00d      	beq.n	8007fea <USBD_StdEPReq+0x146>
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	2b80      	cmp	r3, #128	@ 0x80
 8007fd2:	d00a      	beq.n	8007fea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 f8f5 	bl	80091c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fde:	2180      	movs	r1, #128	@ 0x80
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 f8f1 	bl	80091c8 <USBD_LL_StallEP>
 8007fe6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fe8:	e040      	b.n	800806c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fc3e 	bl	800886e <USBD_CtlError>
              break;
 8007ff2:	e03b      	b.n	800806c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	885b      	ldrh	r3, [r3, #2]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d136      	bne.n	800806a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008002:	2b00      	cmp	r3, #0
 8008004:	d004      	beq.n	8008010 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 f8fb 	bl	8009206 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fd03 	bl	8008a1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7ff fde4 	bl	8007be8 <USBD_CoreFindEP>
 8008020:	4603      	mov	r3, r0
 8008022:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008024:	7b7b      	ldrb	r3, [r7, #13]
 8008026:	2bff      	cmp	r3, #255	@ 0xff
 8008028:	d01f      	beq.n	800806a <USBD_StdEPReq+0x1c6>
 800802a:	7b7b      	ldrb	r3, [r7, #13]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d11c      	bne.n	800806a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008030:	7b7a      	ldrb	r2, [r7, #13]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008038:	7b7a      	ldrb	r2, [r7, #13]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	32ae      	adds	r2, #174	@ 0xae
 800803e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d010      	beq.n	800806a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008048:	7b7a      	ldrb	r2, [r7, #13]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	32ae      	adds	r2, #174	@ 0xae
 800804e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
 800805a:	4603      	mov	r3, r0
 800805c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800805e:	e004      	b.n	800806a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fc03 	bl	800886e <USBD_CtlError>
              break;
 8008068:	e000      	b.n	800806c <USBD_StdEPReq+0x1c8>
              break;
 800806a:	bf00      	nop
          }
          break;
 800806c:	e0ab      	b.n	80081c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b02      	cmp	r3, #2
 8008078:	d002      	beq.n	8008080 <USBD_StdEPReq+0x1dc>
 800807a:	2b03      	cmp	r3, #3
 800807c:	d032      	beq.n	80080e4 <USBD_StdEPReq+0x240>
 800807e:	e097      	b.n	80081b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d007      	beq.n	8008096 <USBD_StdEPReq+0x1f2>
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	2b80      	cmp	r3, #128	@ 0x80
 800808a:	d004      	beq.n	8008096 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fbed 	bl	800886e <USBD_CtlError>
                break;
 8008094:	e091      	b.n	80081ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800809a:	2b00      	cmp	r3, #0
 800809c:	da0b      	bge.n	80080b6 <USBD_StdEPReq+0x212>
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080a4:	4613      	mov	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	3310      	adds	r3, #16
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	3304      	adds	r3, #4
 80080b4:	e00b      	b.n	80080ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	4413      	add	r3, r2
 80080cc:	3304      	adds	r3, #4
 80080ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2202      	movs	r2, #2
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fc43 	bl	8008968 <USBD_CtlSendData>
              break;
 80080e2:	e06a      	b.n	80081ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	da11      	bge.n	8008110 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	f003 020f 	and.w	r2, r3, #15
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	440b      	add	r3, r1
 80080fe:	3324      	adds	r3, #36	@ 0x24
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d117      	bne.n	8008136 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fbb0 	bl	800886e <USBD_CtlError>
                  break;
 800810e:	e054      	b.n	80081ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	f003 020f 	and.w	r2, r3, #15
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	440b      	add	r3, r1
 8008122:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d104      	bne.n	8008136 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fb9d 	bl	800886e <USBD_CtlError>
                  break;
 8008134:	e041      	b.n	80081ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008136:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800813a:	2b00      	cmp	r3, #0
 800813c:	da0b      	bge.n	8008156 <USBD_StdEPReq+0x2b2>
 800813e:	7bbb      	ldrb	r3, [r7, #14]
 8008140:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008144:	4613      	mov	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	3310      	adds	r3, #16
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	4413      	add	r3, r2
 8008152:	3304      	adds	r3, #4
 8008154:	e00b      	b.n	800816e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800815c:	4613      	mov	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	4413      	add	r3, r2
 800816c:	3304      	adds	r3, #4
 800816e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <USBD_StdEPReq+0x2d8>
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	2b80      	cmp	r3, #128	@ 0x80
 800817a:	d103      	bne.n	8008184 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	e00e      	b.n	80081a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 f85b 	bl	8009244 <USBD_LL_IsStallEP>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2201      	movs	r2, #1
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	e002      	b.n	80081a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2202      	movs	r2, #2
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fbdd 	bl	8008968 <USBD_CtlSendData>
              break;
 80081ae:	e004      	b.n	80081ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fb5b 	bl	800886e <USBD_CtlError>
              break;
 80081b8:	bf00      	nop
          }
          break;
 80081ba:	e004      	b.n	80081c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fb55 	bl	800886e <USBD_CtlError>
          break;
 80081c4:	bf00      	nop
      }
      break;
 80081c6:	e005      	b.n	80081d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fb4f 	bl	800886e <USBD_CtlError>
      break;
 80081d0:	e000      	b.n	80081d4 <USBD_StdEPReq+0x330>
      break;
 80081d2:	bf00      	nop
  }

  return ret;
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	885b      	ldrh	r3, [r3, #2]
 80081fa:	0a1b      	lsrs	r3, r3, #8
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	3b01      	subs	r3, #1
 8008200:	2b06      	cmp	r3, #6
 8008202:	f200 8128 	bhi.w	8008456 <USBD_GetDescriptor+0x276>
 8008206:	a201      	add	r2, pc, #4	@ (adr r2, 800820c <USBD_GetDescriptor+0x2c>)
 8008208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820c:	08008229 	.word	0x08008229
 8008210:	08008241 	.word	0x08008241
 8008214:	08008281 	.word	0x08008281
 8008218:	08008457 	.word	0x08008457
 800821c:	08008457 	.word	0x08008457
 8008220:	080083f7 	.word	0x080083f7
 8008224:	08008423 	.word	0x08008423
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	7c12      	ldrb	r2, [r2, #16]
 8008234:	f107 0108 	add.w	r1, r7, #8
 8008238:	4610      	mov	r0, r2
 800823a:	4798      	blx	r3
 800823c:	60f8      	str	r0, [r7, #12]
      break;
 800823e:	e112      	b.n	8008466 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	7c1b      	ldrb	r3, [r3, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10d      	bne.n	8008264 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800824e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008250:	f107 0208 	add.w	r2, r7, #8
 8008254:	4610      	mov	r0, r2
 8008256:	4798      	blx	r3
 8008258:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3301      	adds	r3, #1
 800825e:	2202      	movs	r2, #2
 8008260:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008262:	e100      	b.n	8008466 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800826a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826c:	f107 0208 	add.w	r2, r7, #8
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3301      	adds	r3, #1
 800827a:	2202      	movs	r2, #2
 800827c:	701a      	strb	r2, [r3, #0]
      break;
 800827e:	e0f2      	b.n	8008466 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	885b      	ldrh	r3, [r3, #2]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b05      	cmp	r3, #5
 8008288:	f200 80ac 	bhi.w	80083e4 <USBD_GetDescriptor+0x204>
 800828c:	a201      	add	r2, pc, #4	@ (adr r2, 8008294 <USBD_GetDescriptor+0xb4>)
 800828e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008292:	bf00      	nop
 8008294:	080082ad 	.word	0x080082ad
 8008298:	080082e1 	.word	0x080082e1
 800829c:	08008315 	.word	0x08008315
 80082a0:	08008349 	.word	0x08008349
 80082a4:	0800837d 	.word	0x0800837d
 80082a8:	080083b1 	.word	0x080083b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	7c12      	ldrb	r2, [r2, #16]
 80082c4:	f107 0108 	add.w	r1, r7, #8
 80082c8:	4610      	mov	r0, r2
 80082ca:	4798      	blx	r3
 80082cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ce:	e091      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 facb 	bl	800886e <USBD_CtlError>
            err++;
 80082d8:	7afb      	ldrb	r3, [r7, #11]
 80082da:	3301      	adds	r3, #1
 80082dc:	72fb      	strb	r3, [r7, #11]
          break;
 80082de:	e089      	b.n	80083f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	7c12      	ldrb	r2, [r2, #16]
 80082f8:	f107 0108 	add.w	r1, r7, #8
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008302:	e077      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fab1 	bl	800886e <USBD_CtlError>
            err++;
 800830c:	7afb      	ldrb	r3, [r7, #11]
 800830e:	3301      	adds	r3, #1
 8008310:	72fb      	strb	r3, [r7, #11]
          break;
 8008312:	e06f      	b.n	80083f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	7c12      	ldrb	r2, [r2, #16]
 800832c:	f107 0108 	add.w	r1, r7, #8
 8008330:	4610      	mov	r0, r2
 8008332:	4798      	blx	r3
 8008334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008336:	e05d      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa97 	bl	800886e <USBD_CtlError>
            err++;
 8008340:	7afb      	ldrb	r3, [r7, #11]
 8008342:	3301      	adds	r3, #1
 8008344:	72fb      	strb	r3, [r7, #11]
          break;
 8008346:	e055      	b.n	80083f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	7c12      	ldrb	r2, [r2, #16]
 8008360:	f107 0108 	add.w	r1, r7, #8
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800836a:	e043      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa7d 	bl	800886e <USBD_CtlError>
            err++;
 8008374:	7afb      	ldrb	r3, [r7, #11]
 8008376:	3301      	adds	r3, #1
 8008378:	72fb      	strb	r3, [r7, #11]
          break;
 800837a:	e03b      	b.n	80083f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	7c12      	ldrb	r2, [r2, #16]
 8008394:	f107 0108 	add.w	r1, r7, #8
 8008398:	4610      	mov	r0, r2
 800839a:	4798      	blx	r3
 800839c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839e:	e029      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa63 	bl	800886e <USBD_CtlError>
            err++;
 80083a8:	7afb      	ldrb	r3, [r7, #11]
 80083aa:	3301      	adds	r3, #1
 80083ac:	72fb      	strb	r3, [r7, #11]
          break;
 80083ae:	e021      	b.n	80083f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00b      	beq.n	80083d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	7c12      	ldrb	r2, [r2, #16]
 80083c8:	f107 0108 	add.w	r1, r7, #8
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3
 80083d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083d2:	e00f      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa49 	bl	800886e <USBD_CtlError>
            err++;
 80083dc:	7afb      	ldrb	r3, [r7, #11]
 80083de:	3301      	adds	r3, #1
 80083e0:	72fb      	strb	r3, [r7, #11]
          break;
 80083e2:	e007      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fa41 	bl	800886e <USBD_CtlError>
          err++;
 80083ec:	7afb      	ldrb	r3, [r7, #11]
 80083ee:	3301      	adds	r3, #1
 80083f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80083f2:	bf00      	nop
      }
      break;
 80083f4:	e037      	b.n	8008466 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	7c1b      	ldrb	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d109      	bne.n	8008412 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008406:	f107 0208 	add.w	r2, r7, #8
 800840a:	4610      	mov	r0, r2
 800840c:	4798      	blx	r3
 800840e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008410:	e029      	b.n	8008466 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fa2a 	bl	800886e <USBD_CtlError>
        err++;
 800841a:	7afb      	ldrb	r3, [r7, #11]
 800841c:	3301      	adds	r3, #1
 800841e:	72fb      	strb	r3, [r7, #11]
      break;
 8008420:	e021      	b.n	8008466 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7c1b      	ldrb	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10d      	bne.n	8008446 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008432:	f107 0208 	add.w	r2, r7, #8
 8008436:	4610      	mov	r0, r2
 8008438:	4798      	blx	r3
 800843a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3301      	adds	r3, #1
 8008440:	2207      	movs	r2, #7
 8008442:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008444:	e00f      	b.n	8008466 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fa10 	bl	800886e <USBD_CtlError>
        err++;
 800844e:	7afb      	ldrb	r3, [r7, #11]
 8008450:	3301      	adds	r3, #1
 8008452:	72fb      	strb	r3, [r7, #11]
      break;
 8008454:	e007      	b.n	8008466 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa08 	bl	800886e <USBD_CtlError>
      err++;
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	3301      	adds	r3, #1
 8008462:	72fb      	strb	r3, [r7, #11]
      break;
 8008464:	bf00      	nop
  }

  if (err != 0U)
 8008466:	7afb      	ldrb	r3, [r7, #11]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d11e      	bne.n	80084aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	88db      	ldrh	r3, [r3, #6]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d016      	beq.n	80084a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008474:	893b      	ldrh	r3, [r7, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00e      	beq.n	8008498 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	88da      	ldrh	r2, [r3, #6]
 800847e:	893b      	ldrh	r3, [r7, #8]
 8008480:	4293      	cmp	r3, r2
 8008482:	bf28      	it	cs
 8008484:	4613      	movcs	r3, r2
 8008486:	b29b      	uxth	r3, r3
 8008488:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800848a:	893b      	ldrh	r3, [r7, #8]
 800848c:	461a      	mov	r2, r3
 800848e:	68f9      	ldr	r1, [r7, #12]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fa69 	bl	8008968 <USBD_CtlSendData>
 8008496:	e009      	b.n	80084ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f9e7 	bl	800886e <USBD_CtlError>
 80084a0:	e004      	b.n	80084ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 faba 	bl	8008a1c <USBD_CtlSendStatus>
 80084a8:	e000      	b.n	80084ac <USBD_GetDescriptor+0x2cc>
    return;
 80084aa:	bf00      	nop
  }
}
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop

080084b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	889b      	ldrh	r3, [r3, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d131      	bne.n	800852a <USBD_SetAddress+0x76>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	88db      	ldrh	r3, [r3, #6]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d12d      	bne.n	800852a <USBD_SetAddress+0x76>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	885b      	ldrh	r3, [r3, #2]
 80084d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80084d4:	d829      	bhi.n	800852a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	885b      	ldrh	r3, [r3, #2]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d104      	bne.n	80084f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f9bc 	bl	800886e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f6:	e01d      	b.n	8008534 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	7bfa      	ldrb	r2, [r7, #15]
 80084fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fec9 	bl	800929c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fa86 	bl	8008a1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008510:	7bfb      	ldrb	r3, [r7, #15]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d004      	beq.n	8008520 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2202      	movs	r2, #2
 800851a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800851e:	e009      	b.n	8008534 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008528:	e004      	b.n	8008534 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f99e 	bl	800886e <USBD_CtlError>
  }
}
 8008532:	bf00      	nop
 8008534:	bf00      	nop
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	885b      	ldrh	r3, [r3, #2]
 800854e:	b2da      	uxtb	r2, r3
 8008550:	4b4e      	ldr	r3, [pc, #312]	@ (800868c <USBD_SetConfig+0x150>)
 8008552:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008554:	4b4d      	ldr	r3, [pc, #308]	@ (800868c <USBD_SetConfig+0x150>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d905      	bls.n	8008568 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f985 	bl	800886e <USBD_CtlError>
    return USBD_FAIL;
 8008564:	2303      	movs	r3, #3
 8008566:	e08c      	b.n	8008682 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b02      	cmp	r3, #2
 8008572:	d002      	beq.n	800857a <USBD_SetConfig+0x3e>
 8008574:	2b03      	cmp	r3, #3
 8008576:	d029      	beq.n	80085cc <USBD_SetConfig+0x90>
 8008578:	e075      	b.n	8008666 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800857a:	4b44      	ldr	r3, [pc, #272]	@ (800868c <USBD_SetConfig+0x150>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d020      	beq.n	80085c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008582:	4b42      	ldr	r3, [pc, #264]	@ (800868c <USBD_SetConfig+0x150>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800858c:	4b3f      	ldr	r3, [pc, #252]	@ (800868c <USBD_SetConfig+0x150>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7fe ffe3 	bl	800755e <USBD_SetClassConfig>
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d008      	beq.n	80085b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f962 	bl	800886e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2202      	movs	r2, #2
 80085ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085b2:	e065      	b.n	8008680 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fa31 	bl	8008a1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2203      	movs	r2, #3
 80085be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80085c2:	e05d      	b.n	8008680 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fa29 	bl	8008a1c <USBD_CtlSendStatus>
      break;
 80085ca:	e059      	b.n	8008680 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085cc:	4b2f      	ldr	r3, [pc, #188]	@ (800868c <USBD_SetConfig+0x150>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d112      	bne.n	80085fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80085dc:	4b2b      	ldr	r3, [pc, #172]	@ (800868c <USBD_SetConfig+0x150>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	461a      	mov	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085e6:	4b29      	ldr	r3, [pc, #164]	@ (800868c <USBD_SetConfig+0x150>)
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7fe ffd2 	bl	8007596 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fa12 	bl	8008a1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085f8:	e042      	b.n	8008680 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085fa:	4b24      	ldr	r3, [pc, #144]	@ (800868c <USBD_SetConfig+0x150>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	429a      	cmp	r2, r3
 8008606:	d02a      	beq.n	800865e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7fe ffc0 	bl	8007596 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008616:	4b1d      	ldr	r3, [pc, #116]	@ (800868c <USBD_SetConfig+0x150>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008620:	4b1a      	ldr	r3, [pc, #104]	@ (800868c <USBD_SetConfig+0x150>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7fe ff99 	bl	800755e <USBD_SetClassConfig>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00f      	beq.n	8008656 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f918 	bl	800886e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7fe ffa5 	bl	8007596 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2202      	movs	r2, #2
 8008650:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008654:	e014      	b.n	8008680 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f9e0 	bl	8008a1c <USBD_CtlSendStatus>
      break;
 800865c:	e010      	b.n	8008680 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f9dc 	bl	8008a1c <USBD_CtlSendStatus>
      break;
 8008664:	e00c      	b.n	8008680 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f900 	bl	800886e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800866e:	4b07      	ldr	r3, [pc, #28]	@ (800868c <USBD_SetConfig+0x150>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7fe ff8e 	bl	8007596 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800867a:	2303      	movs	r3, #3
 800867c:	73fb      	strb	r3, [r7, #15]
      break;
 800867e:	bf00      	nop
  }

  return ret;
 8008680:	7bfb      	ldrb	r3, [r7, #15]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	200002d0 	.word	0x200002d0

08008690 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	88db      	ldrh	r3, [r3, #6]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d004      	beq.n	80086ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f8e2 	bl	800886e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086aa:	e023      	b.n	80086f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	dc02      	bgt.n	80086be <USBD_GetConfig+0x2e>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	dc03      	bgt.n	80086c4 <USBD_GetConfig+0x34>
 80086bc:	e015      	b.n	80086ea <USBD_GetConfig+0x5a>
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d00b      	beq.n	80086da <USBD_GetConfig+0x4a>
 80086c2:	e012      	b.n	80086ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3308      	adds	r3, #8
 80086ce:	2201      	movs	r2, #1
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f948 	bl	8008968 <USBD_CtlSendData>
        break;
 80086d8:	e00c      	b.n	80086f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3304      	adds	r3, #4
 80086de:	2201      	movs	r2, #1
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f940 	bl	8008968 <USBD_CtlSendData>
        break;
 80086e8:	e004      	b.n	80086f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f8be 	bl	800886e <USBD_CtlError>
        break;
 80086f2:	bf00      	nop
}
 80086f4:	bf00      	nop
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800870c:	b2db      	uxtb	r3, r3
 800870e:	3b01      	subs	r3, #1
 8008710:	2b02      	cmp	r3, #2
 8008712:	d81e      	bhi.n	8008752 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	88db      	ldrh	r3, [r3, #6]
 8008718:	2b02      	cmp	r3, #2
 800871a:	d004      	beq.n	8008726 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f8a5 	bl	800886e <USBD_CtlError>
        break;
 8008724:	e01a      	b.n	800875c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	f043 0202 	orr.w	r2, r3, #2
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	330c      	adds	r3, #12
 8008746:	2202      	movs	r2, #2
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f90c 	bl	8008968 <USBD_CtlSendData>
      break;
 8008750:	e004      	b.n	800875c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f88a 	bl	800886e <USBD_CtlError>
      break;
 800875a:	bf00      	nop
  }
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	885b      	ldrh	r3, [r3, #2]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d107      	bne.n	8008786 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f94c 	bl	8008a1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008784:	e013      	b.n	80087ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	885b      	ldrh	r3, [r3, #2]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d10b      	bne.n	80087a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	889b      	ldrh	r3, [r3, #4]
 8008792:	0a1b      	lsrs	r3, r3, #8
 8008794:	b29b      	uxth	r3, r3
 8008796:	b2da      	uxtb	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f93c 	bl	8008a1c <USBD_CtlSendStatus>
}
 80087a4:	e003      	b.n	80087ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f860 	bl	800886e <USBD_CtlError>
}
 80087ae:	bf00      	nop
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b082      	sub	sp, #8
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	3b01      	subs	r3, #1
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d80b      	bhi.n	80087e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	885b      	ldrh	r3, [r3, #2]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d10c      	bne.n	80087f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f91c 	bl	8008a1c <USBD_CtlSendStatus>
      }
      break;
 80087e4:	e004      	b.n	80087f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f840 	bl	800886e <USBD_CtlError>
      break;
 80087ee:	e000      	b.n	80087f2 <USBD_ClrFeature+0x3c>
      break;
 80087f0:	bf00      	nop
  }
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	781a      	ldrb	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3301      	adds	r3, #1
 8008814:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	781a      	ldrb	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3301      	adds	r3, #1
 8008822:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f7ff fa40 	bl	8007caa <SWAPBYTE>
 800882a:	4603      	mov	r3, r0
 800882c:	461a      	mov	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3301      	adds	r3, #1
 8008836:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3301      	adds	r3, #1
 800883c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f7ff fa33 	bl	8007caa <SWAPBYTE>
 8008844:	4603      	mov	r3, r0
 8008846:	461a      	mov	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3301      	adds	r3, #1
 8008850:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3301      	adds	r3, #1
 8008856:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f7ff fa26 	bl	8007caa <SWAPBYTE>
 800885e:	4603      	mov	r3, r0
 8008860:	461a      	mov	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	80da      	strh	r2, [r3, #6]
}
 8008866:	bf00      	nop
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b082      	sub	sp, #8
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008878:	2180      	movs	r1, #128	@ 0x80
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fca4 	bl	80091c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008880:	2100      	movs	r1, #0
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fca0 	bl	80091c8 <USBD_LL_StallEP>
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d042      	beq.n	800892c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80088aa:	6938      	ldr	r0, [r7, #16]
 80088ac:	f000 f842 	bl	8008934 <USBD_GetLen>
 80088b0:	4603      	mov	r3, r0
 80088b2:	3301      	adds	r3, #1
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ba:	d808      	bhi.n	80088ce <USBD_GetString+0x3e>
 80088bc:	6938      	ldr	r0, [r7, #16]
 80088be:	f000 f839 	bl	8008934 <USBD_GetLen>
 80088c2:	4603      	mov	r3, r0
 80088c4:	3301      	adds	r3, #1
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	e001      	b.n	80088d2 <USBD_GetString+0x42>
 80088ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	4413      	add	r3, r2
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	7812      	ldrb	r2, [r2, #0]
 80088e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	3301      	adds	r3, #1
 80088e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	4413      	add	r3, r2
 80088ee:	2203      	movs	r2, #3
 80088f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80088f2:	7dfb      	ldrb	r3, [r7, #23]
 80088f4:	3301      	adds	r3, #1
 80088f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088f8:	e013      	b.n	8008922 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	4413      	add	r3, r2
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	7812      	ldrb	r2, [r2, #0]
 8008904:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	3301      	adds	r3, #1
 800890a:	613b      	str	r3, [r7, #16]
    idx++;
 800890c:	7dfb      	ldrb	r3, [r7, #23]
 800890e:	3301      	adds	r3, #1
 8008910:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	4413      	add	r3, r2
 8008918:	2200      	movs	r2, #0
 800891a:	701a      	strb	r2, [r3, #0]
    idx++;
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	3301      	adds	r3, #1
 8008920:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e7      	bne.n	80088fa <USBD_GetString+0x6a>
 800892a:	e000      	b.n	800892e <USBD_GetString+0x9e>
    return;
 800892c:	bf00      	nop
  }
}
 800892e:	3718      	adds	r7, #24
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008944:	e005      	b.n	8008952 <USBD_GetLen+0x1e>
  {
    len++;
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	3301      	adds	r3, #1
 800894a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	3301      	adds	r3, #1
 8008950:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1f5      	bne.n	8008946 <USBD_GetLen+0x12>
  }

  return len;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2202      	movs	r2, #2
 8008978:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	2100      	movs	r1, #0
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 fca3 	bl	80092da <USBD_LL_Transmit>

  return USBD_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	2100      	movs	r1, #0
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 fc92 	bl	80092da <USBD_LL_Transmit>

  return USBD_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2203      	movs	r2, #3
 80089d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	2100      	movs	r1, #0
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 fc96 	bl	800931c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 fc85 	bl	800931c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2204      	movs	r2, #4
 8008a28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2100      	movs	r1, #0
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fc51 	bl	80092da <USBD_LL_Transmit>

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2205      	movs	r2, #5
 8008a4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a52:	2300      	movs	r3, #0
 8008a54:	2200      	movs	r2, #0
 8008a56:	2100      	movs	r1, #0
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fc5f 	bl	800931c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4912      	ldr	r1, [pc, #72]	@ (8008ab8 <MX_USB_DEVICE_Init+0x50>)
 8008a70:	4812      	ldr	r0, [pc, #72]	@ (8008abc <MX_USB_DEVICE_Init+0x54>)
 8008a72:	f7fe fcf7 	bl	8007464 <USBD_Init>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a7c:	f7f9 fd32 	bl	80024e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008a80:	490f      	ldr	r1, [pc, #60]	@ (8008ac0 <MX_USB_DEVICE_Init+0x58>)
 8008a82:	480e      	ldr	r0, [pc, #56]	@ (8008abc <MX_USB_DEVICE_Init+0x54>)
 8008a84:	f7fe fd1e 	bl	80074c4 <USBD_RegisterClass>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a8e:	f7f9 fd29 	bl	80024e4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8008a92:	490c      	ldr	r1, [pc, #48]	@ (8008ac4 <MX_USB_DEVICE_Init+0x5c>)
 8008a94:	4809      	ldr	r0, [pc, #36]	@ (8008abc <MX_USB_DEVICE_Init+0x54>)
 8008a96:	f7fe fccb 	bl	8007430 <USBD_CUSTOM_HID_RegisterInterface>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008aa0:	f7f9 fd20 	bl	80024e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008aa4:	4805      	ldr	r0, [pc, #20]	@ (8008abc <MX_USB_DEVICE_Init+0x54>)
 8008aa6:	f7fe fd43 	bl	8007530 <USBD_Start>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ab0:	f7f9 fd18 	bl	80024e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ab4:	bf00      	nop
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	200000bc 	.word	0x200000bc
 8008abc:	200002d4 	.word	0x200002d4
 8008ac0:	2000000c 	.word	0x2000000c
 8008ac4:	200000ac 	.word	0x200000ac

08008ac8 <_ZL18CUSTOM_HID_Init_FSv>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008acc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <_ZL20CUSTOM_HID_DeInit_FSv>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008adc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <_ZL22CUSTOM_HID_OutEvent_FSPh>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* report_buffer)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8008af0:	482a      	ldr	r0, [pc, #168]	@ (8008b9c <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb4>)
 8008af2:	f7fe fc3d 	bl	8007370 <USBD_CUSTOM_HID_ReceivePacket>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	bf14      	ite	ne
 8008afc:	2301      	movne	r3, #1
 8008afe:	2300      	moveq	r3, #0
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d002      	beq.n	8008b0c <_ZL22CUSTOM_HID_OutEvent_FSPh+0x24>
  {
    return -1;
 8008b06:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0a:	e042      	b.n	8008b92 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xaa>
//  }

//  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report_buffer, 0x08);

//  memcpy(buffer, report_buffer, 0x08);
  if (report_buffer[0] == 0x01)  // Zakładamy, że 0x01 to komenda dla obrotu w lewo
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d11c      	bne.n	8008b4e <_ZL22CUSTOM_HID_OutEvent_FSPh+0x66>
  {
//	  rotate_steering_wheel_left();
	  if(HAL_GPIO_ReadPin(LED_ERR_GPIO_Port, LED_ERR_Pin) == GPIO_PIN_SET){
 8008b14:	2102      	movs	r1, #2
 8008b16:	4822      	ldr	r0, [pc, #136]	@ (8008ba0 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb8>)
 8008b18:	f7fa f996 	bl	8002e48 <HAL_GPIO_ReadPin>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	bf0c      	ite	eq
 8008b22:	2301      	moveq	r3, #1
 8008b24:	2300      	movne	r3, #0
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x50>
	    	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2102      	movs	r1, #2
 8008b30:	481b      	ldr	r0, [pc, #108]	@ (8008ba0 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb8>)
 8008b32:	f7fa f9a1 	bl	8002e78 <HAL_GPIO_WritePin>
 8008b36:	e004      	b.n	8008b42 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x5a>
	  }
	  else {
	    	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8008b38:	2201      	movs	r2, #1
 8008b3a:	2102      	movs	r1, #2
 8008b3c:	4818      	ldr	r0, [pc, #96]	@ (8008ba0 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb8>)
 8008b3e:	f7fa f99b 	bl	8002e78 <HAL_GPIO_WritePin>
	  }
	  tmc4671.setMoveBy(true, 90);
 8008b42:	225a      	movs	r2, #90	@ 0x5a
 8008b44:	2101      	movs	r1, #1
 8008b46:	4817      	ldr	r0, [pc, #92]	@ (8008ba4 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xbc>)
 8008b48:	f7f9 fb28 	bl	800219c <_ZN14TMC4671_Driver9setMoveByEbs>
 8008b4c:	e020      	b.n	8008b90 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xa8>
  }
  else if (report_buffer[0] == 0x02)  // Zakładamy, że 0x02 to komenda dla obrotu w prawo
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d11c      	bne.n	8008b90 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xa8>
  {
//	  rotate_steering_wheel_right();
	  if(HAL_GPIO_ReadPin(LED_CLIP_GPIO_Port, LED_CLIP_Pin) == GPIO_PIN_SET){
 8008b56:	2101      	movs	r1, #1
 8008b58:	4811      	ldr	r0, [pc, #68]	@ (8008ba0 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb8>)
 8008b5a:	f7fa f975 	bl	8002e48 <HAL_GPIO_ReadPin>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	bf0c      	ite	eq
 8008b64:	2301      	moveq	r3, #1
 8008b66:	2300      	movne	r3, #0
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d005      	beq.n	8008b7a <_ZL22CUSTOM_HID_OutEvent_FSPh+0x92>
	    	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2101      	movs	r1, #1
 8008b72:	480b      	ldr	r0, [pc, #44]	@ (8008ba0 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb8>)
 8008b74:	f7fa f980 	bl	8002e78 <HAL_GPIO_WritePin>
 8008b78:	e004      	b.n	8008b84 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x9c>
	  }
	  else {
	    	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	4808      	ldr	r0, [pc, #32]	@ (8008ba0 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xb8>)
 8008b80:	f7fa f97a 	bl	8002e78 <HAL_GPIO_WritePin>
	  }
	  tmc4671.setMoveBy(true, -90);
 8008b84:	f06f 0259 	mvn.w	r2, #89	@ 0x59
 8008b88:	2101      	movs	r1, #1
 8008b8a:	4806      	ldr	r0, [pc, #24]	@ (8008ba4 <_ZL22CUSTOM_HID_OutEvent_FSPh+0xbc>)
 8008b8c:	f7f9 fb06 	bl	800219c <_ZN14TMC4671_Driver9setMoveByEbs>
  }

//  buffer[0] = 0x01;
//  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, buffer, 0x08);

  return (USBD_OK);
 8008b90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	200002d4 	.word	0x200002d4
 8008ba0:	40021000 	.word	0x40021000
 8008ba4:	20000128 	.word	0x20000128

08008ba8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	6039      	str	r1, [r7, #0]
 8008bb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2212      	movs	r2, #18
 8008bb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008bba:	4b03      	ldr	r3, [pc, #12]	@ (8008bc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr
 8008bc8:	200000d8 	.word	0x200000d8

08008bcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	6039      	str	r1, [r7, #0]
 8008bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	2204      	movs	r2, #4
 8008bdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bde:	4b03      	ldr	r3, [pc, #12]	@ (8008bec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	200000ec 	.word	0x200000ec

08008bf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	6039      	str	r1, [r7, #0]
 8008bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d105      	bne.n	8008c0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	4907      	ldr	r1, [pc, #28]	@ (8008c24 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c06:	4808      	ldr	r0, [pc, #32]	@ (8008c28 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c08:	f7ff fe42 	bl	8008890 <USBD_GetString>
 8008c0c:	e004      	b.n	8008c18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	4904      	ldr	r1, [pc, #16]	@ (8008c24 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c12:	4805      	ldr	r0, [pc, #20]	@ (8008c28 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c14:	f7ff fe3c 	bl	8008890 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c18:	4b02      	ldr	r3, [pc, #8]	@ (8008c24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	200005b0 	.word	0x200005b0
 8008c28:	08009480 	.word	0x08009480

08008c2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	6039      	str	r1, [r7, #0]
 8008c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	4904      	ldr	r1, [pc, #16]	@ (8008c4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c3c:	4804      	ldr	r0, [pc, #16]	@ (8008c50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c3e:	f7ff fe27 	bl	8008890 <USBD_GetString>
  return USBD_StrDesc;
 8008c42:	4b02      	ldr	r3, [pc, #8]	@ (8008c4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	200005b0 	.word	0x200005b0
 8008c50:	080094a0 	.word	0x080094a0

08008c54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	6039      	str	r1, [r7, #0]
 8008c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	221a      	movs	r2, #26
 8008c64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c66:	f000 f843 	bl	8008cf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c6a:	4b02      	ldr	r3, [pc, #8]	@ (8008c74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	200000f0 	.word	0x200000f0

08008c78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	6039      	str	r1, [r7, #0]
 8008c82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d105      	bne.n	8008c96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	4907      	ldr	r1, [pc, #28]	@ (8008cac <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c8e:	4808      	ldr	r0, [pc, #32]	@ (8008cb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c90:	f7ff fdfe 	bl	8008890 <USBD_GetString>
 8008c94:	e004      	b.n	8008ca0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	4904      	ldr	r1, [pc, #16]	@ (8008cac <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c9a:	4805      	ldr	r0, [pc, #20]	@ (8008cb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c9c:	f7ff fdf8 	bl	8008890 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ca0:	4b02      	ldr	r3, [pc, #8]	@ (8008cac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	200005b0 	.word	0x200005b0
 8008cb0:	080094b4 	.word	0x080094b4

08008cb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cc0:	79fb      	ldrb	r3, [r7, #7]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d105      	bne.n	8008cd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	4907      	ldr	r1, [pc, #28]	@ (8008ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cca:	4808      	ldr	r0, [pc, #32]	@ (8008cec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ccc:	f7ff fde0 	bl	8008890 <USBD_GetString>
 8008cd0:	e004      	b.n	8008cdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	4904      	ldr	r1, [pc, #16]	@ (8008ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cd6:	4805      	ldr	r0, [pc, #20]	@ (8008cec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cd8:	f7ff fdda 	bl	8008890 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cdc:	4b02      	ldr	r3, [pc, #8]	@ (8008ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	200005b0 	.word	0x200005b0
 8008cec:	080094c8 	.word	0x080094c8

08008cf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8008d34 <Get_SerialNum+0x44>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8008d38 <Get_SerialNum+0x48>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d02:	4b0e      	ldr	r3, [pc, #56]	@ (8008d3c <Get_SerialNum+0x4c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d009      	beq.n	8008d2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d16:	2208      	movs	r2, #8
 8008d18:	4909      	ldr	r1, [pc, #36]	@ (8008d40 <Get_SerialNum+0x50>)
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 f814 	bl	8008d48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d20:	2204      	movs	r2, #4
 8008d22:	4908      	ldr	r1, [pc, #32]	@ (8008d44 <Get_SerialNum+0x54>)
 8008d24:	68b8      	ldr	r0, [r7, #8]
 8008d26:	f000 f80f 	bl	8008d48 <IntToUnicode>
  }
}
 8008d2a:	bf00      	nop
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	1fff7a10 	.word	0x1fff7a10
 8008d38:	1fff7a14 	.word	0x1fff7a14
 8008d3c:	1fff7a18 	.word	0x1fff7a18
 8008d40:	200000f2 	.word	0x200000f2
 8008d44:	20000102 	.word	0x20000102

08008d48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	75fb      	strb	r3, [r7, #23]
 8008d5e:	e027      	b.n	8008db0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	0f1b      	lsrs	r3, r3, #28
 8008d64:	2b09      	cmp	r3, #9
 8008d66:	d80b      	bhi.n	8008d80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	0f1b      	lsrs	r3, r3, #28
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	4619      	mov	r1, r3
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	440b      	add	r3, r1
 8008d78:	3230      	adds	r2, #48	@ 0x30
 8008d7a:	b2d2      	uxtb	r2, r2
 8008d7c:	701a      	strb	r2, [r3, #0]
 8008d7e:	e00a      	b.n	8008d96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	0f1b      	lsrs	r3, r3, #28
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	440b      	add	r3, r1
 8008d90:	3237      	adds	r2, #55	@ 0x37
 8008d92:	b2d2      	uxtb	r2, r2
 8008d94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	011b      	lsls	r3, r3, #4
 8008d9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	3301      	adds	r3, #1
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	4413      	add	r3, r2
 8008da6:	2200      	movs	r2, #0
 8008da8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
 8008dac:	3301      	adds	r3, #1
 8008dae:	75fb      	strb	r3, [r7, #23]
 8008db0:	7dfa      	ldrb	r2, [r7, #23]
 8008db2:	79fb      	ldrb	r3, [r7, #7]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d3d3      	bcc.n	8008d60 <IntToUnicode+0x18>
  }
}
 8008db8:	bf00      	nop
 8008dba:	bf00      	nop
 8008dbc:	371c      	adds	r7, #28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
	...

08008dc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08a      	sub	sp, #40	@ 0x28
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dd0:	f107 0314 	add.w	r3, r7, #20
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	605a      	str	r2, [r3, #4]
 8008dda:	609a      	str	r2, [r3, #8]
 8008ddc:	60da      	str	r2, [r3, #12]
 8008dde:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008de8:	d147      	bne.n	8008e7a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dea:	2300      	movs	r3, #0
 8008dec:	613b      	str	r3, [r7, #16]
 8008dee:	4b25      	ldr	r3, [pc, #148]	@ (8008e84 <HAL_PCD_MspInit+0xbc>)
 8008df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008df2:	4a24      	ldr	r2, [pc, #144]	@ (8008e84 <HAL_PCD_MspInit+0xbc>)
 8008df4:	f043 0301 	orr.w	r3, r3, #1
 8008df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dfa:	4b22      	ldr	r3, [pc, #136]	@ (8008e84 <HAL_PCD_MspInit+0xbc>)
 8008dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	613b      	str	r3, [r7, #16]
 8008e04:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008e06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e14:	f107 0314 	add.w	r3, r7, #20
 8008e18:	4619      	mov	r1, r3
 8008e1a:	481b      	ldr	r0, [pc, #108]	@ (8008e88 <HAL_PCD_MspInit+0xc0>)
 8008e1c:	f7f9 fe78 	bl	8002b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e20:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e26:	2302      	movs	r3, #2
 8008e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e32:	230a      	movs	r3, #10
 8008e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e36:	f107 0314 	add.w	r3, r7, #20
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4812      	ldr	r0, [pc, #72]	@ (8008e88 <HAL_PCD_MspInit+0xc0>)
 8008e3e:	f7f9 fe67 	bl	8002b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e42:	4b10      	ldr	r3, [pc, #64]	@ (8008e84 <HAL_PCD_MspInit+0xbc>)
 8008e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e46:	4a0f      	ldr	r2, [pc, #60]	@ (8008e84 <HAL_PCD_MspInit+0xbc>)
 8008e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e4c:	6353      	str	r3, [r2, #52]	@ 0x34
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	4b0c      	ldr	r3, [pc, #48]	@ (8008e84 <HAL_PCD_MspInit+0xbc>)
 8008e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e56:	4a0b      	ldr	r2, [pc, #44]	@ (8008e84 <HAL_PCD_MspInit+0xbc>)
 8008e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008e5e:	4b09      	ldr	r3, [pc, #36]	@ (8008e84 <HAL_PCD_MspInit+0xbc>)
 8008e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	2043      	movs	r0, #67	@ 0x43
 8008e70:	f7f9 fe17 	bl	8002aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e74:	2043      	movs	r0, #67	@ 0x43
 8008e76:	f7f9 fe30 	bl	8002ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e7a:	bf00      	nop
 8008e7c:	3728      	adds	r7, #40	@ 0x28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	40023800 	.word	0x40023800
 8008e88:	40020000 	.word	0x40020000

08008e8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	f7fe fb91 	bl	80075ca <USBD_LL_SetupStage>
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008ec2:	78fa      	ldrb	r2, [r7, #3]
 8008ec4:	6879      	ldr	r1, [r7, #4]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	4413      	add	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	440b      	add	r3, r1
 8008ed0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	78fb      	ldrb	r3, [r7, #3]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	f7fe fbcb 	bl	8007674 <USBD_LL_DataOutStage>
}
 8008ede:	bf00      	nop
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b082      	sub	sp, #8
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008ef8:	78fa      	ldrb	r2, [r7, #3]
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	4613      	mov	r3, r2
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	4413      	add	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	440b      	add	r3, r1
 8008f06:	3320      	adds	r3, #32
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	78fb      	ldrb	r3, [r7, #3]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	f7fe fc64 	bl	80077da <USBD_LL_DataInStage>
}
 8008f12:	bf00      	nop
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fe fd9e 	bl	8007a6a <USBD_LL_SOF>
}
 8008f2e:	bf00      	nop
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	79db      	ldrb	r3, [r3, #7]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d102      	bne.n	8008f50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]
 8008f4e:	e008      	b.n	8008f62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	79db      	ldrb	r3, [r3, #7]
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d102      	bne.n	8008f5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	73fb      	strb	r3, [r7, #15]
 8008f5c:	e001      	b.n	8008f62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008f5e:	f7f9 fac1 	bl	80024e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f68:	7bfa      	ldrb	r2, [r7, #15]
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fe fd38 	bl	80079e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7fe fce0 	bl	800793e <USBD_LL_Reset>
}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
	...

08008f88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe fd33 	bl	8007a02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	6812      	ldr	r2, [r2, #0]
 8008faa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008fae:	f043 0301 	orr.w	r3, r3, #1
 8008fb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	7adb      	ldrb	r3, [r3, #11]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d005      	beq.n	8008fc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fbc:	4b04      	ldr	r3, [pc, #16]	@ (8008fd0 <HAL_PCD_SuspendCallback+0x48>)
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	4a03      	ldr	r2, [pc, #12]	@ (8008fd0 <HAL_PCD_SuspendCallback+0x48>)
 8008fc2:	f043 0306 	orr.w	r3, r3, #6
 8008fc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fc8:	bf00      	nop
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	e000ed00 	.word	0xe000ed00

08008fd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe fd29 	bl	8007a3a <USBD_LL_Resume>
}
 8008fe8:	bf00      	nop
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009002:	78fa      	ldrb	r2, [r7, #3]
 8009004:	4611      	mov	r1, r2
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe fd81 	bl	8007b0e <USBD_LL_IsoOUTIncomplete>
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009026:	78fa      	ldrb	r2, [r7, #3]
 8009028:	4611      	mov	r1, r2
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe fd3d 	bl	8007aaa <USBD_LL_IsoINIncomplete>
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fd93 	bl	8007b72 <USBD_LL_DevConnected>
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fd90 	bl	8007b88 <USBD_LL_DevDisconnected>
}
 8009068:	bf00      	nop
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d13c      	bne.n	80090fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009080:	4a20      	ldr	r2, [pc, #128]	@ (8009104 <USBD_LL_Init+0x94>)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a1e      	ldr	r2, [pc, #120]	@ (8009104 <USBD_LL_Init+0x94>)
 800908c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009090:	4b1c      	ldr	r3, [pc, #112]	@ (8009104 <USBD_LL_Init+0x94>)
 8009092:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009096:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009098:	4b1a      	ldr	r3, [pc, #104]	@ (8009104 <USBD_LL_Init+0x94>)
 800909a:	2204      	movs	r2, #4
 800909c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800909e:	4b19      	ldr	r3, [pc, #100]	@ (8009104 <USBD_LL_Init+0x94>)
 80090a0:	2202      	movs	r2, #2
 80090a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80090a4:	4b17      	ldr	r3, [pc, #92]	@ (8009104 <USBD_LL_Init+0x94>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80090aa:	4b16      	ldr	r3, [pc, #88]	@ (8009104 <USBD_LL_Init+0x94>)
 80090ac:	2202      	movs	r2, #2
 80090ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80090b0:	4b14      	ldr	r3, [pc, #80]	@ (8009104 <USBD_LL_Init+0x94>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80090b6:	4b13      	ldr	r3, [pc, #76]	@ (8009104 <USBD_LL_Init+0x94>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80090bc:	4b11      	ldr	r3, [pc, #68]	@ (8009104 <USBD_LL_Init+0x94>)
 80090be:	2200      	movs	r2, #0
 80090c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80090c2:	4b10      	ldr	r3, [pc, #64]	@ (8009104 <USBD_LL_Init+0x94>)
 80090c4:	2201      	movs	r2, #1
 80090c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80090c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009104 <USBD_LL_Init+0x94>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80090ce:	480d      	ldr	r0, [pc, #52]	@ (8009104 <USBD_LL_Init+0x94>)
 80090d0:	f7f9 feeb 	bl	8002eaa <HAL_PCD_Init>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80090da:	f7f9 fa03 	bl	80024e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80090de:	2180      	movs	r1, #128	@ 0x80
 80090e0:	4808      	ldr	r0, [pc, #32]	@ (8009104 <USBD_LL_Init+0x94>)
 80090e2:	f7fb f900 	bl	80042e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80090e6:	2240      	movs	r2, #64	@ 0x40
 80090e8:	2100      	movs	r1, #0
 80090ea:	4806      	ldr	r0, [pc, #24]	@ (8009104 <USBD_LL_Init+0x94>)
 80090ec:	f7fb f8b4 	bl	8004258 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80090f0:	2280      	movs	r2, #128	@ 0x80
 80090f2:	2101      	movs	r1, #1
 80090f4:	4803      	ldr	r0, [pc, #12]	@ (8009104 <USBD_LL_Init+0x94>)
 80090f6:	f7fb f8af 	bl	8004258 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	200007b0 	.word	0x200007b0

08009108 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800911e:	4618      	mov	r0, r3
 8009120:	f7f9 ffd2 	bl	80030c8 <HAL_PCD_Start>
 8009124:	4603      	mov	r3, r0
 8009126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	4618      	mov	r0, r3
 800912c:	f000 f930 	bl	8009390 <USBD_Get_USB_Status>
 8009130:	4603      	mov	r3, r0
 8009132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009134:	7bbb      	ldrb	r3, [r7, #14]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	4608      	mov	r0, r1
 8009148:	4611      	mov	r1, r2
 800914a:	461a      	mov	r2, r3
 800914c:	4603      	mov	r3, r0
 800914e:	70fb      	strb	r3, [r7, #3]
 8009150:	460b      	mov	r3, r1
 8009152:	70bb      	strb	r3, [r7, #2]
 8009154:	4613      	mov	r3, r2
 8009156:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009166:	78bb      	ldrb	r3, [r7, #2]
 8009168:	883a      	ldrh	r2, [r7, #0]
 800916a:	78f9      	ldrb	r1, [r7, #3]
 800916c:	f7fa fca6 	bl	8003abc <HAL_PCD_EP_Open>
 8009170:	4603      	mov	r3, r0
 8009172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009174:	7bfb      	ldrb	r3, [r7, #15]
 8009176:	4618      	mov	r0, r3
 8009178:	f000 f90a 	bl	8009390 <USBD_Get_USB_Status>
 800917c:	4603      	mov	r3, r0
 800917e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009180:	7bbb      	ldrb	r3, [r7, #14]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	460b      	mov	r3, r1
 8009194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091a4:	78fa      	ldrb	r2, [r7, #3]
 80091a6:	4611      	mov	r1, r2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fa fcf1 	bl	8003b90 <HAL_PCD_EP_Close>
 80091ae:	4603      	mov	r3, r0
 80091b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 f8eb 	bl	8009390 <USBD_Get_USB_Status>
 80091ba:	4603      	mov	r3, r0
 80091bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091be:	7bbb      	ldrb	r3, [r7, #14]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091e2:	78fa      	ldrb	r2, [r7, #3]
 80091e4:	4611      	mov	r1, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fa fd91 	bl	8003d0e <HAL_PCD_EP_SetStall>
 80091ec:	4603      	mov	r3, r0
 80091ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 f8cc 	bl	8009390 <USBD_Get_USB_Status>
 80091f8:	4603      	mov	r3, r0
 80091fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	460b      	mov	r3, r1
 8009210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009220:	78fa      	ldrb	r2, [r7, #3]
 8009222:	4611      	mov	r1, r2
 8009224:	4618      	mov	r0, r3
 8009226:	f7fa fdd5 	bl	8003dd4 <HAL_PCD_EP_ClrStall>
 800922a:	4603      	mov	r3, r0
 800922c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	4618      	mov	r0, r3
 8009232:	f000 f8ad 	bl	8009390 <USBD_Get_USB_Status>
 8009236:	4603      	mov	r3, r0
 8009238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800923a:	7bbb      	ldrb	r3, [r7, #14]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009256:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800925c:	2b00      	cmp	r3, #0
 800925e:	da0b      	bge.n	8009278 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009260:	78fb      	ldrb	r3, [r7, #3]
 8009262:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009266:	68f9      	ldr	r1, [r7, #12]
 8009268:	4613      	mov	r3, r2
 800926a:	00db      	lsls	r3, r3, #3
 800926c:	4413      	add	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	440b      	add	r3, r1
 8009272:	3316      	adds	r3, #22
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	e00b      	b.n	8009290 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009278:	78fb      	ldrb	r3, [r7, #3]
 800927a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	4613      	mov	r3, r2
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	440b      	add	r3, r1
 800928a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800928e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fa fbda 	bl	8003a74 <HAL_PCD_SetAddress>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 f862 	bl	8009390 <USBD_Get_USB_Status>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b086      	sub	sp, #24
 80092de:	af00      	add	r7, sp, #0
 80092e0:	60f8      	str	r0, [r7, #12]
 80092e2:	607a      	str	r2, [r7, #4]
 80092e4:	603b      	str	r3, [r7, #0]
 80092e6:	460b      	mov	r3, r1
 80092e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80092f8:	7af9      	ldrb	r1, [r7, #11]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	f7fa fccc 	bl	8003c9a <HAL_PCD_EP_Transmit>
 8009302:	4603      	mov	r3, r0
 8009304:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	4618      	mov	r0, r3
 800930a:	f000 f841 	bl	8009390 <USBD_Get_USB_Status>
 800930e:	4603      	mov	r3, r0
 8009310:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009312:	7dbb      	ldrb	r3, [r7, #22]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	607a      	str	r2, [r7, #4]
 8009326:	603b      	str	r3, [r7, #0]
 8009328:	460b      	mov	r3, r1
 800932a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800933a:	7af9      	ldrb	r1, [r7, #11]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	f7fa fc70 	bl	8003c24 <HAL_PCD_EP_Receive>
 8009344:	4603      	mov	r3, r0
 8009346:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009348:	7dfb      	ldrb	r3, [r7, #23]
 800934a:	4618      	mov	r0, r3
 800934c:	f000 f820 	bl	8009390 <USBD_Get_USB_Status>
 8009350:	4603      	mov	r3, r0
 8009352:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009354:	7dbb      	ldrb	r3, [r7, #22]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
	...

08009360 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009368:	4b03      	ldr	r3, [pc, #12]	@ (8009378 <USBD_static_malloc+0x18>)
}
 800936a:	4618      	mov	r0, r3
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	20000c94 	.word	0x20000c94

0800937c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]

}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800939e:	79fb      	ldrb	r3, [r7, #7]
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d817      	bhi.n	80093d4 <USBD_Get_USB_Status+0x44>
 80093a4:	a201      	add	r2, pc, #4	@ (adr r2, 80093ac <USBD_Get_USB_Status+0x1c>)
 80093a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093aa:	bf00      	nop
 80093ac:	080093bd 	.word	0x080093bd
 80093b0:	080093c3 	.word	0x080093c3
 80093b4:	080093c9 	.word	0x080093c9
 80093b8:	080093cf 	.word	0x080093cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	73fb      	strb	r3, [r7, #15]
    break;
 80093c0:	e00b      	b.n	80093da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093c2:	2303      	movs	r3, #3
 80093c4:	73fb      	strb	r3, [r7, #15]
    break;
 80093c6:	e008      	b.n	80093da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093c8:	2301      	movs	r3, #1
 80093ca:	73fb      	strb	r3, [r7, #15]
    break;
 80093cc:	e005      	b.n	80093da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093ce:	2303      	movs	r3, #3
 80093d0:	73fb      	strb	r3, [r7, #15]
    break;
 80093d2:	e002      	b.n	80093da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093d4:	2303      	movs	r3, #3
 80093d6:	73fb      	strb	r3, [r7, #15]
    break;
 80093d8:	bf00      	nop
  }
  return usb_status;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <memset>:
 80093e8:	4402      	add	r2, r0
 80093ea:	4603      	mov	r3, r0
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d100      	bne.n	80093f2 <memset+0xa>
 80093f0:	4770      	bx	lr
 80093f2:	f803 1b01 	strb.w	r1, [r3], #1
 80093f6:	e7f9      	b.n	80093ec <memset+0x4>

080093f8 <__libc_init_array>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	4d0d      	ldr	r5, [pc, #52]	@ (8009430 <__libc_init_array+0x38>)
 80093fc:	4c0d      	ldr	r4, [pc, #52]	@ (8009434 <__libc_init_array+0x3c>)
 80093fe:	1b64      	subs	r4, r4, r5
 8009400:	10a4      	asrs	r4, r4, #2
 8009402:	2600      	movs	r6, #0
 8009404:	42a6      	cmp	r6, r4
 8009406:	d109      	bne.n	800941c <__libc_init_array+0x24>
 8009408:	4d0b      	ldr	r5, [pc, #44]	@ (8009438 <__libc_init_array+0x40>)
 800940a:	4c0c      	ldr	r4, [pc, #48]	@ (800943c <__libc_init_array+0x44>)
 800940c:	f000 f826 	bl	800945c <_init>
 8009410:	1b64      	subs	r4, r4, r5
 8009412:	10a4      	asrs	r4, r4, #2
 8009414:	2600      	movs	r6, #0
 8009416:	42a6      	cmp	r6, r4
 8009418:	d105      	bne.n	8009426 <__libc_init_array+0x2e>
 800941a:	bd70      	pop	{r4, r5, r6, pc}
 800941c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009420:	4798      	blx	r3
 8009422:	3601      	adds	r6, #1
 8009424:	e7ee      	b.n	8009404 <__libc_init_array+0xc>
 8009426:	f855 3b04 	ldr.w	r3, [r5], #4
 800942a:	4798      	blx	r3
 800942c:	3601      	adds	r6, #1
 800942e:	e7f2      	b.n	8009416 <__libc_init_array+0x1e>
 8009430:	08009720 	.word	0x08009720
 8009434:	08009720 	.word	0x08009720
 8009438:	08009720 	.word	0x08009720
 800943c:	08009728 	.word	0x08009728

08009440 <memcpy>:
 8009440:	440a      	add	r2, r1
 8009442:	4291      	cmp	r1, r2
 8009444:	f100 33ff 	add.w	r3, r0, #4294967295
 8009448:	d100      	bne.n	800944c <memcpy+0xc>
 800944a:	4770      	bx	lr
 800944c:	b510      	push	{r4, lr}
 800944e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009456:	4291      	cmp	r1, r2
 8009458:	d1f9      	bne.n	800944e <memcpy+0xe>
 800945a:	bd10      	pop	{r4, pc}

0800945c <_init>:
 800945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945e:	bf00      	nop
 8009460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009462:	bc08      	pop	{r3}
 8009464:	469e      	mov	lr, r3
 8009466:	4770      	bx	lr

08009468 <_fini>:
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	bf00      	nop
 800946c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946e:	bc08      	pop	{r3}
 8009470:	469e      	mov	lr, r3
 8009472:	4770      	bx	lr
