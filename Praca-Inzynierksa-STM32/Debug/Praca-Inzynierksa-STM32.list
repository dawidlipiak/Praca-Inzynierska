
Praca-Inzynierksa-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090e0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08009268  08009268  0000a268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009458  08009458  0000b10c  2**0
                  CONTENTS
  4 .ARM          00000008  08009458  08009458  0000a458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009460  08009460  0000b10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009460  08009460  0000a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009464  08009464  0000a464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08009468  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b10c  2**0
                  CONTENTS
 10 .bss          00000b9c  20000110  20000110  0000b110  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000cac  20000cac  0000b110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b407  00000000  00000000  0000b13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c09  00000000  00000000  00026543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0002a150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101d  00000000  00000000  0002b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026133  00000000  00000000  0002c6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a25a  00000000  00000000  000527d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da410  00000000  00000000  0006ca32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146e42  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000589c  00000000  00000000  00146e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0014c724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009250 	.word	0x08009250

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	08009250 	.word	0x08009250

080001c8 <__aeabi_ldivmod>:
 80001c8:	b97b      	cbnz	r3, 80001ea <__aeabi_ldivmod+0x22>
 80001ca:	b972      	cbnz	r2, 80001ea <__aeabi_ldivmod+0x22>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bfbe      	ittt	lt
 80001d0:	2000      	movlt	r0, #0
 80001d2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001d6:	e006      	blt.n	80001e6 <__aeabi_ldivmod+0x1e>
 80001d8:	bf08      	it	eq
 80001da:	2800      	cmpeq	r0, #0
 80001dc:	bf1c      	itt	ne
 80001de:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80001e2:	f04f 30ff 	movne.w	r0, #4294967295
 80001e6:	f000 b9b5 	b.w	8000554 <__aeabi_idiv0>
 80001ea:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f2:	2900      	cmp	r1, #0
 80001f4:	db09      	blt.n	800020a <__aeabi_ldivmod+0x42>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db1a      	blt.n	8000230 <__aeabi_ldivmod+0x68>
 80001fa:	f000 f84d 	bl	8000298 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4770      	bx	lr
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	db1b      	blt.n	800024c <__aeabi_ldivmod+0x84>
 8000214:	f000 f840 	bl	8000298 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4240      	negs	r0, r0
 8000224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000228:	4252      	negs	r2, r2
 800022a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800022e:	4770      	bx	lr
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	f000 f82f 	bl	8000298 <__udivmoddi4>
 800023a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000242:	b004      	add	sp, #16
 8000244:	4240      	negs	r0, r0
 8000246:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024a:	4770      	bx	lr
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	f000 f821 	bl	8000298 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4252      	negs	r2, r2
 8000262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000266:	4770      	bx	lr

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b96a 	b.w	8000554 <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	9d08      	ldr	r5, [sp, #32]
 800029e:	460c      	mov	r4, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14e      	bne.n	8000342 <__udivmoddi4+0xaa>
 80002a4:	4694      	mov	ip, r2
 80002a6:	458c      	cmp	ip, r1
 80002a8:	4686      	mov	lr, r0
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	d962      	bls.n	8000376 <__udivmoddi4+0xde>
 80002b0:	b14a      	cbz	r2, 80002c6 <__udivmoddi4+0x2e>
 80002b2:	f1c2 0320 	rsb	r3, r2, #32
 80002b6:	4091      	lsls	r1, r2
 80002b8:	fa20 f303 	lsr.w	r3, r0, r3
 80002bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c0:	4319      	orrs	r1, r3
 80002c2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ca:	fa1f f68c 	uxth.w	r6, ip
 80002ce:	fbb1 f4f7 	udiv	r4, r1, r7
 80002d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d6:	fb07 1114 	mls	r1, r7, r4, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb04 f106 	mul.w	r1, r4, r6
 80002e2:	4299      	cmp	r1, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x64>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ee:	f080 8112 	bcs.w	8000516 <__udivmoddi4+0x27e>
 80002f2:	4299      	cmp	r1, r3
 80002f4:	f240 810f 	bls.w	8000516 <__udivmoddi4+0x27e>
 80002f8:	3c02      	subs	r4, #2
 80002fa:	4463      	add	r3, ip
 80002fc:	1a59      	subs	r1, r3, r1
 80002fe:	fa1f f38e 	uxth.w	r3, lr
 8000302:	fbb1 f0f7 	udiv	r0, r1, r7
 8000306:	fb07 1110 	mls	r1, r7, r0, r1
 800030a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030e:	fb00 f606 	mul.w	r6, r0, r6
 8000312:	429e      	cmp	r6, r3
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x94>
 8000316:	eb1c 0303 	adds.w	r3, ip, r3
 800031a:	f100 31ff 	add.w	r1, r0, #4294967295
 800031e:	f080 80fc 	bcs.w	800051a <__udivmoddi4+0x282>
 8000322:	429e      	cmp	r6, r3
 8000324:	f240 80f9 	bls.w	800051a <__udivmoddi4+0x282>
 8000328:	4463      	add	r3, ip
 800032a:	3802      	subs	r0, #2
 800032c:	1b9b      	subs	r3, r3, r6
 800032e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000332:	2100      	movs	r1, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0xa6>
 8000336:	40d3      	lsrs	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	e9c5 3200 	strd	r3, r2, [r5]
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	428b      	cmp	r3, r1
 8000344:	d905      	bls.n	8000352 <__udivmoddi4+0xba>
 8000346:	b10d      	cbz	r5, 800034c <__udivmoddi4+0xb4>
 8000348:	e9c5 0100 	strd	r0, r1, [r5]
 800034c:	2100      	movs	r1, #0
 800034e:	4608      	mov	r0, r1
 8000350:	e7f5      	b.n	800033e <__udivmoddi4+0xa6>
 8000352:	fab3 f183 	clz	r1, r3
 8000356:	2900      	cmp	r1, #0
 8000358:	d146      	bne.n	80003e8 <__udivmoddi4+0x150>
 800035a:	42a3      	cmp	r3, r4
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0xcc>
 800035e:	4290      	cmp	r0, r2
 8000360:	f0c0 80f0 	bcc.w	8000544 <__udivmoddi4+0x2ac>
 8000364:	1a86      	subs	r6, r0, r2
 8000366:	eb64 0303 	sbc.w	r3, r4, r3
 800036a:	2001      	movs	r0, #1
 800036c:	2d00      	cmp	r5, #0
 800036e:	d0e6      	beq.n	800033e <__udivmoddi4+0xa6>
 8000370:	e9c5 6300 	strd	r6, r3, [r5]
 8000374:	e7e3      	b.n	800033e <__udivmoddi4+0xa6>
 8000376:	2a00      	cmp	r2, #0
 8000378:	f040 8090 	bne.w	800049c <__udivmoddi4+0x204>
 800037c:	eba1 040c 	sub.w	r4, r1, ip
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	fa1f f78c 	uxth.w	r7, ip
 8000388:	2101      	movs	r1, #1
 800038a:	fbb4 f6f8 	udiv	r6, r4, r8
 800038e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000392:	fb08 4416 	mls	r4, r8, r6, r4
 8000396:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039a:	fb07 f006 	mul.w	r0, r7, r6
 800039e:	4298      	cmp	r0, r3
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x11c>
 80003a2:	eb1c 0303 	adds.w	r3, ip, r3
 80003a6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x11a>
 80003ac:	4298      	cmp	r0, r3
 80003ae:	f200 80cd 	bhi.w	800054c <__udivmoddi4+0x2b4>
 80003b2:	4626      	mov	r6, r4
 80003b4:	1a1c      	subs	r4, r3, r0
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb4 f0f8 	udiv	r0, r4, r8
 80003be:	fb08 4410 	mls	r4, r8, r0, r4
 80003c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c6:	fb00 f707 	mul.w	r7, r0, r7
 80003ca:	429f      	cmp	r7, r3
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x148>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x146>
 80003d8:	429f      	cmp	r7, r3
 80003da:	f200 80b0 	bhi.w	800053e <__udivmoddi4+0x2a6>
 80003de:	4620      	mov	r0, r4
 80003e0:	1bdb      	subs	r3, r3, r7
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0x9c>
 80003e8:	f1c1 0620 	rsb	r6, r1, #32
 80003ec:	408b      	lsls	r3, r1
 80003ee:	fa22 f706 	lsr.w	r7, r2, r6
 80003f2:	431f      	orrs	r7, r3
 80003f4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f8:	fa04 f301 	lsl.w	r3, r4, r1
 80003fc:	ea43 030c 	orr.w	r3, r3, ip
 8000400:	40f4      	lsrs	r4, r6
 8000402:	fa00 f801 	lsl.w	r8, r0, r1
 8000406:	0c38      	lsrs	r0, r7, #16
 8000408:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800040c:	fbb4 fef0 	udiv	lr, r4, r0
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	fb00 441e 	mls	r4, r0, lr, r4
 8000418:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041c:	fb0e f90c 	mul.w	r9, lr, ip
 8000420:	45a1      	cmp	r9, r4
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	d90a      	bls.n	800043e <__udivmoddi4+0x1a6>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042e:	f080 8084 	bcs.w	800053a <__udivmoddi4+0x2a2>
 8000432:	45a1      	cmp	r9, r4
 8000434:	f240 8081 	bls.w	800053a <__udivmoddi4+0x2a2>
 8000438:	f1ae 0e02 	sub.w	lr, lr, #2
 800043c:	443c      	add	r4, r7
 800043e:	eba4 0409 	sub.w	r4, r4, r9
 8000442:	fa1f f983 	uxth.w	r9, r3
 8000446:	fbb4 f3f0 	udiv	r3, r4, r0
 800044a:	fb00 4413 	mls	r4, r0, r3, r4
 800044e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000452:	fb03 fc0c 	mul.w	ip, r3, ip
 8000456:	45a4      	cmp	ip, r4
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x1d2>
 800045a:	193c      	adds	r4, r7, r4
 800045c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000460:	d267      	bcs.n	8000532 <__udivmoddi4+0x29a>
 8000462:	45a4      	cmp	ip, r4
 8000464:	d965      	bls.n	8000532 <__udivmoddi4+0x29a>
 8000466:	3b02      	subs	r3, #2
 8000468:	443c      	add	r4, r7
 800046a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046e:	fba0 9302 	umull	r9, r3, r0, r2
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	429c      	cmp	r4, r3
 8000478:	46ce      	mov	lr, r9
 800047a:	469c      	mov	ip, r3
 800047c:	d351      	bcc.n	8000522 <__udivmoddi4+0x28a>
 800047e:	d04e      	beq.n	800051e <__udivmoddi4+0x286>
 8000480:	b155      	cbz	r5, 8000498 <__udivmoddi4+0x200>
 8000482:	ebb8 030e 	subs.w	r3, r8, lr
 8000486:	eb64 040c 	sbc.w	r4, r4, ip
 800048a:	fa04 f606 	lsl.w	r6, r4, r6
 800048e:	40cb      	lsrs	r3, r1
 8000490:	431e      	orrs	r6, r3
 8000492:	40cc      	lsrs	r4, r1
 8000494:	e9c5 6400 	strd	r6, r4, [r5]
 8000498:	2100      	movs	r1, #0
 800049a:	e750      	b.n	800033e <__udivmoddi4+0xa6>
 800049c:	f1c2 0320 	rsb	r3, r2, #32
 80004a0:	fa20 f103 	lsr.w	r1, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	fa24 f303 	lsr.w	r3, r4, r3
 80004ac:	4094      	lsls	r4, r2
 80004ae:	430c      	orrs	r4, r1
 80004b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b4:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b8:	fa1f f78c 	uxth.w	r7, ip
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3110 	mls	r1, r8, r0, r3
 80004c4:	0c23      	lsrs	r3, r4, #16
 80004c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ca:	fb00 f107 	mul.w	r1, r0, r7
 80004ce:	4299      	cmp	r1, r3
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x24c>
 80004d2:	eb1c 0303 	adds.w	r3, ip, r3
 80004d6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004da:	d22c      	bcs.n	8000536 <__udivmoddi4+0x29e>
 80004dc:	4299      	cmp	r1, r3
 80004de:	d92a      	bls.n	8000536 <__udivmoddi4+0x29e>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a5b      	subs	r3, r3, r1
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004ec:	fb08 3311 	mls	r3, r8, r1, r3
 80004f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f4:	fb01 f307 	mul.w	r3, r1, r7
 80004f8:	42a3      	cmp	r3, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x276>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f101 36ff 	add.w	r6, r1, #4294967295
 8000504:	d213      	bcs.n	800052e <__udivmoddi4+0x296>
 8000506:	42a3      	cmp	r3, r4
 8000508:	d911      	bls.n	800052e <__udivmoddi4+0x296>
 800050a:	3902      	subs	r1, #2
 800050c:	4464      	add	r4, ip
 800050e:	1ae4      	subs	r4, r4, r3
 8000510:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000514:	e739      	b.n	800038a <__udivmoddi4+0xf2>
 8000516:	4604      	mov	r4, r0
 8000518:	e6f0      	b.n	80002fc <__udivmoddi4+0x64>
 800051a:	4608      	mov	r0, r1
 800051c:	e706      	b.n	800032c <__udivmoddi4+0x94>
 800051e:	45c8      	cmp	r8, r9
 8000520:	d2ae      	bcs.n	8000480 <__udivmoddi4+0x1e8>
 8000522:	ebb9 0e02 	subs.w	lr, r9, r2
 8000526:	eb63 0c07 	sbc.w	ip, r3, r7
 800052a:	3801      	subs	r0, #1
 800052c:	e7a8      	b.n	8000480 <__udivmoddi4+0x1e8>
 800052e:	4631      	mov	r1, r6
 8000530:	e7ed      	b.n	800050e <__udivmoddi4+0x276>
 8000532:	4603      	mov	r3, r0
 8000534:	e799      	b.n	800046a <__udivmoddi4+0x1d2>
 8000536:	4630      	mov	r0, r6
 8000538:	e7d4      	b.n	80004e4 <__udivmoddi4+0x24c>
 800053a:	46d6      	mov	lr, sl
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1a6>
 800053e:	4463      	add	r3, ip
 8000540:	3802      	subs	r0, #2
 8000542:	e74d      	b.n	80003e0 <__udivmoddi4+0x148>
 8000544:	4606      	mov	r6, r0
 8000546:	4623      	mov	r3, r4
 8000548:	4608      	mov	r0, r1
 800054a:	e70f      	b.n	800036c <__udivmoddi4+0xd4>
 800054c:	3e02      	subs	r6, #2
 800054e:	4463      	add	r3, ip
 8000550:	e730      	b.n	80003b4 <__udivmoddi4+0x11c>
 8000552:	bf00      	nop

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <limitU32>:
	*akku += (newValue-lastValue) << (maxFilter-actualFilter);
	return *akku >> maxFilter;
}

static uint32_t limitU32(int32_t value, int32_t min, int32_t max)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
	if (value > max)
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	429a      	cmp	r2, r3
 800056a:	dd01      	ble.n	8000570 <limitU32+0x18>
		return max;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	e006      	b.n	800057e <limitU32+0x26>
	else if (value < min)
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	429a      	cmp	r2, r3
 8000576:	da01      	bge.n	800057c <limitU32+0x24>
		return min;
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	e000      	b.n	800057e <limitU32+0x26>
	else
		return value;
 800057c:	68fb      	ldr	r3, [r7, #12]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <limitS64>:

static int64_t limitS64(int64_t value, int64_t min, int64_t max)
{
 800058a:	b480      	push	{r7}
 800058c:	b085      	sub	sp, #20
 800058e:	af00      	add	r7, sp, #0
 8000590:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000594:	e9c7 2300 	strd	r2, r3, [r7]
	if (value > max)
 8000598:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800059c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80005a0:	4290      	cmp	r0, r2
 80005a2:	eb71 0303 	sbcs.w	r3, r1, r3
 80005a6:	da02      	bge.n	80005ae <limitS64+0x24>
		return max;
 80005a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80005ac:	e00c      	b.n	80005c8 <limitS64+0x3e>
	else if (value < min)
 80005ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80005b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005b6:	4290      	cmp	r0, r2
 80005b8:	eb71 0303 	sbcs.w	r3, r1, r3
 80005bc:	da02      	bge.n	80005c4 <limitS64+0x3a>
		return min;
 80005be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005c2:	e001      	b.n	80005c8 <limitS64+0x3e>
	else
		return value;
 80005c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80005c8:	4610      	mov	r0, r2
 80005ca:	4619      	mov	r1, r3
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <sqrt_int>:
	239, 240, 240, 241, 241, 242, 242, 243, 243, 244, 244, 245, 245, 246, 246, 247,
	247, 248, 248, 249, 249, 250, 250, 251, 251, 252, 252, 253, 253, 254, 254, 255
};

static int32_t sqrt_int(int32_t x)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	int32_t xn;

	// Negative parameter?
	if (x < 0)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	da02      	bge.n	80005ec <sqrt_int+0x14>
		return -1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e0b3      	b.n	8000754 <sqrt_int+0x17c>

	if (x < 0x0100)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2bff      	cmp	r3, #255	@ 0xff
 80005f0:	dc06      	bgt.n	8000600 <sqrt_int+0x28>
		return (int32_t) sqrttable[x] >> 4;
 80005f2:	4a5b      	ldr	r2, [pc, #364]	@ (8000760 <sqrt_int+0x188>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4413      	add	r3, r2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	091b      	lsrs	r3, r3, #4
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	e0a9      	b.n	8000754 <sqrt_int+0x17c>

	if (x >= 0x00010000)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000606:	db6e      	blt.n	80006e6 <sqrt_int+0x10e>
	{
		if (x >= 0x01000000)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800060e:	db39      	blt.n	8000684 <sqrt_int+0xac>
		{
			if (x >= 0x10000000)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000616:	db11      	blt.n	800063c <sqrt_int+0x64>
			{
				if (x >= 0x40000000)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800061e:	db06      	blt.n	800062e <sqrt_int+0x56>
				{
					// 0x40000000 <= x < 0x7FFFFFFF
					xn = (int32_t) sqrttable[x >> 24] << 8;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	161b      	asrs	r3, r3, #24
 8000624:	4a4e      	ldr	r2, [pc, #312]	@ (8000760 <sqrt_int+0x188>)
 8000626:	5cd3      	ldrb	r3, [r2, r3]
 8000628:	021b      	lsls	r3, r3, #8
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e017      	b.n	800065e <sqrt_int+0x86>
				}
				else
				{
					// 0x10000000 <= x < 0x40000000
					xn = (int32_t) sqrttable[x >> 22] << 7;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	159b      	asrs	r3, r3, #22
 8000632:	4a4b      	ldr	r2, [pc, #300]	@ (8000760 <sqrt_int+0x188>)
 8000634:	5cd3      	ldrb	r3, [r2, r3]
 8000636:	01db      	lsls	r3, r3, #7
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e010      	b.n	800065e <sqrt_int+0x86>
				}
			}
			else
			{
				if (x >= 0x04000000)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000642:	db06      	blt.n	8000652 <sqrt_int+0x7a>
				{
					// 0x04000000 <= x < 0x10000000
					xn = (int32_t) sqrttable[x >> 20] << 6;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	151b      	asrs	r3, r3, #20
 8000648:	4a45      	ldr	r2, [pc, #276]	@ (8000760 <sqrt_int+0x188>)
 800064a:	5cd3      	ldrb	r3, [r2, r3]
 800064c:	019b      	lsls	r3, r3, #6
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	e005      	b.n	800065e <sqrt_int+0x86>
				}
				else
				{
					// 0x01000000 <= x < 0x04000000
					xn = (int32_t) sqrttable[x >> 18] << 5;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	149b      	asrs	r3, r3, #18
 8000656:	4a42      	ldr	r2, [pc, #264]	@ (8000760 <sqrt_int+0x188>)
 8000658:	5cd3      	ldrb	r3, [r2, r3]
 800065a:	015b      	lsls	r3, r3, #5
 800065c:	60fb      	str	r3, [r7, #12]
				}
			}

			// Two steps of the babylonian method
			xn = (xn + 1 + (x / xn)) >> 1;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	fb91 f3f3 	sdiv	r3, r1, r3
 800066a:	4413      	add	r3, r2
 800066c:	105b      	asrs	r3, r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
			xn = (xn + 1 + (x / xn)) >> 1;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	6879      	ldr	r1, [r7, #4]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	fb91 f3f3 	sdiv	r3, r1, r3
 800067c:	4413      	add	r3, r2
 800067e:	105b      	asrs	r3, r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	e05d      	b.n	8000740 <sqrt_int+0x168>
		}
		else
		{
			if (x >= 0x00100000)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800068a:	db11      	blt.n	80006b0 <sqrt_int+0xd8>
			{
				if (x >= 0x00400000)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000692:	db06      	blt.n	80006a2 <sqrt_int+0xca>
				{
					// 0x00400000 <= x < 0x01000000
					xn = (int32_t) sqrttable[x >> 16] << 4;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	141b      	asrs	r3, r3, #16
 8000698:	4a31      	ldr	r2, [pc, #196]	@ (8000760 <sqrt_int+0x188>)
 800069a:	5cd3      	ldrb	r3, [r2, r3]
 800069c:	011b      	lsls	r3, r3, #4
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	e017      	b.n	80006d2 <sqrt_int+0xfa>
				}
				else
				{
					// 0x00100000 <= x < 0x00400000
					xn = (int32_t) sqrttable[x >> 14] << 3;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	139b      	asrs	r3, r3, #14
 80006a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000760 <sqrt_int+0x188>)
 80006a8:	5cd3      	ldrb	r3, [r2, r3]
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	e010      	b.n	80006d2 <sqrt_int+0xfa>
				}
			}
			else
			{
				if (x >= 0x00040000)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80006b6:	db06      	blt.n	80006c6 <sqrt_int+0xee>
				{
					// 0x00040000 <= x < 0x00100000
					xn = (int32_t) sqrttable[x >> 12] << 2;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	131b      	asrs	r3, r3, #12
 80006bc:	4a28      	ldr	r2, [pc, #160]	@ (8000760 <sqrt_int+0x188>)
 80006be:	5cd3      	ldrb	r3, [r2, r3]
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	e005      	b.n	80006d2 <sqrt_int+0xfa>
				}
				else
				{
					// 0x00010000 <= x < 0x00040000
					xn = (int32_t) sqrttable[x >> 10] << 1;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	129b      	asrs	r3, r3, #10
 80006ca:	4a25      	ldr	r2, [pc, #148]	@ (8000760 <sqrt_int+0x188>)
 80006cc:	5cd3      	ldrb	r3, [r2, r3]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
				}
			}

			// One step of the babylonian method
			xn = (xn + 1 + (x / xn)) >> 1;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	fb91 f3f3 	sdiv	r3, r1, r3
 80006de:	4413      	add	r3, r2
 80006e0:	105b      	asrs	r3, r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	e02c      	b.n	8000740 <sqrt_int+0x168>
		}
	}
	else
	{
		if (x >= 0x1000)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80006ec:	db13      	blt.n	8000716 <sqrt_int+0x13e>
		{
			if (x >= 0x4000)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80006f4:	db06      	blt.n	8000704 <sqrt_int+0x12c>
			{
				// 0x4000 <= x < 0x00010000
				xn = (int32_t) (sqrttable[x >> 8] ) + 1;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	121b      	asrs	r3, r3, #8
 80006fa:	4a19      	ldr	r2, [pc, #100]	@ (8000760 <sqrt_int+0x188>)
 80006fc:	5cd3      	ldrb	r3, [r2, r3]
 80006fe:	3301      	adds	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	e01d      	b.n	8000740 <sqrt_int+0x168>
			}
			else
			{
				// 0x1000 <= x < 0x4000
				xn = (int32_t) (sqrttable[x >> 6] >> 1) + 1;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	119b      	asrs	r3, r3, #6
 8000708:	4a15      	ldr	r2, [pc, #84]	@ (8000760 <sqrt_int+0x188>)
 800070a:	5cd3      	ldrb	r3, [r2, r3]
 800070c:	085b      	lsrs	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	3301      	adds	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	e014      	b.n	8000740 <sqrt_int+0x168>
			}
		}
		else
		{
			if (x >= 0x0400)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800071c:	db08      	blt.n	8000730 <sqrt_int+0x158>
			{
				// 0x0400 <= x < 0x1000
				xn = (int32_t) (sqrttable[x >> 4] >> 2) + 1;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	111b      	asrs	r3, r3, #4
 8000722:	4a0f      	ldr	r2, [pc, #60]	@ (8000760 <sqrt_int+0x188>)
 8000724:	5cd3      	ldrb	r3, [r2, r3]
 8000726:	089b      	lsrs	r3, r3, #2
 8000728:	b2db      	uxtb	r3, r3
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	e007      	b.n	8000740 <sqrt_int+0x168>
			}
			else
			{
				// 0x0100 <= x < 0x0400
				xn = (int32_t) (sqrttable[x >> 2] >> 3) + 1;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	109b      	asrs	r3, r3, #2
 8000734:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <sqrt_int+0x188>)
 8000736:	5cd3      	ldrb	r3, [r2, r3]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	3301      	adds	r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
			}
		}
	}

	// Make sure that our result is floored
	if ((xn * xn) > x)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	fb03 f303 	mul.w	r3, r3, r3
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	429a      	cmp	r2, r3
 800074a:	da02      	bge.n	8000752 <sqrt_int+0x17a>
		xn--;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3b01      	subs	r3, #1
 8000750:	60fb      	str	r3, [r7, #12]

	return xn;
 8000752:	68fb      	ldr	r3, [r7, #12]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	080092c8 	.word	0x080092c8

08000764 <TMC_LinearRamp_init>:

#include "LinearRamp.h"


void TMC_LinearRamp_init(TMC_LinearRamp *ramp)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	ramp->maxVelocity     = 0;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
	ramp->targetPosition  = 0;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
	ramp->targetVelocity  = 0;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
	ramp->rampVelocity    = 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
	ramp->acceleration    = 0;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
	ramp->encoderSteps	= UINT16_MAX;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000790:	831a      	strh	r2, [r3, #24]
	ramp->lastdVRest      = 0;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
	ramp->lastdXRest      = 0;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
	ramp->rampEnabled     = false;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <TMC_LinearRamp_computeRampVelocity>:

void TMC_LinearRamp_computeRampVelocity(TMC_LinearRamp *ramp)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	if (ramp->rampEnabled)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d054      	beq.n	8000870 <TMC_LinearRamp_computeRampVelocity+0xbc>
	{
		// update target velocity according actual set acceleration
		// (scaling pre-factor of 1000 used for 1ms velocity ramp handling)

		int32_t dV = ramp->acceleration;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	60fb      	str	r3, [r7, #12]

		// to ensure that small velocity changes at high set acceleration are also possible
		int32_t maxDTV = abs(ramp->targetVelocity - ramp->rampVelocity);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	68da      	ldr	r2, [r3, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	bfb8      	it	lt
 80007da:	425b      	neglt	r3, r3
 80007dc:	60bb      	str	r3, [r7, #8]
		if (maxDTV < (dV/1000))
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	4a2e      	ldr	r2, [pc, #184]	@ (800089c <TMC_LinearRamp_computeRampVelocity+0xe8>)
 80007e2:	fb82 1203 	smull	r1, r2, r2, r3
 80007e6:	1192      	asrs	r2, r2, #6
 80007e8:	17db      	asrs	r3, r3, #31
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	da05      	bge.n	80007fe <TMC_LinearRamp_computeRampVelocity+0x4a>
			dV = maxDTV*1000;
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007f8:	fb02 f303 	mul.w	r3, r2, r3
 80007fc:	60fb      	str	r3, [r7, #12]

		dV += ramp->lastdVRest;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	4413      	add	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
		ramp->lastdVRest = dV % 1000;
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	4b24      	ldr	r3, [pc, #144]	@ (800089c <TMC_LinearRamp_computeRampVelocity+0xe8>)
 800080c:	fb83 1302 	smull	r1, r3, r3, r2
 8000810:	1199      	asrs	r1, r3, #6
 8000812:	17d3      	asrs	r3, r2, #31
 8000814:	1acb      	subs	r3, r1, r3
 8000816:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800081a:	fb01 f303 	mul.w	r3, r1, r3
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	61d3      	str	r3, [r2, #28]

		if (ramp->rampVelocity < ramp->targetVelocity)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	691a      	ldr	r2, [r3, #16]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	429a      	cmp	r2, r3
 800082e:	da0c      	bge.n	800084a <TMC_LinearRamp_computeRampVelocity+0x96>
		{
			// accelerate motor
			ramp->rampVelocity += dV/1000;	// divide with pre-factor
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	691a      	ldr	r2, [r3, #16]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4919      	ldr	r1, [pc, #100]	@ (800089c <TMC_LinearRamp_computeRampVelocity+0xe8>)
 8000838:	fb81 0103 	smull	r0, r1, r1, r3
 800083c:	1189      	asrs	r1, r1, #6
 800083e:	17db      	asrs	r3, r3, #31
 8000840:	1acb      	subs	r3, r1, r3
 8000842:	441a      	add	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	611a      	str	r2, [r3, #16]
 8000848:	e016      	b.n	8000878 <TMC_LinearRamp_computeRampVelocity+0xc4>
		}
		else if (ramp->rampVelocity > ramp->targetVelocity)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	691a      	ldr	r2, [r3, #16]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	429a      	cmp	r2, r3
 8000854:	dd10      	ble.n	8000878 <TMC_LinearRamp_computeRampVelocity+0xc4>
		{
			// decelerate motor
			ramp->rampVelocity -= dV/1000;	// divide with pre-factor
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	691a      	ldr	r2, [r3, #16]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	490f      	ldr	r1, [pc, #60]	@ (800089c <TMC_LinearRamp_computeRampVelocity+0xe8>)
 800085e:	fb81 0103 	smull	r0, r1, r1, r3
 8000862:	1189      	asrs	r1, r1, #6
 8000864:	17db      	asrs	r3, r3, #31
 8000866:	1a5b      	subs	r3, r3, r1
 8000868:	441a      	add	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	611a      	str	r2, [r3, #16]
 800086e:	e003      	b.n	8000878 <TMC_LinearRamp_computeRampVelocity+0xc4>
		}
	}
	else
	{
		// use target velocity directly
		ramp->rampVelocity = ramp->targetVelocity;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	611a      	str	r2, [r3, #16]
	}

	// limit ramp velocity
	ramp->rampVelocity = limitU32(ramp->rampVelocity, ramp->maxVelocity, ramp->maxVelocity);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6918      	ldr	r0, [r3, #16]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	f7ff fe66 	bl	8000558 <limitU32>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	611a      	str	r2, [r3, #16]
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	10624dd3 	.word	0x10624dd3

080008a0 <TMC_LinearRamp_computeRampPosition>:

void TMC_LinearRamp_computeRampPosition(TMC_LinearRamp *ramp)
{
 80008a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80008a4:	b0b6      	sub	sp, #216	@ 0xd8
 80008a6:	af02      	add	r7, sp, #8
 80008a8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	if (ramp->rampEnabled)
 80008ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80008b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	f000 8262 	beq.w	8000d7e <TMC_LinearRamp_computeRampPosition+0x4de>
	{
		// update target position according actual set acceleration and max velocity
		// (scaling pre-factor of 1000 used for 1ms position ramp handling)

		// limit position difference for further computations
		int32_t targetPositionsDifference = ramp->targetPosition-ramp->rampPosition;
 80008ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		// limit the sqrti value in case of high position differences
		int64_t sqrtiValue = limitS64(((int64_t)120 * (int64_t)ramp->acceleration * (int64_t)(abs(targetPositionsDifference))) / (int64_t)ramp->encoderSteps, 0, (int64_t)ramp->maxVelocity*(int64_t)ramp->maxVelocity);
 80008cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	17da      	asrs	r2, r3, #31
 80008d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80008d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80008d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80008dc:	2b00      	cmp	r3, #0
 80008de:	bfb8      	it	lt
 80008e0:	425b      	neglt	r3, r3
 80008e2:	17da      	asrs	r2, r3, #31
 80008e4:	469a      	mov	sl, r3
 80008e6:	4693      	mov	fp, r2
 80008e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80008ec:	460b      	mov	r3, r1
 80008ee:	fb0a f203 	mul.w	r2, sl, r3
 80008f2:	4603      	mov	r3, r0
 80008f4:	fb03 f30b 	mul.w	r3, r3, fp
 80008f8:	4413      	add	r3, r2
 80008fa:	4602      	mov	r2, r0
 80008fc:	fba2 450a 	umull	r4, r5, r2, sl
 8000900:	442b      	add	r3, r5
 8000902:	461d      	mov	r5, r3
 8000904:	4622      	mov	r2, r4
 8000906:	462b      	mov	r3, r5
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	f04f 0100 	mov.w	r1, #0
 8000910:	0119      	lsls	r1, r3, #4
 8000912:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8000916:	0110      	lsls	r0, r2, #4
 8000918:	4602      	mov	r2, r0
 800091a:	460b      	mov	r3, r1
 800091c:	ebb2 0804 	subs.w	r8, r2, r4
 8000920:	eb63 0905 	sbc.w	r9, r3, r5
 8000924:	f04f 0200 	mov.w	r2, #0
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000930:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000934:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000938:	4690      	mov	r8, r2
 800093a:	4699      	mov	r9, r3
 800093c:	4640      	mov	r0, r8
 800093e:	4649      	mov	r1, r9
 8000940:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000944:	8b1b      	ldrh	r3, [r3, #24]
 8000946:	b29b      	uxth	r3, r3
 8000948:	2200      	movs	r2, #0
 800094a:	673b      	str	r3, [r7, #112]	@ 0x70
 800094c:	677a      	str	r2, [r7, #116]	@ 0x74
 800094e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000952:	f7ff fc39 	bl	80001c8 <__aeabi_ldivmod>
 8000956:	4602      	mov	r2, r0
 8000958:	460b      	mov	r3, r1
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2200      	movs	r2, #0
 8000966:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000968:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800096a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	663b      	str	r3, [r7, #96]	@ 0x60
 8000974:	667a      	str	r2, [r7, #100]	@ 0x64
 8000976:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800097a:	464b      	mov	r3, r9
 800097c:	e9d7 ab18 	ldrd	sl, fp, [r7, #96]	@ 0x60
 8000980:	4652      	mov	r2, sl
 8000982:	fb02 f203 	mul.w	r2, r2, r3
 8000986:	465b      	mov	r3, fp
 8000988:	4644      	mov	r4, r8
 800098a:	fb04 f303 	mul.w	r3, r4, r3
 800098e:	4413      	add	r3, r2
 8000990:	4642      	mov	r2, r8
 8000992:	4654      	mov	r4, sl
 8000994:	fba2 4204 	umull	r4, r2, r2, r4
 8000998:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800099c:	4622      	mov	r2, r4
 800099e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80009a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80009a6:	4413      	add	r3, r2
 80009a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80009ac:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 80009b0:	e9cd 3400 	strd	r3, r4, [sp]
 80009b4:	f04f 0200 	mov.w	r2, #0
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	f7ff fde5 	bl	800058a <limitS64>
 80009c0:	e9c7 012c 	strd	r0, r1, [r7, #176]	@ 0xb0

		// compute max allowed ramp velocity to ramp down to target
		int32_t maxRampStop = sqrt_int(sqrtiValue);
 80009c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fe05 	bl	80005d8 <sqrt_int>
 80009ce:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

		// compute max allowed ramp velocity
		int32_t maxRampTargetVelocity = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		if (targetPositionsDifference > 0)
 80009d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dd0c      	ble.n	80009fa <TMC_LinearRamp_computeRampPosition+0x15a>
		{
			maxRampTargetVelocity = limitU32(maxRampStop, 0, (int32_t)ramp->maxVelocity);
 80009e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80009ee:	f7ff fdb3 	bl	8000558 <limitU32>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80009f8:	e011      	b.n	8000a1e <TMC_LinearRamp_computeRampPosition+0x17e>
		}
		else if (targetPositionsDifference < 0)
 80009fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	da0d      	bge.n	8000a1e <TMC_LinearRamp_computeRampPosition+0x17e>
		{
			maxRampTargetVelocity = limitU32(-maxRampStop, -(int32_t)ramp->maxVelocity, 0);
 8000a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000a06:	4258      	negs	r0, r3
 8000a08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	425b      	negs	r3, r3
 8000a10:	2200      	movs	r2, #0
 8000a12:	4619      	mov	r1, r3
 8000a14:	f7ff fda0 	bl	8000558 <limitU32>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		else
		{
			//maxRampTargetVelocity = 0;
		}

		int32_t dV = ramp->acceleration;  // pre-factor ~ 1/1000
 8000a1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

		// to ensure that small velocity changes at high set acceleration are also possible
		int32_t maxDTV = abs(maxRampTargetVelocity - ramp->rampVelocity);
 8000a28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a2c:	691a      	ldr	r2, [r3, #16]
 8000a2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a32:	1a9b      	subs	r3, r3, r2
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	bfb8      	it	lt
 8000a38:	425b      	neglt	r3, r3
 8000a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		if (maxDTV < (dV / 1000))
 8000a3e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8000a42:	4bd6      	ldr	r3, [pc, #856]	@ (8000d9c <TMC_LinearRamp_computeRampPosition+0x4fc>)
 8000a44:	fb83 2301 	smull	r2, r3, r3, r1
 8000a48:	119a      	asrs	r2, r3, #6
 8000a4a:	17cb      	asrs	r3, r1, #31
 8000a4c:	1ad2      	subs	r2, r2, r3
 8000a4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000a52:	4293      	cmp	r3, r2
 8000a54:	da07      	bge.n	8000a66 <TMC_LinearRamp_computeRampPosition+0x1c6>
			dV = maxDTV * 1000;
 8000a56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8000a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5e:	fb02 f303 	mul.w	r3, r2, r3
 8000a62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

		dV += ramp->lastdVRest;
 8000a66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a6a:	69da      	ldr	r2, [r3, #28]
 8000a6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000a70:	4413      	add	r3, r2
 8000a72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		ramp->lastdVRest = dV % 1000;
 8000a76:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8000a7a:	4bc8      	ldr	r3, [pc, #800]	@ (8000d9c <TMC_LinearRamp_computeRampPosition+0x4fc>)
 8000a7c:	fb83 2301 	smull	r2, r3, r3, r1
 8000a80:	119a      	asrs	r2, r3, #6
 8000a82:	17cb      	asrs	r3, r1, #31
 8000a84:	1ad2      	subs	r2, r2, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8a:	fb02 f303 	mul.w	r3, r2, r3
 8000a8e:	1aca      	subs	r2, r1, r3
 8000a90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a94:	61da      	str	r2, [r3, #28]

		// do velocity ramping
		if (maxRampTargetVelocity > ramp->rampVelocity)
 8000a96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a9a:	691a      	ldr	r2, [r3, #16]
 8000a9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	dd0f      	ble.n	8000ac4 <TMC_LinearRamp_computeRampPosition+0x224>
		{
			ramp->rampVelocity += dV / 1000;
 8000aa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000aa8:	6918      	ldr	r0, [r3, #16]
 8000aaa:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8000aae:	4bbb      	ldr	r3, [pc, #748]	@ (8000d9c <TMC_LinearRamp_computeRampPosition+0x4fc>)
 8000ab0:	fb83 2301 	smull	r2, r3, r3, r1
 8000ab4:	119a      	asrs	r2, r3, #6
 8000ab6:	17cb      	asrs	r3, r1, #31
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	18c2      	adds	r2, r0, r3
 8000abc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ac0:	611a      	str	r2, [r3, #16]
 8000ac2:	e015      	b.n	8000af0 <TMC_LinearRamp_computeRampPosition+0x250>
		}
		else if (maxRampTargetVelocity < ramp->rampVelocity)
 8000ac4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ac8:	691a      	ldr	r2, [r3, #16]
 8000aca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	da0e      	bge.n	8000af0 <TMC_LinearRamp_computeRampPosition+0x250>
		{
			ramp->rampVelocity -= dV / 1000;
 8000ad2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ad6:	6918      	ldr	r0, [r3, #16]
 8000ad8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8000adc:	4baf      	ldr	r3, [pc, #700]	@ (8000d9c <TMC_LinearRamp_computeRampPosition+0x4fc>)
 8000ade:	fb83 2301 	smull	r2, r3, r3, r1
 8000ae2:	119a      	asrs	r2, r3, #6
 8000ae4:	17cb      	asrs	r3, r1, #31
 8000ae6:	1a9b      	subs	r3, r3, r2
 8000ae8:	18c2      	adds	r2, r0, r3
 8000aea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000aee:	611a      	str	r2, [r3, #16]
		}

		// do position ramping using actual ramp velocity to update dX
		int64_t dX = ((int64_t)ramp->rampVelocity * (int64_t)ramp->encoderSteps) / ((int64_t)60) + ramp->lastdXRest;
 8000af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	17da      	asrs	r2, r3, #31
 8000af8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000afa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000afc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b00:	8b1b      	ldrh	r3, [r3, #24]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	2200      	movs	r2, #0
 8000b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8000b08:	657a      	str	r2, [r7, #84]	@ 0x54
 8000b0a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000b0e:	462b      	mov	r3, r5
 8000b10:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8000b14:	4642      	mov	r2, r8
 8000b16:	fb02 f203 	mul.w	r2, r2, r3
 8000b1a:	464b      	mov	r3, r9
 8000b1c:	4621      	mov	r1, r4
 8000b1e:	fb01 f303 	mul.w	r3, r1, r3
 8000b22:	4413      	add	r3, r2
 8000b24:	4622      	mov	r2, r4
 8000b26:	4641      	mov	r1, r8
 8000b28:	fba2 1201 	umull	r1, r2, r2, r1
 8000b2c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8000b30:	460a      	mov	r2, r1
 8000b32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8000b36:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b3a:	4413      	add	r3, r2
 8000b3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000b40:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8000b4c:	f7ff fb3c 	bl	80001c8 <__aeabi_ldivmod>
 8000b50:	4602      	mov	r2, r0
 8000b52:	460b      	mov	r3, r1
 8000b54:	4610      	mov	r0, r2
 8000b56:	4619      	mov	r1, r3
 8000b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	17da      	asrs	r2, r3, #31
 8000b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000b62:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000b64:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8000b68:	4623      	mov	r3, r4
 8000b6a:	18c3      	adds	r3, r0, r3
 8000b6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000b6e:	462b      	mov	r3, r5
 8000b70:	eb41 0303 	adc.w	r3, r1, r3
 8000b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b76:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000b7a:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0

		// scale actual target position
		int64_t tempActualTargetPosition = (int64_t)ramp->rampPosition * 1000;
 8000b7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	17da      	asrs	r2, r3, #31
 8000b86:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b88:	647a      	str	r2, [r7, #68]	@ 0x44
 8000b8a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8000b8e:	4622      	mov	r2, r4
 8000b90:	462b      	mov	r3, r5
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	f04f 0100 	mov.w	r1, #0
 8000b9a:	0159      	lsls	r1, r3, #5
 8000b9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000ba0:	0150      	lsls	r0, r2, #5
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	4621      	mov	r1, r4
 8000ba8:	1a51      	subs	r1, r2, r1
 8000baa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000bac:	4629      	mov	r1, r5
 8000bae:	eb63 0301 	sbc.w	r3, r3, r1
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bb4:	f04f 0200 	mov.w	r2, #0
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8000bc0:	4649      	mov	r1, r9
 8000bc2:	008b      	lsls	r3, r1, #2
 8000bc4:	4641      	mov	r1, r8
 8000bc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000bca:	4641      	mov	r1, r8
 8000bcc:	008a      	lsls	r2, r1, #2
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4622      	mov	r2, r4
 8000bd6:	189b      	adds	r3, r3, r2
 8000bd8:	623b      	str	r3, [r7, #32]
 8000bda:	462b      	mov	r3, r5
 8000bdc:	460a      	mov	r2, r1
 8000bde:	eb42 0303 	adc.w	r3, r2, r3
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000bf0:	4629      	mov	r1, r5
 8000bf2:	00cb      	lsls	r3, r1, #3
 8000bf4:	4621      	mov	r1, r4
 8000bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	00ca      	lsls	r2, r1, #3
 8000bfe:	461c      	mov	r4, r3
 8000c00:	4613      	mov	r3, r2
 8000c02:	e9c7 3430 	strd	r3, r4, [r7, #192]	@ 0xc0

		// reset helper variables if ramp position reached target position
		if (abs(ramp->targetPosition - ramp->rampPosition) < abs((int32_t)dX/1000))
 8000c06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c18:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c20:	495e      	ldr	r1, [pc, #376]	@ (8000d9c <TMC_LinearRamp_computeRampPosition+0x4fc>)
 8000c22:	fb81 0103 	smull	r0, r1, r1, r3
 8000c26:	1189      	asrs	r1, r1, #6
 8000c28:	17db      	asrs	r3, r3, #31
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	bfb8      	it	lt
 8000c30:	425b      	neglt	r3, r3
 8000c32:	429a      	cmp	r2, r3
 8000c34:	da58      	bge.n	8000ce8 <TMC_LinearRamp_computeRampPosition+0x448>
		{
			// sync ramp position with target position on small deviations
			ramp->rampPosition = ramp->targetPosition;
 8000c36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c40:	609a      	str	r2, [r3, #8]

			// update actual target position
			tempActualTargetPosition = (int64_t)ramp->rampPosition * 1000;
 8000c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	17da      	asrs	r2, r3, #31
 8000c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000c4e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000c52:	4622      	mov	r2, r4
 8000c54:	462b      	mov	r3, r5
 8000c56:	f04f 0000 	mov.w	r0, #0
 8000c5a:	f04f 0100 	mov.w	r1, #0
 8000c5e:	0159      	lsls	r1, r3, #5
 8000c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000c64:	0150      	lsls	r0, r2, #5
 8000c66:	4602      	mov	r2, r0
 8000c68:	460b      	mov	r3, r1
 8000c6a:	4621      	mov	r1, r4
 8000c6c:	1a51      	subs	r1, r2, r1
 8000c6e:	61b9      	str	r1, [r7, #24]
 8000c70:	4629      	mov	r1, r5
 8000c72:	eb63 0301 	sbc.w	r3, r3, r1
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	f04f 0200 	mov.w	r2, #0
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000c84:	4649      	mov	r1, r9
 8000c86:	008b      	lsls	r3, r1, #2
 8000c88:	4641      	mov	r1, r8
 8000c8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000c8e:	4641      	mov	r1, r8
 8000c90:	008a      	lsls	r2, r1, #2
 8000c92:	4610      	mov	r0, r2
 8000c94:	4619      	mov	r1, r3
 8000c96:	4603      	mov	r3, r0
 8000c98:	4622      	mov	r2, r4
 8000c9a:	189b      	adds	r3, r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	462b      	mov	r3, r5
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	eb42 0303 	adc.w	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	f04f 0200 	mov.w	r2, #0
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000cb4:	4629      	mov	r1, r5
 8000cb6:	00cb      	lsls	r3, r1, #3
 8000cb8:	4621      	mov	r1, r4
 8000cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000cbe:	4621      	mov	r1, r4
 8000cc0:	00ca      	lsls	r2, r1, #3
 8000cc2:	461c      	mov	r4, r3
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	e9c7 3430 	strd	r3, r4, [r7, #192]	@ 0xc0

			dX = 0;
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
			ramp->lastdXRest = 0;
 8000cd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
			ramp->rampVelocity = 0;
 8000cde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
 8000ce6:	e00c      	b.n	8000d02 <TMC_LinearRamp_computeRampPosition+0x462>
		}
		else
		{
			// update actual target position
			tempActualTargetPosition += dX;
 8000ce8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8000cec:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8000cf0:	1884      	adds	r4, r0, r2
 8000cf2:	60bc      	str	r4, [r7, #8]
 8000cf4:	eb41 0303 	adc.w	r3, r1, r3
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000cfe:	e9c7 3430 	strd	r3, r4, [r7, #192]	@ 0xc0
		}

		int64_t absTempActualTargetPosition = (tempActualTargetPosition >= 0) ? tempActualTargetPosition : -tempActualTargetPosition;
 8000d02:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da07      	bge.n	8000d1a <TMC_LinearRamp_computeRampPosition+0x47a>
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4250      	negs	r0, r2
 8000d0e:	6038      	str	r0, [r7, #0]
 8000d10:	eb61 0303 	sbc.w	r3, r1, r3
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d1a:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98

		if (tempActualTargetPosition >= 0)
 8000d1e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <TMC_LinearRamp_computeRampPosition+0x49e>
			ramp->lastdXRest = (absTempActualTargetPosition % 1000);
 8000d26:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8000d2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d2e:	f04f 0300 	mov.w	r3, #0
 8000d32:	f7ff fa49 	bl	80001c8 <__aeabi_ldivmod>
 8000d36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d3a:	621a      	str	r2, [r3, #32]
 8000d3c:	e011      	b.n	8000d62 <TMC_LinearRamp_computeRampPosition+0x4c2>
		else if (tempActualTargetPosition < 0)
 8000d3e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	da0d      	bge.n	8000d62 <TMC_LinearRamp_computeRampPosition+0x4c2>
			ramp->lastdXRest = -(absTempActualTargetPosition % 1000);
 8000d46:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8000d4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d4e:	f04f 0300 	mov.w	r3, #0
 8000d52:	f7ff fa39 	bl	80001c8 <__aeabi_ldivmod>
 8000d56:	4613      	mov	r3, r2
 8000d58:	425b      	negs	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d60:	621a      	str	r2, [r3, #32]

		// scale actual target position back
		ramp->rampPosition = tempActualTargetPosition / 1000;
 8000d62:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8000d66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d6a:	f04f 0300 	mov.w	r3, #0
 8000d6e:	f7ff fa2b 	bl	80001c8 <__aeabi_ldivmod>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d7a:	609a      	str	r2, [r3, #8]
		ramp->rampPosition = ramp->targetPosition;

		// hold ramp velocity in reset
		ramp->rampVelocity = 0;
	}
}
 8000d7c:	e009      	b.n	8000d92 <TMC_LinearRamp_computeRampPosition+0x4f2>
		ramp->rampPosition = ramp->targetPosition;
 8000d7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d88:	609a      	str	r2, [r3, #8]
		ramp->rampVelocity = 0;
 8000d8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
}
 8000d92:	bf00      	nop
 8000d94:	37d0      	adds	r7, #208	@ 0xd0
 8000d96:	46bd      	mov	sp, r7
 8000d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000d9c:	10624dd3 	.word	0x10624dd3

08000da0 <tmc4671_fieldExtract>:

int32_t tmc4671_readRegister(uint8_t address);
void tmc4671_writeRegister(uint8_t address, int32_t value);

static inline uint32_t tmc4671_fieldExtract(uint32_t data, RegisterField field)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	@ 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	e883 0006 	stmia.w	r3, {r1, r2}
    uint32_t value = (data & field.mask) >> field.shift;
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4013      	ands	r3, r2
 8000db4:	7a3a      	ldrb	r2, [r7, #8]
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	61fb      	str	r3, [r7, #28]

    if (field.isSigned)
 8000dba:	7abb      	ldrb	r3, [r7, #10]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00f      	beq.n	8000de0 <tmc4671_fieldExtract+0x40>
    {
        uint32_t baseMask = field.mask >> field.shift;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7a3a      	ldrb	r2, [r7, #8]
 8000dc4:	40d3      	lsrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        uint32_t signMask = baseMask & (~baseMask >> 1);
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	085b      	lsrs	r3, r3, #1
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]
        value = (value ^ signMask) - signMask;
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	405a      	eors	r2, r3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	61fb      	str	r3, [r7, #28]
    }

    return value;
 8000de0:	69fb      	ldr	r3, [r7, #28]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	@ 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <tmc4671_fieldRead>:

static inline uint32_t tmc4671_fieldRead(RegisterField field)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	463b      	mov	r3, r7
 8000df6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t value = tmc4671_readRegister(field.address);
 8000dfa:	797b      	ldrb	r3, [r7, #5]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f847 	bl	8000e90 <tmc4671_readRegister>
 8000e02:	4603      	mov	r3, r0
 8000e04:	60fb      	str	r3, [r7, #12]
    return tmc4671_fieldExtract(value, field);
 8000e06:	463b      	mov	r3, r7
 8000e08:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f7ff ffc7 	bl	8000da0 <tmc4671_fieldExtract>
 8000e12:	4603      	mov	r3, r0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <tmc4671_fieldUpdate>:

static inline uint32_t tmc4671_fieldUpdate(uint32_t data, RegisterField field, uint32_t value)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	1d38      	adds	r0, r7, #4
 8000e26:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e2a:	603b      	str	r3, [r7, #0]
    return (data & (~field.mask)) | ((value << field.shift) & field.mask);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	401a      	ands	r2, r3
 8000e34:	7a3b      	ldrb	r3, [r7, #8]
 8000e36:	4619      	mov	r1, r3
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	fa03 f101 	lsl.w	r1, r3, r1
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	400b      	ands	r3, r1
 8000e42:	4313      	orrs	r3, r2
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <tmc4671_fieldWrite>:

static inline void tmc4671_fieldWrite(RegisterField field, uint32_t value)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e5e:	607a      	str	r2, [r7, #4]
    uint32_t regValue = tmc4671_readRegister(field.address);
 8000e60:	7b7b      	ldrb	r3, [r7, #13]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f814 	bl	8000e90 <tmc4671_readRegister>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	617b      	str	r3, [r7, #20]
    regValue = tmc4671_fieldUpdate(regValue, field, value);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f107 0208 	add.w	r2, r7, #8
 8000e72:	ca06      	ldmia	r2, {r1, r2}
 8000e74:	6978      	ldr	r0, [r7, #20]
 8000e76:	f7ff ffd1 	bl	8000e1c <tmc4671_fieldUpdate>
 8000e7a:	6178      	str	r0, [r7, #20]
    tmc4671_writeRegister(field.address, regValue);
 8000e7c:	7b7b      	ldrb	r3, [r7, #13]
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f836 	bl	8000ef4 <tmc4671_writeRegister>
}
 8000e88:	bf00      	nop
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <tmc4671_readRegister>:
#define STATE_WAIT_INIT_TIME   2
#define STATE_ESTIMATE_OFFSET  3

// spi access
int32_t tmc4671_readRegister(uint8_t address)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
    uint8_t data[5] = { 0 };
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	733b      	strb	r3, [r7, #12]

    // clear write bit
    data[0] = address & TMC4671_ADDRESS_MASK;
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	723b      	strb	r3, [r7, #8]

    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2110      	movs	r1, #16
 8000eb0:	480e      	ldr	r0, [pc, #56]	@ (8000eec <tmc4671_readRegister+0x5c>)
 8000eb2:	f001 fbcd 	bl	8002650 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(&hspi1, data, sizeof(data), 500);
 8000eb6:	f107 0108 	add.w	r1, r7, #8
 8000eba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ebe:	2205      	movs	r2, #5
 8000ec0:	480b      	ldr	r0, [pc, #44]	@ (8000ef0 <tmc4671_readRegister+0x60>)
 8000ec2:	f003 fc56 	bl	8004772 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2110      	movs	r1, #16
 8000eca:	4808      	ldr	r0, [pc, #32]	@ (8000eec <tmc4671_readRegister+0x5c>)
 8000ecc:	f001 fbc0 	bl	8002650 <HAL_GPIO_WritePin>

    return ((int32_t)data[1] << 24) | ((int32_t)data[2] << 16) | ((int32_t)data[3] << 8) | ((int32_t)data[4]);
 8000ed0:	7a7b      	ldrb	r3, [r7, #9]
 8000ed2:	061a      	lsls	r2, r3, #24
 8000ed4:	7abb      	ldrb	r3, [r7, #10]
 8000ed6:	041b      	lsls	r3, r3, #16
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	7afb      	ldrb	r3, [r7, #11]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	7b3a      	ldrb	r2, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	200001c0 	.word	0x200001c0

08000ef4 <tmc4671_writeRegister>:

void tmc4671_writeRegister(uint8_t address, int32_t value)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
    uint8_t data[5] = { 0 };
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	2300      	movs	r3, #0
 8000f06:	733b      	strb	r3, [r7, #12]

    data[0] = address | TMC4671_WRITE_BIT;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	723b      	strb	r3, [r7, #8]
    data[1] = 0xFF & (value >> 24);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	0e1b      	lsrs	r3, r3, #24
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	727b      	strb	r3, [r7, #9]
    data[2] = 0xFF & (value >> 16);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	141b      	asrs	r3, r3, #16
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	72bb      	strb	r3, [r7, #10]
    data[3] = 0xFF & (value >> 8);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	121b      	asrs	r3, r3, #8
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	72fb      	strb	r3, [r7, #11]
    data[4] = 0xFF & (value >> 0);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2110      	movs	r1, #16
 8000f34:	4809      	ldr	r0, [pc, #36]	@ (8000f5c <tmc4671_writeRegister+0x68>)
 8000f36:	f001 fb8b 	bl	8002650 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, sizeof(data), 500);
 8000f3a:	f107 0108 	add.w	r1, r7, #8
 8000f3e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f42:	2205      	movs	r2, #5
 8000f44:	4806      	ldr	r0, [pc, #24]	@ (8000f60 <tmc4671_writeRegister+0x6c>)
 8000f46:	f003 fad0 	bl	80044ea <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <tmc4671_writeRegister+0x68>)
 8000f50:	f001 fb7e 	bl	8002650 <HAL_GPIO_WritePin>
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	200001c0 	.word	0x200001c0

08000f64 <tmc4671_switchToMotionMode>:

void tmc4671_switchToMotionMode(uint8_t mode)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
    tmc4671_fieldWrite(TMC4671_MODE_MOTION_FIELD, mode);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	4904      	ldr	r1, [pc, #16]	@ (8000f84 <tmc4671_switchToMotionMode+0x20>)
 8000f72:	461a      	mov	r2, r3
 8000f74:	c903      	ldmia	r1, {r0, r1}
 8000f76:	f7ff ff6b 	bl	8000e50 <tmc4671_fieldWrite>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	08009428 	.word	0x08009428

08000f88 <tmc4671_setTorqueFluxLimit_mA>:
{
    return (tmc4671_getActualFlux_raw() * (int32_t)torqueMeasurementFactor) / 256;
}

void tmc4671_setTorqueFluxLimit_mA(uint16_t torqueMeasurementFactor, int32_t max)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	80fb      	strh	r3, [r7, #6]
    tmc4671_fieldWrite(TMC4671_PID_TORQUE_FLUX_LIMITS_FIELD, (max * 256) / (int32_t)torqueMeasurementFactor);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	021a      	lsls	r2, r3, #8
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <tmc4671_setTorqueFluxLimit_mA+0x2c>)
 8000fa2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fa6:	f7ff ff53 	bl	8000e50 <tmc4671_fieldWrite>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08009420 	.word	0x08009420

08000fb8 <tmc4671_getActualVelocity>:
{
    return tmc4671_readRegister(TMC4671_PID_VELOCITY_TARGET);
}

int32_t tmc4671_getActualVelocity()
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    return tmc4671_readRegister(TMC4671_PID_VELOCITY_ACTUAL);
 8000fbc:	206a      	movs	r0, #106	@ 0x6a
 8000fbe:	f7ff ff67 	bl	8000e90 <tmc4671_readRegister>
 8000fc2:	4603      	mov	r3, r0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <tmc4671_doEncoderInitializationMode0>:
    return tmc4671_readRegister(TMC4671_PID_POSITION_ACTUAL);
}

void tmc4671_doEncoderInitializationMode0(uint8_t *initState, uint16_t initWaitTime, uint16_t *actualInitWaitTime, uint16_t startVoltage,
    uint16_t *last_Phi_E_Selection, uint32_t *last_UQ_UD_EXT, int16_t *last_PHI_E_EXT)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	817b      	strh	r3, [r7, #10]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	813b      	strh	r3, [r7, #8]
    switch (*initState)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d87c      	bhi.n	80010de <tmc4671_doEncoderInitializationMode0+0x116>
 8000fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fec <tmc4671_doEncoderInitializationMode0+0x24>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	08000ffd 	.word	0x08000ffd
 8000ff0:	08001005 	.word	0x08001005
 8000ff4:	08001083 	.word	0x08001083
 8000ff8:	080010d7 	.word	0x080010d7
    {
    case STATE_NOTHING_TO_DO:
        *actualInitWaitTime = 0;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	801a      	strh	r2, [r3, #0]
        break;
 8001002:	e071      	b.n	80010e8 <tmc4671_doEncoderInitializationMode0+0x120>
    case STATE_START_INIT:
        *last_Phi_E_Selection = (uint16_t)tmc4671_fieldRead(TMC4671_PHI_E_SELECTION_FIELD);
 8001004:	4b3a      	ldr	r3, [pc, #232]	@ (80010f0 <tmc4671_doEncoderInitializationMode0+0x128>)
 8001006:	e893 0003 	ldmia.w	r3, {r0, r1}
 800100a:	f7ff fef0 	bl	8000dee <tmc4671_fieldRead>
 800100e:	4603      	mov	r3, r0
 8001010:	b29a      	uxth	r2, r3
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	801a      	strh	r2, [r3, #0]
        *last_UQ_UD_EXT = (uint32_t)tmc4671_readRegister(TMC4671_UQ_UD_EXT);
 8001016:	2024      	movs	r0, #36	@ 0x24
 8001018:	f7ff ff3a 	bl	8000e90 <tmc4671_readRegister>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	601a      	str	r2, [r3, #0]
        *last_PHI_E_EXT = (int16_t)tmc4671_fieldRead(TMC4671_PHI_E_EXT_FIELD);
 8001024:	4b33      	ldr	r3, [pc, #204]	@ (80010f4 <tmc4671_doEncoderInitializationMode0+0x12c>)
 8001026:	e893 0003 	ldmia.w	r3, {r0, r1}
 800102a:	f7ff fee0 	bl	8000dee <tmc4671_fieldRead>
 800102e:	4603      	mov	r3, r0
 8001030:	b21a      	sxth	r2, r3
 8001032:	6a3b      	ldr	r3, [r7, #32]
 8001034:	801a      	strh	r2, [r3, #0]

        tmc4671_writeRegister(TMC4671_MODE_RAMP_MODE_MOTION, TMC4671_MOTION_MODE_UQ_UD_EXT);
 8001036:	2108      	movs	r1, #8
 8001038:	2063      	movs	r0, #99	@ 0x63
 800103a:	f7ff ff5b 	bl	8000ef4 <tmc4671_writeRegister>
        tmc4671_fieldWrite(TMC4671_ABN_DECODER_PHI_E_OFFSET_FIELD, 0);
 800103e:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <tmc4671_doEncoderInitializationMode0+0x130>)
 8001040:	2200      	movs	r2, #0
 8001042:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001046:	f7ff ff03 	bl	8000e50 <tmc4671_fieldWrite>
        tmc4671_fieldWrite(TMC4671_PHI_E_SELECTION_FIELD, 1);
 800104a:	4b29      	ldr	r3, [pc, #164]	@ (80010f0 <tmc4671_doEncoderInitializationMode0+0x128>)
 800104c:	2201      	movs	r2, #1
 800104e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001052:	f7ff fefd 	bl	8000e50 <tmc4671_fieldWrite>
        tmc4671_fieldWrite(TMC4671_UQ_EXT_FIELD, 0);
 8001056:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <tmc4671_doEncoderInitializationMode0+0x134>)
 8001058:	2200      	movs	r2, #0
 800105a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800105e:	f7ff fef7 	bl	8000e50 <tmc4671_fieldWrite>
        tmc4671_fieldWrite(TMC4671_UD_EXT_FIELD, startVoltage);
 8001062:	893b      	ldrh	r3, [r7, #8]
 8001064:	4926      	ldr	r1, [pc, #152]	@ (8001100 <tmc4671_doEncoderInitializationMode0+0x138>)
 8001066:	461a      	mov	r2, r3
 8001068:	c903      	ldmia	r1, {r0, r1}
 800106a:	f7ff fef1 	bl	8000e50 <tmc4671_fieldWrite>
        tmc4671_fieldWrite(TMC4671_PHI_E_EXT_FIELD, 0);
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <tmc4671_doEncoderInitializationMode0+0x12c>)
 8001070:	2200      	movs	r2, #0
 8001072:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001076:	f7ff feeb 	bl	8000e50 <tmc4671_fieldWrite>

        *initState = STATE_WAIT_INIT_TIME;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2202      	movs	r2, #2
 800107e:	701a      	strb	r2, [r3, #0]
        break;
 8001080:	e032      	b.n	80010e8 <tmc4671_doEncoderInitializationMode0+0x120>
    case STATE_WAIT_INIT_TIME:
        (*actualInitWaitTime)++;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	b29a      	uxth	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	801a      	strh	r2, [r3, #0]
        if (*actualInitWaitTime >= initWaitTime)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	897a      	ldrh	r2, [r7, #10]
 8001094:	429a      	cmp	r2, r3
 8001096:	d826      	bhi.n	80010e6 <tmc4671_doEncoderInitializationMode0+0x11e>
        {
            tmc4671_writeRegister(TMC4671_ABN_DECODER_COUNT, 0);
 8001098:	2100      	movs	r1, #0
 800109a:	2027      	movs	r0, #39	@ 0x27
 800109c:	f7ff ff2a 	bl	8000ef4 <tmc4671_writeRegister>
            tmc4671_writeRegister(TMC4671_UQ_UD_EXT, *last_UQ_UD_EXT);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	2024      	movs	r0, #36	@ 0x24
 80010a8:	f7ff ff24 	bl	8000ef4 <tmc4671_writeRegister>
            tmc4671_fieldWrite(TMC4671_PHI_E_EXT_FIELD, *last_PHI_E_EXT);
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <tmc4671_doEncoderInitializationMode0+0x12c>)
 80010b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010ba:	f7ff fec9 	bl	8000e50 <tmc4671_fieldWrite>
            tmc4671_fieldWrite(TMC4671_PHI_E_SELECTION_FIELD, *last_Phi_E_Selection);
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <tmc4671_doEncoderInitializationMode0+0x128>)
 80010c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010ca:	f7ff fec1 	bl	8000e50 <tmc4671_fieldWrite>
            *initState = STATE_ESTIMATE_OFFSET;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2203      	movs	r2, #3
 80010d2:	701a      	strb	r2, [r3, #0]
        }
        break;
 80010d4:	e007      	b.n	80010e6 <tmc4671_doEncoderInitializationMode0+0x11e>
    case STATE_ESTIMATE_OFFSET:
        *initState = 0;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
        break;
 80010dc:	e004      	b.n	80010e8 <tmc4671_doEncoderInitializationMode0+0x120>
    default:
        *initState = 0;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
        break;
 80010e4:	e000      	b.n	80010e8 <tmc4671_doEncoderInitializationMode0+0x120>
        break;
 80010e6:	bf00      	nop
    }
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	08009418 	.word	0x08009418
 80010f4:	080093c8 	.word	0x080093c8
 80010f8:	080093e0 	.word	0x080093e0
 80010fc:	080093d8 	.word	0x080093d8
 8001100:	080093d0 	.word	0x080093d0

08001104 <tmc4671_getS16CircleDifference>:

int16_t tmc4671_getS16CircleDifference(int16_t newValue, int16_t oldValue)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	80fb      	strh	r3, [r7, #6]
 8001110:	4613      	mov	r3, r2
 8001112:	80bb      	strh	r3, [r7, #4]
	return (newValue - oldValue);
 8001114:	88fa      	ldrh	r2, [r7, #6]
 8001116:	88bb      	ldrh	r3, [r7, #4]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	b21b      	sxth	r3, r3
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <tmc4671_doEncoderInitializationMode2>:

void tmc4671_doEncoderInitializationMode2(uint8_t *initState, uint16_t *actualInitWaitTime,
		int16_t *hall_phi_e_old, int16_t *hall_phi_e_new, int16_t *hall_actual_coarse_offset, uint16_t *last_Phi_E_Selection)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
	switch (*initState)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d05a      	beq.n	80011f8 <tmc4671_doEncoderInitializationMode2+0xcc>
 8001142:	2b02      	cmp	r3, #2
 8001144:	f300 80a9 	bgt.w	800129a <tmc4671_doEncoderInitializationMode2+0x16e>
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <tmc4671_doEncoderInitializationMode2+0x26>
 800114c:	2b01      	cmp	r3, #1
 800114e:	d004      	beq.n	800115a <tmc4671_doEncoderInitializationMode2+0x2e>
 8001150:	e0a3      	b.n	800129a <tmc4671_doEncoderInitializationMode2+0x16e>
	{
	case STATE_NOTHING_TO_DO:
		*actualInitWaitTime = 0;
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2200      	movs	r2, #0
 8001156:	801a      	strh	r2, [r3, #0]
		break;
 8001158:	e0a4      	b.n	80012a4 <tmc4671_doEncoderInitializationMode2+0x178>
	case STATE_START_INIT: // started by writing 1 to initState
		// save actual set value for PHI_E_SELECTION
		*last_Phi_E_Selection = (uint16_t)tmc4671_fieldRead(TMC4671_PHI_E_SELECTION_FIELD);
 800115a:	4b54      	ldr	r3, [pc, #336]	@ (80012ac <tmc4671_doEncoderInitializationMode2+0x180>)
 800115c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001160:	f7ff fe45 	bl	8000dee <tmc4671_fieldRead>
 8001164:	4603      	mov	r3, r0
 8001166:	b29a      	uxth	r2, r3
 8001168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800116a:	801a      	strh	r2, [r3, #0]

		// turn hall_mode interpolation off (read, clear bit 8, write back)
		tmc4671_writeRegister(TMC4671_HALL_MODE, tmc4671_readRegister(TMC4671_HALL_MODE) & 0xFFFFFEFF);
 800116c:	2033      	movs	r0, #51	@ 0x33
 800116e:	f7ff fe8f 	bl	8000e90 <tmc4671_readRegister>
 8001172:	4603      	mov	r3, r0
 8001174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001178:	4619      	mov	r1, r3
 800117a:	2033      	movs	r0, #51	@ 0x33
 800117c:	f7ff feba 	bl	8000ef4 <tmc4671_writeRegister>

		// set ABN_DECODER_PHI_E_OFFSET to zero
		tmc4671_fieldWrite(TMC4671_ABN_DECODER_PHI_E_OFFSET_FIELD, 0);
 8001180:	4b4b      	ldr	r3, [pc, #300]	@ (80012b0 <tmc4671_doEncoderInitializationMode2+0x184>)
 8001182:	2200      	movs	r2, #0
 8001184:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001188:	f7ff fe62 	bl	8000e50 <tmc4671_fieldWrite>

		// read actual hall angle
		*hall_phi_e_old = tmc4671_fieldRead(TMC4671_HALL_PHI_E_FIELD);
 800118c:	4b49      	ldr	r3, [pc, #292]	@ (80012b4 <tmc4671_doEncoderInitializationMode2+0x188>)
 800118e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001192:	f7ff fe2c 	bl	8000dee <tmc4671_fieldRead>
 8001196:	4603      	mov	r3, r0
 8001198:	b21a      	sxth	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	801a      	strh	r2, [r3, #0]

		// read actual abn_decoder angle and compute difference to actual hall angle
		*hall_actual_coarse_offset = tmc4671_getS16CircleDifference(*hall_phi_e_old, (int16_t)tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_E_FIELD));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f9b3 4000 	ldrsh.w	r4, [r3]
 80011a4:	4b44      	ldr	r3, [pc, #272]	@ (80012b8 <tmc4671_doEncoderInitializationMode2+0x18c>)
 80011a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011aa:	f7ff fe20 	bl	8000dee <tmc4671_fieldRead>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4619      	mov	r1, r3
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff ffa5 	bl	8001104 <tmc4671_getS16CircleDifference>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c0:	801a      	strh	r2, [r3, #0]

		// set ABN_DECODER_PHI_E_OFFSET to actual hall-abn-difference, to use the actual hall angle for coarse initialization
		tmc4671_fieldWrite(TMC4671_ABN_DECODER_PHI_E_OFFSET_FIELD, *hall_actual_coarse_offset);
 80011c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b39      	ldr	r3, [pc, #228]	@ (80012b0 <tmc4671_doEncoderInitializationMode2+0x184>)
 80011cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011d0:	f7ff fe3e 	bl	8000e50 <tmc4671_fieldWrite>

		// normally MOTION_MODE_UQ_UD_EXT is only used by e.g. a wizard, not in normal operation
		if (tmc4671_fieldRead(TMC4671_MODE_MOTION_FIELD) != TMC4671_MOTION_MODE_UQ_UD_EXT)
 80011d4:	4b39      	ldr	r3, [pc, #228]	@ (80012bc <tmc4671_doEncoderInitializationMode2+0x190>)
 80011d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011da:	f7ff fe08 	bl	8000dee <tmc4671_fieldRead>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d005      	beq.n	80011f0 <tmc4671_doEncoderInitializationMode2+0xc4>
		{
			// select the use of phi_e_hall to start icID with hall signals
			tmc4671_fieldWrite(TMC4671_PHI_E_SELECTION_FIELD, TMC4671_PHI_E_HALL);
 80011e4:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <tmc4671_doEncoderInitializationMode2+0x180>)
 80011e6:	2205      	movs	r2, #5
 80011e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011ec:	f7ff fe30 	bl	8000e50 <tmc4671_fieldWrite>
		}

		*initState = STATE_WAIT_INIT_TIME;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2202      	movs	r2, #2
 80011f4:	701a      	strb	r2, [r3, #0]
		break;
 80011f6:	e055      	b.n	80012a4 <tmc4671_doEncoderInitializationMode2+0x178>
	case STATE_WAIT_INIT_TIME:
		// read actual hall angle
		*hall_phi_e_new = tmc4671_fieldRead(TMC4671_HALL_PHI_E_FIELD);
 80011f8:	4b2e      	ldr	r3, [pc, #184]	@ (80012b4 <tmc4671_doEncoderInitializationMode2+0x188>)
 80011fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011fe:	f7ff fdf6 	bl	8000dee <tmc4671_fieldRead>
 8001202:	4603      	mov	r3, r0
 8001204:	b21a      	sxth	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	801a      	strh	r2, [r3, #0]

		// wait until hall angle changed
		if(*hall_phi_e_old != *hall_phi_e_new)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	429a      	cmp	r2, r3
 8001218:	d043      	beq.n	80012a2 <tmc4671_doEncoderInitializationMode2+0x176>
		{
			// estimated value = old value + diff between old and new (handle int16_t overrun)
			int16_t hall_phi_e_estimated = *hall_phi_e_old + tmc4671_getS16CircleDifference(*hall_phi_e_new, *hall_phi_e_old)/2;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001220:	b29c      	uxth	r4, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122e:	4619      	mov	r1, r3
 8001230:	4610      	mov	r0, r2
 8001232:	f7ff ff67 	bl	8001104 <tmc4671_getS16CircleDifference>
 8001236:	4603      	mov	r3, r0
 8001238:	0fda      	lsrs	r2, r3, #31
 800123a:	4413      	add	r3, r2
 800123c:	105b      	asrs	r3, r3, #1
 800123e:	b21b      	sxth	r3, r3
 8001240:	b29b      	uxth	r3, r3
 8001242:	4423      	add	r3, r4
 8001244:	b29b      	uxth	r3, r3
 8001246:	82fb      	strh	r3, [r7, #22]

			// read actual abn_decoder angle and consider last set abn_decoder_offset
			int16_t abn_phi_e_actual = (int16_t)tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_E_FIELD) - *hall_actual_coarse_offset;
 8001248:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <tmc4671_doEncoderInitializationMode2+0x18c>)
 800124a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800124e:	f7ff fdce 	bl	8000dee <tmc4671_fieldRead>
 8001252:	4603      	mov	r3, r0
 8001254:	b29a      	uxth	r2, r3
 8001256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125c:	b29b      	uxth	r3, r3
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	82bb      	strh	r3, [r7, #20]

			// set ABN_DECODER_PHI_E_OFFSET to actual estimated angle - abn_phi_e_actual difference
			tmc4671_fieldWrite(TMC4671_ABN_DECODER_PHI_E_OFFSET_FIELD, tmc4671_getS16CircleDifference(hall_phi_e_estimated, abn_phi_e_actual));
 8001264:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001268:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff48 	bl	8001104 <tmc4671_getS16CircleDifference>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <tmc4671_doEncoderInitializationMode2+0x184>)
 800127a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800127e:	f7ff fde7 	bl	8000e50 <tmc4671_fieldWrite>

			// switch back to last used PHI_E_SELECTION setting
			tmc4671_fieldWrite(TMC4671_PHI_E_SELECTION_FIELD, *last_Phi_E_Selection);
 8001282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <tmc4671_doEncoderInitializationMode2+0x180>)
 800128a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800128e:	f7ff fddf 	bl	8000e50 <tmc4671_fieldWrite>

			// go to ready state
			*initState = 0;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001298:	e003      	b.n	80012a2 <tmc4671_doEncoderInitializationMode2+0x176>
	default:
		*initState = 0;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
		break;
 80012a0:	e000      	b.n	80012a4 <tmc4671_doEncoderInitializationMode2+0x178>
		break;
 80012a2:	bf00      	nop
	}
}
 80012a4:	bf00      	nop
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	08009418 	.word	0x08009418
 80012b0:	080093e0 	.word	0x080093e0
 80012b4:	080093f0 	.word	0x080093f0
 80012b8:	080093e8 	.word	0x080093e8
 80012bc:	08009428 	.word	0x08009428

080012c0 <tmc4671_doEncoderInitializationMode3>:

// analog encoder initialization
void tmc4671_doEncoderInitializationMode3(uint8_t *initState, uint16_t initWaitTime, uint16_t *actualInitWaitTime, uint16_t startVoltage,
		uint16_t *last_Phi_E_Selection, uint32_t *last_UQ_UD_EXT, int16_t *last_PHI_E_EXT)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	461a      	mov	r2, r3
 80012cc:	460b      	mov	r3, r1
 80012ce:	817b      	strh	r3, [r7, #10]
 80012d0:	4613      	mov	r3, r2
 80012d2:	813b      	strh	r3, [r7, #8]
	switch (*initState)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	f200 8098 	bhi.w	800140e <tmc4671_doEncoderInitializationMode3+0x14e>
 80012de:	a201      	add	r2, pc, #4	@ (adr r2, 80012e4 <tmc4671_doEncoderInitializationMode3+0x24>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	080012f5 	.word	0x080012f5
 80012e8:	080012fd 	.word	0x080012fd
 80012ec:	08001383 	.word	0x08001383
 80012f0:	08001407 	.word	0x08001407
	{
	case STATE_NOTHING_TO_DO:
		*actualInitWaitTime = 0;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	801a      	strh	r2, [r3, #0]
		break;
 80012fa:	e08d      	b.n	8001418 <tmc4671_doEncoderInitializationMode3+0x158>
	case STATE_START_INIT: // started by writing 1 to initState

		// save actual set values for PHI_E_SELECTION, UQ_UD_EXT, and PHI_E_EXT
		*last_Phi_E_Selection = (uint16_t)tmc4671_fieldRead(TMC4671_PHI_E_SELECTION_FIELD);
 80012fc:	4b48      	ldr	r3, [pc, #288]	@ (8001420 <tmc4671_doEncoderInitializationMode3+0x160>)
 80012fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001302:	f7ff fd74 	bl	8000dee <tmc4671_fieldRead>
 8001306:	4603      	mov	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	801a      	strh	r2, [r3, #0]
		*last_UQ_UD_EXT = (uint32_t)tmc4671_readRegister(TMC4671_UQ_UD_EXT);
 800130e:	2024      	movs	r0, #36	@ 0x24
 8001310:	f7ff fdbe 	bl	8000e90 <tmc4671_readRegister>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	601a      	str	r2, [r3, #0]
		*last_PHI_E_EXT = (int16_t)tmc4671_fieldRead(TMC4671_PHI_E_EXT_FIELD);
 800131c:	4b41      	ldr	r3, [pc, #260]	@ (8001424 <tmc4671_doEncoderInitializationMode3+0x164>)
 800131e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001322:	f7ff fd64 	bl	8000dee <tmc4671_fieldRead>
 8001326:	4603      	mov	r3, r0
 8001328:	b21a      	sxth	r2, r3
 800132a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132c:	801a      	strh	r2, [r3, #0]

		// switch motion mode for running motor in open loop
		tmc4671_writeRegister(TMC4671_MODE_RAMP_MODE_MOTION, TMC4671_MOTION_MODE_UQ_UD_EXT);
 800132e:	2108      	movs	r1, #8
 8001330:	2063      	movs	r0, #99	@ 0x63
 8001332:	f7ff fddf 	bl	8000ef4 <tmc4671_writeRegister>

		// set AENC_DECODER_PHI_E_PHI_M_OFFSET and AENC_DECODER_PHI_A_OFFSET to zero
		tmc4671_writeRegister(TMC4671_AENC_DECODER_PHI_E_PHI_M_OFFSET, 0);
 8001336:	2100      	movs	r1, #0
 8001338:	2045      	movs	r0, #69	@ 0x45
 800133a:	f7ff fddb 	bl	8000ef4 <tmc4671_writeRegister>
		tmc4671_fieldWrite(TMC4671_AENC_DECODER_PHI_A_OFFSET_FIELD, 0);
 800133e:	4b3a      	ldr	r3, [pc, #232]	@ (8001428 <tmc4671_doEncoderInitializationMode3+0x168>)
 8001340:	2200      	movs	r2, #0
 8001342:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001346:	f7ff fd83 	bl	8000e50 <tmc4671_fieldWrite>

		// select phi_e_ext
		tmc4671_fieldWrite(TMC4671_PHI_E_SELECTION_FIELD, 1);
 800134a:	4b35      	ldr	r3, [pc, #212]	@ (8001420 <tmc4671_doEncoderInitializationMode3+0x160>)
 800134c:	2201      	movs	r2, #1
 800134e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001352:	f7ff fd7d 	bl	8000e50 <tmc4671_fieldWrite>

		// set an initialization voltage on UD_EXT (to the flux, not the torque!)
		tmc4671_fieldWrite(TMC4671_UQ_EXT_FIELD, 0);
 8001356:	4b35      	ldr	r3, [pc, #212]	@ (800142c <tmc4671_doEncoderInitializationMode3+0x16c>)
 8001358:	2200      	movs	r2, #0
 800135a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800135e:	f7ff fd77 	bl	8000e50 <tmc4671_fieldWrite>
		tmc4671_fieldWrite(TMC4671_UD_EXT_FIELD, startVoltage);
 8001362:	893b      	ldrh	r3, [r7, #8]
 8001364:	4932      	ldr	r1, [pc, #200]	@ (8001430 <tmc4671_doEncoderInitializationMode3+0x170>)
 8001366:	461a      	mov	r2, r3
 8001368:	c903      	ldmia	r1, {r0, r1}
 800136a:	f7ff fd71 	bl	8000e50 <tmc4671_fieldWrite>

		// set the "zero" angle
		tmc4671_fieldWrite(TMC4671_PHI_E_EXT_FIELD, 0);
 800136e:	4b2d      	ldr	r3, [pc, #180]	@ (8001424 <tmc4671_doEncoderInitializationMode3+0x164>)
 8001370:	2200      	movs	r2, #0
 8001372:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001376:	f7ff fd6b 	bl	8000e50 <tmc4671_fieldWrite>

		*initState = STATE_WAIT_INIT_TIME;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2202      	movs	r2, #2
 800137e:	701a      	strb	r2, [r3, #0]
		break;
 8001380:	e04a      	b.n	8001418 <tmc4671_doEncoderInitializationMode3+0x158>
	case STATE_WAIT_INIT_TIME:
		// wait until initialization time is over (until no more vibration on the motor)
		(*actualInitWaitTime)++;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	b29a      	uxth	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	801a      	strh	r2, [r3, #0]
		if(*actualInitWaitTime >= initWaitTime)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	897a      	ldrh	r2, [r7, #10]
 8001394:	429a      	cmp	r2, r3
 8001396:	d83e      	bhi.n	8001416 <tmc4671_doEncoderInitializationMode3+0x156>
		{
            // save actual DECODER_PHI_M as -DECODER_PHI_M_OFFSET
			int16_t offset_raw = tmc4671_fieldRead(TMC4671_AENC_DECODER_PHI_M_FIELD);
 8001398:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <tmc4671_doEncoderInitializationMode3+0x174>)
 800139a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800139e:	f7ff fd26 	bl	8000dee <tmc4671_fieldRead>
 80013a2:	4603      	mov	r3, r0
 80013a4:	82fb      	strh	r3, [r7, #22]

            // update PHI_M and keep PHI_E and PH_A at zero
            tmc4671_fieldWrite(TMC4671_AENC_DECODER_PHI_E_OFFSET_FIELD, 0);
 80013a6:	4b24      	ldr	r3, [pc, #144]	@ (8001438 <tmc4671_doEncoderInitializationMode3+0x178>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013ae:	f7ff fd4f 	bl	8000e50 <tmc4671_fieldWrite>

            tmc4671_fieldWrite(TMC4671_AENC_DECODER_PHI_M_OFFSET_FIELD, -offset_raw);
 80013b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013b6:	425b      	negs	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <tmc4671_doEncoderInitializationMode3+0x17c>)
 80013bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013c0:	f7ff fd46 	bl	8000e50 <tmc4671_fieldWrite>
            tmc4671_fieldWrite(TMC4671_AENC_DECODER_PHI_A_OFFSET_FIELD, 0);
 80013c4:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <tmc4671_doEncoderInitializationMode3+0x168>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013cc:	f7ff fd40 	bl	8000e50 <tmc4671_fieldWrite>

			// switch back to last used UQ_UD_EXT setting
			tmc4671_writeRegister(TMC4671_UQ_UD_EXT, *last_UQ_UD_EXT);
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	2024      	movs	r0, #36	@ 0x24
 80013d8:	f7ff fd8c 	bl	8000ef4 <tmc4671_writeRegister>

			// set PHI_E_EXT back to last value
			tmc4671_fieldWrite(TMC4671_PHI_E_EXT_FIELD, *last_PHI_E_EXT);
 80013dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <tmc4671_doEncoderInitializationMode3+0x164>)
 80013e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013ea:	f7ff fd31 	bl	8000e50 <tmc4671_fieldWrite>

			// switch back to last used PHI_E_SELECTION setting
			tmc4671_fieldWrite(TMC4671_PHI_E_SELECTION_FIELD, *last_Phi_E_Selection);
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <tmc4671_doEncoderInitializationMode3+0x160>)
 80013f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013fa:	f7ff fd29 	bl	8000e50 <tmc4671_fieldWrite>

			// go to next state
			*initState = STATE_ESTIMATE_OFFSET;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2203      	movs	r2, #3
 8001402:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001404:	e007      	b.n	8001416 <tmc4671_doEncoderInitializationMode3+0x156>
	case STATE_ESTIMATE_OFFSET:
		// you can do offset estimation here (wait for N-Channel if available and save encoder value)

		// go to ready state
		*initState = 0;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
		break;
 800140c:	e004      	b.n	8001418 <tmc4671_doEncoderInitializationMode3+0x158>
	default:
		*initState = 0;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
		break;
 8001414:	e000      	b.n	8001418 <tmc4671_doEncoderInitializationMode3+0x158>
		break;
 8001416:	bf00      	nop
	}
}
 8001418:	bf00      	nop
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	08009418 	.word	0x08009418
 8001424:	080093c8 	.word	0x080093c8
 8001428:	080093f8 	.word	0x080093f8
 800142c:	080093d8 	.word	0x080093d8
 8001430:	080093d0 	.word	0x080093d0
 8001434:	08009410 	.word	0x08009410
 8001438:	08009408 	.word	0x08009408
 800143c:	08009400 	.word	0x08009400

08001440 <tmc4671_checkEncderInitialization>:


void tmc4671_checkEncderInitialization(uint8_t initMode, uint8_t *initState, uint16_t initWaitTime, uint16_t *actualInitWaitTime, uint16_t startVoltage,
                                       int16_t *hall_phi_e_old, int16_t *hall_phi_e_new, int16_t *hall_actual_coarse_offset,
                                       uint16_t *last_Phi_E_Selection, uint32_t *last_UQ_UD_EXT, int16_t *last_PHI_E_EXT)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af04      	add	r7, sp, #16
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4603      	mov	r3, r0
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	4613      	mov	r3, r2
 8001450:	81bb      	strh	r3, [r7, #12]
    // Realizowanie inicjalizacji enkodera w zależności od trybu
    if (initMode == 0) {
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10d      	bne.n	8001474 <tmc4671_checkEncderInitialization+0x34>
        tmc4671_doEncoderInitializationMode0(initState, initWaitTime, actualInitWaitTime, startVoltage, last_Phi_E_Selection, last_UQ_UD_EXT, last_PHI_E_EXT);
 8001458:	8b3a      	ldrh	r2, [r7, #24]
 800145a:	89b9      	ldrh	r1, [r7, #12]
 800145c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800145e:	9302      	str	r3, [sp, #8]
 8001460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	4613      	mov	r3, r2
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b8      	ldr	r0, [r7, #8]
 800146e:	f7ff fdab 	bl	8000fc8 <tmc4671_doEncoderInitializationMode0>
 8001472:	e00f      	b.n	8001494 <tmc4671_checkEncderInitialization+0x54>
    }
    else if (initMode == 3) { // analog encoder initialization
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d10c      	bne.n	8001494 <tmc4671_checkEncderInitialization+0x54>
        tmc4671_doEncoderInitializationMode3(initState, initWaitTime, actualInitWaitTime, startVoltage, last_Phi_E_Selection, last_UQ_UD_EXT, last_PHI_E_EXT);
 800147a:	8b3a      	ldrh	r2, [r7, #24]
 800147c:	89b9      	ldrh	r1, [r7, #12]
 800147e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	4613      	mov	r3, r2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f7ff ff16 	bl	80012c0 <tmc4671_doEncoderInitializationMode3>
    }

    // Tryb bez konieczności timera
    if (initMode == 2) {
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d109      	bne.n	80014ae <tmc4671_checkEncderInitialization+0x6e>
        tmc4671_doEncoderInitializationMode2(initState, actualInitWaitTime, hall_phi_e_old, hall_phi_e_new, hall_actual_coarse_offset, last_Phi_E_Selection);
 800149a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	68b8      	ldr	r0, [r7, #8]
 80014aa:	f7ff fe3f 	bl	800112c <tmc4671_doEncoderInitializationMode2>
    }
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <tmc4671_periodicJob>:

void tmc4671_periodicJob(uint8_t initMode, uint8_t *initState, uint16_t initWaitTime, uint16_t *actualInitWaitTime, uint16_t startVoltage,
                         int16_t *hall_phi_e_old, int16_t *hall_phi_e_new, int16_t *hall_actual_coarse_offset,
                         uint16_t *last_Phi_E_Selection, uint32_t *last_UQ_UD_EXT, int16_t *last_PHI_E_EXT)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b08c      	sub	sp, #48	@ 0x30
 80014ba:	af08      	add	r7, sp, #32
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	4613      	mov	r3, r2
 80014c6:	81bb      	strh	r3, [r7, #12]
    tmc4671_checkEncderInitialization(initMode, initState, initWaitTime, actualInitWaitTime, startVoltage,
 80014c8:	89ba      	ldrh	r2, [r7, #12]
 80014ca:	7bf8      	ldrb	r0, [r7, #15]
 80014cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014ce:	9306      	str	r3, [sp, #24]
 80014d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d2:	9305      	str	r3, [sp, #20]
 80014d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d6:	9304      	str	r3, [sp, #16]
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	9303      	str	r3, [sp, #12]
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	8b3b      	ldrh	r3, [r7, #24]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	f7ff ffa8 	bl	8001440 <tmc4671_checkEncderInitialization>
                                      hall_phi_e_old, hall_phi_e_new, hall_actual_coarse_offset, last_Phi_E_Selection, last_UQ_UD_EXT, last_PHI_E_EXT);
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <tmc4671_readFieldWithDependency>:
		}
	}
}

int32_t tmc4671_readFieldWithDependency(RegisterField field, uint8_t dependsReg, uint32_t dependsValue)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	f107 0408 	add.w	r4, r7, #8
 8001502:	e884 0003 	stmia.w	r4, {r0, r1}
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	4613      	mov	r3, r2
 800150a:	71fb      	strb	r3, [r7, #7]
	// remember old depends value
	uint32_t lastDependsValue = tmc4671_readRegister(dependsReg);
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fcbe 	bl	8000e90 <tmc4671_readRegister>
 8001514:	4603      	mov	r3, r0
 8001516:	617b      	str	r3, [r7, #20]

	// set needed depends value
	tmc4671_writeRegister(dependsReg, dependsValue);
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fce8 	bl	8000ef4 <tmc4671_writeRegister>
	uint32_t value = tmc4671_fieldRead(field);
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	e893 0003 	ldmia.w	r3, {r0, r1}
 800152c:	f7ff fc5f 	bl	8000dee <tmc4671_fieldRead>
 8001530:	6138      	str	r0, [r7, #16]

	// set old depends value
	tmc4671_writeRegister(dependsReg, lastDependsValue);
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fcdb 	bl	8000ef4 <tmc4671_writeRegister>
	return value;
 800153e:	693b      	ldr	r3, [r7, #16]
}
 8001540:	4618      	mov	r0, r3
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd90      	pop	{r4, r7, pc}

08001548 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b47      	ldr	r3, [pc, #284]	@ (8001680 <MX_GPIO_Init+0x138>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a46      	ldr	r2, [pc, #280]	@ (8001680 <MX_GPIO_Init+0x138>)
 8001568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b44      	ldr	r3, [pc, #272]	@ (8001680 <MX_GPIO_Init+0x138>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b40      	ldr	r3, [pc, #256]	@ (8001680 <MX_GPIO_Init+0x138>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a3f      	ldr	r2, [pc, #252]	@ (8001680 <MX_GPIO_Init+0x138>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b3d      	ldr	r3, [pc, #244]	@ (8001680 <MX_GPIO_Init+0x138>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b39      	ldr	r3, [pc, #228]	@ (8001680 <MX_GPIO_Init+0x138>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a38      	ldr	r2, [pc, #224]	@ (8001680 <MX_GPIO_Init+0x138>)
 80015a0:	f043 0310 	orr.w	r3, r3, #16
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b36      	ldr	r3, [pc, #216]	@ (8001680 <MX_GPIO_Init+0x138>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b32      	ldr	r3, [pc, #200]	@ (8001680 <MX_GPIO_Init+0x138>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a31      	ldr	r2, [pc, #196]	@ (8001680 <MX_GPIO_Init+0x138>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001680 <MX_GPIO_Init+0x138>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001680 <MX_GPIO_Init+0x138>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001680 <MX_GPIO_Init+0x138>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <MX_GPIO_Init+0x138>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port, SPI1_SS1_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2110      	movs	r1, #16
 80015ee:	4825      	ldr	r0, [pc, #148]	@ (8001684 <MX_GPIO_Init+0x13c>)
 80015f0:	f001 f82e 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DRV_ENABLE_Pin|LED_CLIP_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2183      	movs	r1, #131	@ 0x83
 80015f8:	4823      	ldr	r0, [pc, #140]	@ (8001688 <MX_GPIO_Init+0x140>)
 80015fa:	f001 f829 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2180      	movs	r1, #128	@ 0x80
 8001602:	4822      	ldr	r0, [pc, #136]	@ (800168c <MX_GPIO_Init+0x144>)
 8001604:	f001 f824 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_SS1_Pin;
 8001608:	2310      	movs	r3, #16
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_SS1_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4819      	ldr	r0, [pc, #100]	@ (8001684 <MX_GPIO_Init+0x13c>)
 8001620:	f000 fe62 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_ENABLE_Pin;
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800162c:	2302      	movs	r3, #2
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4813      	ldr	r0, [pc, #76]	@ (8001688 <MX_GPIO_Init+0x140>)
 800163c:	f000 fe54 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SYS_Pin;
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_SYS_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	480d      	ldr	r0, [pc, #52]	@ (800168c <MX_GPIO_Init+0x144>)
 8001658:	f000 fe46 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_CLIP_Pin|LED_ERR_Pin;
 800165c:	2303      	movs	r3, #3
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_GPIO_Init+0x140>)
 8001674:	f000 fe38 	bl	80022e8 <HAL_GPIO_Init>

}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	@ 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000
 8001688:	40021000 	.word	0x40021000
 800168c:	40020c00 	.word	0x40020c00

08001690 <tmc4671_fieldExtract>:
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	@ 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	e883 0006 	stmia.w	r3, {r1, r2}
    uint32_t value = (data & field.mask) >> field.shift;
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4013      	ands	r3, r2
 80016a4:	7a3a      	ldrb	r2, [r7, #8]
 80016a6:	40d3      	lsrs	r3, r2
 80016a8:	61fb      	str	r3, [r7, #28]
    if (field.isSigned)
 80016aa:	7abb      	ldrb	r3, [r7, #10]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00f      	beq.n	80016d0 <tmc4671_fieldExtract+0x40>
        uint32_t baseMask = field.mask >> field.shift;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7a3a      	ldrb	r2, [r7, #8]
 80016b4:	40d3      	lsrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        uint32_t signMask = baseMask & (~baseMask >> 1);
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	617b      	str	r3, [r7, #20]
        value = (value ^ signMask) - signMask;
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	405a      	eors	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	61fb      	str	r3, [r7, #28]
    return value;
 80016d0:	69fb      	ldr	r3, [r7, #28]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	@ 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <tmc4671_fieldRead>:
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	463b      	mov	r3, r7
 80016e6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t value = tmc4671_readRegister(field.address);
 80016ea:	797b      	ldrb	r3, [r7, #5]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fbcf 	bl	8000e90 <tmc4671_readRegister>
 80016f2:	4603      	mov	r3, r0
 80016f4:	60fb      	str	r3, [r7, #12]
    return tmc4671_fieldExtract(value, field);
 80016f6:	463b      	mov	r3, r7
 80016f8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff ffc7 	bl	8001690 <tmc4671_fieldExtract>
 8001702:	4603      	mov	r3, r0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <tmc_filterPT1>:
{
 800170c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	70fb      	strb	r3, [r7, #3]
	*akku += (newValue-lastValue) << (maxFilter-actualFilter);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	68b8      	ldr	r0, [r7, #8]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	1a40      	subs	r0, r0, r1
 8001728:	f897 6030 	ldrb.w	r6, [r7, #48]	@ 0x30
 800172c:	78f9      	ldrb	r1, [r7, #3]
 800172e:	1a71      	subs	r1, r6, r1
 8001730:	fa00 f101 	lsl.w	r1, r0, r1
 8001734:	17c8      	asrs	r0, r1, #31
 8001736:	4688      	mov	r8, r1
 8001738:	4681      	mov	r9, r0
 800173a:	eb12 0a08 	adds.w	sl, r2, r8
 800173e:	eb43 0b09 	adc.w	fp, r3, r9
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	e9c3 ab00 	strd	sl, fp, [r3]
	return *akku >> maxFilter;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8001752:	f1c1 0620 	rsb	r6, r1, #32
 8001756:	f1b1 0020 	subs.w	r0, r1, #32
 800175a:	fa22 f401 	lsr.w	r4, r2, r1
 800175e:	fa03 f606 	lsl.w	r6, r3, r6
 8001762:	ea44 0406 	orr.w	r4, r4, r6
 8001766:	d402      	bmi.n	800176e <tmc_filterPT1+0x62>
 8001768:	fa43 f000 	asr.w	r0, r3, r0
 800176c:	4304      	orrs	r4, r0
 800176e:	fa43 f501 	asr.w	r5, r3, r1
 8001772:	4623      	mov	r3, r4
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800177e:	4770      	bx	lr

08001780 <TMC4671_controller_enableDriver>:
static uint8_t actualMotionMode;
static int32_t lastRampTargetPosition;
static int32_t lastRampTargetVelocity;
static DriverState driverState;

static void TMC4671_controller_enableDriver(DriverState state) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
	if (state == DRIVER_DISABLE) {
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d108      	bne.n	80017a2 <TMC4671_controller_enableDriver+0x22>
		driverState = DRIVER_DISABLE;
 8001790:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <TMC4671_controller_enableDriver+0x3c>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2180      	movs	r1, #128	@ 0x80
 800179a:	4809      	ldr	r0, [pc, #36]	@ (80017c0 <TMC4671_controller_enableDriver+0x40>)
 800179c:	f000 ff58 	bl	8002650 <HAL_GPIO_WritePin>
	} else {
		driverState = DRIVER_ENABLE;
		HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_SET);
	}
}
 80017a0:	e007      	b.n	80017b2 <TMC4671_controller_enableDriver+0x32>
		driverState = DRIVER_ENABLE;
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <TMC4671_controller_enableDriver+0x3c>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2180      	movs	r1, #128	@ 0x80
 80017ac:	4804      	ldr	r0, [pc, #16]	@ (80017c0 <TMC4671_controller_enableDriver+0x40>)
 80017ae:	f000 ff4f 	bl	8002650 <HAL_GPIO_WritePin>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200001bc 	.word	0x200001bc
 80017c0:	40021000 	.word	0x40021000

080017c4 <TMC4671_controller_init>:

static void TMC4671_controller_init()
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0

	// setting SD_STP (DIO6) and SD_DIR (DIO7) to High-Z
//	HAL.IOs->config->reset(&HAL.IOs->pins->DIO6);
//	HAL.IOs->config->reset(&HAL.IOs->pins->DIO7);

	TMC4671_controller_enableDriver(DRIVER_ENABLE);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7ff ffd9 	bl	8001780 <TMC4671_controller_enableDriver>

	// init motor config
	motorConfig.initWaitTime             	= 1000;
 80017ce:	4b41      	ldr	r3, [pc, #260]	@ (80018d4 <TMC4671_controller_init+0x110>)
 80017d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017d4:	805a      	strh	r2, [r3, #2]
	motorConfig.startVoltage             	= 6000;
 80017d6:	4b3f      	ldr	r3, [pc, #252]	@ (80018d4 <TMC4671_controller_init+0x110>)
 80017d8:	f241 7270 	movw	r2, #6000	@ 0x1770
 80017dc:	801a      	strh	r2, [r3, #0]
	motorConfig.initMode                 	= 0;
 80017de:	4b3d      	ldr	r3, [pc, #244]	@ (80018d4 <TMC4671_controller_init+0x110>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	71da      	strb	r2, [r3, #7]
	motorConfig.hall_phi_e_old				= 0;
 80017e4:	4b3b      	ldr	r3, [pc, #236]	@ (80018d4 <TMC4671_controller_init+0x110>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motorConfig.hall_phi_e_new				= 0;
 80017ec:	4b39      	ldr	r3, [pc, #228]	@ (80018d4 <TMC4671_controller_init+0x110>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	motorConfig.hall_actual_coarse_offset	= 0;
 80017f4:	4b37      	ldr	r3, [pc, #220]	@ (80018d4 <TMC4671_controller_init+0x110>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	motorConfig.last_Phi_E_Selection		= 0;
 80017fc:	4b35      	ldr	r3, [pc, #212]	@ (80018d4 <TMC4671_controller_init+0x110>)
 80017fe:	2200      	movs	r2, #0
 8001800:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	motorConfig.last_UQ_UD_EXT				= 0;
 8001804:	4b33      	ldr	r3, [pc, #204]	@ (80018d4 <TMC4671_controller_init+0x110>)
 8001806:	2200      	movs	r2, #0
 8001808:	651a      	str	r2, [r3, #80]	@ 0x50
	motorConfig.last_PHI_E_EXT				= 0;
 800180a:	4b32      	ldr	r3, [pc, #200]	@ (80018d4 <TMC4671_controller_init+0x110>)
 800180c:	2200      	movs	r2, #0
 800180e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	motorConfig.torqueMeasurementFactor  	= 256;
 8001812:	4b30      	ldr	r3, [pc, #192]	@ (80018d4 <TMC4671_controller_init+0x110>)
 8001814:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001818:	811a      	strh	r2, [r3, #8]
	motorConfig.maximumCurrent				= 1000;
 800181a:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <TMC4671_controller_init+0x110>)
 800181c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001820:	60da      	str	r2, [r3, #12]
	motorConfig.actualVelocityPT1			= 0;
 8001822:	4b2c      	ldr	r3, [pc, #176]	@ (80018d4 <TMC4671_controller_init+0x110>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
	motorConfig.akkuActualVelocity       	= 0;
 8001828:	492a      	ldr	r1, [pc, #168]	@ (80018d4 <TMC4671_controller_init+0x110>)
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e9c1 2306 	strd	r2, r3, [r1, #24]
	motorConfig.actualTorquePT1				= 0;
 8001836:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <TMC4671_controller_init+0x110>)
 8001838:	2200      	movs	r2, #0
 800183a:	841a      	strh	r2, [r3, #32]
	motorConfig.akkuActualTorque         	= 0;
 800183c:	4925      	ldr	r1, [pc, #148]	@ (80018d4 <TMC4671_controller_init+0x110>)
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	motorConfig.positionScaler				= POSITION_SCALE_MAX;
 800184a:	4b22      	ldr	r3, [pc, #136]	@ (80018d4 <TMC4671_controller_init+0x110>)
 800184c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001850:	641a      	str	r2, [r3, #64]	@ 0x40
	motorConfig.enableVelocityFeedForward 	= true;
 8001852:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <TMC4671_controller_init+0x110>)
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
	motorConfig.linearScaler             	= 30000; // µm / rotation
 800185a:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <TMC4671_controller_init+0x110>)
 800185c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001860:	645a      	str	r2, [r3, #68]	@ 0x44

	// set default polarity for evaluation board's power stage on init
	tmc4671_writeRegister(TMC4671_PWM_POLARITIES, 0x0);
 8001862:	2100      	movs	r1, #0
 8001864:	2017      	movs	r0, #23
 8001866:	f7ff fb45 	bl	8000ef4 <tmc4671_writeRegister>
	tmc4671_writeRegister(TMC4671_PWM_SV_CHOP, TMC4671_PWM_SV_MASK);	// enable space vector PWM by default
 800186a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800186e:	201a      	movs	r0, #26
 8001870:	f7ff fb40 	bl	8000ef4 <tmc4671_writeRegister>
	tmc4671_writeRegister(TMC4671_PWM_BBM_H_BBM_L, 0x00001919);
 8001874:	f641 1119 	movw	r1, #6425	@ 0x1919
 8001878:	2019      	movs	r0, #25
 800187a:	f7ff fb3b 	bl	8000ef4 <tmc4671_writeRegister>

	tmc4671_writeRegister(TMC4671_DSADC_MCLK_B, 0x0);
 800187e:	2100      	movs	r1, #0
 8001880:	2006      	movs	r0, #6
 8001882:	f7ff fb37 	bl	8000ef4 <tmc4671_writeRegister>

	// set default acceleration and max velocity
	tmc4671_writeRegister(TMC4671_PID_VELOCITY_LIMIT, 4000);
 8001886:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800188a:	2060      	movs	r0, #96	@ 0x60
 800188c:	f7ff fb32 	bl	8000ef4 <tmc4671_writeRegister>

	// set default max torque/flux
	tmc4671_setTorqueFluxLimit_mA(motorConfig.torqueMeasurementFactor, motorConfig.maximumCurrent);
 8001890:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <TMC4671_controller_init+0x110>)
 8001892:	891b      	ldrh	r3, [r3, #8]
 8001894:	4a0f      	ldr	r2, [pc, #60]	@ (80018d4 <TMC4671_controller_init+0x110>)
 8001896:	68d2      	ldr	r2, [r2, #12]
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fb74 	bl	8000f88 <tmc4671_setTorqueFluxLimit_mA>

	// init ramp generator
	TMC_LinearRamp_init(&rampGenerator);
 80018a0:	480d      	ldr	r0, [pc, #52]	@ (80018d8 <TMC4671_controller_init+0x114>)
 80018a2:	f7fe ff5f 	bl	8000764 <TMC_LinearRamp_init>
	actualMotionMode = TMC4671_MOTION_MODE_STOPPED;
 80018a6:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <TMC4671_controller_init+0x118>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
	lastRampTargetPosition = 0;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <TMC4671_controller_init+0x11c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
	lastRampTargetVelocity = 0;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <TMC4671_controller_init+0x120>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

	// update ramp generator default values
	rampGenerator.maxVelocity = (uint32_t)tmc4671_readRegister(TMC4671_PID_VELOCITY_LIMIT);
 80018b8:	2060      	movs	r0, #96	@ 0x60
 80018ba:	f7ff fae9 	bl	8000e90 <tmc4671_readRegister>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <TMC4671_controller_init+0x114>)
 80018c4:	601a      	str	r2, [r3, #0]
	rampGenerator.acceleration = 2000;
 80018c6:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <TMC4671_controller_init+0x114>)
 80018c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80018cc:	615a      	str	r2, [r3, #20]
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000130 	.word	0x20000130
 80018d8:	20000188 	.word	0x20000188
 80018dc:	200001b0 	.word	0x200001b0
 80018e0:	200001b4 	.word	0x200001b4
 80018e4:	200001b8 	.word	0x200001b8

080018e8 <TMC4671_controller_periodicJob>:
		return 1;
	}
	return 0;
}

static void TMC4671_controller_periodicJob(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	@ 0x30
 80018ec:	af08      	add	r7, sp, #32
    tmc4671_periodicJob(motorConfig.initMode, &(motorConfig.initState), motorConfig.initWaitTime,
 80018ee:	4b7a      	ldr	r3, [pc, #488]	@ (8001ad8 <TMC4671_controller_periodicJob+0x1f0>)
 80018f0:	79d8      	ldrb	r0, [r3, #7]
 80018f2:	4b79      	ldr	r3, [pc, #484]	@ (8001ad8 <TMC4671_controller_periodicJob+0x1f0>)
 80018f4:	885a      	ldrh	r2, [r3, #2]
 80018f6:	4b78      	ldr	r3, [pc, #480]	@ (8001ad8 <TMC4671_controller_periodicJob+0x1f0>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	4978      	ldr	r1, [pc, #480]	@ (8001adc <TMC4671_controller_periodicJob+0x1f4>)
 80018fc:	9106      	str	r1, [sp, #24]
 80018fe:	4978      	ldr	r1, [pc, #480]	@ (8001ae0 <TMC4671_controller_periodicJob+0x1f8>)
 8001900:	9105      	str	r1, [sp, #20]
 8001902:	4978      	ldr	r1, [pc, #480]	@ (8001ae4 <TMC4671_controller_periodicJob+0x1fc>)
 8001904:	9104      	str	r1, [sp, #16]
 8001906:	4978      	ldr	r1, [pc, #480]	@ (8001ae8 <TMC4671_controller_periodicJob+0x200>)
 8001908:	9103      	str	r1, [sp, #12]
 800190a:	4978      	ldr	r1, [pc, #480]	@ (8001aec <TMC4671_controller_periodicJob+0x204>)
 800190c:	9102      	str	r1, [sp, #8]
 800190e:	4978      	ldr	r1, [pc, #480]	@ (8001af0 <TMC4671_controller_periodicJob+0x208>)
 8001910:	9101      	str	r1, [sp, #4]
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	4b77      	ldr	r3, [pc, #476]	@ (8001af4 <TMC4671_controller_periodicJob+0x20c>)
 8001916:	4978      	ldr	r1, [pc, #480]	@ (8001af8 <TMC4671_controller_periodicJob+0x210>)
 8001918:	f7ff fdcd 	bl	80014b6 <tmc4671_periodicJob>
                        &(motorConfig.hall_actual_coarse_offset),
                        &(motorConfig.last_Phi_E_Selection), &(motorConfig.last_UQ_UD_EXT),
                        &(motorConfig.last_PHI_E_EXT));

    // 1ms velocity ramp handling
    motorConfig.actualVelocityPT1 = tmc_filterPT1( &motorConfig.akkuActualVelocity, tmc4671_getActualVelocity(),
 800191c:	f7ff fb4c 	bl	8000fb8 <tmc4671_getActualVelocity>
 8001920:	4601      	mov	r1, r0
 8001922:	4b6d      	ldr	r3, [pc, #436]	@ (8001ad8 <TMC4671_controller_periodicJob+0x1f0>)
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	2308      	movs	r3, #8
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2303      	movs	r3, #3
 800192c:	4873      	ldr	r0, [pc, #460]	@ (8001afc <TMC4671_controller_periodicJob+0x214>)
 800192e:	f7ff feed 	bl	800170c <tmc_filterPT1>
 8001932:	4603      	mov	r3, r0
 8001934:	4a68      	ldr	r2, [pc, #416]	@ (8001ad8 <TMC4671_controller_periodicJob+0x1f0>)
 8001936:	6153      	str	r3, [r2, #20]
												   motorConfig.actualVelocityPT1, 3, 8);

	// filter actual current
	int32_t
	actualCurrentRaw = tmc4671_fieldRead(TMC4671_PID_TORQUE_ACTUAL_FIELD);
 8001938:	4b71      	ldr	r3, [pc, #452]	@ (8001b00 <TMC4671_controller_periodicJob+0x218>)
 800193a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800193e:	f7ff fece 	bl	80016de <tmc4671_fieldRead>
 8001942:	4603      	mov	r3, r0
 8001944:	60fb      	str	r3, [r7, #12]
	if ((actualCurrentRaw > -32000) && (actualCurrentRaw < 32000)) {
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f513 4ffa 	cmn.w	r3, #32000	@ 0x7d00
 800194c:	dd1d      	ble.n	800198a <TMC4671_controller_periodicJob+0xa2>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001954:	da19      	bge.n	800198a <TMC4671_controller_periodicJob+0xa2>
		int32_t actualCurrent = ((int32_t) actualCurrentRaw
				* (int32_t) motorConfig.torqueMeasurementFactor) / 256;
 8001956:	4b60      	ldr	r3, [pc, #384]	@ (8001ad8 <TMC4671_controller_periodicJob+0x1f0>)
 8001958:	891b      	ldrh	r3, [r3, #8]
 800195a:	461a      	mov	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	fb02 f303 	mul.w	r3, r2, r3
		int32_t actualCurrent = ((int32_t) actualCurrentRaw
 8001962:	2b00      	cmp	r3, #0
 8001964:	da00      	bge.n	8001968 <TMC4671_controller_periodicJob+0x80>
 8001966:	33ff      	adds	r3, #255	@ 0xff
 8001968:	121b      	asrs	r3, r3, #8
 800196a:	60bb      	str	r3, [r7, #8]
		motorConfig.actualTorquePT1 = tmc_filterPT1(
				&motorConfig.akkuActualTorque, actualCurrent,
				motorConfig.actualTorquePT1, 4, 8);
 800196c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad8 <TMC4671_controller_periodicJob+0x1f0>)
 800196e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
		motorConfig.actualTorquePT1 = tmc_filterPT1(
 8001972:	461a      	mov	r2, r3
 8001974:	2308      	movs	r3, #8
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2304      	movs	r3, #4
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	4861      	ldr	r0, [pc, #388]	@ (8001b04 <TMC4671_controller_periodicJob+0x21c>)
 800197e:	f7ff fec5 	bl	800170c <tmc_filterPT1>
 8001982:	4603      	mov	r3, r0
 8001984:	b21a      	sxth	r2, r3
 8001986:	4b54      	ldr	r3, [pc, #336]	@ (8001ad8 <TMC4671_controller_periodicJob+0x1f0>)
 8001988:	841a      	strh	r2, [r3, #32]
	}

	// filter actual flux
	int32_t
	actualFluxRaw = tmc4671_fieldRead(TMC4671_PID_FLUX_ACTUAL_FIELD);
 800198a:	4b5f      	ldr	r3, [pc, #380]	@ (8001b08 <TMC4671_controller_periodicJob+0x220>)
 800198c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001990:	f7ff fea5 	bl	80016de <tmc4671_fieldRead>
 8001994:	4603      	mov	r3, r0
 8001996:	607b      	str	r3, [r7, #4]
	if ((actualFluxRaw > -32000) && (actualFluxRaw < 32000)) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f513 4ffa 	cmn.w	r3, #32000	@ 0x7d00
 800199e:	dd1d      	ble.n	80019dc <TMC4671_controller_periodicJob+0xf4>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80019a6:	da19      	bge.n	80019dc <TMC4671_controller_periodicJob+0xf4>
		int32_t actualFlux = ((int32_t) actualFluxRaw
				* (int32_t) motorConfig.torqueMeasurementFactor) / 256;
 80019a8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad8 <TMC4671_controller_periodicJob+0x1f0>)
 80019aa:	891b      	ldrh	r3, [r3, #8]
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
		int32_t actualFlux = ((int32_t) actualFluxRaw
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	da00      	bge.n	80019ba <TMC4671_controller_periodicJob+0xd2>
 80019b8:	33ff      	adds	r3, #255	@ 0xff
 80019ba:	121b      	asrs	r3, r3, #8
 80019bc:	603b      	str	r3, [r7, #0]
		motorConfig.actualFluxPT1 = tmc_filterPT1(
				&motorConfig.akkuActualFlux, actualFlux,
				motorConfig.actualFluxPT1, 2, 8);
 80019be:	4b46      	ldr	r3, [pc, #280]	@ (8001ad8 <TMC4671_controller_periodicJob+0x1f0>)
 80019c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
		motorConfig.actualFluxPT1 = tmc_filterPT1(
 80019c4:	461a      	mov	r2, r3
 80019c6:	2308      	movs	r3, #8
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2302      	movs	r3, #2
 80019cc:	6839      	ldr	r1, [r7, #0]
 80019ce:	484f      	ldr	r0, [pc, #316]	@ (8001b0c <TMC4671_controller_periodicJob+0x224>)
 80019d0:	f7ff fe9c 	bl	800170c <tmc_filterPT1>
 80019d4:	4603      	mov	r3, r0
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <TMC4671_controller_periodicJob+0x1f0>)
 80019da:	861a      	strh	r2, [r3, #48]	@ 0x30
	}
	// do velocity / position ramping
	if (actualMotionMode == TMC4671_MOTION_MODE_POSITION) {
 80019dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001b10 <TMC4671_controller_periodicJob+0x228>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d12e      	bne.n	8001a42 <TMC4671_controller_periodicJob+0x15a>
		TMC_LinearRamp_computeRampPosition(&rampGenerator);
 80019e4:	484b      	ldr	r0, [pc, #300]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 80019e6:	f7fe ff5b 	bl	80008a0 <TMC_LinearRamp_computeRampPosition>

		// set new target position (only if changed)
		if (rampGenerator.rampPosition != lastRampTargetPosition) {
 80019ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001b18 <TMC4671_controller_periodicJob+0x230>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d016      	beq.n	8001a24 <TMC4671_controller_periodicJob+0x13c>
			tmc4671_writeRegister(TMC4671_PID_POSITION_TARGET,
 80019f6:	4b47      	ldr	r3, [pc, #284]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	4619      	mov	r1, r3
 80019fc:	2068      	movs	r0, #104	@ 0x68
 80019fe:	f7ff fa79 	bl	8000ef4 <tmc4671_writeRegister>
					rampGenerator.rampPosition);
			lastRampTargetPosition = rampGenerator.rampPosition;
 8001a02:	4b44      	ldr	r3, [pc, #272]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	4a44      	ldr	r2, [pc, #272]	@ (8001b18 <TMC4671_controller_periodicJob+0x230>)
 8001a08:	6013      	str	r3, [r2, #0]

			// use velocity feed forward
			tmc4671_writeRegister(TMC4671_PID_VELOCITY_OFFSET,
					(motorConfig.enableVelocityFeedForward) ?
 8001a0a:	4b33      	ldr	r3, [pc, #204]	@ (8001ad8 <TMC4671_controller_periodicJob+0x1f0>)
 8001a0c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
			tmc4671_writeRegister(TMC4671_PID_VELOCITY_OFFSET,
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <TMC4671_controller_periodicJob+0x132>
 8001a14:	4b3f      	ldr	r3, [pc, #252]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	e000      	b.n	8001a1c <TMC4671_controller_periodicJob+0x134>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	2067      	movs	r0, #103	@ 0x67
 8001a20:	f7ff fa68 	bl	8000ef4 <tmc4671_writeRegister>
							rampGenerator.rampVelocity : 0);
		}

		// sync ramp velocity by PIDIN_TARGET_VELOCITY if ramp is disabled
		if (!rampGenerator.rampEnabled) {
 8001a24:	4b3b      	ldr	r3, [pc, #236]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 8001a26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d150      	bne.n	8001ad0 <TMC4671_controller_periodicJob+0x1e8>
			rampGenerator.rampVelocity = tmc4671_readFieldWithDependency(TMC4671_PIDIN_TARGET_VELOCITY_FIELD, TMC4671_INTERIM_ADDR, 2);
 8001a2e:	493b      	ldr	r1, [pc, #236]	@ (8001b1c <TMC4671_controller_periodicJob+0x234>)
 8001a30:	2302      	movs	r3, #2
 8001a32:	226f      	movs	r2, #111	@ 0x6f
 8001a34:	c903      	ldmia	r1, {r0, r1}
 8001a36:	f7ff fd5f 	bl	80014f8 <tmc4671_readFieldWithDependency>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4a35      	ldr	r2, [pc, #212]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 8001a3e:	6113      	str	r3, [r2, #16]
				TMC4671_PID_POSITION_ACTUAL);
		rampGenerator.rampVelocity = tmc4671_getActualVelocity();
		rampGenerator.lastdXRest = 0;
	}

}
 8001a40:	e046      	b.n	8001ad0 <TMC4671_controller_periodicJob+0x1e8>
	else if (actualMotionMode == TMC4671_MOTION_MODE_VELOCITY) {
 8001a42:	4b33      	ldr	r3, [pc, #204]	@ (8001b10 <TMC4671_controller_periodicJob+0x228>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d128      	bne.n	8001a9c <TMC4671_controller_periodicJob+0x1b4>
		TMC_LinearRamp_computeRampVelocity(&rampGenerator);
 8001a4a:	4832      	ldr	r0, [pc, #200]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 8001a4c:	f7fe feb2 	bl	80007b4 <TMC_LinearRamp_computeRampVelocity>
		if (rampGenerator.rampVelocity != lastRampTargetVelocity) {
 8001a50:	4b30      	ldr	r3, [pc, #192]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	4b32      	ldr	r3, [pc, #200]	@ (8001b20 <TMC4671_controller_periodicJob+0x238>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d00d      	beq.n	8001a78 <TMC4671_controller_periodicJob+0x190>
			tmc4671_writeRegister(TMC4671_PID_VELOCITY_TARGET,
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	4619      	mov	r1, r3
 8001a62:	2066      	movs	r0, #102	@ 0x66
 8001a64:	f7ff fa46 	bl	8000ef4 <tmc4671_writeRegister>
			lastRampTargetVelocity = rampGenerator.rampVelocity;
 8001a68:	4b2a      	ldr	r3, [pc, #168]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001b20 <TMC4671_controller_periodicJob+0x238>)
 8001a6e:	6013      	str	r3, [r2, #0]
			tmc4671_writeRegister(TMC4671_PID_VELOCITY_OFFSET, 0);
 8001a70:	2100      	movs	r1, #0
 8001a72:	2067      	movs	r0, #103	@ 0x67
 8001a74:	f7ff fa3e 	bl	8000ef4 <tmc4671_writeRegister>
		tmc4671_writeRegister(TMC4671_PID_POSITION_TARGET,
 8001a78:	206b      	movs	r0, #107	@ 0x6b
 8001a7a:	f7ff fa09 	bl	8000e90 <tmc4671_readRegister>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4619      	mov	r1, r3
 8001a82:	2068      	movs	r0, #104	@ 0x68
 8001a84:	f7ff fa36 	bl	8000ef4 <tmc4671_writeRegister>
		rampGenerator.rampPosition = tmc4671_readRegister(
 8001a88:	206b      	movs	r0, #107	@ 0x6b
 8001a8a:	f7ff fa01 	bl	8000e90 <tmc4671_readRegister>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4a20      	ldr	r2, [pc, #128]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 8001a92:	6093      	str	r3, [r2, #8]
		rampGenerator.lastdXRest = 0;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
}
 8001a9a:	e019      	b.n	8001ad0 <TMC4671_controller_periodicJob+0x1e8>
	else if (actualMotionMode == TMC4671_MOTION_MODE_TORQUE) {
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b10 <TMC4671_controller_periodicJob+0x228>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d115      	bne.n	8001ad0 <TMC4671_controller_periodicJob+0x1e8>
		tmc4671_writeRegister(TMC4671_PID_POSITION_TARGET,
 8001aa4:	206b      	movs	r0, #107	@ 0x6b
 8001aa6:	f7ff f9f3 	bl	8000e90 <tmc4671_readRegister>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4619      	mov	r1, r3
 8001aae:	2068      	movs	r0, #104	@ 0x68
 8001ab0:	f7ff fa20 	bl	8000ef4 <tmc4671_writeRegister>
		rampGenerator.rampPosition = tmc4671_readRegister(
 8001ab4:	206b      	movs	r0, #107	@ 0x6b
 8001ab6:	f7ff f9eb 	bl	8000e90 <tmc4671_readRegister>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4a15      	ldr	r2, [pc, #84]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 8001abe:	6093      	str	r3, [r2, #8]
		rampGenerator.rampVelocity = tmc4671_getActualVelocity();
 8001ac0:	f7ff fa7a 	bl	8000fb8 <tmc4671_getActualVelocity>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a13      	ldr	r2, [pc, #76]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 8001ac8:	6113      	str	r3, [r2, #16]
		rampGenerator.lastdXRest = 0;
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <TMC4671_controller_periodicJob+0x22c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000130 	.word	0x20000130
 8001adc:	20000184 	.word	0x20000184
 8001ae0:	20000180 	.word	0x20000180
 8001ae4:	2000017e 	.word	0x2000017e
 8001ae8:	2000017c 	.word	0x2000017c
 8001aec:	2000017a 	.word	0x2000017a
 8001af0:	20000178 	.word	0x20000178
 8001af4:	20000134 	.word	0x20000134
 8001af8:	20000136 	.word	0x20000136
 8001afc:	20000148 	.word	0x20000148
 8001b00:	08009438 	.word	0x08009438
 8001b04:	20000158 	.word	0x20000158
 8001b08:	08009430 	.word	0x08009430
 8001b0c:	20000168 	.word	0x20000168
 8001b10:	200001b0 	.word	0x200001b0
 8001b14:	20000188 	.word	0x20000188
 8001b18:	200001b4 	.word	0x200001b4
 8001b1c:	08009440 	.word	0x08009440
 8001b20:	200001b8 	.word	0x200001b8

08001b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b28:	f000 fa36 	bl	8001f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2c:	f000 f83a 	bl	8001ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b30:	f7ff fd0a 	bl	8001548 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001b34:	f006 fea0 	bl	8008878 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001b38:	f000 f8bc 	bl	8001cb4 <MX_SPI1_Init>
  MX_TIM10_Init();
 8001b3c:	f000 f9b6 	bl	8001eac <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001b40:	2201      	movs	r2, #1
 8001b42:	2102      	movs	r1, #2
 8001b44:	4814      	ldr	r0, [pc, #80]	@ (8001b98 <main+0x74>)
 8001b46:	f000 fd83 	bl	8002650 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4812      	ldr	r0, [pc, #72]	@ (8001b98 <main+0x74>)
 8001b50:	f000 fd7e 	bl	8002650 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	2180      	movs	r1, #128	@ 0x80
 8001b58:	4810      	ldr	r0, [pc, #64]	@ (8001b9c <main+0x78>)
 8001b5a:	f000 fd79 	bl	8002650 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001b5e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b62:	f000 fa8b 	bl	800207c <HAL_Delay>
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2102      	movs	r1, #2
 8001b6a:	480b      	ldr	r0, [pc, #44]	@ (8001b98 <main+0x74>)
 8001b6c:	f000 fd70 	bl	8002650 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2101      	movs	r1, #1
 8001b74:	4808      	ldr	r0, [pc, #32]	@ (8001b98 <main+0x74>)
 8001b76:	f000 fd6b 	bl	8002650 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2180      	movs	r1, #128	@ 0x80
 8001b7e:	4807      	ldr	r0, [pc, #28]	@ (8001b9c <main+0x78>)
 8001b80:	f000 fd66 	bl	8002650 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001b84:	2064      	movs	r0, #100	@ 0x64
 8001b86:	f000 fa79 	bl	800207c <HAL_Delay>
  /* USER CODE END 2 */
  TMC4671_controller_init();
 8001b8a:	f7ff fe1b 	bl	80017c4 <TMC4671_controller_init>
  HAL_TIM_Base_Start_IT(&htim10);
 8001b8e:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <main+0x7c>)
 8001b90:	f003 fa44 	bl	800501c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <main+0x70>
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40020c00 	.word	0x40020c00
 8001ba0:	20000218 	.word	0x20000218

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b094      	sub	sp, #80	@ 0x50
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0320 	add.w	r3, r7, #32
 8001bae:	2230      	movs	r2, #48	@ 0x30
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f007 fb20 	bl	80091f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	4b28      	ldr	r3, [pc, #160]	@ (8001c70 <SystemClock_Config+0xcc>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	4a27      	ldr	r2, [pc, #156]	@ (8001c70 <SystemClock_Config+0xcc>)
 8001bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <SystemClock_Config+0xcc>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <SystemClock_Config+0xd0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a21      	ldr	r2, [pc, #132]	@ (8001c74 <SystemClock_Config+0xd0>)
 8001bee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c74 <SystemClock_Config+0xd0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c00:	2301      	movs	r3, #1
 8001c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c14:	2304      	movs	r3, #4
 8001c16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c18:	23a8      	movs	r3, #168	@ 0xa8
 8001c1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c20:	2307      	movs	r3, #7
 8001c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 ff65 	bl	8003af8 <HAL_RCC_OscConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c34:	f000 f832 	bl	8001c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c38:	230f      	movs	r3, #15
 8001c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c44:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	2105      	movs	r1, #5
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 f9c6 	bl	8003fe8 <HAL_RCC_ClockConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c62:	f000 f81b 	bl	8001c9c <Error_Handler>
  }
}
 8001c66:	bf00      	nop
 8001c68:	3750      	adds	r7, #80	@ 0x50
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000

08001c78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		TMC4671_controller_periodicJob();
 8001c8a:	f7ff fe2d 	bl	80018e8 <TMC4671_controller_periodicJob>
	}
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40014400 	.word	0x40014400

08001c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
}
 8001ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4801      	ldr	r0, [pc, #4]	@ (8001cb0 <Error_Handler+0x14>)
 8001caa:	f000 fcd1 	bl	8002650 <HAL_GPIO_WritePin>
 8001cae:	e7f9      	b.n	8001ca4 <Error_Handler+0x8>
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cba:	4a18      	ldr	r2, [pc, #96]	@ (8001d1c <MX_SPI1_Init+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cbe:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc6:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001ce8:	2210      	movs	r2, #16
 8001cea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001d00:	220a      	movs	r2, #10
 8001d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001d06:	f002 fb67 	bl	80043d8 <HAL_SPI_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d10:	f7ff ffc4 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200001c0 	.word	0x200001c0
 8001d1c:	40013000 	.word	0x40013000

08001d20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	@ 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <HAL_SPI_MspInit+0x84>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d12b      	bne.n	8001d9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b18      	ldr	r3, [pc, #96]	@ (8001da8 <HAL_SPI_MspInit+0x88>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	4a17      	ldr	r2, [pc, #92]	@ (8001da8 <HAL_SPI_MspInit+0x88>)
 8001d4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <HAL_SPI_MspInit+0x88>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <HAL_SPI_MspInit+0x88>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a10      	ldr	r2, [pc, #64]	@ (8001da8 <HAL_SPI_MspInit+0x88>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <HAL_SPI_MspInit+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d7a:	23e0      	movs	r3, #224	@ 0xe0
 8001d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	4619      	mov	r1, r3
 8001d94:	4805      	ldr	r0, [pc, #20]	@ (8001dac <HAL_SPI_MspInit+0x8c>)
 8001d96:	f000 faa7 	bl	80022e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	3728      	adds	r7, #40	@ 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40013000 	.word	0x40013000
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020000 	.word	0x40020000

08001db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	4a08      	ldr	r2, [pc, #32]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800

08001e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <NMI_Handler+0x4>

08001e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <HardFault_Handler+0x4>

08001e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <MemManage_Handler+0x4>

08001e18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <BusFault_Handler+0x4>

08001e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <UsageFault_Handler+0x4>

08001e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e56:	f000 f8f1 	bl	800203c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001e64:	4802      	ldr	r0, [pc, #8]	@ (8001e70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e66:	f003 f949 	bl	80050fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000218 	.word	0x20000218

08001e74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <OTG_FS_IRQHandler+0x10>)
 8001e7a:	f000 fd46 	bl	800290a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000770 	.word	0x20000770

08001e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <SystemInit+0x20>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e92:	4a05      	ldr	r2, [pc, #20]	@ (8001ea8 <SystemInit+0x20>)
 8001e94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <MX_TIM10_Init+0x40>)
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef0 <MX_TIM10_Init+0x44>)
 8001eb4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 167;
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <MX_TIM10_Init+0x40>)
 8001eb8:	22a7      	movs	r2, #167	@ 0xa7
 8001eba:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <MX_TIM10_Init+0x40>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <MX_TIM10_Init+0x40>)
 8001ec4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ec8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eca:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <MX_TIM10_Init+0x40>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <MX_TIM10_Init+0x40>)
 8001ed2:	2280      	movs	r2, #128	@ 0x80
 8001ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ed6:	4805      	ldr	r0, [pc, #20]	@ (8001eec <MX_TIM10_Init+0x40>)
 8001ed8:	f003 f850 	bl	8004f7c <HAL_TIM_Base_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001ee2:	f7ff fedb 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000218 	.word	0x20000218
 8001ef0:	40014400 	.word	0x40014400

08001ef4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0e      	ldr	r2, [pc, #56]	@ (8001f3c <HAL_TIM_Base_MspInit+0x48>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d115      	bne.n	8001f32 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <HAL_TIM_Base_MspInit+0x4c>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f40 <HAL_TIM_Base_MspInit+0x4c>)
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f16:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <HAL_TIM_Base_MspInit+0x4c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	2019      	movs	r0, #25
 8001f28:	f000 f9a7 	bl	800227a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f2c:	2019      	movs	r0, #25
 8001f2e:	f000 f9c0 	bl	80022b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40014400 	.word	0x40014400
 8001f40:	40023800 	.word	0x40023800

08001f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f48:	f7ff ff9e 	bl	8001e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f4c:	480c      	ldr	r0, [pc, #48]	@ (8001f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f4e:	490d      	ldr	r1, [pc, #52]	@ (8001f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f50:	4a0d      	ldr	r2, [pc, #52]	@ (8001f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f54:	e002      	b.n	8001f5c <LoopCopyDataInit>

08001f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5a:	3304      	adds	r3, #4

08001f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f60:	d3f9      	bcc.n	8001f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f64:	4c0a      	ldr	r4, [pc, #40]	@ (8001f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f68:	e001      	b.n	8001f6e <LoopFillZerobss>

08001f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f6c:	3204      	adds	r2, #4

08001f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f70:	d3fb      	bcc.n	8001f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f72:	f007 f949 	bl	8009208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f76:	f7ff fdd5 	bl	8001b24 <main>
  bx  lr    
 8001f7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f84:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001f88:	08009468 	.word	0x08009468
  ldr r2, =_sbss
 8001f8c:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001f90:	20000cac 	.word	0x20000cac

08001f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC_IRQHandler>
	...

08001f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_Init+0x40>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd8 <HAL_Init+0x40>)
 8001fa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <HAL_Init+0x40>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <HAL_Init+0x40>)
 8001fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb4:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <HAL_Init+0x40>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a07      	ldr	r2, [pc, #28]	@ (8001fd8 <HAL_Init+0x40>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	f000 f94f 	bl	8002264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc6:	200f      	movs	r0, #15
 8001fc8:	f000 f808 	bl	8001fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fcc:	f7ff fef0 	bl	8001db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023c00 	.word	0x40023c00

08001fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe4:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <HAL_InitTick+0x54>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <HAL_InitTick+0x58>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f967 	bl	80022ce <HAL_SYSTICK_Config>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e00e      	b.n	8002028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0f      	cmp	r3, #15
 800200e:	d80a      	bhi.n	8002026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002010:	2200      	movs	r2, #0
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f000 f92f 	bl	800227a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800201c:	4a06      	ldr	r2, [pc, #24]	@ (8002038 <HAL_InitTick+0x5c>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000000 	.word	0x20000000
 8002034:	20000008 	.word	0x20000008
 8002038:	20000004 	.word	0x20000004

0800203c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_IncTick+0x20>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_IncTick+0x24>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4413      	add	r3, r2
 800204c:	4a04      	ldr	r2, [pc, #16]	@ (8002060 <HAL_IncTick+0x24>)
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000008 	.word	0x20000008
 8002060:	20000260 	.word	0x20000260

08002064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return uwTick;
 8002068:	4b03      	ldr	r3, [pc, #12]	@ (8002078 <HAL_GetTick+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000260 	.word	0x20000260

0800207c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff ffee 	bl	8002064 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d005      	beq.n	80020a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002096:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <HAL_Delay+0x44>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020a2:	bf00      	nop
 80020a4:	f7ff ffde 	bl	8002064 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d8f7      	bhi.n	80020a4 <HAL_Delay+0x28>
  {
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000008 	.word	0x20000008

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f6:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db0b      	blt.n	8002152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4907      	ldr	r1, [pc, #28]	@ (8002160 <__NVIC_EnableIRQ+0x38>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2001      	movs	r0, #1
 800214a:	fa00 f202 	lsl.w	r2, r0, r2
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000e100 	.word	0xe000e100

08002164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	490c      	ldr	r1, [pc, #48]	@ (80021b0 <__NVIC_SetPriority+0x4c>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	440b      	add	r3, r1
 8002188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800218c:	e00a      	b.n	80021a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4908      	ldr	r1, [pc, #32]	@ (80021b4 <__NVIC_SetPriority+0x50>)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3b04      	subs	r3, #4
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	761a      	strb	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	@ 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	bf28      	it	cs
 80021d6:	2304      	movcs	r3, #4
 80021d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3304      	adds	r3, #4
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d902      	bls.n	80021e8 <NVIC_EncodePriority+0x30>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3b03      	subs	r3, #3
 80021e6:	e000      	b.n	80021ea <NVIC_EncodePriority+0x32>
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	401a      	ands	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002200:	f04f 31ff 	mov.w	r1, #4294967295
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43d9      	mvns	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	4313      	orrs	r3, r2
         );
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	@ 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002230:	d301      	bcc.n	8002236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002232:	2301      	movs	r3, #1
 8002234:	e00f      	b.n	8002256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002236:	4a0a      	ldr	r2, [pc, #40]	@ (8002260 <SysTick_Config+0x40>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223e:	210f      	movs	r1, #15
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f7ff ff8e 	bl	8002164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002248:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <SysTick_Config+0x40>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224e:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <SysTick_Config+0x40>)
 8002250:	2207      	movs	r2, #7
 8002252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	e000e010 	.word	0xe000e010

08002264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff29 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800227a:	b580      	push	{r7, lr}
 800227c:	b086      	sub	sp, #24
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800228c:	f7ff ff3e 	bl	800210c <__NVIC_GetPriorityGrouping>
 8002290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	6978      	ldr	r0, [r7, #20]
 8002298:	f7ff ff8e 	bl	80021b8 <NVIC_EncodePriority>
 800229c:	4602      	mov	r2, r0
 800229e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff5d 	bl	8002164 <__NVIC_SetPriority>
}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff31 	bl	8002128 <__NVIC_EnableIRQ>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ffa2 	bl	8002220 <SysTick_Config>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	@ 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e16b      	b.n	80025dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002304:	2201      	movs	r2, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 815a 	bne.w	80025d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d005      	beq.n	800233a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002336:	2b02      	cmp	r3, #2
 8002338:	d130      	bne.n	800239c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 0201 	and.w	r2, r3, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d017      	beq.n	80023d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d123      	bne.n	800242c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	08da      	lsrs	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3208      	adds	r2, #8
 80023ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0203 	and.w	r2, r3, #3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80b4 	beq.w	80025d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b60      	ldr	r3, [pc, #384]	@ (80025f4 <HAL_GPIO_Init+0x30c>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	4a5f      	ldr	r2, [pc, #380]	@ (80025f4 <HAL_GPIO_Init+0x30c>)
 8002478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800247c:	6453      	str	r3, [r2, #68]	@ 0x44
 800247e:	4b5d      	ldr	r3, [pc, #372]	@ (80025f4 <HAL_GPIO_Init+0x30c>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248a:	4a5b      	ldr	r2, [pc, #364]	@ (80025f8 <HAL_GPIO_Init+0x310>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a52      	ldr	r2, [pc, #328]	@ (80025fc <HAL_GPIO_Init+0x314>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02b      	beq.n	800250e <HAL_GPIO_Init+0x226>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a51      	ldr	r2, [pc, #324]	@ (8002600 <HAL_GPIO_Init+0x318>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d025      	beq.n	800250a <HAL_GPIO_Init+0x222>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a50      	ldr	r2, [pc, #320]	@ (8002604 <HAL_GPIO_Init+0x31c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01f      	beq.n	8002506 <HAL_GPIO_Init+0x21e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002608 <HAL_GPIO_Init+0x320>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d019      	beq.n	8002502 <HAL_GPIO_Init+0x21a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4e      	ldr	r2, [pc, #312]	@ (800260c <HAL_GPIO_Init+0x324>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x216>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002610 <HAL_GPIO_Init+0x328>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x212>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002614 <HAL_GPIO_Init+0x32c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x20e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002618 <HAL_GPIO_Init+0x330>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x20a>
 80024ee:	2307      	movs	r3, #7
 80024f0:	e00e      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024f2:	2308      	movs	r3, #8
 80024f4:	e00c      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024f6:	2306      	movs	r3, #6
 80024f8:	e00a      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024fa:	2305      	movs	r3, #5
 80024fc:	e008      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024fe:	2304      	movs	r3, #4
 8002500:	e006      	b.n	8002510 <HAL_GPIO_Init+0x228>
 8002502:	2303      	movs	r3, #3
 8002504:	e004      	b.n	8002510 <HAL_GPIO_Init+0x228>
 8002506:	2302      	movs	r3, #2
 8002508:	e002      	b.n	8002510 <HAL_GPIO_Init+0x228>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_GPIO_Init+0x228>
 800250e:	2300      	movs	r3, #0
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	f002 0203 	and.w	r2, r2, #3
 8002516:	0092      	lsls	r2, r2, #2
 8002518:	4093      	lsls	r3, r2
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002520:	4935      	ldr	r1, [pc, #212]	@ (80025f8 <HAL_GPIO_Init+0x310>)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	089b      	lsrs	r3, r3, #2
 8002526:	3302      	adds	r3, #2
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800252e:	4b3b      	ldr	r3, [pc, #236]	@ (800261c <HAL_GPIO_Init+0x334>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002552:	4a32      	ldr	r2, [pc, #200]	@ (800261c <HAL_GPIO_Init+0x334>)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002558:	4b30      	ldr	r3, [pc, #192]	@ (800261c <HAL_GPIO_Init+0x334>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800257c:	4a27      	ldr	r2, [pc, #156]	@ (800261c <HAL_GPIO_Init+0x334>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002582:	4b26      	ldr	r3, [pc, #152]	@ (800261c <HAL_GPIO_Init+0x334>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025a6:	4a1d      	ldr	r2, [pc, #116]	@ (800261c <HAL_GPIO_Init+0x334>)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	@ (800261c <HAL_GPIO_Init+0x334>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d0:	4a12      	ldr	r2, [pc, #72]	@ (800261c <HAL_GPIO_Init+0x334>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3301      	adds	r3, #1
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2b0f      	cmp	r3, #15
 80025e0:	f67f ae90 	bls.w	8002304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3724      	adds	r7, #36	@ 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40013800 	.word	0x40013800
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020400 	.word	0x40020400
 8002604:	40020800 	.word	0x40020800
 8002608:	40020c00 	.word	0x40020c00
 800260c:	40021000 	.word	0x40021000
 8002610:	40021400 	.word	0x40021400
 8002614:	40021800 	.word	0x40021800
 8002618:	40021c00 	.word	0x40021c00
 800261c:	40013c00 	.word	0x40013c00

08002620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e001      	b.n	8002642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002660:	787b      	ldrb	r3, [r7, #1]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800266c:	e003      	b.n	8002676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	041a      	lsls	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	619a      	str	r2, [r3, #24]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af02      	add	r7, sp, #8
 8002688:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e101      	b.n	8002898 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f006 fa92 	bl	8008bd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2203      	movs	r2, #3
 80026b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026c2:	d102      	bne.n	80026ca <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 f803 	bl	80056da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7c1a      	ldrb	r2, [r3, #16]
 80026dc:	f88d 2000 	strb.w	r2, [sp]
 80026e0:	3304      	adds	r3, #4
 80026e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026e4:	f002 fee2 	bl	80054ac <USB_CoreInit>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0ce      	b.n	8002898 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f002 fffb 	bl	80056fc <USB_SetCurrentMode>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0bf      	b.n	8002898 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	e04a      	b.n	80027b4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3315      	adds	r3, #21
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3314      	adds	r3, #20
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	b298      	uxth	r0, r3
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	332e      	adds	r3, #46	@ 0x2e
 800275a:	4602      	mov	r2, r0
 800275c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	3318      	adds	r3, #24
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	331c      	adds	r3, #28
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3320      	adds	r3, #32
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3324      	adds	r3, #36	@ 0x24
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	3301      	adds	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	791b      	ldrb	r3, [r3, #4]
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d3af      	bcc.n	800271e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	e044      	b.n	800284e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002832:	7bfa      	ldrb	r2, [r7, #15]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	3301      	adds	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	791b      	ldrb	r3, [r3, #4]
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	429a      	cmp	r2, r3
 8002856:	d3b5      	bcc.n	80027c4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7c1a      	ldrb	r2, [r3, #16]
 8002860:	f88d 2000 	strb.w	r2, [sp]
 8002864:	3304      	adds	r3, #4
 8002866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002868:	f002 ff94 	bl	8005794 <USB_DevInit>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e00c      	b.n	8002898 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f003 ffde 	bl	8006852 <USB_DevDisconnect>

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_PCD_Start+0x1c>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e022      	b.n	8002902 <HAL_PCD_Start+0x62>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d105      	bne.n	80028e4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f002 fee5 	bl	80056b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 ff8c 	bl	8006810 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800290a:	b590      	push	{r4, r7, lr}
 800290c:	b08d      	sub	sp, #52	@ 0x34
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f004 f84a 	bl	80069ba <USB_GetMode>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	f040 848c 	bne.w	8003246 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f003 ffae 	bl	8006894 <USB_ReadInterrupts>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8482 	beq.w	8003244 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f003 ff9b 	bl	8006894 <USB_ReadInterrupts>
 800295e:	4603      	mov	r3, r0
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b02      	cmp	r3, #2
 8002966:	d107      	bne.n	8002978 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f002 0202 	and.w	r2, r2, #2
 8002976:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f003 ff89 	bl	8006894 <USB_ReadInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b10      	cmp	r3, #16
 800298a:	d161      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0210 	bic.w	r2, r2, #16
 800299a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f003 020f 	and.w	r2, r3, #15
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	3304      	adds	r3, #4
 80029ba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	0c5b      	lsrs	r3, r3, #17
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d124      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d035      	beq.n	8002a40 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	6a38      	ldr	r0, [r7, #32]
 80029e8:	f003 fdc0 	bl	800656c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f8:	441a      	add	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a0a:	441a      	add	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	615a      	str	r2, [r3, #20]
 8002a10:	e016      	b.n	8002a40 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	0c5b      	lsrs	r3, r3, #17
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d110      	bne.n	8002a40 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a24:	2208      	movs	r2, #8
 8002a26:	4619      	mov	r1, r3
 8002a28:	6a38      	ldr	r0, [r7, #32]
 8002a2a:	f003 fd9f 	bl	800656c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a3a:	441a      	add	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0210 	orr.w	r2, r2, #16
 8002a4e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 ff1d 	bl	8006894 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a60:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a64:	f040 80a7 	bne.w	8002bb6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 ff22 	bl	80068ba <USB_ReadDevAllOutEpInterrupt>
 8002a76:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a78:	e099      	b.n	8002bae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 808e 	beq.w	8002ba2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f003 ff46 	bl	8006922 <USB_ReadDevOutEPInterrupt>
 8002a96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00c      	beq.n	8002abc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fe8c 	bl	80037d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00c      	beq.n	8002ae0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2308      	movs	r3, #8
 8002ad6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ad8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 ff62 	bl	80039a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002af6:	461a      	mov	r2, r3
 8002af8:	2310      	movs	r3, #16
 8002afa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d030      	beq.n	8002b68 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0e:	2b80      	cmp	r3, #128	@ 0x80
 8002b10:	d109      	bne.n	8002b26 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b24:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	3304      	adds	r3, #4
 8002b3a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	78db      	ldrb	r3, [r3, #3]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d108      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2200      	movs	r2, #0
 8002b48:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f006 f955 	bl	8008e00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b62:	461a      	mov	r2, r3
 8002b64:	2302      	movs	r3, #2
 8002b66:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2320      	movs	r3, #32
 8002b82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ba0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f47f af62 	bne.w	8002a7a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f003 fe6a 	bl	8006894 <USB_ReadInterrupts>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bc6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bca:	f040 80db 	bne.w	8002d84 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 fe8b 	bl	80068ee <USB_ReadDevAllInEpInterrupt>
 8002bd8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002bde:	e0cd      	b.n	8002d7c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80c2 	beq.w	8002d70 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f003 feb1 	bl	800695e <USB_ReadDevInEPInterrupt>
 8002bfc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d057      	beq.n	8002cb8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	2201      	movs	r2, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69f9      	ldr	r1, [r7, #28]
 8002c24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c28:	4013      	ands	r3, r2
 8002c2a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	799b      	ldrb	r3, [r3, #6]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d132      	bne.n	8002cac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	3320      	adds	r3, #32
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4403      	add	r3, r0
 8002c66:	331c      	adds	r3, #28
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4419      	add	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4403      	add	r3, r0
 8002c7a:	3320      	adds	r3, #32
 8002c7c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d113      	bne.n	8002cac <HAL_PCD_IRQHandler+0x3a2>
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3324      	adds	r3, #36	@ 0x24
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d108      	bne.n	8002cac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	f003 feb8 	bl	8006a1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f006 f81f 	bl	8008cf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cea:	461a      	mov	r2, r3
 8002cec:	2310      	movs	r3, #16
 8002cee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d06:	461a      	mov	r2, r3
 8002d08:	2340      	movs	r3, #64	@ 0x40
 8002d0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d023      	beq.n	8002d5e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d18:	6a38      	ldr	r0, [r7, #32]
 8002d1a:	f002 fe9f 	bl	8005a5c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	3310      	adds	r3, #16
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3304      	adds	r3, #4
 8002d30:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	78db      	ldrb	r3, [r3, #3]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d108      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f006 f86c 	bl	8008e24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fca5 	bl	80036ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	3301      	adds	r3, #1
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f47f af2e 	bne.w	8002be0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fd83 	bl	8006894 <USB_ReadInterrupts>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d98:	d122      	bne.n	8002de0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d108      	bne.n	8002dca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fe8c 	bl	8003ae0 <HAL_PCDEx_LPM_Callback>
 8002dc8:	e002      	b.n	8002dd0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f006 f80a 	bl	8008de4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f003 fd55 	bl	8006894 <USB_ReadInterrupts>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002df4:	d112      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d102      	bne.n	8002e0c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f005 ffc6 	bl	8008d98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002e1a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 fd37 	bl	8006894 <USB_ReadInterrupts>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e30:	f040 80b7 	bne.w	8002fa2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2110      	movs	r1, #16
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 fe04 	bl	8005a5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e58:	e046      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e66:	461a      	mov	r2, r3
 8002e68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e6c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e7e:	0151      	lsls	r1, r2, #5
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	440a      	add	r2, r1
 8002e84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002e88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ea0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eb2:	0151      	lsls	r1, r2, #5
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	440a      	add	r2, r1
 8002eb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ebc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ec0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ed2:	0151      	lsls	r1, r2, #5
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	440a      	add	r2, r1
 8002ed8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002edc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ee0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	791b      	ldrb	r3, [r3, #4]
 8002eec:	461a      	mov	r2, r3
 8002eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d3b2      	bcc.n	8002e5a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f02:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002f06:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7bdb      	ldrb	r3, [r3, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d016      	beq.n	8002f3e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f20:	f043 030b 	orr.w	r3, r3, #11
 8002f24:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f36:	f043 030b 	orr.w	r3, r3, #11
 8002f3a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f3c:	e015      	b.n	8002f6a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f50:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002f54:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f64:	f043 030b 	orr.w	r3, r3, #11
 8002f68:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f78:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f7c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f003 fd45 	bl	8006a1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fc74 	bl	8006894 <USB_ReadInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fb6:	d123      	bne.n	8003000 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 fd0a 	bl	80069d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f002 fdc1 	bl	8005b4e <USB_GetDevSpeed>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681c      	ldr	r4, [r3, #0]
 8002fd8:	f001 f9f2 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 8002fdc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f002 fac5 	bl	8005574 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f005 feab 	bl	8008d46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f003 fc45 	bl	8006894 <USB_ReadInterrupts>
 800300a:	4603      	mov	r3, r0
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b08      	cmp	r3, #8
 8003012:	d10a      	bne.n	800302a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f005 fe88 	bl	8008d2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f002 0208 	and.w	r2, r2, #8
 8003028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f003 fc30 	bl	8006894 <USB_ReadInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303a:	2b80      	cmp	r3, #128	@ 0x80
 800303c:	d123      	bne.n	8003086 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800304a:	2301      	movs	r3, #1
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
 800304e:	e014      	b.n	800307a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	b2db      	uxtb	r3, r3
 800306c:	4619      	mov	r1, r3
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 faf2 	bl	8003658 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	3301      	adds	r3, #1
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	791b      	ldrb	r3, [r3, #4]
 800307e:	461a      	mov	r2, r3
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	4293      	cmp	r3, r2
 8003084:	d3e4      	bcc.n	8003050 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f003 fc02 	bl	8006894 <USB_ReadInterrupts>
 8003090:	4603      	mov	r3, r0
 8003092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800309a:	d13c      	bne.n	8003116 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800309c:	2301      	movs	r3, #1
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a0:	e02b      	b.n	80030fa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3318      	adds	r3, #24
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d115      	bne.n	80030f4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da12      	bge.n	80030f4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3317      	adds	r3, #23
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	4619      	mov	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fab2 	bl	8003658 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	3301      	adds	r3, #1
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	791b      	ldrb	r3, [r3, #4]
 80030fe:	461a      	mov	r2, r3
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	4293      	cmp	r3, r2
 8003104:	d3cd      	bcc.n	80030a2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003114:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f003 fbba 	bl	8006894 <USB_ReadInterrupts>
 8003120:	4603      	mov	r3, r0
 8003122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003126:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800312a:	d156      	bne.n	80031da <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800312c:	2301      	movs	r3, #1
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003130:	e045      	b.n	80031be <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	4413      	add	r3, r2
 800313a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d12e      	bne.n	80031b8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800315a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800315c:	2b00      	cmp	r3, #0
 800315e:	da2b      	bge.n	80031b8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800316c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003170:	429a      	cmp	r2, r3
 8003172:	d121      	bne.n	80031b8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031b4:	6053      	str	r3, [r2, #4]
            break;
 80031b6:	e008      	b.n	80031ca <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	3301      	adds	r3, #1
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	791b      	ldrb	r3, [r3, #4]
 80031c2:	461a      	mov	r2, r3
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d3b3      	bcc.n	8003132 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80031d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 fb58 	bl	8006894 <USB_ReadInterrupts>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80031ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ee:	d10a      	bne.n	8003206 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f005 fe29 	bl	8008e48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003204:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f003 fb42 	bl	8006894 <USB_ReadInterrupts>
 8003210:	4603      	mov	r3, r0
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b04      	cmp	r3, #4
 8003218:	d115      	bne.n	8003246 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f005 fe19 	bl	8008e64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	e000      	b.n	8003246 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003244:	bf00      	nop
    }
  }
}
 8003246:	3734      	adds	r7, #52	@ 0x34
 8003248:	46bd      	mov	sp, r7
 800324a:	bd90      	pop	{r4, r7, pc}

0800324c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_PCD_SetAddress+0x1a>
 8003262:	2302      	movs	r3, #2
 8003264:	e012      	b.n	800328c <HAL_PCD_SetAddress+0x40>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f003 faa1 	bl	80067c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	4608      	mov	r0, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	70fb      	strb	r3, [r7, #3]
 80032a6:	460b      	mov	r3, r1
 80032a8:	803b      	strh	r3, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	da0f      	bge.n	80032da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	3310      	adds	r3, #16
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	3304      	adds	r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	705a      	strb	r2, [r3, #1]
 80032d8:	e00f      	b.n	80032fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	f003 020f 	and.w	r2, r3, #15
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003306:	883b      	ldrh	r3, [r7, #0]
 8003308:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	78ba      	ldrb	r2, [r7, #2]
 8003314:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	785b      	ldrb	r3, [r3, #1]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d004      	beq.n	8003328 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003328:	78bb      	ldrb	r3, [r7, #2]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d102      	bne.n	8003334 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_PCD_EP_Open+0xae>
 800333e:	2302      	movs	r3, #2
 8003340:	e00e      	b.n	8003360 <HAL_PCD_EP_Open+0xcc>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68f9      	ldr	r1, [r7, #12]
 8003350:	4618      	mov	r0, r3
 8003352:	f002 fc21 	bl	8005b98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800335e:	7afb      	ldrb	r3, [r7, #11]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003378:	2b00      	cmp	r3, #0
 800337a:	da0f      	bge.n	800339c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	f003 020f 	and.w	r2, r3, #15
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	3310      	adds	r3, #16
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	4413      	add	r3, r2
 8003390:	3304      	adds	r3, #4
 8003392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	705a      	strb	r2, [r3, #1]
 800339a:	e00f      	b.n	80033bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 020f 	and.w	r2, r3, #15
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	3304      	adds	r3, #4
 80033b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_PCD_EP_Close+0x6e>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e00e      	b.n	80033f4 <HAL_PCD_EP_Close+0x8c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68f9      	ldr	r1, [r7, #12]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f002 fc5f 	bl	8005ca8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	460b      	mov	r3, r1
 800340a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800340c:	7afb      	ldrb	r3, [r7, #11]
 800340e:	f003 020f 	and.w	r2, r3, #15
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	3304      	adds	r3, #4
 8003424:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2200      	movs	r2, #0
 800343c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800343e:	7afb      	ldrb	r3, [r7, #11]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	b2da      	uxtb	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	799b      	ldrb	r3, [r3, #6]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d102      	bne.n	8003458 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	799b      	ldrb	r3, [r3, #6]
 8003460:	461a      	mov	r2, r3
 8003462:	6979      	ldr	r1, [r7, #20]
 8003464:	f002 fcfc 	bl	8005e60 <USB_EPStartXfer>

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	460b      	mov	r3, r1
 8003480:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003482:	7afb      	ldrb	r3, [r7, #11]
 8003484:	f003 020f 	and.w	r2, r3, #15
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	3310      	adds	r3, #16
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	3304      	adds	r3, #4
 8003498:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2201      	movs	r2, #1
 80034b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034b2:	7afb      	ldrb	r3, [r7, #11]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	799b      	ldrb	r3, [r3, #6]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	799b      	ldrb	r3, [r3, #6]
 80034d4:	461a      	mov	r2, r3
 80034d6:	6979      	ldr	r1, [r7, #20]
 80034d8:	f002 fcc2 	bl	8005e60 <USB_EPStartXfer>

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	7912      	ldrb	r2, [r2, #4]
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e04f      	b.n	80035a4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003508:	2b00      	cmp	r3, #0
 800350a:	da0f      	bge.n	800352c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	f003 020f 	and.w	r2, r3, #15
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	3310      	adds	r3, #16
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	4413      	add	r3, r2
 8003520:	3304      	adds	r3, #4
 8003522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	705a      	strb	r2, [r3, #1]
 800352a:	e00d      	b.n	8003548 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	3304      	adds	r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_PCD_EP_SetStall+0x82>
 8003564:	2302      	movs	r3, #2
 8003566:	e01d      	b.n	80035a4 <HAL_PCD_EP_SetStall+0xbe>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68f9      	ldr	r1, [r7, #12]
 8003576:	4618      	mov	r0, r3
 8003578:	f003 f850 	bl	800661c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	7999      	ldrb	r1, [r3, #6]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003594:	461a      	mov	r2, r3
 8003596:	f003 fa41 	bl	8006a1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	7912      	ldrb	r2, [r2, #4]
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e042      	b.n	8003650 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	da0f      	bge.n	80035f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	f003 020f 	and.w	r2, r3, #15
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	3310      	adds	r3, #16
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	3304      	adds	r3, #4
 80035e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	705a      	strb	r2, [r3, #1]
 80035f0:	e00f      	b.n	8003612 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	f003 020f 	and.w	r2, r3, #15
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	4413      	add	r3, r2
 8003608:	3304      	adds	r3, #4
 800360a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_PCD_EP_ClrStall+0x86>
 800362e:	2302      	movs	r3, #2
 8003630:	e00e      	b.n	8003650 <HAL_PCD_EP_ClrStall+0xa4>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68f9      	ldr	r1, [r7, #12]
 8003640:	4618      	mov	r0, r3
 8003642:	f003 f859 	bl	80066f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003668:	2b00      	cmp	r3, #0
 800366a:	da0c      	bge.n	8003686 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	f003 020f 	and.w	r2, r3, #15
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	3310      	adds	r3, #16
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	3304      	adds	r3, #4
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e00c      	b.n	80036a0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	f003 020f 	and.w	r2, r3, #15
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4413      	add	r3, r2
 800369c:	3304      	adds	r3, #4
 800369e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68f9      	ldr	r1, [r7, #12]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f002 fe78 	bl	800639c <USB_EPStopXfer>
 80036ac:	4603      	mov	r3, r0
 80036ae:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036b0:	7afb      	ldrb	r3, [r7, #11]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b08a      	sub	sp, #40	@ 0x28
 80036be:	af02      	add	r7, sp, #8
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	3310      	adds	r3, #16
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	3304      	adds	r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d901      	bls.n	80036f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e06b      	b.n	80037ca <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	429a      	cmp	r2, r3
 8003706:	d902      	bls.n	800370e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3303      	adds	r3, #3
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003716:	e02a      	b.n	800376e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	429a      	cmp	r2, r3
 800372c:	d902      	bls.n	8003734 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	3303      	adds	r3, #3
 8003738:	089b      	lsrs	r3, r3, #2
 800373a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68d9      	ldr	r1, [r3, #12]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4603      	mov	r3, r0
 8003750:	6978      	ldr	r0, [r7, #20]
 8003752:	f002 fecd 	bl	80064f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	441a      	add	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	441a      	add	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	429a      	cmp	r2, r3
 8003782:	d809      	bhi.n	8003798 <PCD_WriteEmptyTxFifo+0xde>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800378c:	429a      	cmp	r2, r3
 800378e:	d203      	bcs.n	8003798 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1bf      	bne.n	8003718 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d811      	bhi.n	80037c8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	2201      	movs	r2, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	43db      	mvns	r3, r3
 80037be:	6939      	ldr	r1, [r7, #16]
 80037c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037c4:	4013      	ands	r3, r2
 80037c6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3720      	adds	r7, #32
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	333c      	adds	r3, #60	@ 0x3c
 80037ec:	3304      	adds	r3, #4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	799b      	ldrb	r3, [r3, #6]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d17b      	bne.n	8003902 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d015      	beq.n	8003840 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4a61      	ldr	r2, [pc, #388]	@ (800399c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	f240 80b9 	bls.w	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80b3 	beq.w	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003836:	461a      	mov	r2, r3
 8003838:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800383c:	6093      	str	r3, [r2, #8]
 800383e:	e0a7      	b.n	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003856:	461a      	mov	r2, r3
 8003858:	2320      	movs	r3, #32
 800385a:	6093      	str	r3, [r2, #8]
 800385c:	e098      	b.n	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	f040 8093 	bne.w	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4a4b      	ldr	r2, [pc, #300]	@ (800399c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d90f      	bls.n	8003892 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003888:	461a      	mov	r2, r3
 800388a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800388e:	6093      	str	r3, [r2, #8]
 8003890:	e07e      	b.n	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1a      	ldr	r2, [r3, #32]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	0159      	lsls	r1, r3, #5
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	440b      	add	r3, r1
 80038b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038be:	1ad2      	subs	r2, r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d114      	bne.n	80038f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038dc:	461a      	mov	r2, r3
 80038de:	2101      	movs	r1, #1
 80038e0:	f003 f89c 	bl	8006a1c <USB_EP0_OutStart>
 80038e4:	e006      	b.n	80038f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	441a      	add	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4619      	mov	r1, r3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f005 f9e0 	bl	8008cc0 <HAL_PCD_DataOutStageCallback>
 8003900:	e046      	b.n	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	4a26      	ldr	r2, [pc, #152]	@ (80039a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d124      	bne.n	8003954 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003920:	461a      	mov	r2, r3
 8003922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003926:	6093      	str	r3, [r2, #8]
 8003928:	e032      	b.n	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003940:	461a      	mov	r2, r3
 8003942:	2320      	movs	r3, #32
 8003944:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f005 f9b7 	bl	8008cc0 <HAL_PCD_DataOutStageCallback>
 8003952:	e01d      	b.n	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d114      	bne.n	8003984 <PCD_EP_OutXfrComplete_int+0x1b0>
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	4613      	mov	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d108      	bne.n	8003984 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800397c:	461a      	mov	r2, r3
 800397e:	2100      	movs	r1, #0
 8003980:	f003 f84c 	bl	8006a1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	4619      	mov	r1, r3
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f005 f998 	bl	8008cc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	4f54300a 	.word	0x4f54300a
 80039a0:	4f54310a 	.word	0x4f54310a

080039a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	333c      	adds	r3, #60	@ 0x3c
 80039bc:	3304      	adds	r3, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a15      	ldr	r2, [pc, #84]	@ (8003a2c <PCD_EP_OutSetupPacket_int+0x88>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d90e      	bls.n	80039f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f0:	461a      	mov	r2, r3
 80039f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f005 f94f 	bl	8008c9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4a0a      	ldr	r2, [pc, #40]	@ (8003a2c <PCD_EP_OutSetupPacket_int+0x88>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d90c      	bls.n	8003a20 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	799b      	ldrb	r3, [r3, #6]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d108      	bne.n	8003a20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	f002 fffe 	bl	8006a1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	4f54300a 	.word	0x4f54300a

08003a30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	70fb      	strb	r3, [r7, #3]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d107      	bne.n	8003a5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a4e:	883b      	ldrh	r3, [r7, #0]
 8003a50:	0419      	lsls	r1, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a5c:	e028      	b.n	8003ab0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	4413      	add	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e00d      	b.n	8003a8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	3340      	adds	r3, #64	@ 0x40
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	4413      	add	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d3ec      	bcc.n	8003a72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a98:	883b      	ldrh	r3, [r7, #0]
 8003a9a:	0418      	lsls	r0, r3, #16
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6819      	ldr	r1, [r3, #0]
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	4302      	orrs	r2, r0
 8003aa8:	3340      	adds	r3, #64	@ 0x40
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	887a      	ldrh	r2, [r7, #2]
 8003ad0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e267      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d075      	beq.n	8003c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b16:	4b88      	ldr	r3, [pc, #544]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d00c      	beq.n	8003b3c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b22:	4b85      	ldr	r3, [pc, #532]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d112      	bne.n	8003b54 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b2e:	4b82      	ldr	r3, [pc, #520]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b3a:	d10b      	bne.n	8003b54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d05b      	beq.n	8003c00 <HAL_RCC_OscConfig+0x108>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d157      	bne.n	8003c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e242      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b5c:	d106      	bne.n	8003b6c <HAL_RCC_OscConfig+0x74>
 8003b5e:	4b76      	ldr	r3, [pc, #472]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a75      	ldr	r2, [pc, #468]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e01d      	b.n	8003ba8 <HAL_RCC_OscConfig+0xb0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x98>
 8003b76:	4b70      	ldr	r3, [pc, #448]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a6f      	ldr	r2, [pc, #444]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b6d      	ldr	r3, [pc, #436]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a6c      	ldr	r2, [pc, #432]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e00b      	b.n	8003ba8 <HAL_RCC_OscConfig+0xb0>
 8003b90:	4b69      	ldr	r3, [pc, #420]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a68      	ldr	r2, [pc, #416]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b66      	ldr	r3, [pc, #408]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a65      	ldr	r2, [pc, #404]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d013      	beq.n	8003bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fa58 	bl	8002064 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fe fa54 	bl	8002064 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	@ 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e207      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	4b5b      	ldr	r3, [pc, #364]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0xc0>
 8003bd6:	e014      	b.n	8003c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fa44 	bl	8002064 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be0:	f7fe fa40 	bl	8002064 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	@ 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e1f3      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf2:	4b51      	ldr	r3, [pc, #324]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0xe8>
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d063      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1a:	4b47      	ldr	r3, [pc, #284]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d11c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c26:	4b44      	ldr	r3, [pc, #272]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d116      	bne.n	8003c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c32:	4b41      	ldr	r3, [pc, #260]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <HAL_RCC_OscConfig+0x152>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d001      	beq.n	8003c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e1c7      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4937      	ldr	r1, [pc, #220]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5e:	e03a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d020      	beq.n	8003caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c68:	4b34      	ldr	r3, [pc, #208]	@ (8003d3c <HAL_RCC_OscConfig+0x244>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fe f9f9 	bl	8002064 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c76:	f7fe f9f5 	bl	8002064 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e1a8      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c88:	4b2b      	ldr	r3, [pc, #172]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c94:	4b28      	ldr	r3, [pc, #160]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4925      	ldr	r1, [pc, #148]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]
 8003ca8:	e015      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003caa:	4b24      	ldr	r3, [pc, #144]	@ (8003d3c <HAL_RCC_OscConfig+0x244>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fe f9d8 	bl	8002064 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb8:	f7fe f9d4 	bl	8002064 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e187      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cca:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d036      	beq.n	8003d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d016      	beq.n	8003d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cea:	4b15      	ldr	r3, [pc, #84]	@ (8003d40 <HAL_RCC_OscConfig+0x248>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fe f9b8 	bl	8002064 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf8:	f7fe f9b4 	bl	8002064 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e167      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x200>
 8003d16:	e01b      	b.n	8003d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d18:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <HAL_RCC_OscConfig+0x248>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1e:	f7fe f9a1 	bl	8002064 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d24:	e00e      	b.n	8003d44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d26:	f7fe f99d 	bl	8002064 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d907      	bls.n	8003d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e150      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	42470000 	.word	0x42470000
 8003d40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d44:	4b88      	ldr	r3, [pc, #544]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1ea      	bne.n	8003d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8097 	beq.w	8003e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d62:	4b81      	ldr	r3, [pc, #516]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10f      	bne.n	8003d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	4b7d      	ldr	r3, [pc, #500]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	4a7c      	ldr	r2, [pc, #496]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8e:	4b77      	ldr	r3, [pc, #476]	@ (8003f6c <HAL_RCC_OscConfig+0x474>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d118      	bne.n	8003dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9a:	4b74      	ldr	r3, [pc, #464]	@ (8003f6c <HAL_RCC_OscConfig+0x474>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a73      	ldr	r2, [pc, #460]	@ (8003f6c <HAL_RCC_OscConfig+0x474>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da6:	f7fe f95d 	bl	8002064 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dae:	f7fe f959 	bl	8002064 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e10c      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc0:	4b6a      	ldr	r3, [pc, #424]	@ (8003f6c <HAL_RCC_OscConfig+0x474>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCC_OscConfig+0x2ea>
 8003dd4:	4b64      	ldr	r3, [pc, #400]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd8:	4a63      	ldr	r2, [pc, #396]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de0:	e01c      	b.n	8003e1c <HAL_RCC_OscConfig+0x324>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x30c>
 8003dea:	4b5f      	ldr	r3, [pc, #380]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dee:	4a5e      	ldr	r2, [pc, #376]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003df0:	f043 0304 	orr.w	r3, r3, #4
 8003df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df6:	4b5c      	ldr	r3, [pc, #368]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	4a5b      	ldr	r2, [pc, #364]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e02:	e00b      	b.n	8003e1c <HAL_RCC_OscConfig+0x324>
 8003e04:	4b58      	ldr	r3, [pc, #352]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e08:	4a57      	ldr	r2, [pc, #348]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e10:	4b55      	ldr	r3, [pc, #340]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e14:	4a54      	ldr	r2, [pc, #336]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e16:	f023 0304 	bic.w	r3, r3, #4
 8003e1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d015      	beq.n	8003e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e24:	f7fe f91e 	bl	8002064 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2c:	f7fe f91a 	bl	8002064 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e0cb      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	4b49      	ldr	r3, [pc, #292]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0ee      	beq.n	8003e2c <HAL_RCC_OscConfig+0x334>
 8003e4e:	e014      	b.n	8003e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e50:	f7fe f908 	bl	8002064 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fe f904 	bl	8002064 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0b5      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1ee      	bne.n	8003e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e80:	4b39      	ldr	r3, [pc, #228]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	4a38      	ldr	r2, [pc, #224]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80a1 	beq.w	8003fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e96:	4b34      	ldr	r3, [pc, #208]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d05c      	beq.n	8003f5c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d141      	bne.n	8003f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eaa:	4b31      	ldr	r3, [pc, #196]	@ (8003f70 <HAL_RCC_OscConfig+0x478>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fe f8d8 	bl	8002064 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7fe f8d4 	bl	8002064 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e087      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eca:	4b27      	ldr	r3, [pc, #156]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	019b      	lsls	r3, r3, #6
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	085b      	lsrs	r3, r3, #1
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	061b      	lsls	r3, r3, #24
 8003efa:	491b      	ldr	r1, [pc, #108]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f00:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <HAL_RCC_OscConfig+0x478>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fe f8ad 	bl	8002064 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fe f8a9 	bl	8002064 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e05c      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f20:	4b11      	ldr	r3, [pc, #68]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x416>
 8003f2c:	e054      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b10      	ldr	r3, [pc, #64]	@ (8003f70 <HAL_RCC_OscConfig+0x478>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fe f896 	bl	8002064 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fe f892 	bl	8002064 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e045      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x444>
 8003f5a:	e03d      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e038      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40007000 	.word	0x40007000
 8003f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f74:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe4 <HAL_RCC_OscConfig+0x4ec>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d028      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d121      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d11a      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d111      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d107      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800

08003fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0cc      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b68      	ldr	r3, [pc, #416]	@ (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d90c      	bls.n	8004024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b65      	ldr	r3, [pc, #404]	@ (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b63      	ldr	r3, [pc, #396]	@ (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0b8      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d020      	beq.n	8004072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800403c:	4b59      	ldr	r3, [pc, #356]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a58      	ldr	r2, [pc, #352]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004046:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004054:	4b53      	ldr	r3, [pc, #332]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a52      	ldr	r2, [pc, #328]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800405e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004060:	4b50      	ldr	r3, [pc, #320]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	494d      	ldr	r1, [pc, #308]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	4313      	orrs	r3, r2
 8004070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d044      	beq.n	8004108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d107      	bne.n	8004096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	4b47      	ldr	r3, [pc, #284]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d119      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e07f      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d003      	beq.n	80040a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d107      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a6:	4b3f      	ldr	r3, [pc, #252]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e06f      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b6:	4b3b      	ldr	r3, [pc, #236]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e067      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c6:	4b37      	ldr	r3, [pc, #220]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f023 0203 	bic.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4934      	ldr	r1, [pc, #208]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040d8:	f7fd ffc4 	bl	8002064 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	e00a      	b.n	80040f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e0:	f7fd ffc0 	bl	8002064 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e04f      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	4b2b      	ldr	r3, [pc, #172]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 020c 	and.w	r2, r3, #12
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	429a      	cmp	r2, r3
 8004106:	d1eb      	bne.n	80040e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004108:	4b25      	ldr	r3, [pc, #148]	@ (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d20c      	bcs.n	8004130 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b22      	ldr	r3, [pc, #136]	@ (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	4b20      	ldr	r3, [pc, #128]	@ (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e032      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800413c:	4b19      	ldr	r3, [pc, #100]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4916      	ldr	r1, [pc, #88]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800415a:	4b12      	ldr	r3, [pc, #72]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	490e      	ldr	r1, [pc, #56]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800416e:	f000 f821 	bl	80041b4 <HAL_RCC_GetSysClockFreq>
 8004172:	4602      	mov	r2, r0
 8004174:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	091b      	lsrs	r3, r3, #4
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	490a      	ldr	r1, [pc, #40]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004180:	5ccb      	ldrb	r3, [r1, r3]
 8004182:	fa22 f303 	lsr.w	r3, r2, r3
 8004186:	4a09      	ldr	r2, [pc, #36]	@ (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 8004188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800418a:	4b09      	ldr	r3, [pc, #36]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fd ff24 	bl	8001fdc <HAL_InitTick>

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023c00 	.word	0x40023c00
 80041a4:	40023800 	.word	0x40023800
 80041a8:	08009448 	.word	0x08009448
 80041ac:	20000000 	.word	0x20000000
 80041b0:	20000004 	.word	0x20000004

080041b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b8:	b094      	sub	sp, #80	@ 0x50
 80041ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041cc:	4b79      	ldr	r3, [pc, #484]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d00d      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x40>
 80041d8:	2b08      	cmp	r3, #8
 80041da:	f200 80e1 	bhi.w	80043a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x34>
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_GetSysClockFreq+0x3a>
 80041e6:	e0db      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e8:	4b73      	ldr	r3, [pc, #460]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80041ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041ec:	e0db      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ee:	4b73      	ldr	r3, [pc, #460]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x208>)
 80041f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041f2:	e0d8      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f4:	4b6f      	ldr	r3, [pc, #444]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041fe:	4b6d      	ldr	r3, [pc, #436]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d063      	beq.n	80042d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420a:	4b6a      	ldr	r3, [pc, #424]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	099b      	lsrs	r3, r3, #6
 8004210:	2200      	movs	r2, #0
 8004212:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004214:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421c:	633b      	str	r3, [r7, #48]	@ 0x30
 800421e:	2300      	movs	r3, #0
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
 8004222:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004226:	4622      	mov	r2, r4
 8004228:	462b      	mov	r3, r5
 800422a:	f04f 0000 	mov.w	r0, #0
 800422e:	f04f 0100 	mov.w	r1, #0
 8004232:	0159      	lsls	r1, r3, #5
 8004234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004238:	0150      	lsls	r0, r2, #5
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4621      	mov	r1, r4
 8004240:	1a51      	subs	r1, r2, r1
 8004242:	6139      	str	r1, [r7, #16]
 8004244:	4629      	mov	r1, r5
 8004246:	eb63 0301 	sbc.w	r3, r3, r1
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004258:	4659      	mov	r1, fp
 800425a:	018b      	lsls	r3, r1, #6
 800425c:	4651      	mov	r1, sl
 800425e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004262:	4651      	mov	r1, sl
 8004264:	018a      	lsls	r2, r1, #6
 8004266:	4651      	mov	r1, sl
 8004268:	ebb2 0801 	subs.w	r8, r2, r1
 800426c:	4659      	mov	r1, fp
 800426e:	eb63 0901 	sbc.w	r9, r3, r1
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800427e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004286:	4690      	mov	r8, r2
 8004288:	4699      	mov	r9, r3
 800428a:	4623      	mov	r3, r4
 800428c:	eb18 0303 	adds.w	r3, r8, r3
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	462b      	mov	r3, r5
 8004294:	eb49 0303 	adc.w	r3, r9, r3
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042a6:	4629      	mov	r1, r5
 80042a8:	024b      	lsls	r3, r1, #9
 80042aa:	4621      	mov	r1, r4
 80042ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042b0:	4621      	mov	r1, r4
 80042b2:	024a      	lsls	r2, r1, #9
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ba:	2200      	movs	r2, #0
 80042bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042c4:	f7fb ffd0 	bl	8000268 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4613      	mov	r3, r2
 80042ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d0:	e058      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d2:	4b38      	ldr	r3, [pc, #224]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	099b      	lsrs	r3, r3, #6
 80042d8:	2200      	movs	r2, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	4611      	mov	r1, r2
 80042de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042e2:	623b      	str	r3, [r7, #32]
 80042e4:	2300      	movs	r3, #0
 80042e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042ec:	4642      	mov	r2, r8
 80042ee:	464b      	mov	r3, r9
 80042f0:	f04f 0000 	mov.w	r0, #0
 80042f4:	f04f 0100 	mov.w	r1, #0
 80042f8:	0159      	lsls	r1, r3, #5
 80042fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042fe:	0150      	lsls	r0, r2, #5
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4641      	mov	r1, r8
 8004306:	ebb2 0a01 	subs.w	sl, r2, r1
 800430a:	4649      	mov	r1, r9
 800430c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800431c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004320:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004324:	ebb2 040a 	subs.w	r4, r2, sl
 8004328:	eb63 050b 	sbc.w	r5, r3, fp
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	00eb      	lsls	r3, r5, #3
 8004336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800433a:	00e2      	lsls	r2, r4, #3
 800433c:	4614      	mov	r4, r2
 800433e:	461d      	mov	r5, r3
 8004340:	4643      	mov	r3, r8
 8004342:	18e3      	adds	r3, r4, r3
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	464b      	mov	r3, r9
 8004348:	eb45 0303 	adc.w	r3, r5, r3
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800435a:	4629      	mov	r1, r5
 800435c:	028b      	lsls	r3, r1, #10
 800435e:	4621      	mov	r1, r4
 8004360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004364:	4621      	mov	r1, r4
 8004366:	028a      	lsls	r2, r1, #10
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800436e:	2200      	movs	r2, #0
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	61fa      	str	r2, [r7, #28]
 8004374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004378:	f7fb ff76 	bl	8000268 <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4613      	mov	r3, r2
 8004382:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004384:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	3301      	adds	r3, #1
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004394:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800439e:	e002      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3750      	adds	r7, #80	@ 0x50
 80043ac:	46bd      	mov	sp, r7
 80043ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b2:	bf00      	nop
 80043b4:	40023800 	.word	0x40023800
 80043b8:	00f42400 	.word	0x00f42400
 80043bc:	007a1200 	.word	0x007a1200

080043c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c4:	4b03      	ldr	r3, [pc, #12]	@ (80043d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c6:	681b      	ldr	r3, [r3, #0]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000000 	.word	0x20000000

080043d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e07b      	b.n	80044e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d108      	bne.n	8004404 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043fa:	d009      	beq.n	8004410 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	61da      	str	r2, [r3, #28]
 8004402:	e005      	b.n	8004410 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fd fc78 	bl	8001d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004446:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004494:	ea42 0103 	orr.w	r1, r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	f003 0104 	and.w	r1, r3, #4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	f003 0210 	and.w	r2, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b088      	sub	sp, #32
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044fa:	f7fd fdb3 	bl	8002064 <HAL_GetTick>
 80044fe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d001      	beq.n	8004514 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
 8004512:	e12a      	b.n	800476a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_SPI_Transmit+0x36>
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e122      	b.n	800476a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_SPI_Transmit+0x48>
 800452e:	2302      	movs	r3, #2
 8004530:	e11b      	b.n	800476a <HAL_SPI_Transmit+0x280>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2203      	movs	r2, #3
 800453e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	88fa      	ldrh	r2, [r7, #6]
 8004558:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004580:	d10f      	bne.n	80045a2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004590:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ac:	2b40      	cmp	r3, #64	@ 0x40
 80045ae:	d007      	beq.n	80045c0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c8:	d152      	bne.n	8004670 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_SPI_Transmit+0xee>
 80045d2:	8b7b      	ldrh	r3, [r7, #26]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d145      	bne.n	8004664 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045dc:	881a      	ldrh	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	1c9a      	adds	r2, r3, #2
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045fc:	e032      	b.n	8004664 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b02      	cmp	r3, #2
 800460a:	d112      	bne.n	8004632 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004610:	881a      	ldrh	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461c:	1c9a      	adds	r2, r3, #2
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004630:	e018      	b.n	8004664 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004632:	f7fd fd17 	bl	8002064 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d803      	bhi.n	800464a <HAL_SPI_Transmit+0x160>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004648:	d102      	bne.n	8004650 <HAL_SPI_Transmit+0x166>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d109      	bne.n	8004664 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e082      	b.n	800476a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1c7      	bne.n	80045fe <HAL_SPI_Transmit+0x114>
 800466e:	e053      	b.n	8004718 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <HAL_SPI_Transmit+0x194>
 8004678:	8b7b      	ldrh	r3, [r7, #26]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d147      	bne.n	800470e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	330c      	adds	r3, #12
 8004688:	7812      	ldrb	r2, [r2, #0]
 800468a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046a4:	e033      	b.n	800470e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d113      	bne.n	80046dc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	330c      	adds	r3, #12
 80046be:	7812      	ldrb	r2, [r2, #0]
 80046c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046da:	e018      	b.n	800470e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046dc:	f7fd fcc2 	bl	8002064 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d803      	bhi.n	80046f4 <HAL_SPI_Transmit+0x20a>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d102      	bne.n	80046fa <HAL_SPI_Transmit+0x210>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e02d      	b.n	800476a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1c6      	bne.n	80046a6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	6839      	ldr	r1, [r7, #0]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fbd9 	bl	8004ed4 <SPI_EndRxTxTransaction>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004768:	2300      	movs	r3, #0
  }
}
 800476a:	4618      	mov	r0, r3
 800476c:	3720      	adds	r7, #32
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b088      	sub	sp, #32
 8004776:	af02      	add	r7, sp, #8
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b01      	cmp	r3, #1
 800478c:	d001      	beq.n	8004792 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800478e:	2302      	movs	r3, #2
 8004790:	e104      	b.n	800499c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800479a:	d112      	bne.n	80047c2 <HAL_SPI_Receive+0x50>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10e      	bne.n	80047c2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2204      	movs	r2, #4
 80047a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047ac:	88fa      	ldrh	r2, [r7, #6]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	4613      	mov	r3, r2
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f8f3 	bl	80049a4 <HAL_SPI_TransmitReceive>
 80047be:	4603      	mov	r3, r0
 80047c0:	e0ec      	b.n	800499c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047c2:	f7fd fc4f 	bl	8002064 <HAL_GetTick>
 80047c6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_SPI_Receive+0x62>
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0e1      	b.n	800499c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_SPI_Receive+0x74>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e0da      	b.n	800499c <HAL_SPI_Receive+0x22a>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2204      	movs	r2, #4
 80047f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	88fa      	ldrh	r2, [r7, #6]
 8004806:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	88fa      	ldrh	r2, [r7, #6]
 800480c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004834:	d10f      	bne.n	8004856 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004844:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004854:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004860:	2b40      	cmp	r3, #64	@ 0x40
 8004862:	d007      	beq.n	8004874 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004872:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d170      	bne.n	800495e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800487c:	e035      	b.n	80048ea <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	d115      	bne.n	80048b8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f103 020c 	add.w	r2, r3, #12
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004898:	7812      	ldrb	r2, [r2, #0]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048b6:	e018      	b.n	80048ea <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b8:	f7fd fbd4 	bl	8002064 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d803      	bhi.n	80048d0 <HAL_SPI_Receive+0x15e>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ce:	d102      	bne.n	80048d6 <HAL_SPI_Receive+0x164>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e058      	b.n	800499c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1c4      	bne.n	800487e <HAL_SPI_Receive+0x10c>
 80048f4:	e038      	b.n	8004968 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	d113      	bne.n	800492c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490e:	b292      	uxth	r2, r2
 8004910:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	1c9a      	adds	r2, r3, #2
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800492a:	e018      	b.n	800495e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800492c:	f7fd fb9a 	bl	8002064 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d803      	bhi.n	8004944 <HAL_SPI_Receive+0x1d2>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004942:	d102      	bne.n	800494a <HAL_SPI_Receive+0x1d8>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e01e      	b.n	800499c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1c6      	bne.n	80048f6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	6839      	ldr	r1, [r7, #0]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fa4b 	bl	8004e08 <SPI_EndRxTransaction>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800499a:	2300      	movs	r3, #0
  }
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	@ 0x28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049b2:	2301      	movs	r3, #1
 80049b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b6:	f7fd fb55 	bl	8002064 <HAL_GetTick>
 80049ba:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049c2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80049ca:	887b      	ldrh	r3, [r7, #2]
 80049cc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049ce:	7ffb      	ldrb	r3, [r7, #31]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d00c      	beq.n	80049ee <HAL_SPI_TransmitReceive+0x4a>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049da:	d106      	bne.n	80049ea <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d102      	bne.n	80049ea <HAL_SPI_TransmitReceive+0x46>
 80049e4:	7ffb      	ldrb	r3, [r7, #31]
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d001      	beq.n	80049ee <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80049ea:	2302      	movs	r3, #2
 80049ec:	e17f      	b.n	8004cee <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_SPI_TransmitReceive+0x5c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_SPI_TransmitReceive+0x5c>
 80049fa:	887b      	ldrh	r3, [r7, #2]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e174      	b.n	8004cee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_SPI_TransmitReceive+0x6e>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e16d      	b.n	8004cee <HAL_SPI_TransmitReceive+0x34a>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d003      	beq.n	8004a2e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2205      	movs	r2, #5
 8004a2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	887a      	ldrh	r2, [r7, #2]
 8004a3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	887a      	ldrh	r2, [r7, #2]
 8004a44:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	887a      	ldrh	r2, [r7, #2]
 8004a50:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	887a      	ldrh	r2, [r7, #2]
 8004a56:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6e:	2b40      	cmp	r3, #64	@ 0x40
 8004a70:	d007      	beq.n	8004a82 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a8a:	d17e      	bne.n	8004b8a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <HAL_SPI_TransmitReceive+0xf6>
 8004a94:	8afb      	ldrh	r3, [r7, #22]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d16c      	bne.n	8004b74 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	881a      	ldrh	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	1c9a      	adds	r2, r3, #2
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004abe:	e059      	b.n	8004b74 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d11b      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x162>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d016      	beq.n	8004b06 <HAL_SPI_TransmitReceive+0x162>
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d113      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	881a      	ldrh	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	1c9a      	adds	r2, r3, #2
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d119      	bne.n	8004b48 <HAL_SPI_TransmitReceive+0x1a4>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d014      	beq.n	8004b48 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b28:	b292      	uxth	r2, r2
 8004b2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b30:	1c9a      	adds	r2, r3, #2
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b44:	2301      	movs	r3, #1
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b48:	f7fd fa8c 	bl	8002064 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d80d      	bhi.n	8004b74 <HAL_SPI_TransmitReceive+0x1d0>
 8004b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d009      	beq.n	8004b74 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e0bc      	b.n	8004cee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1a0      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x11c>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d19b      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x11c>
 8004b88:	e082      	b.n	8004c90 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <HAL_SPI_TransmitReceive+0x1f4>
 8004b92:	8afb      	ldrh	r3, [r7, #22]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d171      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bbe:	e05d      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d11c      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x264>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d017      	beq.n	8004c08 <HAL_SPI_TransmitReceive+0x264>
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d114      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	7812      	ldrb	r2, [r2, #0]
 8004bea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d119      	bne.n	8004c4a <HAL_SPI_TransmitReceive+0x2a6>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d014      	beq.n	8004c4a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c46:	2301      	movs	r3, #1
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c4a:	f7fd fa0b 	bl	8002064 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d803      	bhi.n	8004c62 <HAL_SPI_TransmitReceive+0x2be>
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d102      	bne.n	8004c68 <HAL_SPI_TransmitReceive+0x2c4>
 8004c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d109      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e038      	b.n	8004cee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d19c      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x21c>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d197      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c90:	6a3a      	ldr	r2, [r7, #32]
 8004c92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f91d 	bl	8004ed4 <SPI_EndRxTxTransaction>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e01d      	b.n	8004cee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10a      	bne.n	8004cd0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004cec:	2300      	movs	r3, #0
  }
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3728      	adds	r7, #40	@ 0x28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	4613      	mov	r3, r2
 8004d06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d08:	f7fd f9ac 	bl	8002064 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	4413      	add	r3, r2
 8004d16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d18:	f7fd f9a4 	bl	8002064 <HAL_GetTick>
 8004d1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d1e:	4b39      	ldr	r3, [pc, #228]	@ (8004e04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	015b      	lsls	r3, r3, #5
 8004d24:	0d1b      	lsrs	r3, r3, #20
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	fb02 f303 	mul.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d2e:	e054      	b.n	8004dda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d36:	d050      	beq.n	8004dda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d38:	f7fd f994 	bl	8002064 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d902      	bls.n	8004d4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d13d      	bne.n	8004dca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d66:	d111      	bne.n	8004d8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d70:	d004      	beq.n	8004d7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d7a:	d107      	bne.n	8004d8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d94:	d10f      	bne.n	8004db6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004db4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e017      	b.n	8004dfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4013      	ands	r3, r2
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d19b      	bne.n	8004d30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000000 	.word	0x20000000

08004e08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e1c:	d111      	bne.n	8004e42 <SPI_EndRxTransaction+0x3a>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e26:	d004      	beq.n	8004e32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e30:	d107      	bne.n	8004e42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e40:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e4a:	d12a      	bne.n	8004ea2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e54:	d012      	beq.n	8004e7c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2180      	movs	r1, #128	@ 0x80
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7ff ff49 	bl	8004cf8 <SPI_WaitFlagStateUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d02d      	beq.n	8004ec8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e70:	f043 0220 	orr.w	r2, r3, #32
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e026      	b.n	8004eca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2200      	movs	r2, #0
 8004e84:	2101      	movs	r1, #1
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f7ff ff36 	bl	8004cf8 <SPI_WaitFlagStateUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01a      	beq.n	8004ec8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e96:	f043 0220 	orr.w	r2, r3, #32
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e013      	b.n	8004eca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2101      	movs	r1, #1
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f7ff ff23 	bl	8004cf8 <SPI_WaitFlagStateUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ebc:	f043 0220 	orr.w	r2, r3, #32
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e000      	b.n	8004eca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	2102      	movs	r1, #2
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f7ff ff04 	bl	8004cf8 <SPI_WaitFlagStateUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efa:	f043 0220 	orr.w	r2, r3, #32
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e032      	b.n	8004f6c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f06:	4b1b      	ldr	r3, [pc, #108]	@ (8004f74 <SPI_EndRxTxTransaction+0xa0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f78 <SPI_EndRxTxTransaction+0xa4>)
 8004f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f10:	0d5b      	lsrs	r3, r3, #21
 8004f12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f24:	d112      	bne.n	8004f4c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2180      	movs	r1, #128	@ 0x80
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff fee1 	bl	8004cf8 <SPI_WaitFlagStateUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d016      	beq.n	8004f6a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f40:	f043 0220 	orr.w	r2, r3, #32
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e00f      	b.n	8004f6c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f62:	2b80      	cmp	r3, #128	@ 0x80
 8004f64:	d0f2      	beq.n	8004f4c <SPI_EndRxTxTransaction+0x78>
 8004f66:	e000      	b.n	8004f6a <SPI_EndRxTxTransaction+0x96>
        break;
 8004f68:	bf00      	nop
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20000000 	.word	0x20000000
 8004f78:	165e9f81 	.word	0x165e9f81

08004f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e041      	b.n	8005012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fc ffa6 	bl	8001ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f000 f9b6 	bl	800532c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	d001      	beq.n	8005034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e04e      	b.n	80050d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a23      	ldr	r2, [pc, #140]	@ (80050e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d022      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505e:	d01d      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1f      	ldr	r2, [pc, #124]	@ (80050e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1e      	ldr	r2, [pc, #120]	@ (80050e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1c      	ldr	r2, [pc, #112]	@ (80050ec <HAL_TIM_Base_Start_IT+0xd0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1b      	ldr	r2, [pc, #108]	@ (80050f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a19      	ldr	r2, [pc, #100]	@ (80050f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a18      	ldr	r2, [pc, #96]	@ (80050f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d111      	bne.n	80050c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b06      	cmp	r3, #6
 80050ac:	d010      	beq.n	80050d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050be:	e007      	b.n	80050d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40010400 	.word	0x40010400
 80050f4:	40014000 	.word	0x40014000
 80050f8:	40001800 	.word	0x40001800

080050fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d020      	beq.n	8005160 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01b      	beq.n	8005160 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0202 	mvn.w	r2, #2
 8005130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f8d2 	bl	80052f0 <HAL_TIM_IC_CaptureCallback>
 800514c:	e005      	b.n	800515a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f8c4 	bl	80052dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f8d5 	bl	8005304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b00      	cmp	r3, #0
 8005168:	d020      	beq.n	80051ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01b      	beq.n	80051ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0204 	mvn.w	r2, #4
 800517c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f8ac 	bl	80052f0 <HAL_TIM_IC_CaptureCallback>
 8005198:	e005      	b.n	80051a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f89e 	bl	80052dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f8af 	bl	8005304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d020      	beq.n	80051f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01b      	beq.n	80051f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0208 	mvn.w	r2, #8
 80051c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2204      	movs	r2, #4
 80051ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f886 	bl	80052f0 <HAL_TIM_IC_CaptureCallback>
 80051e4:	e005      	b.n	80051f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f878 	bl	80052dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f889 	bl	8005304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d020      	beq.n	8005244 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01b      	beq.n	8005244 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0210 	mvn.w	r2, #16
 8005214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2208      	movs	r2, #8
 800521a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f860 	bl	80052f0 <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f852 	bl	80052dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f863 	bl	8005304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00c      	beq.n	8005268 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d007      	beq.n	8005268 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0201 	mvn.w	r2, #1
 8005260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fc fd08 	bl	8001c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00c      	beq.n	800528c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f906 	bl	8005498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00c      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d007      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f834 	bl	8005318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00c      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0220 	mvn.w	r2, #32
 80052cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f8d8 	bl	8005484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052d4:	bf00      	nop
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a46      	ldr	r2, [pc, #280]	@ (8005458 <TIM_Base_SetConfig+0x12c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d013      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800534a:	d00f      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a43      	ldr	r2, [pc, #268]	@ (800545c <TIM_Base_SetConfig+0x130>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00b      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a42      	ldr	r2, [pc, #264]	@ (8005460 <TIM_Base_SetConfig+0x134>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d007      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a41      	ldr	r2, [pc, #260]	@ (8005464 <TIM_Base_SetConfig+0x138>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a40      	ldr	r2, [pc, #256]	@ (8005468 <TIM_Base_SetConfig+0x13c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d108      	bne.n	800537e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a35      	ldr	r2, [pc, #212]	@ (8005458 <TIM_Base_SetConfig+0x12c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d02b      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538c:	d027      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a32      	ldr	r2, [pc, #200]	@ (800545c <TIM_Base_SetConfig+0x130>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d023      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a31      	ldr	r2, [pc, #196]	@ (8005460 <TIM_Base_SetConfig+0x134>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d01f      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a30      	ldr	r2, [pc, #192]	@ (8005464 <TIM_Base_SetConfig+0x138>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d01b      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2f      	ldr	r2, [pc, #188]	@ (8005468 <TIM_Base_SetConfig+0x13c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d017      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2e      	ldr	r2, [pc, #184]	@ (800546c <TIM_Base_SetConfig+0x140>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005470 <TIM_Base_SetConfig+0x144>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00f      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005474 <TIM_Base_SetConfig+0x148>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00b      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005478 <TIM_Base_SetConfig+0x14c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d007      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2a      	ldr	r2, [pc, #168]	@ (800547c <TIM_Base_SetConfig+0x150>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a29      	ldr	r2, [pc, #164]	@ (8005480 <TIM_Base_SetConfig+0x154>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d108      	bne.n	80053f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a10      	ldr	r2, [pc, #64]	@ (8005458 <TIM_Base_SetConfig+0x12c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_Base_SetConfig+0xf8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a12      	ldr	r2, [pc, #72]	@ (8005468 <TIM_Base_SetConfig+0x13c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d103      	bne.n	800542c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b01      	cmp	r3, #1
 800543c:	d105      	bne.n	800544a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f023 0201 	bic.w	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	611a      	str	r2, [r3, #16]
  }
}
 800544a:	bf00      	nop
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40010000 	.word	0x40010000
 800545c:	40000400 	.word	0x40000400
 8005460:	40000800 	.word	0x40000800
 8005464:	40000c00 	.word	0x40000c00
 8005468:	40010400 	.word	0x40010400
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800
 8005478:	40001800 	.word	0x40001800
 800547c:	40001c00 	.word	0x40001c00
 8005480:	40002000 	.word	0x40002000

08005484 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054ac:	b084      	sub	sp, #16
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	f107 001c 	add.w	r0, r7, #28
 80054ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d123      	bne.n	800550e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80054da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d105      	bne.n	8005502 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f001 fae8 	bl	8006ad8 <USB_CoreReset>
 8005508:	4603      	mov	r3, r0
 800550a:	73fb      	strb	r3, [r7, #15]
 800550c:	e01b      	b.n	8005546 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f001 fadc 	bl	8006ad8 <USB_CoreReset>
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005524:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005530:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	639a      	str	r2, [r3, #56]	@ 0x38
 8005538:	e005      	b.n	8005546 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800553e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005546:	7fbb      	ldrb	r3, [r7, #30]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d10b      	bne.n	8005564 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f043 0206 	orr.w	r2, r3, #6
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f043 0220 	orr.w	r2, r3, #32
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005564:	7bfb      	ldrb	r3, [r7, #15]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005570:	b004      	add	sp, #16
 8005572:	4770      	bx	lr

08005574 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	4613      	mov	r3, r2
 8005580:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d165      	bne.n	8005654 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4a41      	ldr	r2, [pc, #260]	@ (8005690 <USB_SetTurnaroundTime+0x11c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d906      	bls.n	800559e <USB_SetTurnaroundTime+0x2a>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4a40      	ldr	r2, [pc, #256]	@ (8005694 <USB_SetTurnaroundTime+0x120>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d202      	bcs.n	800559e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005598:	230f      	movs	r3, #15
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	e062      	b.n	8005664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	4a3c      	ldr	r2, [pc, #240]	@ (8005694 <USB_SetTurnaroundTime+0x120>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d306      	bcc.n	80055b4 <USB_SetTurnaroundTime+0x40>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4a3b      	ldr	r2, [pc, #236]	@ (8005698 <USB_SetTurnaroundTime+0x124>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d202      	bcs.n	80055b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055ae:	230e      	movs	r3, #14
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	e057      	b.n	8005664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4a38      	ldr	r2, [pc, #224]	@ (8005698 <USB_SetTurnaroundTime+0x124>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d306      	bcc.n	80055ca <USB_SetTurnaroundTime+0x56>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4a37      	ldr	r2, [pc, #220]	@ (800569c <USB_SetTurnaroundTime+0x128>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d202      	bcs.n	80055ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055c4:	230d      	movs	r3, #13
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e04c      	b.n	8005664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	4a33      	ldr	r2, [pc, #204]	@ (800569c <USB_SetTurnaroundTime+0x128>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d306      	bcc.n	80055e0 <USB_SetTurnaroundTime+0x6c>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4a32      	ldr	r2, [pc, #200]	@ (80056a0 <USB_SetTurnaroundTime+0x12c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d802      	bhi.n	80055e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055da:	230c      	movs	r3, #12
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	e041      	b.n	8005664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4a2f      	ldr	r2, [pc, #188]	@ (80056a0 <USB_SetTurnaroundTime+0x12c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d906      	bls.n	80055f6 <USB_SetTurnaroundTime+0x82>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4a2e      	ldr	r2, [pc, #184]	@ (80056a4 <USB_SetTurnaroundTime+0x130>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d802      	bhi.n	80055f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055f0:	230b      	movs	r3, #11
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e036      	b.n	8005664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4a2a      	ldr	r2, [pc, #168]	@ (80056a4 <USB_SetTurnaroundTime+0x130>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d906      	bls.n	800560c <USB_SetTurnaroundTime+0x98>
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4a29      	ldr	r2, [pc, #164]	@ (80056a8 <USB_SetTurnaroundTime+0x134>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d802      	bhi.n	800560c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005606:	230a      	movs	r3, #10
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e02b      	b.n	8005664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4a26      	ldr	r2, [pc, #152]	@ (80056a8 <USB_SetTurnaroundTime+0x134>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d906      	bls.n	8005622 <USB_SetTurnaroundTime+0xae>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4a25      	ldr	r2, [pc, #148]	@ (80056ac <USB_SetTurnaroundTime+0x138>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d202      	bcs.n	8005622 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800561c:	2309      	movs	r3, #9
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	e020      	b.n	8005664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4a21      	ldr	r2, [pc, #132]	@ (80056ac <USB_SetTurnaroundTime+0x138>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d306      	bcc.n	8005638 <USB_SetTurnaroundTime+0xc4>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	4a20      	ldr	r2, [pc, #128]	@ (80056b0 <USB_SetTurnaroundTime+0x13c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d802      	bhi.n	8005638 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005632:	2308      	movs	r3, #8
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	e015      	b.n	8005664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <USB_SetTurnaroundTime+0x13c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d906      	bls.n	800564e <USB_SetTurnaroundTime+0xda>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4a1c      	ldr	r2, [pc, #112]	@ (80056b4 <USB_SetTurnaroundTime+0x140>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d202      	bcs.n	800564e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005648:	2307      	movs	r3, #7
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	e00a      	b.n	8005664 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800564e:	2306      	movs	r3, #6
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	e007      	b.n	8005664 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800565a:	2309      	movs	r3, #9
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	e001      	b.n	8005664 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005660:	2309      	movs	r3, #9
 8005662:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	029b      	lsls	r3, r3, #10
 8005678:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800567c:	431a      	orrs	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	00d8acbf 	.word	0x00d8acbf
 8005694:	00e4e1c0 	.word	0x00e4e1c0
 8005698:	00f42400 	.word	0x00f42400
 800569c:	01067380 	.word	0x01067380
 80056a0:	011a499f 	.word	0x011a499f
 80056a4:	01312cff 	.word	0x01312cff
 80056a8:	014ca43f 	.word	0x014ca43f
 80056ac:	016e3600 	.word	0x016e3600
 80056b0:	01a6ab1f 	.word	0x01a6ab1f
 80056b4:	01e84800 	.word	0x01e84800

080056b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f043 0201 	orr.w	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f023 0201 	bic.w	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d115      	bne.n	800574a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800572a:	200a      	movs	r0, #10
 800572c:	f7fc fca6 	bl	800207c <HAL_Delay>
      ms += 10U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	330a      	adds	r3, #10
 8005734:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 f93f 	bl	80069ba <USB_GetMode>
 800573c:	4603      	mov	r3, r0
 800573e:	2b01      	cmp	r3, #1
 8005740:	d01e      	beq.n	8005780 <USB_SetCurrentMode+0x84>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2bc7      	cmp	r3, #199	@ 0xc7
 8005746:	d9f0      	bls.n	800572a <USB_SetCurrentMode+0x2e>
 8005748:	e01a      	b.n	8005780 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800574a:	78fb      	ldrb	r3, [r7, #3]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d115      	bne.n	800577c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800575c:	200a      	movs	r0, #10
 800575e:	f7fc fc8d 	bl	800207c <HAL_Delay>
      ms += 10U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	330a      	adds	r3, #10
 8005766:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f001 f926 	bl	80069ba <USB_GetMode>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <USB_SetCurrentMode+0x84>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2bc7      	cmp	r3, #199	@ 0xc7
 8005778:	d9f0      	bls.n	800575c <USB_SetCurrentMode+0x60>
 800577a:	e001      	b.n	8005780 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e005      	b.n	800578c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2bc8      	cmp	r3, #200	@ 0xc8
 8005784:	d101      	bne.n	800578a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005794:	b084      	sub	sp, #16
 8005796:	b580      	push	{r7, lr}
 8005798:	b086      	sub	sp, #24
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80057a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	e009      	b.n	80057c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	3340      	adds	r3, #64	@ 0x40
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	2200      	movs	r2, #0
 80057c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	3301      	adds	r3, #1
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b0e      	cmp	r3, #14
 80057cc:	d9f2      	bls.n	80057b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d11c      	bne.n	8005810 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057e4:	f043 0302 	orr.w	r3, r3, #2
 80057e8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005806:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	639a      	str	r2, [r3, #56]	@ 0x38
 800580e:	e00b      	b.n	8005828 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005814:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005820:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800582e:	461a      	mov	r2, r3
 8005830:	2300      	movs	r3, #0
 8005832:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005834:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005838:	2b01      	cmp	r3, #1
 800583a:	d10d      	bne.n	8005858 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800583c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005840:	2b00      	cmp	r3, #0
 8005842:	d104      	bne.n	800584e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005844:	2100      	movs	r1, #0
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f968 	bl	8005b1c <USB_SetDevSpeed>
 800584c:	e008      	b.n	8005860 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800584e:	2101      	movs	r1, #1
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f963 	bl	8005b1c <USB_SetDevSpeed>
 8005856:	e003      	b.n	8005860 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005858:	2103      	movs	r1, #3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f95e 	bl	8005b1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005860:	2110      	movs	r1, #16
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f8fa 	bl	8005a5c <USB_FlushTxFifo>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f924 	bl	8005ac0 <USB_FlushRxFifo>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005888:	461a      	mov	r2, r3
 800588a:	2300      	movs	r3, #0
 800588c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005894:	461a      	mov	r2, r3
 8005896:	2300      	movs	r3, #0
 8005898:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a0:	461a      	mov	r2, r3
 80058a2:	2300      	movs	r3, #0
 80058a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058a6:	2300      	movs	r3, #0
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	e043      	b.n	8005934 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058c2:	d118      	bne.n	80058f6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10a      	bne.n	80058e0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d6:	461a      	mov	r2, r3
 80058d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	e013      	b.n	8005908 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ec:	461a      	mov	r2, r3
 80058ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	e008      	b.n	8005908 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005902:	461a      	mov	r2, r3
 8005904:	2300      	movs	r3, #0
 8005906:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005914:	461a      	mov	r2, r3
 8005916:	2300      	movs	r3, #0
 8005918:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005926:	461a      	mov	r2, r3
 8005928:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800592c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	3301      	adds	r3, #1
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005938:	461a      	mov	r2, r3
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	4293      	cmp	r3, r2
 800593e:	d3b5      	bcc.n	80058ac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005940:	2300      	movs	r3, #0
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	e043      	b.n	80059ce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005958:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800595c:	d118      	bne.n	8005990 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005970:	461a      	mov	r2, r3
 8005972:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	e013      	b.n	80059a2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005986:	461a      	mov	r2, r3
 8005988:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e008      	b.n	80059a2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599c:	461a      	mov	r2, r3
 800599e:	2300      	movs	r3, #0
 80059a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ae:	461a      	mov	r2, r3
 80059b0:	2300      	movs	r3, #0
 80059b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c0:	461a      	mov	r2, r3
 80059c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	3301      	adds	r3, #1
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059d2:	461a      	mov	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d3b5      	bcc.n	8005946 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80059fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d105      	bne.n	8005a10 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	f043 0210 	orr.w	r2, r3, #16
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699a      	ldr	r2, [r3, #24]
 8005a14:	4b10      	ldr	r3, [pc, #64]	@ (8005a58 <USB_DevInit+0x2c4>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	f043 0208 	orr.w	r2, r3, #8
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d107      	bne.n	8005a48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a40:	f043 0304 	orr.w	r3, r3, #4
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a54:	b004      	add	sp, #16
 8005a56:	4770      	bx	lr
 8005a58:	803c3800 	.word	0x803c3800

08005a5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a76:	d901      	bls.n	8005a7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e01b      	b.n	8005ab4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	daf2      	bge.n	8005a6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	019b      	lsls	r3, r3, #6
 8005a8c:	f043 0220 	orr.w	r2, r3, #32
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3301      	adds	r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005aa0:	d901      	bls.n	8005aa6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e006      	b.n	8005ab4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d0f0      	beq.n	8005a94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ad8:	d901      	bls.n	8005ade <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e018      	b.n	8005b10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	daf2      	bge.n	8005acc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2210      	movs	r2, #16
 8005aee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3301      	adds	r3, #1
 8005af4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005afc:	d901      	bls.n	8005b02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e006      	b.n	8005b10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0310 	and.w	r3, r3, #16
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d0f0      	beq.n	8005af0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b087      	sub	sp, #28
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 0306 	and.w	r3, r3, #6
 8005b66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d102      	bne.n	8005b74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	75fb      	strb	r3, [r7, #23]
 8005b72:	e00a      	b.n	8005b8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d002      	beq.n	8005b80 <USB_GetDevSpeed+0x32>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b06      	cmp	r3, #6
 8005b7e:	d102      	bne.n	8005b86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b80:	2302      	movs	r3, #2
 8005b82:	75fb      	strb	r3, [r7, #23]
 8005b84:	e001      	b.n	8005b8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b86:	230f      	movs	r3, #15
 8005b88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d13a      	bne.n	8005c2a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bba:	69da      	ldr	r2, [r3, #28]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	68f9      	ldr	r1, [r7, #12]
 8005bce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d155      	bne.n	8005c98 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	791b      	ldrb	r3, [r3, #4]
 8005c06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	059b      	lsls	r3, r3, #22
 8005c0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c10:	4313      	orrs	r3, r2
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	e036      	b.n	8005c98 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c30:	69da      	ldr	r2, [r3, #28]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	68f9      	ldr	r1, [r7, #12]
 8005c44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d11a      	bne.n	8005c98 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	791b      	ldrb	r3, [r3, #4]
 8005c7c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	4313      	orrs	r3, r2
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c96:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d161      	bne.n	8005d88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cda:	d11f      	bne.n	8005d1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cf6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005cfa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	43db      	mvns	r3, r3
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d46:	69da      	ldr	r2, [r3, #28]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	2101      	movs	r1, #1
 8005d52:	fa01 f303 	lsl.w	r3, r1, r3
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d60:	4013      	ands	r3, r2
 8005d62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	0159      	lsls	r1, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	440b      	add	r3, r1
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4b35      	ldr	r3, [pc, #212]	@ (8005e58 <USB_DeactivateEndpoint+0x1b0>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]
 8005d86:	e060      	b.n	8005e4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d9e:	d11f      	bne.n	8005de0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	0151      	lsls	r1, r2, #5
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	440a      	add	r2, r1
 8005db6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005dbe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005de6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	2101      	movs	r1, #1
 8005df2:	fa01 f303 	lsl.w	r3, r1, r3
 8005df6:	041b      	lsls	r3, r3, #16
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e00:	4013      	ands	r3, r2
 8005e02:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	2101      	movs	r1, #1
 8005e16:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1a:	041b      	lsls	r3, r3, #16
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	68f9      	ldr	r1, [r7, #12]
 8005e20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e24:	4013      	ands	r3, r2
 8005e26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	0159      	lsls	r1, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	440b      	add	r3, r1
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e42:	4619      	mov	r1, r3
 8005e44:	4b05      	ldr	r3, [pc, #20]	@ (8005e5c <USB_DeactivateEndpoint+0x1b4>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	ec337800 	.word	0xec337800
 8005e5c:	eff37800 	.word	0xeff37800

08005e60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08a      	sub	sp, #40	@ 0x28
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	f040 817f 	bne.w	8006180 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d132      	bne.n	8005ef0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ea4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ea8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005eac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ec8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ecc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ee8:	0cdb      	lsrs	r3, r3, #19
 8005eea:	04db      	lsls	r3, r3, #19
 8005eec:	6113      	str	r3, [r2, #16]
 8005eee:	e097      	b.n	8006020 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f0a:	0cdb      	lsrs	r3, r3, #19
 8005f0c:	04db      	lsls	r3, r3, #19
 8005f0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f2a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f2e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f32:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d11a      	bne.n	8005f70 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	691a      	ldr	r2, [r3, #16]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d903      	bls.n	8005f4e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f6c:	6113      	str	r3, [r2, #16]
 8005f6e:	e044      	b.n	8005ffa <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	691a      	ldr	r2, [r3, #16]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	4413      	add	r3, r2
 8005f7a:	1e5a      	subs	r2, r3, #1
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	8afb      	ldrh	r3, [r7, #22]
 8005f96:	04d9      	lsls	r1, r3, #19
 8005f98:	4ba4      	ldr	r3, [pc, #656]	@ (800622c <USB_EPStartXfer+0x3cc>)
 8005f9a:	400b      	ands	r3, r1
 8005f9c:	69b9      	ldr	r1, [r7, #24]
 8005f9e:	0148      	lsls	r0, r1, #5
 8005fa0:	69f9      	ldr	r1, [r7, #28]
 8005fa2:	4401      	add	r1, r0
 8005fa4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	791b      	ldrb	r3, [r3, #4]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d122      	bne.n	8005ffa <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005fd2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fe0:	691a      	ldr	r2, [r3, #16]
 8005fe2:	8afb      	ldrh	r3, [r7, #22]
 8005fe4:	075b      	lsls	r3, r3, #29
 8005fe6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005fea:	69b9      	ldr	r1, [r7, #24]
 8005fec:	0148      	lsls	r0, r1, #5
 8005fee:	69f9      	ldr	r1, [r7, #28]
 8005ff0:	4401      	add	r1, r0
 8005ff2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006010:	69b9      	ldr	r1, [r7, #24]
 8006012:	0148      	lsls	r0, r1, #5
 8006014:	69f9      	ldr	r1, [r7, #28]
 8006016:	4401      	add	r1, r0
 8006018:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800601c:	4313      	orrs	r3, r2
 800601e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d14b      	bne.n	80060be <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603a:	461a      	mov	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	791b      	ldrb	r3, [r3, #4]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d128      	bne.n	800609c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d110      	bne.n	800607c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006074:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	e00f      	b.n	800609c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800609a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	e166      	b.n	800638c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060dc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	791b      	ldrb	r3, [r3, #4]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d015      	beq.n	8006112 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 814e 	beq.w	800638c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f003 030f 	and.w	r3, r3, #15
 8006100:	2101      	movs	r1, #1
 8006102:	fa01 f303 	lsl.w	r3, r1, r3
 8006106:	69f9      	ldr	r1, [r7, #28]
 8006108:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800610c:	4313      	orrs	r3, r2
 800610e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006110:	e13c      	b.n	800638c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800611e:	2b00      	cmp	r3, #0
 8006120:	d110      	bne.n	8006144 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	440a      	add	r2, r1
 8006138:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800613c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	e00f      	b.n	8006164 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800615e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006162:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	68d9      	ldr	r1, [r3, #12]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	781a      	ldrb	r2, [r3, #0]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	b298      	uxth	r0, r3
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	4603      	mov	r3, r0
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f9b9 	bl	80064f0 <USB_WritePacket>
 800617e:	e105      	b.n	800638c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800619a:	0cdb      	lsrs	r3, r3, #19
 800619c:	04db      	lsls	r3, r3, #19
 800619e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	69fa      	ldr	r2, [r7, #28]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061ba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80061be:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80061c2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d132      	bne.n	8006230 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f8:	69b9      	ldr	r1, [r7, #24]
 80061fa:	0148      	lsls	r0, r1, #5
 80061fc:	69f9      	ldr	r1, [r7, #28]
 80061fe:	4401      	add	r1, r0
 8006200:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006204:	4313      	orrs	r3, r2
 8006206:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	440a      	add	r2, r1
 800621e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006222:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006226:	6113      	str	r3, [r2, #16]
 8006228:	e062      	b.n	80062f0 <USB_EPStartXfer+0x490>
 800622a:	bf00      	nop
 800622c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d123      	bne.n	8006280 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800624e:	69b9      	ldr	r1, [r7, #24]
 8006250:	0148      	lsls	r0, r1, #5
 8006252:	69f9      	ldr	r1, [r7, #28]
 8006254:	4401      	add	r1, r0
 8006256:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800625a:	4313      	orrs	r3, r2
 800625c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	440a      	add	r2, r1
 8006274:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006278:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800627c:	6113      	str	r3, [r2, #16]
 800627e:	e037      	b.n	80062f0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4413      	add	r3, r2
 800628a:	1e5a      	subs	r2, r3, #1
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	fbb2 f3f3 	udiv	r3, r2, r3
 8006294:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	8afa      	ldrh	r2, [r7, #22]
 800629c:	fb03 f202 	mul.w	r2, r3, r2
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b0:	691a      	ldr	r2, [r3, #16]
 80062b2:	8afb      	ldrh	r3, [r7, #22]
 80062b4:	04d9      	lsls	r1, r3, #19
 80062b6:	4b38      	ldr	r3, [pc, #224]	@ (8006398 <USB_EPStartXfer+0x538>)
 80062b8:	400b      	ands	r3, r1
 80062ba:	69b9      	ldr	r1, [r7, #24]
 80062bc:	0148      	lsls	r0, r1, #5
 80062be:	69f9      	ldr	r1, [r7, #28]
 80062c0:	4401      	add	r1, r0
 80062c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80062c6:	4313      	orrs	r3, r2
 80062c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e0:	69b9      	ldr	r1, [r7, #24]
 80062e2:	0148      	lsls	r0, r1, #5
 80062e4:	69f9      	ldr	r1, [r7, #28]
 80062e6:	4401      	add	r1, r0
 80062e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80062ec:	4313      	orrs	r3, r2
 80062ee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d10d      	bne.n	8006312 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d009      	beq.n	8006312 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	68d9      	ldr	r1, [r3, #12]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800630e:	460a      	mov	r2, r1
 8006310:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	791b      	ldrb	r3, [r3, #4]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d128      	bne.n	800636c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006326:	2b00      	cmp	r3, #0
 8006328:	d110      	bne.n	800634c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	0151      	lsls	r1, r2, #5
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	440a      	add	r2, r1
 8006340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006344:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	e00f      	b.n	800636c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	0151      	lsls	r1, r2, #5
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	440a      	add	r2, r1
 8006362:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800636a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006386:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800638a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3720      	adds	r7, #32
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	1ff80000 	.word	0x1ff80000

0800639c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	785b      	ldrb	r3, [r3, #1]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d14a      	bne.n	8006450 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063d2:	f040 8086 	bne.w	80064e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	7812      	ldrb	r2, [r2, #0]
 80063ea:	0151      	lsls	r1, r2, #5
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	440a      	add	r2, r1
 80063f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	440a      	add	r2, r1
 8006414:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006418:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800641c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3301      	adds	r3, #1
 8006422:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f242 7210 	movw	r2, #10000	@ 0x2710
 800642a:	4293      	cmp	r3, r2
 800642c:	d902      	bls.n	8006434 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	75fb      	strb	r3, [r7, #23]
          break;
 8006432:	e056      	b.n	80064e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006448:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800644c:	d0e7      	beq.n	800641e <USB_EPStopXfer+0x82>
 800644e:	e048      	b.n	80064e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006464:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006468:	d13b      	bne.n	80064e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	7812      	ldrb	r2, [r2, #0]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006488:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800648c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	7812      	ldrb	r2, [r2, #0]
 80064a2:	0151      	lsls	r1, r2, #5
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	440a      	add	r2, r1
 80064a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3301      	adds	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80064be:	4293      	cmp	r3, r2
 80064c0:	d902      	bls.n	80064c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	75fb      	strb	r3, [r7, #23]
          break;
 80064c6:	e00c      	b.n	80064e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064e0:	d0e7      	beq.n	80064b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b089      	sub	sp, #36	@ 0x24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	4611      	mov	r1, r2
 80064fc:	461a      	mov	r2, r3
 80064fe:	460b      	mov	r3, r1
 8006500:	71fb      	strb	r3, [r7, #7]
 8006502:	4613      	mov	r3, r2
 8006504:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800650e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006512:	2b00      	cmp	r3, #0
 8006514:	d123      	bne.n	800655e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006516:	88bb      	ldrh	r3, [r7, #4]
 8006518:	3303      	adds	r3, #3
 800651a:	089b      	lsrs	r3, r3, #2
 800651c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800651e:	2300      	movs	r3, #0
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	e018      	b.n	8006556 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	031a      	lsls	r2, r3, #12
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	4413      	add	r3, r2
 800652c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006530:	461a      	mov	r2, r3
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	3301      	adds	r3, #1
 800653c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	3301      	adds	r3, #1
 8006542:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	3301      	adds	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	3301      	adds	r3, #1
 800654e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	3301      	adds	r3, #1
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	429a      	cmp	r2, r3
 800655c:	d3e2      	bcc.n	8006524 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3724      	adds	r7, #36	@ 0x24
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800656c:	b480      	push	{r7}
 800656e:	b08b      	sub	sp, #44	@ 0x2c
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4613      	mov	r3, r2
 8006578:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	089b      	lsrs	r3, r3, #2
 8006586:	b29b      	uxth	r3, r3
 8006588:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006592:	2300      	movs	r3, #0
 8006594:	623b      	str	r3, [r7, #32]
 8006596:	e014      	b.n	80065c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80065a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a6:	3301      	adds	r3, #1
 80065a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	3301      	adds	r3, #1
 80065ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b2:	3301      	adds	r3, #1
 80065b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	3301      	adds	r3, #1
 80065ba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	3301      	adds	r3, #1
 80065c0:	623b      	str	r3, [r7, #32]
 80065c2:	6a3a      	ldr	r2, [r7, #32]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3e6      	bcc.n	8006598 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065ca:	8bfb      	ldrh	r3, [r7, #30]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01e      	beq.n	800660e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065da:	461a      	mov	r2, r3
 80065dc:	f107 0310 	add.w	r3, r7, #16
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	fa22 f303 	lsr.w	r3, r2, r3
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	701a      	strb	r2, [r3, #0]
      i++;
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	3301      	adds	r3, #1
 80065fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80065fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fe:	3301      	adds	r3, #1
 8006600:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006602:	8bfb      	ldrh	r3, [r7, #30]
 8006604:	3b01      	subs	r3, #1
 8006606:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006608:	8bfb      	ldrh	r3, [r7, #30]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1ea      	bne.n	80065e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006610:	4618      	mov	r0, r3
 8006612:	372c      	adds	r7, #44	@ 0x2c
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d12c      	bne.n	8006692 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	db12      	blt.n	8006670 <USB_EPSetStall+0x54>
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00f      	beq.n	8006670 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	440a      	add	r2, r1
 8006666:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800666a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800666e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	440a      	add	r2, r1
 8006686:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800668a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	e02b      	b.n	80066ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	db12      	blt.n	80066ca <USB_EPSetStall+0xae>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00f      	beq.n	80066ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	0151      	lsls	r1, r2, #5
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	440a      	add	r2, r1
 80066e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80066e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d128      	bne.n	8006766 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	440a      	add	r2, r1
 800672a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800672e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006732:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	791b      	ldrb	r3, [r3, #4]
 8006738:	2b03      	cmp	r3, #3
 800673a:	d003      	beq.n	8006744 <USB_EPClearStall+0x4c>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	791b      	ldrb	r3, [r3, #4]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d138      	bne.n	80067b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	0151      	lsls	r1, r2, #5
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	440a      	add	r2, r1
 800675a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800675e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	e027      	b.n	80067b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006780:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006784:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	791b      	ldrb	r3, [r3, #4]
 800678a:	2b03      	cmp	r3, #3
 800678c:	d003      	beq.n	8006796 <USB_EPClearStall+0x9e>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	791b      	ldrb	r3, [r3, #4]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d10f      	bne.n	80067b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	0151      	lsls	r1, r2, #5
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	440a      	add	r2, r1
 80067ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067e2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80067e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067fe:	4313      	orrs	r3, r2
 8006800:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800682a:	f023 0303 	bic.w	r3, r3, #3
 800682e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800683e:	f023 0302 	bic.w	r3, r3, #2
 8006842:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006852:	b480      	push	{r7}
 8006854:	b085      	sub	sp, #20
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800686c:	f023 0303 	bic.w	r3, r3, #3
 8006870:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006880:	f043 0302 	orr.w	r3, r3, #2
 8006884:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4013      	ands	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068ac:	68fb      	ldr	r3, [r7, #12]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	4013      	ands	r3, r2
 80068dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	0c1b      	lsrs	r3, r3, #16
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	4013      	ands	r3, r2
 8006910:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	b29b      	uxth	r3, r3
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006922:	b480      	push	{r7}
 8006924:	b085      	sub	sp, #20
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	460b      	mov	r3, r1
 800692c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006932:	78fb      	ldrb	r3, [r7, #3]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	4013      	ands	r3, r2
 800694e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006950:	68bb      	ldr	r3, [r7, #8]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800695e:	b480      	push	{r7}
 8006960:	b087      	sub	sp, #28
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800697e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006980:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	fa22 f303 	lsr.w	r3, r2, r3
 800698e:	01db      	lsls	r3, r3, #7
 8006990:	b2db      	uxtb	r3, r3
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4013      	ands	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069ac:	68bb      	ldr	r3, [r7, #8]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f003 0301 	and.w	r3, r3, #1
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b085      	sub	sp, #20
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80069f4:	f023 0307 	bic.w	r3, r3, #7
 80069f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	460b      	mov	r3, r1
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	333c      	adds	r3, #60	@ 0x3c
 8006a32:	3304      	adds	r3, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	4a26      	ldr	r2, [pc, #152]	@ (8006ad4 <USB_EP0_OutStart+0xb8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d90a      	bls.n	8006a56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a50:	d101      	bne.n	8006a56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e037      	b.n	8006ac6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a84:	f043 0318 	orr.w	r3, r3, #24
 8006a88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a98:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006a9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a9e:	7afb      	ldrb	r3, [r7, #11]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d10f      	bne.n	8006ac4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aaa:	461a      	mov	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006abe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006ac2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	4f54300a 	.word	0x4f54300a

08006ad8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006af0:	d901      	bls.n	8006af6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e01b      	b.n	8006b2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	daf2      	bge.n	8006ae4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f043 0201 	orr.w	r2, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3301      	adds	r3, #1
 8006b12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b1a:	d901      	bls.n	8006b20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e006      	b.n	8006b2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d0f0      	beq.n	8006b0e <USB_CoreReset+0x36>

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
	...

08006b3c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006b48:	2054      	movs	r0, #84	@ 0x54
 8006b4a:	f002 fb11 	bl	8009170 <USBD_static_malloc>
 8006b4e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d109      	bne.n	8006b6a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	32b0      	adds	r2, #176	@ 0xb0
 8006b60:	2100      	movs	r1, #0
 8006b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b66:	2302      	movs	r3, #2
 8006b68:	e08b      	b.n	8006c82 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	32b0      	adds	r2, #176	@ 0xb0
 8006b74:	68f9      	ldr	r1, [r7, #12]
 8006b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	32b0      	adds	r2, #176	@ 0xb0
 8006b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	7c1b      	ldrb	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d11b      	bne.n	8006bce <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006b96:	4b3d      	ldr	r3, [pc, #244]	@ (8006c8c <USBD_CUSTOM_HID_Init+0x150>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	f003 020f 	and.w	r2, r3, #15
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	440b      	add	r3, r1
 8006baa:	3326      	adds	r3, #38	@ 0x26
 8006bac:	2205      	movs	r2, #5
 8006bae:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006bb0:	4b37      	ldr	r3, [pc, #220]	@ (8006c90 <USBD_CUSTOM_HID_Init+0x154>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	f003 020f 	and.w	r2, r3, #15
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006bc8:	2205      	movs	r2, #5
 8006bca:	801a      	strh	r2, [r3, #0]
 8006bcc:	e01a      	b.n	8006c04 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006bce:	4b2f      	ldr	r3, [pc, #188]	@ (8006c8c <USBD_CUSTOM_HID_Init+0x150>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	f003 020f 	and.w	r2, r3, #15
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	440b      	add	r3, r1
 8006be2:	3326      	adds	r3, #38	@ 0x26
 8006be4:	2205      	movs	r2, #5
 8006be6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006be8:	4b29      	ldr	r3, [pc, #164]	@ (8006c90 <USBD_CUSTOM_HID_Init+0x154>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	f003 020f 	and.w	r2, r3, #15
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	440b      	add	r3, r1
 8006bfc:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006c00:	2205      	movs	r2, #5
 8006c02:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006c04:	4b21      	ldr	r3, [pc, #132]	@ (8006c8c <USBD_CUSTOM_HID_Init+0x150>)
 8006c06:	7819      	ldrb	r1, [r3, #0]
 8006c08:	2302      	movs	r3, #2
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f002 f99e 	bl	8008f4e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006c12:	4b1e      	ldr	r3, [pc, #120]	@ (8006c8c <USBD_CUSTOM_HID_Init+0x150>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	f003 020f 	and.w	r2, r3, #15
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	3324      	adds	r3, #36	@ 0x24
 8006c28:	2201      	movs	r2, #1
 8006c2a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006c2c:	4b18      	ldr	r3, [pc, #96]	@ (8006c90 <USBD_CUSTOM_HID_Init+0x154>)
 8006c2e:	7819      	ldrb	r1, [r3, #0]
 8006c30:	2302      	movs	r3, #2
 8006c32:	2203      	movs	r2, #3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f002 f98a 	bl	8008f4e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006c3a:	4b15      	ldr	r3, [pc, #84]	@ (8006c90 <USBD_CUSTOM_HID_Init+0x154>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	f003 020f 	and.w	r2, r3, #15
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c52:	2201      	movs	r2, #1
 8006c54:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	33b0      	adds	r3, #176	@ 0xb0
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006c72:	4b07      	ldr	r3, [pc, #28]	@ (8006c90 <USBD_CUSTOM_HID_Init+0x154>)
 8006c74:	7819      	ldrb	r1, [r3, #0]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	2340      	movs	r3, #64	@ 0x40
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f002 fa56 	bl	800912c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000086 	.word	0x20000086
 8006c90:	20000087 	.word	0x20000087

08006c94 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006ca0:	4b37      	ldr	r3, [pc, #220]	@ (8006d80 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f002 f977 	bl	8008f9a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006cac:	4b34      	ldr	r3, [pc, #208]	@ (8006d80 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	f003 020f 	and.w	r2, r3, #15
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	3324      	adds	r3, #36	@ 0x24
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8006d80 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	f003 020f 	and.w	r2, r3, #15
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	440b      	add	r3, r1
 8006cda:	3326      	adds	r3, #38	@ 0x26
 8006cdc:	2200      	movs	r2, #0
 8006cde:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006ce0:	4b28      	ldr	r3, [pc, #160]	@ (8006d84 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f002 f957 	bl	8008f9a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006cec:	4b25      	ldr	r3, [pc, #148]	@ (8006d84 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	f003 020f 	and.w	r2, r3, #15
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d04:	2200      	movs	r2, #0
 8006d06:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006d08:	4b1e      	ldr	r3, [pc, #120]	@ (8006d84 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f003 020f 	and.w	r2, r3, #15
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006d20:	2200      	movs	r2, #0
 8006d22:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	32b0      	adds	r2, #176	@ 0xb0
 8006d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01f      	beq.n	8006d76 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	33b0      	adds	r3, #176	@ 0xb0
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	32b0      	adds	r2, #176	@ 0xb0
 8006d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f002 fa17 	bl	800918c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	32b0      	adds	r2, #176	@ 0xb0
 8006d68:	2100      	movs	r1, #0
 8006d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20000086 	.word	0x20000086
 8006d84:	20000087 	.word	0x20000087

08006d88 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	32b0      	adds	r2, #176	@ 0xb0
 8006d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e102      	b.n	8006fc2 <USBD_CUSTOM_HID_Setup+0x23a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d056      	beq.n	8006e76 <USBD_CUSTOM_HID_Setup+0xee>
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	f040 80f2 	bne.w	8006fb2 <USBD_CUSTOM_HID_Setup+0x22a>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	785b      	ldrb	r3, [r3, #1]
 8006dd2:	3b02      	subs	r3, #2
 8006dd4:	2b09      	cmp	r3, #9
 8006dd6:	d846      	bhi.n	8006e66 <USBD_CUSTOM_HID_Setup+0xde>
 8006dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8006de0 <USBD_CUSTOM_HID_Setup+0x58>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006e39 	.word	0x08006e39
 8006de4:	08006e17 	.word	0x08006e17
 8006de8:	08006e67 	.word	0x08006e67
 8006dec:	08006e67 	.word	0x08006e67
 8006df0:	08006e67 	.word	0x08006e67
 8006df4:	08006e67 	.word	0x08006e67
 8006df8:	08006e67 	.word	0x08006e67
 8006dfc:	08006e49 	.word	0x08006e49
 8006e00:	08006e27 	.word	0x08006e27
 8006e04:	08006e09 	.word	0x08006e09
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	885b      	ldrh	r3, [r3, #2]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	461a      	mov	r2, r3
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8006e14:	e02e      	b.n	8006e74 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	3340      	adds	r3, #64	@ 0x40
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 fcaa 	bl	8008778 <USBD_CtlSendData>
          break;
 8006e24:	e026      	b.n	8006e74 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	885b      	ldrh	r3, [r3, #2]
 8006e2a:	0a1b      	lsrs	r3, r3, #8
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	461a      	mov	r2, r3
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8006e36:	e01d      	b.n	8006e74 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	3344      	adds	r3, #68	@ 0x44
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 fc99 	bl	8008778 <USBD_CtlSendData>
          break;
 8006e46:	e015      	b.n	8006e74 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006e4e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	88db      	ldrh	r3, [r3, #6]
 8006e54:	2b40      	cmp	r3, #64	@ 0x40
 8006e56:	bf28      	it	cs
 8006e58:	2340      	movcs	r3, #64	@ 0x40
 8006e5a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fcb6 	bl	80087d0 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006e64:	e006      	b.n	8006e74 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 fc08 	bl	800867e <USBD_CtlError>
          ret = USBD_FAIL;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	75fb      	strb	r3, [r7, #23]
          break;
 8006e72:	bf00      	nop
      }
      break;
 8006e74:	e0a4      	b.n	8006fc0 <USBD_CUSTOM_HID_Setup+0x238>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	785b      	ldrb	r3, [r3, #1]
 8006e7a:	2b0b      	cmp	r3, #11
 8006e7c:	f200 8090 	bhi.w	8006fa0 <USBD_CUSTOM_HID_Setup+0x218>
 8006e80:	a201      	add	r2, pc, #4	@ (adr r2, 8006e88 <USBD_CUSTOM_HID_Setup+0x100>)
 8006e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e86:	bf00      	nop
 8006e88:	08006eb9 	.word	0x08006eb9
 8006e8c:	08006faf 	.word	0x08006faf
 8006e90:	08006fa1 	.word	0x08006fa1
 8006e94:	08006fa1 	.word	0x08006fa1
 8006e98:	08006fa1 	.word	0x08006fa1
 8006e9c:	08006fa1 	.word	0x08006fa1
 8006ea0:	08006ee3 	.word	0x08006ee3
 8006ea4:	08006fa1 	.word	0x08006fa1
 8006ea8:	08006fa1 	.word	0x08006fa1
 8006eac:	08006fa1 	.word	0x08006fa1
 8006eb0:	08006f4f 	.word	0x08006f4f
 8006eb4:	08006f79 	.word	0x08006f79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d107      	bne.n	8006ed4 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ec4:	f107 030e 	add.w	r3, r7, #14
 8006ec8:	2202      	movs	r2, #2
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 fc53 	bl	8008778 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ed2:	e06d      	b.n	8006fb0 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fbd1 	bl	800867e <USBD_CtlError>
            ret = USBD_FAIL;
 8006edc:	2303      	movs	r3, #3
 8006ede:	75fb      	strb	r3, [r7, #23]
          break;
 8006ee0:	e066      	b.n	8006fb0 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	885b      	ldrh	r3, [r3, #2]
 8006ee6:	0a1b      	lsrs	r3, r3, #8
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	2b22      	cmp	r3, #34	@ 0x22
 8006eec:	d110      	bne.n	8006f10 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	88db      	ldrh	r3, [r3, #6]
 8006ef2:	2b21      	cmp	r3, #33	@ 0x21
 8006ef4:	bf28      	it	cs
 8006ef6:	2321      	movcs	r3, #33	@ 0x21
 8006ef8:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	33b0      	adds	r3, #176	@ 0xb0
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	e00d      	b.n	8006f2c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	885b      	ldrh	r3, [r3, #2]
 8006f14:	0a1b      	lsrs	r3, r3, #8
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b21      	cmp	r3, #33	@ 0x21
 8006f1a:	d107      	bne.n	8006f2c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8006fcc <USBD_CUSTOM_HID_Setup+0x244>)
 8006f1e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	88db      	ldrh	r3, [r3, #6]
 8006f24:	2b09      	cmp	r3, #9
 8006f26:	bf28      	it	cs
 8006f28:	2309      	movcs	r3, #9
 8006f2a:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d006      	beq.n	8006f40 <USBD_CUSTOM_HID_Setup+0x1b8>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f32:	8bfb      	ldrh	r3, [r7, #30]
 8006f34:	461a      	mov	r2, r3
 8006f36:	69b9      	ldr	r1, [r7, #24]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fc1d 	bl	8008778 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f3e:	e037      	b.n	8006fb0 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 fb9b 	bl	800867e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f4c:	e030      	b.n	8006fb0 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d107      	bne.n	8006f6a <USBD_CUSTOM_HID_Setup+0x1e2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	3348      	adds	r3, #72	@ 0x48
 8006f5e:	2201      	movs	r2, #1
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 fc08 	bl	8008778 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f68:	e022      	b.n	8006fb0 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 fb86 	bl	800867e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f72:	2303      	movs	r3, #3
 8006f74:	75fb      	strb	r3, [r7, #23]
          break;
 8006f76:	e01b      	b.n	8006fb0 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d106      	bne.n	8006f92 <USBD_CUSTOM_HID_Setup+0x20a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	885b      	ldrh	r3, [r3, #2]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f90:	e00e      	b.n	8006fb0 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 fb72 	bl	800867e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f9e:	e007      	b.n	8006fb0 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fb6b 	bl	800867e <USBD_CtlError>
          ret = USBD_FAIL;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	75fb      	strb	r3, [r7, #23]
          break;
 8006fac:	e000      	b.n	8006fb0 <USBD_CUSTOM_HID_Setup+0x228>
          break;
 8006fae:	bf00      	nop
      }
      break;
 8006fb0:	e006      	b.n	8006fc0 <USBD_CUSTOM_HID_Setup+0x238>

    default:
      USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 fb62 	bl	800867e <USBD_CtlError>
      ret = USBD_FAIL;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8006fbe:	bf00      	nop
  }
  return (uint8_t)ret;
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000070 	.word	0x20000070

08006fd0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006fd8:	2181      	movs	r1, #129	@ 0x81
 8006fda:	4815      	ldr	r0, [pc, #84]	@ (8007030 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006fdc:	f000 fd19 	bl	8007a12 <USBD_GetEpDesc>
 8006fe0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	4812      	ldr	r0, [pc, #72]	@ (8007030 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006fe6:	f000 fd14 	bl	8007a12 <USBD_GetEpDesc>
 8006fea:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f042 0202 	orr.w	r2, r2, #2
 8006ffa:	711a      	strb	r2, [r3, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2205      	movs	r2, #5
 8007004:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d009      	beq.n	8007020 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2200      	movs	r2, #0
 8007010:	f042 0202 	orr.w	r2, r2, #2
 8007014:	711a      	strb	r2, [r3, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2205      	movs	r2, #5
 800701e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2229      	movs	r2, #41	@ 0x29
 8007024:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007026:	4b02      	ldr	r3, [pc, #8]	@ (8007030 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000044 	.word	0x20000044

08007034 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800703c:	2181      	movs	r1, #129	@ 0x81
 800703e:	4815      	ldr	r0, [pc, #84]	@ (8007094 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007040:	f000 fce7 	bl	8007a12 <USBD_GetEpDesc>
 8007044:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007046:	2101      	movs	r1, #1
 8007048:	4812      	ldr	r0, [pc, #72]	@ (8007094 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800704a:	f000 fce2 	bl	8007a12 <USBD_GetEpDesc>
 800704e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d009      	beq.n	800706a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f042 0202 	orr.w	r2, r2, #2
 800705e:	711a      	strb	r2, [r3, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2205      	movs	r2, #5
 8007068:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d009      	beq.n	8007084 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2200      	movs	r2, #0
 8007074:	f042 0202 	orr.w	r2, r2, #2
 8007078:	711a      	strb	r2, [r3, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2205      	movs	r2, #5
 8007082:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2229      	movs	r2, #41	@ 0x29
 8007088:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800708a:	4b02      	ldr	r3, [pc, #8]	@ (8007094 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20000044 	.word	0x20000044

08007098 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80070a0:	2181      	movs	r1, #129	@ 0x81
 80070a2:	4815      	ldr	r0, [pc, #84]	@ (80070f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80070a4:	f000 fcb5 	bl	8007a12 <USBD_GetEpDesc>
 80070a8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80070aa:	2101      	movs	r1, #1
 80070ac:	4812      	ldr	r0, [pc, #72]	@ (80070f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80070ae:	f000 fcb0 	bl	8007a12 <USBD_GetEpDesc>
 80070b2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d009      	beq.n	80070ce <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f042 0202 	orr.w	r2, r2, #2
 80070c2:	711a      	strb	r2, [r3, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2205      	movs	r2, #5
 80070cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d009      	beq.n	80070e8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f042 0202 	orr.w	r2, r2, #2
 80070dc:	711a      	strb	r2, [r3, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2205      	movs	r2, #5
 80070e6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2229      	movs	r2, #41	@ 0x29
 80070ec:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80070ee:	4b02      	ldr	r3, [pc, #8]	@ (80070f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	20000044 	.word	0x20000044

080070fc <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	32b0      	adds	r2, #176	@ 0xb0
 8007112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	32b0      	adds	r2, #176	@ 0xb0
 8007140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007148:	2303      	movs	r3, #3
 800714a:	e014      	b.n	8007176 <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	32b0      	adds	r2, #176	@ 0xb0
 8007156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800715a:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	33b0      	adds	r3, #176	@ 0xb0
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4610      	mov	r0, r2
 8007172:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	32b0      	adds	r2, #176	@ 0xb0
 8007192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800719a:	2303      	movs	r3, #3
 800719c:	e00f      	b.n	80071be <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	32b0      	adds	r2, #176	@ 0xb0
 80071a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80071ae:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80071b0:	7819      	ldrb	r1, [r3, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	2340      	movs	r3, #64	@ 0x40
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 ffb8 	bl	800912c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000087 	.word	0x20000087

080071cc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	32b0      	adds	r2, #176	@ 0xb0
 80071de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e013      	b.n	8007216 <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d10e      	bne.n	8007214 <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	33b0      	adds	r3, #176	@ 0xb0
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	4610      	mov	r0, r2
 800720c:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	220a      	movs	r2, #10
 800722c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800722e:	4b03      	ldr	r3, [pc, #12]	@ (800723c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007230:	4618      	mov	r0, r3
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	2000007c 	.word	0x2000007c

08007240 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007250:	2303      	movs	r3, #3
 8007252:	e009      	b.n	8007268 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	33b0      	adds	r3, #176	@ 0xb0
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4613      	mov	r3, r2
 8007280:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007288:	2303      	movs	r3, #3
 800728a:	e01f      	b.n	80072cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	79fa      	ldrb	r2, [r7, #7]
 80072be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f001 fddd 	bl	8008e80 <USBD_LL_Init>
 80072c6:	4603      	mov	r3, r0
 80072c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e025      	b.n	8007338 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	32ae      	adds	r2, #174	@ 0xae
 80072fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00f      	beq.n	8007328 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	32ae      	adds	r2, #174	@ 0xae
 8007312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007318:	f107 020e 	add.w	r2, r7, #14
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
 8007320:	4602      	mov	r2, r0
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 fde5 	bl	8008f18 <USBD_LL_Start>
 800734e:	4603      	mov	r3, r0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007360:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	460b      	mov	r3, r1
 8007378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007384:	2b00      	cmp	r3, #0
 8007386:	d009      	beq.n	800739c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	78fa      	ldrb	r2, [r7, #3]
 8007392:	4611      	mov	r1, r2
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	4798      	blx	r3
 8007398:	4603      	mov	r3, r0
 800739a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	78fa      	ldrb	r2, [r7, #3]
 80073c0:	4611      	mov	r1, r2
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	4798      	blx	r3
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80073cc:	2303      	movs	r3, #3
 80073ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f001 f90c 	bl	800860a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007400:	461a      	mov	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800740e:	f003 031f 	and.w	r3, r3, #31
 8007412:	2b02      	cmp	r3, #2
 8007414:	d01a      	beq.n	800744c <USBD_LL_SetupStage+0x72>
 8007416:	2b02      	cmp	r3, #2
 8007418:	d822      	bhi.n	8007460 <USBD_LL_SetupStage+0x86>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <USBD_LL_SetupStage+0x4a>
 800741e:	2b01      	cmp	r3, #1
 8007420:	d00a      	beq.n	8007438 <USBD_LL_SetupStage+0x5e>
 8007422:	e01d      	b.n	8007460 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fb63 	bl	8007af8 <USBD_StdDevReq>
 8007432:	4603      	mov	r3, r0
 8007434:	73fb      	strb	r3, [r7, #15]
      break;
 8007436:	e020      	b.n	800747a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fbcb 	bl	8007bdc <USBD_StdItfReq>
 8007446:	4603      	mov	r3, r0
 8007448:	73fb      	strb	r3, [r7, #15]
      break;
 800744a:	e016      	b.n	800747a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fc2d 	bl	8007cb4 <USBD_StdEPReq>
 800745a:	4603      	mov	r3, r0
 800745c:	73fb      	strb	r3, [r7, #15]
      break;
 800745e:	e00c      	b.n	800747a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007466:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800746a:	b2db      	uxtb	r3, r3
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 fdb2 	bl	8008fd8 <USBD_LL_StallEP>
 8007474:	4603      	mov	r3, r0
 8007476:	73fb      	strb	r3, [r7, #15]
      break;
 8007478:	bf00      	nop
  }

  return ret;
 800747a:	7bfb      	ldrb	r3, [r7, #15]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	460b      	mov	r3, r1
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007496:	7afb      	ldrb	r3, [r7, #11]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d16e      	bne.n	800757a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80074a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	f040 8098 	bne.w	80075e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d913      	bls.n	80074e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	1ad2      	subs	r2, r2, r3
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	4293      	cmp	r3, r2
 80074d4:	bf28      	it	cs
 80074d6:	4613      	movcs	r3, r2
 80074d8:	461a      	mov	r2, r3
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f001 f994 	bl	800880a <USBD_CtlContinueRx>
 80074e2:	e07d      	b.n	80075e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074ea:	f003 031f 	and.w	r3, r3, #31
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d014      	beq.n	800751c <USBD_LL_DataOutStage+0x98>
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d81d      	bhi.n	8007532 <USBD_LL_DataOutStage+0xae>
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <USBD_LL_DataOutStage+0x7c>
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d003      	beq.n	8007506 <USBD_LL_DataOutStage+0x82>
 80074fe:	e018      	b.n	8007532 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	75bb      	strb	r3, [r7, #22]
            break;
 8007504:	e018      	b.n	8007538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800750c:	b2db      	uxtb	r3, r3
 800750e:	4619      	mov	r1, r3
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 fa64 	bl	80079de <USBD_CoreFindIF>
 8007516:	4603      	mov	r3, r0
 8007518:	75bb      	strb	r3, [r7, #22]
            break;
 800751a:	e00d      	b.n	8007538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007522:	b2db      	uxtb	r3, r3
 8007524:	4619      	mov	r1, r3
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 fa66 	bl	80079f8 <USBD_CoreFindEP>
 800752c:	4603      	mov	r3, r0
 800752e:	75bb      	strb	r3, [r7, #22]
            break;
 8007530:	e002      	b.n	8007538 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	75bb      	strb	r3, [r7, #22]
            break;
 8007536:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007538:	7dbb      	ldrb	r3, [r7, #22]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d119      	bne.n	8007572 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b03      	cmp	r3, #3
 8007548:	d113      	bne.n	8007572 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800754a:	7dba      	ldrb	r2, [r7, #22]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	32ae      	adds	r2, #174	@ 0xae
 8007550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00b      	beq.n	8007572 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800755a:	7dba      	ldrb	r2, [r7, #22]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007562:	7dba      	ldrb	r2, [r7, #22]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	32ae      	adds	r2, #174	@ 0xae
 8007568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f001 f95a 	bl	800882c <USBD_CtlSendStatus>
 8007578:	e032      	b.n	80075e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800757a:	7afb      	ldrb	r3, [r7, #11]
 800757c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007580:	b2db      	uxtb	r3, r3
 8007582:	4619      	mov	r1, r3
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fa37 	bl	80079f8 <USBD_CoreFindEP>
 800758a:	4603      	mov	r3, r0
 800758c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800758e:	7dbb      	ldrb	r3, [r7, #22]
 8007590:	2bff      	cmp	r3, #255	@ 0xff
 8007592:	d025      	beq.n	80075e0 <USBD_LL_DataOutStage+0x15c>
 8007594:	7dbb      	ldrb	r3, [r7, #22]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d122      	bne.n	80075e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d117      	bne.n	80075d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80075a6:	7dba      	ldrb	r2, [r7, #22]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	32ae      	adds	r2, #174	@ 0xae
 80075ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00f      	beq.n	80075d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80075b6:	7dba      	ldrb	r2, [r7, #22]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80075be:	7dba      	ldrb	r2, [r7, #22]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	32ae      	adds	r2, #174	@ 0xae
 80075c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	7afa      	ldrb	r2, [r7, #11]
 80075cc:	4611      	mov	r1, r2
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	4798      	blx	r3
 80075d2:	4603      	mov	r3, r0
 80075d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
 80075de:	e000      	b.n	80075e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b086      	sub	sp, #24
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	460b      	mov	r3, r1
 80075f4:	607a      	str	r2, [r7, #4]
 80075f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d16f      	bne.n	80076de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3314      	adds	r3, #20
 8007602:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800760a:	2b02      	cmp	r3, #2
 800760c:	d15a      	bne.n	80076c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	429a      	cmp	r2, r3
 8007618:	d914      	bls.n	8007644 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	1ad2      	subs	r2, r2, r3
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	461a      	mov	r2, r3
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f001 f8bc 	bl	80087ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007636:	2300      	movs	r3, #0
 8007638:	2200      	movs	r2, #0
 800763a:	2100      	movs	r1, #0
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f001 fd75 	bl	800912c <USBD_LL_PrepareReceive>
 8007642:	e03f      	b.n	80076c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	429a      	cmp	r2, r3
 800764e:	d11c      	bne.n	800768a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007658:	429a      	cmp	r2, r3
 800765a:	d316      	bcc.n	800768a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007666:	429a      	cmp	r2, r3
 8007668:	d20f      	bcs.n	800768a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800766a:	2200      	movs	r2, #0
 800766c:	2100      	movs	r1, #0
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f001 f89d 	bl	80087ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800767c:	2300      	movs	r3, #0
 800767e:	2200      	movs	r2, #0
 8007680:	2100      	movs	r1, #0
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f001 fd52 	bl	800912c <USBD_LL_PrepareReceive>
 8007688:	e01c      	b.n	80076c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b03      	cmp	r3, #3
 8007694:	d10f      	bne.n	80076b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d009      	beq.n	80076b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076b6:	2180      	movs	r1, #128	@ 0x80
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f001 fc8d 	bl	8008fd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f001 f8c7 	bl	8008852 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d03a      	beq.n	8007744 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7ff fe42 	bl	8007358 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80076dc:	e032      	b.n	8007744 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	4619      	mov	r1, r3
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 f985 	bl	80079f8 <USBD_CoreFindEP>
 80076ee:	4603      	mov	r3, r0
 80076f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
 80076f4:	2bff      	cmp	r3, #255	@ 0xff
 80076f6:	d025      	beq.n	8007744 <USBD_LL_DataInStage+0x15a>
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d122      	bne.n	8007744 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b03      	cmp	r3, #3
 8007708:	d11c      	bne.n	8007744 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800770a:	7dfa      	ldrb	r2, [r7, #23]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	32ae      	adds	r2, #174	@ 0xae
 8007710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d014      	beq.n	8007744 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800771a:	7dfa      	ldrb	r2, [r7, #23]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007722:	7dfa      	ldrb	r2, [r7, #23]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	32ae      	adds	r2, #174	@ 0xae
 8007728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	7afa      	ldrb	r2, [r7, #11]
 8007730:	4611      	mov	r1, r2
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	4798      	blx	r3
 8007736:	4603      	mov	r3, r0
 8007738:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800773a:	7dbb      	ldrb	r3, [r7, #22]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007740:	7dbb      	ldrb	r3, [r7, #22]
 8007742:	e000      	b.n	8007746 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d014      	beq.n	80077b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00e      	beq.n	80077b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6852      	ldr	r2, [r2, #4]
 80077a2:	b2d2      	uxtb	r2, r2
 80077a4:	4611      	mov	r1, r2
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	4798      	blx	r3
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80077b0:	2303      	movs	r3, #3
 80077b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077b4:	2340      	movs	r3, #64	@ 0x40
 80077b6:	2200      	movs	r2, #0
 80077b8:	2100      	movs	r1, #0
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 fbc7 	bl	8008f4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2240      	movs	r2, #64	@ 0x40
 80077cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077d0:	2340      	movs	r3, #64	@ 0x40
 80077d2:	2200      	movs	r2, #0
 80077d4:	2180      	movs	r1, #128	@ 0x80
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 fbb9 	bl	8008f4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2240      	movs	r2, #64	@ 0x40
 80077e6:	621a      	str	r2, [r3, #32]

  return ret;
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	460b      	mov	r3, r1
 80077fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	78fa      	ldrb	r2, [r7, #3]
 8007802:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b04      	cmp	r3, #4
 8007824:	d006      	beq.n	8007834 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800782c:	b2da      	uxtb	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2204      	movs	r2, #4
 8007838:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b04      	cmp	r3, #4
 800785c:	d106      	bne.n	800786c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007864:	b2da      	uxtb	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b03      	cmp	r3, #3
 800788c:	d110      	bne.n	80078b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00b      	beq.n	80078b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	460b      	mov	r3, r1
 80078c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	32ae      	adds	r2, #174	@ 0xae
 80078d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80078d8:	2303      	movs	r3, #3
 80078da:	e01c      	b.n	8007916 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d115      	bne.n	8007914 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	32ae      	adds	r2, #174	@ 0xae
 80078f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00b      	beq.n	8007914 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	32ae      	adds	r2, #174	@ 0xae
 8007906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	78fa      	ldrb	r2, [r7, #3]
 800790e:	4611      	mov	r1, r2
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b082      	sub	sp, #8
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	460b      	mov	r3, r1
 8007928:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	32ae      	adds	r2, #174	@ 0xae
 8007934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	e01c      	b.n	800797a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b03      	cmp	r3, #3
 800794a:	d115      	bne.n	8007978 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	32ae      	adds	r2, #174	@ 0xae
 8007956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	32ae      	adds	r2, #174	@ 0xae
 800796a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	4611      	mov	r1, r2
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00e      	beq.n	80079d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6852      	ldr	r2, [r2, #4]
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	4611      	mov	r1, r2
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80079d0:	2303      	movs	r3, #3
 80079d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	460b      	mov	r3, r1
 80079e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b086      	sub	sp, #24
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	885b      	ldrh	r3, [r3, #2]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	7812      	ldrb	r2, [r2, #0]
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d91f      	bls.n	8007a78 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a3e:	e013      	b.n	8007a68 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a40:	f107 030a 	add.w	r3, r7, #10
 8007a44:	4619      	mov	r1, r3
 8007a46:	6978      	ldr	r0, [r7, #20]
 8007a48:	f000 f81b 	bl	8007a82 <USBD_GetNextDesc>
 8007a4c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	785b      	ldrb	r3, [r3, #1]
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	d108      	bne.n	8007a68 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	789b      	ldrb	r3, [r3, #2]
 8007a5e:	78fa      	ldrb	r2, [r7, #3]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d008      	beq.n	8007a76 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	885b      	ldrh	r3, [r3, #2]
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	897b      	ldrh	r3, [r7, #10]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d8e5      	bhi.n	8007a40 <USBD_GetEpDesc+0x2e>
 8007a74:	e000      	b.n	8007a78 <USBD_GetEpDesc+0x66>
          break;
 8007a76:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a78:	693b      	ldr	r3, [r7, #16]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b085      	sub	sp, #20
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	7812      	ldrb	r2, [r2, #0]
 8007a98:	4413      	add	r3, r2
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007aac:	68fb      	ldr	r3, [r7, #12]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b087      	sub	sp, #28
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ad8:	8a3b      	ldrh	r3, [r7, #16]
 8007ada:	021b      	lsls	r3, r3, #8
 8007adc:	b21a      	sxth	r2, r3
 8007ade:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	b21b      	sxth	r3, r3
 8007ae6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ae8:	89fb      	ldrh	r3, [r7, #14]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	371c      	adds	r7, #28
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
	...

08007af8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b0e:	2b40      	cmp	r3, #64	@ 0x40
 8007b10:	d005      	beq.n	8007b1e <USBD_StdDevReq+0x26>
 8007b12:	2b40      	cmp	r3, #64	@ 0x40
 8007b14:	d857      	bhi.n	8007bc6 <USBD_StdDevReq+0xce>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00f      	beq.n	8007b3a <USBD_StdDevReq+0x42>
 8007b1a:	2b20      	cmp	r3, #32
 8007b1c:	d153      	bne.n	8007bc6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	32ae      	adds	r2, #174	@ 0xae
 8007b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4798      	blx	r3
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]
      break;
 8007b38:	e04a      	b.n	8007bd0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	785b      	ldrb	r3, [r3, #1]
 8007b3e:	2b09      	cmp	r3, #9
 8007b40:	d83b      	bhi.n	8007bba <USBD_StdDevReq+0xc2>
 8007b42:	a201      	add	r2, pc, #4	@ (adr r2, 8007b48 <USBD_StdDevReq+0x50>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007b9d 	.word	0x08007b9d
 8007b4c:	08007bb1 	.word	0x08007bb1
 8007b50:	08007bbb 	.word	0x08007bbb
 8007b54:	08007ba7 	.word	0x08007ba7
 8007b58:	08007bbb 	.word	0x08007bbb
 8007b5c:	08007b7b 	.word	0x08007b7b
 8007b60:	08007b71 	.word	0x08007b71
 8007b64:	08007bbb 	.word	0x08007bbb
 8007b68:	08007b93 	.word	0x08007b93
 8007b6c:	08007b85 	.word	0x08007b85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa3c 	bl	8007ff0 <USBD_GetDescriptor>
          break;
 8007b78:	e024      	b.n	8007bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fba1 	bl	80082c4 <USBD_SetAddress>
          break;
 8007b82:	e01f      	b.n	8007bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fbe0 	bl	800834c <USBD_SetConfig>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	73fb      	strb	r3, [r7, #15]
          break;
 8007b90:	e018      	b.n	8007bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fc83 	bl	80084a0 <USBD_GetConfig>
          break;
 8007b9a:	e013      	b.n	8007bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fcb4 	bl	800850c <USBD_GetStatus>
          break;
 8007ba4:	e00e      	b.n	8007bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fce3 	bl	8008574 <USBD_SetFeature>
          break;
 8007bae:	e009      	b.n	8007bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fd07 	bl	80085c6 <USBD_ClrFeature>
          break;
 8007bb8:	e004      	b.n	8007bc4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fd5e 	bl	800867e <USBD_CtlError>
          break;
 8007bc2:	bf00      	nop
      }
      break;
 8007bc4:	e004      	b.n	8007bd0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fd58 	bl	800867e <USBD_CtlError>
      break;
 8007bce:	bf00      	nop
  }

  return ret;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop

08007bdc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bf2:	2b40      	cmp	r3, #64	@ 0x40
 8007bf4:	d005      	beq.n	8007c02 <USBD_StdItfReq+0x26>
 8007bf6:	2b40      	cmp	r3, #64	@ 0x40
 8007bf8:	d852      	bhi.n	8007ca0 <USBD_StdItfReq+0xc4>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <USBD_StdItfReq+0x26>
 8007bfe:	2b20      	cmp	r3, #32
 8007c00:	d14e      	bne.n	8007ca0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d840      	bhi.n	8007c92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	889b      	ldrh	r3, [r3, #4]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d836      	bhi.n	8007c88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	889b      	ldrh	r3, [r3, #4]
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff fedb 	bl	80079de <USBD_CoreFindIF>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	2bff      	cmp	r3, #255	@ 0xff
 8007c30:	d01d      	beq.n	8007c6e <USBD_StdItfReq+0x92>
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d11a      	bne.n	8007c6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c38:	7bba      	ldrb	r2, [r7, #14]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	32ae      	adds	r2, #174	@ 0xae
 8007c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00f      	beq.n	8007c68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c48:	7bba      	ldrb	r2, [r7, #14]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c50:	7bba      	ldrb	r2, [r7, #14]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	32ae      	adds	r2, #174	@ 0xae
 8007c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c66:	e004      	b.n	8007c72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c6c:	e001      	b.n	8007c72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	88db      	ldrh	r3, [r3, #6]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d110      	bne.n	8007c9c <USBD_StdItfReq+0xc0>
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10d      	bne.n	8007c9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fdd3 	bl	800882c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c86:	e009      	b.n	8007c9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fcf7 	bl	800867e <USBD_CtlError>
          break;
 8007c90:	e004      	b.n	8007c9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fcf2 	bl	800867e <USBD_CtlError>
          break;
 8007c9a:	e000      	b.n	8007c9e <USBD_StdItfReq+0xc2>
          break;
 8007c9c:	bf00      	nop
      }
      break;
 8007c9e:	e004      	b.n	8007caa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fceb 	bl	800867e <USBD_CtlError>
      break;
 8007ca8:	bf00      	nop
  }

  return ret;
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	889b      	ldrh	r3, [r3, #4]
 8007cc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cd0:	2b40      	cmp	r3, #64	@ 0x40
 8007cd2:	d007      	beq.n	8007ce4 <USBD_StdEPReq+0x30>
 8007cd4:	2b40      	cmp	r3, #64	@ 0x40
 8007cd6:	f200 817f 	bhi.w	8007fd8 <USBD_StdEPReq+0x324>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d02a      	beq.n	8007d34 <USBD_StdEPReq+0x80>
 8007cde:	2b20      	cmp	r3, #32
 8007ce0:	f040 817a 	bne.w	8007fd8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff fe85 	bl	80079f8 <USBD_CoreFindEP>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cf2:	7b7b      	ldrb	r3, [r7, #13]
 8007cf4:	2bff      	cmp	r3, #255	@ 0xff
 8007cf6:	f000 8174 	beq.w	8007fe2 <USBD_StdEPReq+0x32e>
 8007cfa:	7b7b      	ldrb	r3, [r7, #13]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f040 8170 	bne.w	8007fe2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d02:	7b7a      	ldrb	r2, [r7, #13]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d0a:	7b7a      	ldrb	r2, [r7, #13]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	32ae      	adds	r2, #174	@ 0xae
 8007d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 8163 	beq.w	8007fe2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d1c:	7b7a      	ldrb	r2, [r7, #13]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	32ae      	adds	r2, #174	@ 0xae
 8007d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d32:	e156      	b.n	8007fe2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d008      	beq.n	8007d4e <USBD_StdEPReq+0x9a>
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	f300 8145 	bgt.w	8007fcc <USBD_StdEPReq+0x318>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f000 809b 	beq.w	8007e7e <USBD_StdEPReq+0x1ca>
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d03c      	beq.n	8007dc6 <USBD_StdEPReq+0x112>
 8007d4c:	e13e      	b.n	8007fcc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d002      	beq.n	8007d60 <USBD_StdEPReq+0xac>
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d016      	beq.n	8007d8c <USBD_StdEPReq+0xd8>
 8007d5e:	e02c      	b.n	8007dba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00d      	beq.n	8007d82 <USBD_StdEPReq+0xce>
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	2b80      	cmp	r3, #128	@ 0x80
 8007d6a:	d00a      	beq.n	8007d82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 f931 	bl	8008fd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d76:	2180      	movs	r1, #128	@ 0x80
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 f92d 	bl	8008fd8 <USBD_LL_StallEP>
 8007d7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d80:	e020      	b.n	8007dc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fc7a 	bl	800867e <USBD_CtlError>
              break;
 8007d8a:	e01b      	b.n	8007dc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	885b      	ldrh	r3, [r3, #2]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10e      	bne.n	8007db2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00b      	beq.n	8007db2 <USBD_StdEPReq+0xfe>
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	2b80      	cmp	r3, #128	@ 0x80
 8007d9e:	d008      	beq.n	8007db2 <USBD_StdEPReq+0xfe>
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	88db      	ldrh	r3, [r3, #6]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d104      	bne.n	8007db2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	4619      	mov	r1, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 f913 	bl	8008fd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fd3a 	bl	800882c <USBD_CtlSendStatus>

              break;
 8007db8:	e004      	b.n	8007dc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fc5e 	bl	800867e <USBD_CtlError>
              break;
 8007dc2:	bf00      	nop
          }
          break;
 8007dc4:	e107      	b.n	8007fd6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d002      	beq.n	8007dd8 <USBD_StdEPReq+0x124>
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d016      	beq.n	8007e04 <USBD_StdEPReq+0x150>
 8007dd6:	e04b      	b.n	8007e70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00d      	beq.n	8007dfa <USBD_StdEPReq+0x146>
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	2b80      	cmp	r3, #128	@ 0x80
 8007de2:	d00a      	beq.n	8007dfa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f001 f8f5 	bl	8008fd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dee:	2180      	movs	r1, #128	@ 0x80
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 f8f1 	bl	8008fd8 <USBD_LL_StallEP>
 8007df6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007df8:	e040      	b.n	8007e7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fc3e 	bl	800867e <USBD_CtlError>
              break;
 8007e02:	e03b      	b.n	8007e7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	885b      	ldrh	r3, [r3, #2]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d136      	bne.n	8007e7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d004      	beq.n	8007e20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 f8fb 	bl	8009016 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fd03 	bl	800882c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7ff fde4 	bl	80079f8 <USBD_CoreFindEP>
 8007e30:	4603      	mov	r3, r0
 8007e32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e34:	7b7b      	ldrb	r3, [r7, #13]
 8007e36:	2bff      	cmp	r3, #255	@ 0xff
 8007e38:	d01f      	beq.n	8007e7a <USBD_StdEPReq+0x1c6>
 8007e3a:	7b7b      	ldrb	r3, [r7, #13]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d11c      	bne.n	8007e7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e40:	7b7a      	ldrb	r2, [r7, #13]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e48:	7b7a      	ldrb	r2, [r7, #13]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	32ae      	adds	r2, #174	@ 0xae
 8007e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d010      	beq.n	8007e7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e58:	7b7a      	ldrb	r2, [r7, #13]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	32ae      	adds	r2, #174	@ 0xae
 8007e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	4798      	blx	r3
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007e6e:	e004      	b.n	8007e7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fc03 	bl	800867e <USBD_CtlError>
              break;
 8007e78:	e000      	b.n	8007e7c <USBD_StdEPReq+0x1c8>
              break;
 8007e7a:	bf00      	nop
          }
          break;
 8007e7c:	e0ab      	b.n	8007fd6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d002      	beq.n	8007e90 <USBD_StdEPReq+0x1dc>
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d032      	beq.n	8007ef4 <USBD_StdEPReq+0x240>
 8007e8e:	e097      	b.n	8007fc0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d007      	beq.n	8007ea6 <USBD_StdEPReq+0x1f2>
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	2b80      	cmp	r3, #128	@ 0x80
 8007e9a:	d004      	beq.n	8007ea6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fbed 	bl	800867e <USBD_CtlError>
                break;
 8007ea4:	e091      	b.n	8007fca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da0b      	bge.n	8007ec6 <USBD_StdEPReq+0x212>
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	3310      	adds	r3, #16
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	e00b      	b.n	8007ede <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ec6:	7bbb      	ldrb	r3, [r7, #14]
 8007ec8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ecc:	4613      	mov	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	4413      	add	r3, r2
 8007edc:	3304      	adds	r3, #4
 8007ede:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fc43 	bl	8008778 <USBD_CtlSendData>
              break;
 8007ef2:	e06a      	b.n	8007fca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	da11      	bge.n	8007f20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
 8007efe:	f003 020f 	and.w	r2, r3, #15
 8007f02:	6879      	ldr	r1, [r7, #4]
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	440b      	add	r3, r1
 8007f0e:	3324      	adds	r3, #36	@ 0x24
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d117      	bne.n	8007f46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fbb0 	bl	800867e <USBD_CtlError>
                  break;
 8007f1e:	e054      	b.n	8007fca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	f003 020f 	and.w	r2, r3, #15
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	440b      	add	r3, r1
 8007f32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d104      	bne.n	8007f46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fb9d 	bl	800867e <USBD_CtlError>
                  break;
 8007f44:	e041      	b.n	8007fca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	da0b      	bge.n	8007f66 <USBD_StdEPReq+0x2b2>
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f54:	4613      	mov	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	3310      	adds	r3, #16
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	4413      	add	r3, r2
 8007f62:	3304      	adds	r3, #4
 8007f64:	e00b      	b.n	8007f7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d002      	beq.n	8007f8c <USBD_StdEPReq+0x2d8>
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	2b80      	cmp	r3, #128	@ 0x80
 8007f8a:	d103      	bne.n	8007f94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	e00e      	b.n	8007fb2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 f85b 	bl	8009054 <USBD_LL_IsStallEP>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	e002      	b.n	8007fb2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fbdd 	bl	8008778 <USBD_CtlSendData>
              break;
 8007fbe:	e004      	b.n	8007fca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fb5b 	bl	800867e <USBD_CtlError>
              break;
 8007fc8:	bf00      	nop
          }
          break;
 8007fca:	e004      	b.n	8007fd6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fb55 	bl	800867e <USBD_CtlError>
          break;
 8007fd4:	bf00      	nop
      }
      break;
 8007fd6:	e005      	b.n	8007fe4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fb4f 	bl	800867e <USBD_CtlError>
      break;
 8007fe0:	e000      	b.n	8007fe4 <USBD_StdEPReq+0x330>
      break;
 8007fe2:	bf00      	nop
  }

  return ret;
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	885b      	ldrh	r3, [r3, #2]
 800800a:	0a1b      	lsrs	r3, r3, #8
 800800c:	b29b      	uxth	r3, r3
 800800e:	3b01      	subs	r3, #1
 8008010:	2b06      	cmp	r3, #6
 8008012:	f200 8128 	bhi.w	8008266 <USBD_GetDescriptor+0x276>
 8008016:	a201      	add	r2, pc, #4	@ (adr r2, 800801c <USBD_GetDescriptor+0x2c>)
 8008018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801c:	08008039 	.word	0x08008039
 8008020:	08008051 	.word	0x08008051
 8008024:	08008091 	.word	0x08008091
 8008028:	08008267 	.word	0x08008267
 800802c:	08008267 	.word	0x08008267
 8008030:	08008207 	.word	0x08008207
 8008034:	08008233 	.word	0x08008233
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	7c12      	ldrb	r2, [r2, #16]
 8008044:	f107 0108 	add.w	r1, r7, #8
 8008048:	4610      	mov	r0, r2
 800804a:	4798      	blx	r3
 800804c:	60f8      	str	r0, [r7, #12]
      break;
 800804e:	e112      	b.n	8008276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7c1b      	ldrb	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10d      	bne.n	8008074 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800805e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008060:	f107 0208 	add.w	r2, r7, #8
 8008064:	4610      	mov	r0, r2
 8008066:	4798      	blx	r3
 8008068:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3301      	adds	r3, #1
 800806e:	2202      	movs	r2, #2
 8008070:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008072:	e100      	b.n	8008276 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800807a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807c:	f107 0208 	add.w	r2, r7, #8
 8008080:	4610      	mov	r0, r2
 8008082:	4798      	blx	r3
 8008084:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	2202      	movs	r2, #2
 800808c:	701a      	strb	r2, [r3, #0]
      break;
 800808e:	e0f2      	b.n	8008276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	885b      	ldrh	r3, [r3, #2]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b05      	cmp	r3, #5
 8008098:	f200 80ac 	bhi.w	80081f4 <USBD_GetDescriptor+0x204>
 800809c:	a201      	add	r2, pc, #4	@ (adr r2, 80080a4 <USBD_GetDescriptor+0xb4>)
 800809e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a2:	bf00      	nop
 80080a4:	080080bd 	.word	0x080080bd
 80080a8:	080080f1 	.word	0x080080f1
 80080ac:	08008125 	.word	0x08008125
 80080b0:	08008159 	.word	0x08008159
 80080b4:	0800818d 	.word	0x0800818d
 80080b8:	080081c1 	.word	0x080081c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00b      	beq.n	80080e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	7c12      	ldrb	r2, [r2, #16]
 80080d4:	f107 0108 	add.w	r1, r7, #8
 80080d8:	4610      	mov	r0, r2
 80080da:	4798      	blx	r3
 80080dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080de:	e091      	b.n	8008204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 facb 	bl	800867e <USBD_CtlError>
            err++;
 80080e8:	7afb      	ldrb	r3, [r7, #11]
 80080ea:	3301      	adds	r3, #1
 80080ec:	72fb      	strb	r3, [r7, #11]
          break;
 80080ee:	e089      	b.n	8008204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00b      	beq.n	8008114 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	7c12      	ldrb	r2, [r2, #16]
 8008108:	f107 0108 	add.w	r1, r7, #8
 800810c:	4610      	mov	r0, r2
 800810e:	4798      	blx	r3
 8008110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008112:	e077      	b.n	8008204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fab1 	bl	800867e <USBD_CtlError>
            err++;
 800811c:	7afb      	ldrb	r3, [r7, #11]
 800811e:	3301      	adds	r3, #1
 8008120:	72fb      	strb	r3, [r7, #11]
          break;
 8008122:	e06f      	b.n	8008204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	7c12      	ldrb	r2, [r2, #16]
 800813c:	f107 0108 	add.w	r1, r7, #8
 8008140:	4610      	mov	r0, r2
 8008142:	4798      	blx	r3
 8008144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008146:	e05d      	b.n	8008204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa97 	bl	800867e <USBD_CtlError>
            err++;
 8008150:	7afb      	ldrb	r3, [r7, #11]
 8008152:	3301      	adds	r3, #1
 8008154:	72fb      	strb	r3, [r7, #11]
          break;
 8008156:	e055      	b.n	8008204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00b      	beq.n	800817c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	7c12      	ldrb	r2, [r2, #16]
 8008170:	f107 0108 	add.w	r1, r7, #8
 8008174:	4610      	mov	r0, r2
 8008176:	4798      	blx	r3
 8008178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800817a:	e043      	b.n	8008204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa7d 	bl	800867e <USBD_CtlError>
            err++;
 8008184:	7afb      	ldrb	r3, [r7, #11]
 8008186:	3301      	adds	r3, #1
 8008188:	72fb      	strb	r3, [r7, #11]
          break;
 800818a:	e03b      	b.n	8008204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00b      	beq.n	80081b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	7c12      	ldrb	r2, [r2, #16]
 80081a4:	f107 0108 	add.w	r1, r7, #8
 80081a8:	4610      	mov	r0, r2
 80081aa:	4798      	blx	r3
 80081ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ae:	e029      	b.n	8008204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fa63 	bl	800867e <USBD_CtlError>
            err++;
 80081b8:	7afb      	ldrb	r3, [r7, #11]
 80081ba:	3301      	adds	r3, #1
 80081bc:	72fb      	strb	r3, [r7, #11]
          break;
 80081be:	e021      	b.n	8008204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	7c12      	ldrb	r2, [r2, #16]
 80081d8:	f107 0108 	add.w	r1, r7, #8
 80081dc:	4610      	mov	r0, r2
 80081de:	4798      	blx	r3
 80081e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081e2:	e00f      	b.n	8008204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa49 	bl	800867e <USBD_CtlError>
            err++;
 80081ec:	7afb      	ldrb	r3, [r7, #11]
 80081ee:	3301      	adds	r3, #1
 80081f0:	72fb      	strb	r3, [r7, #11]
          break;
 80081f2:	e007      	b.n	8008204 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa41 	bl	800867e <USBD_CtlError>
          err++;
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	3301      	adds	r3, #1
 8008200:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008202:	bf00      	nop
      }
      break;
 8008204:	e037      	b.n	8008276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	7c1b      	ldrb	r3, [r3, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008216:	f107 0208 	add.w	r2, r7, #8
 800821a:	4610      	mov	r0, r2
 800821c:	4798      	blx	r3
 800821e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008220:	e029      	b.n	8008276 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fa2a 	bl	800867e <USBD_CtlError>
        err++;
 800822a:	7afb      	ldrb	r3, [r7, #11]
 800822c:	3301      	adds	r3, #1
 800822e:	72fb      	strb	r3, [r7, #11]
      break;
 8008230:	e021      	b.n	8008276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	7c1b      	ldrb	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10d      	bne.n	8008256 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008242:	f107 0208 	add.w	r2, r7, #8
 8008246:	4610      	mov	r0, r2
 8008248:	4798      	blx	r3
 800824a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3301      	adds	r3, #1
 8008250:	2207      	movs	r2, #7
 8008252:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008254:	e00f      	b.n	8008276 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fa10 	bl	800867e <USBD_CtlError>
        err++;
 800825e:	7afb      	ldrb	r3, [r7, #11]
 8008260:	3301      	adds	r3, #1
 8008262:	72fb      	strb	r3, [r7, #11]
      break;
 8008264:	e007      	b.n	8008276 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fa08 	bl	800867e <USBD_CtlError>
      err++;
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	3301      	adds	r3, #1
 8008272:	72fb      	strb	r3, [r7, #11]
      break;
 8008274:	bf00      	nop
  }

  if (err != 0U)
 8008276:	7afb      	ldrb	r3, [r7, #11]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d11e      	bne.n	80082ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	88db      	ldrh	r3, [r3, #6]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d016      	beq.n	80082b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008284:	893b      	ldrh	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00e      	beq.n	80082a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	88da      	ldrh	r2, [r3, #6]
 800828e:	893b      	ldrh	r3, [r7, #8]
 8008290:	4293      	cmp	r3, r2
 8008292:	bf28      	it	cs
 8008294:	4613      	movcs	r3, r2
 8008296:	b29b      	uxth	r3, r3
 8008298:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800829a:	893b      	ldrh	r3, [r7, #8]
 800829c:	461a      	mov	r2, r3
 800829e:	68f9      	ldr	r1, [r7, #12]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fa69 	bl	8008778 <USBD_CtlSendData>
 80082a6:	e009      	b.n	80082bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f9e7 	bl	800867e <USBD_CtlError>
 80082b0:	e004      	b.n	80082bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 faba 	bl	800882c <USBD_CtlSendStatus>
 80082b8:	e000      	b.n	80082bc <USBD_GetDescriptor+0x2cc>
    return;
 80082ba:	bf00      	nop
  }
}
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop

080082c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	889b      	ldrh	r3, [r3, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d131      	bne.n	800833a <USBD_SetAddress+0x76>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	88db      	ldrh	r3, [r3, #6]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d12d      	bne.n	800833a <USBD_SetAddress+0x76>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	885b      	ldrh	r3, [r3, #2]
 80082e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80082e4:	d829      	bhi.n	800833a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	885b      	ldrh	r3, [r3, #2]
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d104      	bne.n	8008308 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f9bc 	bl	800867e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008306:	e01d      	b.n	8008344 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	7bfa      	ldrb	r2, [r7, #15]
 800830c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fec9 	bl	80090ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa86 	bl	800882c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d004      	beq.n	8008330 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2202      	movs	r2, #2
 800832a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800832e:	e009      	b.n	8008344 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008338:	e004      	b.n	8008344 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f99e 	bl	800867e <USBD_CtlError>
  }
}
 8008342:	bf00      	nop
 8008344:	bf00      	nop
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	885b      	ldrh	r3, [r3, #2]
 800835e:	b2da      	uxtb	r2, r3
 8008360:	4b4e      	ldr	r3, [pc, #312]	@ (800849c <USBD_SetConfig+0x150>)
 8008362:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008364:	4b4d      	ldr	r3, [pc, #308]	@ (800849c <USBD_SetConfig+0x150>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d905      	bls.n	8008378 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f985 	bl	800867e <USBD_CtlError>
    return USBD_FAIL;
 8008374:	2303      	movs	r3, #3
 8008376:	e08c      	b.n	8008492 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d002      	beq.n	800838a <USBD_SetConfig+0x3e>
 8008384:	2b03      	cmp	r3, #3
 8008386:	d029      	beq.n	80083dc <USBD_SetConfig+0x90>
 8008388:	e075      	b.n	8008476 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800838a:	4b44      	ldr	r3, [pc, #272]	@ (800849c <USBD_SetConfig+0x150>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d020      	beq.n	80083d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008392:	4b42      	ldr	r3, [pc, #264]	@ (800849c <USBD_SetConfig+0x150>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800839c:	4b3f      	ldr	r3, [pc, #252]	@ (800849c <USBD_SetConfig+0x150>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7fe ffe3 	bl	800736e <USBD_SetClassConfig>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d008      	beq.n	80083c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f962 	bl	800867e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2202      	movs	r2, #2
 80083be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083c2:	e065      	b.n	8008490 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fa31 	bl	800882c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2203      	movs	r2, #3
 80083ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80083d2:	e05d      	b.n	8008490 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fa29 	bl	800882c <USBD_CtlSendStatus>
      break;
 80083da:	e059      	b.n	8008490 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80083dc:	4b2f      	ldr	r3, [pc, #188]	@ (800849c <USBD_SetConfig+0x150>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d112      	bne.n	800840a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80083ec:	4b2b      	ldr	r3, [pc, #172]	@ (800849c <USBD_SetConfig+0x150>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	461a      	mov	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083f6:	4b29      	ldr	r3, [pc, #164]	@ (800849c <USBD_SetConfig+0x150>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7fe ffd2 	bl	80073a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa12 	bl	800882c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008408:	e042      	b.n	8008490 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800840a:	4b24      	ldr	r3, [pc, #144]	@ (800849c <USBD_SetConfig+0x150>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	461a      	mov	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d02a      	beq.n	800846e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	b2db      	uxtb	r3, r3
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7fe ffc0 	bl	80073a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008426:	4b1d      	ldr	r3, [pc, #116]	@ (800849c <USBD_SetConfig+0x150>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008430:	4b1a      	ldr	r3, [pc, #104]	@ (800849c <USBD_SetConfig+0x150>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7fe ff99 	bl	800736e <USBD_SetClassConfig>
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00f      	beq.n	8008466 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f918 	bl	800867e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7fe ffa5 	bl	80073a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008464:	e014      	b.n	8008490 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f9e0 	bl	800882c <USBD_CtlSendStatus>
      break;
 800846c:	e010      	b.n	8008490 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f9dc 	bl	800882c <USBD_CtlSendStatus>
      break;
 8008474:	e00c      	b.n	8008490 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f900 	bl	800867e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800847e:	4b07      	ldr	r3, [pc, #28]	@ (800849c <USBD_SetConfig+0x150>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7fe ff8e 	bl	80073a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800848a:	2303      	movs	r3, #3
 800848c:	73fb      	strb	r3, [r7, #15]
      break;
 800848e:	bf00      	nop
  }

  return ret;
 8008490:	7bfb      	ldrb	r3, [r7, #15]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	20000264 	.word	0x20000264

080084a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	88db      	ldrh	r3, [r3, #6]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d004      	beq.n	80084bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f8e2 	bl	800867e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084ba:	e023      	b.n	8008504 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	dc02      	bgt.n	80084ce <USBD_GetConfig+0x2e>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dc03      	bgt.n	80084d4 <USBD_GetConfig+0x34>
 80084cc:	e015      	b.n	80084fa <USBD_GetConfig+0x5a>
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d00b      	beq.n	80084ea <USBD_GetConfig+0x4a>
 80084d2:	e012      	b.n	80084fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3308      	adds	r3, #8
 80084de:	2201      	movs	r2, #1
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f948 	bl	8008778 <USBD_CtlSendData>
        break;
 80084e8:	e00c      	b.n	8008504 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3304      	adds	r3, #4
 80084ee:	2201      	movs	r2, #1
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f940 	bl	8008778 <USBD_CtlSendData>
        break;
 80084f8:	e004      	b.n	8008504 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f8be 	bl	800867e <USBD_CtlError>
        break;
 8008502:	bf00      	nop
}
 8008504:	bf00      	nop
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800851c:	b2db      	uxtb	r3, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	2b02      	cmp	r3, #2
 8008522:	d81e      	bhi.n	8008562 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	88db      	ldrh	r3, [r3, #6]
 8008528:	2b02      	cmp	r3, #2
 800852a:	d004      	beq.n	8008536 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f8a5 	bl	800867e <USBD_CtlError>
        break;
 8008534:	e01a      	b.n	800856c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008542:	2b00      	cmp	r3, #0
 8008544:	d005      	beq.n	8008552 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	f043 0202 	orr.w	r2, r3, #2
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	330c      	adds	r3, #12
 8008556:	2202      	movs	r2, #2
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f90c 	bl	8008778 <USBD_CtlSendData>
      break;
 8008560:	e004      	b.n	800856c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f88a 	bl	800867e <USBD_CtlError>
      break;
 800856a:	bf00      	nop
  }
}
 800856c:	bf00      	nop
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	885b      	ldrh	r3, [r3, #2]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d107      	bne.n	8008596 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f94c 	bl	800882c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008594:	e013      	b.n	80085be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	885b      	ldrh	r3, [r3, #2]
 800859a:	2b02      	cmp	r3, #2
 800859c:	d10b      	bne.n	80085b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	889b      	ldrh	r3, [r3, #4]
 80085a2:	0a1b      	lsrs	r3, r3, #8
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f93c 	bl	800882c <USBD_CtlSendStatus>
}
 80085b4:	e003      	b.n	80085be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f860 	bl	800867e <USBD_CtlError>
}
 80085be:	bf00      	nop
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	3b01      	subs	r3, #1
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d80b      	bhi.n	80085f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	885b      	ldrh	r3, [r3, #2]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d10c      	bne.n	8008600 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f91c 	bl	800882c <USBD_CtlSendStatus>
      }
      break;
 80085f4:	e004      	b.n	8008600 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f840 	bl	800867e <USBD_CtlError>
      break;
 80085fe:	e000      	b.n	8008602 <USBD_ClrFeature+0x3c>
      break;
 8008600:	bf00      	nop
  }
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3301      	adds	r3, #1
 8008624:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	781a      	ldrb	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3301      	adds	r3, #1
 8008632:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7ff fa40 	bl	8007aba <SWAPBYTE>
 800863a:	4603      	mov	r3, r0
 800863c:	461a      	mov	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3301      	adds	r3, #1
 8008646:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3301      	adds	r3, #1
 800864c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f7ff fa33 	bl	8007aba <SWAPBYTE>
 8008654:	4603      	mov	r3, r0
 8008656:	461a      	mov	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3301      	adds	r3, #1
 8008660:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3301      	adds	r3, #1
 8008666:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f7ff fa26 	bl	8007aba <SWAPBYTE>
 800866e:	4603      	mov	r3, r0
 8008670:	461a      	mov	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	80da      	strh	r2, [r3, #6]
}
 8008676:	bf00      	nop
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b082      	sub	sp, #8
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008688:	2180      	movs	r1, #128	@ 0x80
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fca4 	bl	8008fd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008690:	2100      	movs	r1, #0
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fca0 	bl	8008fd8 <USBD_LL_StallEP>
}
 8008698:	bf00      	nop
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d042      	beq.n	800873c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80086ba:	6938      	ldr	r0, [r7, #16]
 80086bc:	f000 f842 	bl	8008744 <USBD_GetLen>
 80086c0:	4603      	mov	r3, r0
 80086c2:	3301      	adds	r3, #1
 80086c4:	005b      	lsls	r3, r3, #1
 80086c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086ca:	d808      	bhi.n	80086de <USBD_GetString+0x3e>
 80086cc:	6938      	ldr	r0, [r7, #16]
 80086ce:	f000 f839 	bl	8008744 <USBD_GetLen>
 80086d2:	4603      	mov	r3, r0
 80086d4:	3301      	adds	r3, #1
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	b29a      	uxth	r2, r3
 80086dc:	e001      	b.n	80086e2 <USBD_GetString+0x42>
 80086de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	4413      	add	r3, r2
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	7812      	ldrb	r2, [r2, #0]
 80086f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	3301      	adds	r3, #1
 80086f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	4413      	add	r3, r2
 80086fe:	2203      	movs	r2, #3
 8008700:	701a      	strb	r2, [r3, #0]
  idx++;
 8008702:	7dfb      	ldrb	r3, [r7, #23]
 8008704:	3301      	adds	r3, #1
 8008706:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008708:	e013      	b.n	8008732 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	4413      	add	r3, r2
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	7812      	ldrb	r2, [r2, #0]
 8008714:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	3301      	adds	r3, #1
 800871a:	613b      	str	r3, [r7, #16]
    idx++;
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	3301      	adds	r3, #1
 8008720:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	4413      	add	r3, r2
 8008728:	2200      	movs	r2, #0
 800872a:	701a      	strb	r2, [r3, #0]
    idx++;
 800872c:	7dfb      	ldrb	r3, [r7, #23]
 800872e:	3301      	adds	r3, #1
 8008730:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e7      	bne.n	800870a <USBD_GetString+0x6a>
 800873a:	e000      	b.n	800873e <USBD_GetString+0x9e>
    return;
 800873c:	bf00      	nop
  }
}
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008754:	e005      	b.n	8008762 <USBD_GetLen+0x1e>
  {
    len++;
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	3301      	adds	r3, #1
 800875a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	3301      	adds	r3, #1
 8008760:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f5      	bne.n	8008756 <USBD_GetLen+0x12>
  }

  return len;
 800876a:	7bfb      	ldrb	r3, [r7, #15]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2202      	movs	r2, #2
 8008788:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	2100      	movs	r1, #0
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 fca3 	bl	80090ea <USBD_LL_Transmit>

  return USBD_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	60f8      	str	r0, [r7, #12]
 80087b6:	60b9      	str	r1, [r7, #8]
 80087b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	2100      	movs	r1, #0
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 fc92 	bl	80090ea <USBD_LL_Transmit>

  return USBD_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2203      	movs	r2, #3
 80087e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	2100      	movs	r1, #0
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f000 fc96 	bl	800912c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	60f8      	str	r0, [r7, #12]
 8008812:	60b9      	str	r1, [r7, #8]
 8008814:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	2100      	movs	r1, #0
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 fc85 	bl	800912c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2204      	movs	r2, #4
 8008838:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800883c:	2300      	movs	r3, #0
 800883e:	2200      	movs	r2, #0
 8008840:	2100      	movs	r1, #0
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fc51 	bl	80090ea <USBD_LL_Transmit>

  return USBD_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2205      	movs	r2, #5
 800885e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008862:	2300      	movs	r3, #0
 8008864:	2200      	movs	r2, #0
 8008866:	2100      	movs	r1, #0
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fc5f 	bl	800912c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800887c:	2200      	movs	r2, #0
 800887e:	4912      	ldr	r1, [pc, #72]	@ (80088c8 <MX_USB_DEVICE_Init+0x50>)
 8008880:	4812      	ldr	r0, [pc, #72]	@ (80088cc <MX_USB_DEVICE_Init+0x54>)
 8008882:	f7fe fcf7 	bl	8007274 <USBD_Init>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800888c:	f7f9 fa06 	bl	8001c9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008890:	490f      	ldr	r1, [pc, #60]	@ (80088d0 <MX_USB_DEVICE_Init+0x58>)
 8008892:	480e      	ldr	r0, [pc, #56]	@ (80088cc <MX_USB_DEVICE_Init+0x54>)
 8008894:	f7fe fd1e 	bl	80072d4 <USBD_RegisterClass>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800889e:	f7f9 f9fd 	bl	8001c9c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80088a2:	490c      	ldr	r1, [pc, #48]	@ (80088d4 <MX_USB_DEVICE_Init+0x5c>)
 80088a4:	4809      	ldr	r0, [pc, #36]	@ (80088cc <MX_USB_DEVICE_Init+0x54>)
 80088a6:	f7fe fccb 	bl	8007240 <USBD_CUSTOM_HID_RegisterInterface>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088b0:	f7f9 f9f4 	bl	8001c9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088b4:	4805      	ldr	r0, [pc, #20]	@ (80088cc <MX_USB_DEVICE_Init+0x54>)
 80088b6:	f7fe fd43 	bl	8007340 <USBD_Start>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088c0:	f7f9 f9ec 	bl	8001c9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088c4:	bf00      	nop
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	200000bc 	.word	0x200000bc
 80088cc:	20000268 	.word	0x20000268
 80088d0:	2000000c 	.word	0x2000000c
 80088d4:	200000ac 	.word	0x200000ac

080088d8 <TMC4671_controller_rotate>:
static uint32_t TMC4671_controller_rotate(int32_t velocity) {
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
	tmc4671_switchToMotionMode(TMC4671_MOTION_MODE_VELOCITY);
 80088e0:	2002      	movs	r0, #2
 80088e2:	f7f8 fb3f 	bl	8000f64 <tmc4671_switchToMotionMode>
	rampGenerator.targetVelocity = velocity;
 80088e6:	4a05      	ldr	r2, [pc, #20]	@ (80088fc <TMC4671_controller_rotate+0x24>)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	60d3      	str	r3, [r2, #12]
	actualMotionMode = TMC4671_MOTION_MODE_VELOCITY;
 80088ec:	4b04      	ldr	r3, [pc, #16]	@ (8008900 <TMC4671_controller_rotate+0x28>)
 80088ee:	2202      	movs	r2, #2
 80088f0:	701a      	strb	r2, [r3, #0]
	return TMC_ERROR_NONE;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000544 	.word	0x20000544
 8008900:	2000056c 	.word	0x2000056c

08008904 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008904:	b480      	push	{r7}
 8008906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008908:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800890a:	4618      	mov	r0, r3
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008914:	b480      	push	{r7}
 8008916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008918:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800891a:	4618      	mov	r0, r3
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* report_buffer)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800892c:	4820      	ldr	r0, [pc, #128]	@ (80089b0 <CUSTOM_HID_OutEvent_FS+0x8c>)
 800892e:	f7fe fc27 	bl	8007180 <USBD_CUSTOM_HID_ReceivePacket>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <CUSTOM_HID_OutEvent_FS+0x1a>
  {
    return -1;
 8008938:	f04f 33ff 	mov.w	r3, #4294967295
 800893c:	e034      	b.n	80089a8 <CUSTOM_HID_OutEvent_FS+0x84>
//  }

//  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report_buffer, 0x08);

//  memcpy(buffer, report_buffer, 0x08);
  if (report_buffer[0] == 0x01)  // Zakładamy, że 0x01 to komenda dla obrotu w lewo
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d116      	bne.n	8008974 <CUSTOM_HID_OutEvent_FS+0x50>
  {
//	  rotate_steering_wheel_left();
	  if(HAL_GPIO_ReadPin(LED_ERR_GPIO_Port, LED_ERR_Pin) == GPIO_PIN_SET){
 8008946:	2102      	movs	r1, #2
 8008948:	481a      	ldr	r0, [pc, #104]	@ (80089b4 <CUSTOM_HID_OutEvent_FS+0x90>)
 800894a:	f7f9 fe69 	bl	8002620 <HAL_GPIO_ReadPin>
 800894e:	4603      	mov	r3, r0
 8008950:	2b01      	cmp	r3, #1
 8008952:	d105      	bne.n	8008960 <CUSTOM_HID_OutEvent_FS+0x3c>
	    	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8008954:	2200      	movs	r2, #0
 8008956:	2102      	movs	r1, #2
 8008958:	4816      	ldr	r0, [pc, #88]	@ (80089b4 <CUSTOM_HID_OutEvent_FS+0x90>)
 800895a:	f7f9 fe79 	bl	8002650 <HAL_GPIO_WritePin>
 800895e:	e004      	b.n	800896a <CUSTOM_HID_OutEvent_FS+0x46>
	  }
	  else {
	    	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8008960:	2201      	movs	r2, #1
 8008962:	2102      	movs	r1, #2
 8008964:	4813      	ldr	r0, [pc, #76]	@ (80089b4 <CUSTOM_HID_OutEvent_FS+0x90>)
 8008966:	f7f9 fe73 	bl	8002650 <HAL_GPIO_WritePin>
	  }
	  TMC4671_controller_rotate(-50);
 800896a:	f06f 0031 	mvn.w	r0, #49	@ 0x31
 800896e:	f7ff ffb3 	bl	80088d8 <TMC4671_controller_rotate>
 8008972:	e018      	b.n	80089a6 <CUSTOM_HID_OutEvent_FS+0x82>
  }
  else if (report_buffer[0] == 0x02)  // Zakładamy, że 0x02 to komenda dla obrotu w prawo
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b02      	cmp	r3, #2
 800897a:	d114      	bne.n	80089a6 <CUSTOM_HID_OutEvent_FS+0x82>
  {
//	  rotate_steering_wheel_right();
	  if(HAL_GPIO_ReadPin(LED_CLIP_GPIO_Port, LED_CLIP_Pin) == GPIO_PIN_SET){
 800897c:	2101      	movs	r1, #1
 800897e:	480d      	ldr	r0, [pc, #52]	@ (80089b4 <CUSTOM_HID_OutEvent_FS+0x90>)
 8008980:	f7f9 fe4e 	bl	8002620 <HAL_GPIO_ReadPin>
 8008984:	4603      	mov	r3, r0
 8008986:	2b01      	cmp	r3, #1
 8008988:	d105      	bne.n	8008996 <CUSTOM_HID_OutEvent_FS+0x72>
	    	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
 800898a:	2200      	movs	r2, #0
 800898c:	2101      	movs	r1, #1
 800898e:	4809      	ldr	r0, [pc, #36]	@ (80089b4 <CUSTOM_HID_OutEvent_FS+0x90>)
 8008990:	f7f9 fe5e 	bl	8002650 <HAL_GPIO_WritePin>
 8008994:	e004      	b.n	80089a0 <CUSTOM_HID_OutEvent_FS+0x7c>
	  }
	  else {
	    	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 8008996:	2201      	movs	r2, #1
 8008998:	2101      	movs	r1, #1
 800899a:	4806      	ldr	r0, [pc, #24]	@ (80089b4 <CUSTOM_HID_OutEvent_FS+0x90>)
 800899c:	f7f9 fe58 	bl	8002650 <HAL_GPIO_WritePin>
	  }
	  TMC4671_controller_rotate(50);
 80089a0:	2032      	movs	r0, #50	@ 0x32
 80089a2:	f7ff ff99 	bl	80088d8 <TMC4671_controller_rotate>
  }

//  buffer[0] = 0x01;
//  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, buffer, 0x08);

  return (USBD_OK);
 80089a6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	20000268 	.word	0x20000268
 80089b4:	40021000 	.word	0x40021000

080089b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	6039      	str	r1, [r7, #0]
 80089c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2212      	movs	r2, #18
 80089c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089ca:	4b03      	ldr	r3, [pc, #12]	@ (80089d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	200000d8 	.word	0x200000d8

080089dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	6039      	str	r1, [r7, #0]
 80089e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2204      	movs	r2, #4
 80089ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089ee:	4b03      	ldr	r3, [pc, #12]	@ (80089fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	200000ec 	.word	0x200000ec

08008a00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	6039      	str	r1, [r7, #0]
 8008a0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d105      	bne.n	8008a1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	4907      	ldr	r1, [pc, #28]	@ (8008a34 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a16:	4808      	ldr	r0, [pc, #32]	@ (8008a38 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a18:	f7ff fe42 	bl	80086a0 <USBD_GetString>
 8008a1c:	e004      	b.n	8008a28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	4904      	ldr	r1, [pc, #16]	@ (8008a34 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a22:	4805      	ldr	r0, [pc, #20]	@ (8008a38 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a24:	f7ff fe3c 	bl	80086a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a28:	4b02      	ldr	r3, [pc, #8]	@ (8008a34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	20000570 	.word	0x20000570
 8008a38:	08009268 	.word	0x08009268

08008a3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	4603      	mov	r3, r0
 8008a44:	6039      	str	r1, [r7, #0]
 8008a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	4904      	ldr	r1, [pc, #16]	@ (8008a5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a4c:	4804      	ldr	r0, [pc, #16]	@ (8008a60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a4e:	f7ff fe27 	bl	80086a0 <USBD_GetString>
  return USBD_StrDesc;
 8008a52:	4b02      	ldr	r3, [pc, #8]	@ (8008a5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	20000570 	.word	0x20000570
 8008a60:	08009288 	.word	0x08009288

08008a64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	6039      	str	r1, [r7, #0]
 8008a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	221a      	movs	r2, #26
 8008a74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a76:	f000 f843 	bl	8008b00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a7a:	4b02      	ldr	r3, [pc, #8]	@ (8008a84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	200000f0 	.word	0x200000f0

08008a88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	6039      	str	r1, [r7, #0]
 8008a92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a94:	79fb      	ldrb	r3, [r7, #7]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d105      	bne.n	8008aa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	4907      	ldr	r1, [pc, #28]	@ (8008abc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a9e:	4808      	ldr	r0, [pc, #32]	@ (8008ac0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008aa0:	f7ff fdfe 	bl	80086a0 <USBD_GetString>
 8008aa4:	e004      	b.n	8008ab0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	4904      	ldr	r1, [pc, #16]	@ (8008abc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008aaa:	4805      	ldr	r0, [pc, #20]	@ (8008ac0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008aac:	f7ff fdf8 	bl	80086a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ab0:	4b02      	ldr	r3, [pc, #8]	@ (8008abc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000570 	.word	0x20000570
 8008ac0:	0800929c 	.word	0x0800929c

08008ac4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	6039      	str	r1, [r7, #0]
 8008ace:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ad0:	79fb      	ldrb	r3, [r7, #7]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d105      	bne.n	8008ae2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	4907      	ldr	r1, [pc, #28]	@ (8008af8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ada:	4808      	ldr	r0, [pc, #32]	@ (8008afc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008adc:	f7ff fde0 	bl	80086a0 <USBD_GetString>
 8008ae0:	e004      	b.n	8008aec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	4904      	ldr	r1, [pc, #16]	@ (8008af8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ae6:	4805      	ldr	r0, [pc, #20]	@ (8008afc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ae8:	f7ff fdda 	bl	80086a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008aec:	4b02      	ldr	r3, [pc, #8]	@ (8008af8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000570 	.word	0x20000570
 8008afc:	080092b0 	.word	0x080092b0

08008b00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b06:	4b0f      	ldr	r3, [pc, #60]	@ (8008b44 <Get_SerialNum+0x44>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8008b48 <Get_SerialNum+0x48>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b12:	4b0e      	ldr	r3, [pc, #56]	@ (8008b4c <Get_SerialNum+0x4c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b26:	2208      	movs	r2, #8
 8008b28:	4909      	ldr	r1, [pc, #36]	@ (8008b50 <Get_SerialNum+0x50>)
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 f814 	bl	8008b58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b30:	2204      	movs	r2, #4
 8008b32:	4908      	ldr	r1, [pc, #32]	@ (8008b54 <Get_SerialNum+0x54>)
 8008b34:	68b8      	ldr	r0, [r7, #8]
 8008b36:	f000 f80f 	bl	8008b58 <IntToUnicode>
  }
}
 8008b3a:	bf00      	nop
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	1fff7a10 	.word	0x1fff7a10
 8008b48:	1fff7a14 	.word	0x1fff7a14
 8008b4c:	1fff7a18 	.word	0x1fff7a18
 8008b50:	200000f2 	.word	0x200000f2
 8008b54:	20000102 	.word	0x20000102

08008b58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	4613      	mov	r3, r2
 8008b64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b66:	2300      	movs	r3, #0
 8008b68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	75fb      	strb	r3, [r7, #23]
 8008b6e:	e027      	b.n	8008bc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	0f1b      	lsrs	r3, r3, #28
 8008b74:	2b09      	cmp	r3, #9
 8008b76:	d80b      	bhi.n	8008b90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	0f1b      	lsrs	r3, r3, #28
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	005b      	lsls	r3, r3, #1
 8008b82:	4619      	mov	r1, r3
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	440b      	add	r3, r1
 8008b88:	3230      	adds	r2, #48	@ 0x30
 8008b8a:	b2d2      	uxtb	r2, r2
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	e00a      	b.n	8008ba6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	0f1b      	lsrs	r3, r3, #28
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	440b      	add	r3, r1
 8008ba0:	3237      	adds	r2, #55	@ 0x37
 8008ba2:	b2d2      	uxtb	r2, r2
 8008ba4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	011b      	lsls	r3, r3, #4
 8008baa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	75fb      	strb	r3, [r7, #23]
 8008bc0:	7dfa      	ldrb	r2, [r7, #23]
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d3d3      	bcc.n	8008b70 <IntToUnicode+0x18>
  }
}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	371c      	adds	r7, #28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
	...

08008bd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b08a      	sub	sp, #40	@ 0x28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008be0:	f107 0314 	add.w	r3, r7, #20
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]
 8008be8:	605a      	str	r2, [r3, #4]
 8008bea:	609a      	str	r2, [r3, #8]
 8008bec:	60da      	str	r2, [r3, #12]
 8008bee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bf8:	d147      	bne.n	8008c8a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	613b      	str	r3, [r7, #16]
 8008bfe:	4b25      	ldr	r3, [pc, #148]	@ (8008c94 <HAL_PCD_MspInit+0xbc>)
 8008c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c02:	4a24      	ldr	r2, [pc, #144]	@ (8008c94 <HAL_PCD_MspInit+0xbc>)
 8008c04:	f043 0301 	orr.w	r3, r3, #1
 8008c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8008c0a:	4b22      	ldr	r3, [pc, #136]	@ (8008c94 <HAL_PCD_MspInit+0xbc>)
 8008c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	613b      	str	r3, [r7, #16]
 8008c14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008c16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c20:	2300      	movs	r3, #0
 8008c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c24:	f107 0314 	add.w	r3, r7, #20
 8008c28:	4619      	mov	r1, r3
 8008c2a:	481b      	ldr	r0, [pc, #108]	@ (8008c98 <HAL_PCD_MspInit+0xc0>)
 8008c2c:	f7f9 fb5c 	bl	80022e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c30:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c36:	2302      	movs	r3, #2
 8008c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c42:	230a      	movs	r3, #10
 8008c44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c46:	f107 0314 	add.w	r3, r7, #20
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4812      	ldr	r0, [pc, #72]	@ (8008c98 <HAL_PCD_MspInit+0xc0>)
 8008c4e:	f7f9 fb4b 	bl	80022e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c52:	4b10      	ldr	r3, [pc, #64]	@ (8008c94 <HAL_PCD_MspInit+0xbc>)
 8008c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c56:	4a0f      	ldr	r2, [pc, #60]	@ (8008c94 <HAL_PCD_MspInit+0xbc>)
 8008c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c5c:	6353      	str	r3, [r2, #52]	@ 0x34
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	4b0c      	ldr	r3, [pc, #48]	@ (8008c94 <HAL_PCD_MspInit+0xbc>)
 8008c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c66:	4a0b      	ldr	r2, [pc, #44]	@ (8008c94 <HAL_PCD_MspInit+0xbc>)
 8008c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c6e:	4b09      	ldr	r3, [pc, #36]	@ (8008c94 <HAL_PCD_MspInit+0xbc>)
 8008c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	2043      	movs	r0, #67	@ 0x43
 8008c80:	f7f9 fafb 	bl	800227a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c84:	2043      	movs	r0, #67	@ 0x43
 8008c86:	f7f9 fb14 	bl	80022b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c8a:	bf00      	nop
 8008c8c:	3728      	adds	r7, #40	@ 0x28
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	40023800 	.word	0x40023800
 8008c98:	40020000 	.word	0x40020000

08008c9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	f7fe fb91 	bl	80073da <USBD_LL_SetupStage>
}
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008cd2:	78fa      	ldrb	r2, [r7, #3]
 8008cd4:	6879      	ldr	r1, [r7, #4]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	00db      	lsls	r3, r3, #3
 8008cda:	4413      	add	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	440b      	add	r3, r1
 8008ce0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	78fb      	ldrb	r3, [r7, #3]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	f7fe fbcb 	bl	8007484 <USBD_LL_DataOutStage>
}
 8008cee:	bf00      	nop
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	4413      	add	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	440b      	add	r3, r1
 8008d16:	3320      	adds	r3, #32
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	78fb      	ldrb	r3, [r7, #3]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	f7fe fc64 	bl	80075ea <USBD_LL_DataInStage>
}
 8008d22:	bf00      	nop
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fe fd9e 	bl	800787a <USBD_LL_SOF>
}
 8008d3e:	bf00      	nop
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	79db      	ldrb	r3, [r3, #7]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d102      	bne.n	8008d60 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]
 8008d5e:	e008      	b.n	8008d72 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	79db      	ldrb	r3, [r3, #7]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d102      	bne.n	8008d6e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	73fb      	strb	r3, [r7, #15]
 8008d6c:	e001      	b.n	8008d72 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008d6e:	f7f8 ff95 	bl	8001c9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d78:	7bfa      	ldrb	r2, [r7, #15]
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fe fd38 	bl	80077f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fe fce0 	bl	800774e <USBD_LL_Reset>
}
 8008d8e:	bf00      	nop
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
	...

08008d98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe fd33 	bl	8007812 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	6812      	ldr	r2, [r2, #0]
 8008dba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008dbe:	f043 0301 	orr.w	r3, r3, #1
 8008dc2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	7adb      	ldrb	r3, [r3, #11]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d005      	beq.n	8008dd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008dcc:	4b04      	ldr	r3, [pc, #16]	@ (8008de0 <HAL_PCD_SuspendCallback+0x48>)
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	4a03      	ldr	r2, [pc, #12]	@ (8008de0 <HAL_PCD_SuspendCallback+0x48>)
 8008dd2:	f043 0306 	orr.w	r3, r3, #6
 8008dd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	e000ed00 	.word	0xe000ed00

08008de4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fe fd29 	bl	800784a <USBD_LL_Resume>
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e12:	78fa      	ldrb	r2, [r7, #3]
 8008e14:	4611      	mov	r1, r2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fe fd81 	bl	800791e <USBD_LL_IsoOUTIncomplete>
}
 8008e1c:	bf00      	nop
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e36:	78fa      	ldrb	r2, [r7, #3]
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe fd3d 	bl	80078ba <USBD_LL_IsoINIncomplete>
}
 8008e40:	bf00      	nop
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe fd93 	bl	8007982 <USBD_LL_DevConnected>
}
 8008e5c:	bf00      	nop
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe fd90 	bl	8007998 <USBD_LL_DevDisconnected>
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d13c      	bne.n	8008f0a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e90:	4a20      	ldr	r2, [pc, #128]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008e9c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008ea2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008ea6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008eaa:	2204      	movs	r2, #4
 8008eac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008eae:	4b19      	ldr	r3, [pc, #100]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008eb4:	4b17      	ldr	r3, [pc, #92]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008eba:	4b16      	ldr	r3, [pc, #88]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ec0:	4b14      	ldr	r3, [pc, #80]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ec6:	4b13      	ldr	r3, [pc, #76]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ecc:	4b11      	ldr	r3, [pc, #68]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008ece:	2200      	movs	r2, #0
 8008ed0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008ed2:	4b10      	ldr	r3, [pc, #64]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008ede:	480d      	ldr	r0, [pc, #52]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008ee0:	f7f9 fbcf 	bl	8002682 <HAL_PCD_Init>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008eea:	f7f8 fed7 	bl	8001c9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008eee:	2180      	movs	r1, #128	@ 0x80
 8008ef0:	4808      	ldr	r0, [pc, #32]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008ef2:	f7fa fde4 	bl	8003abe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008ef6:	2240      	movs	r2, #64	@ 0x40
 8008ef8:	2100      	movs	r1, #0
 8008efa:	4806      	ldr	r0, [pc, #24]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008efc:	f7fa fd98 	bl	8003a30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f00:	2280      	movs	r2, #128	@ 0x80
 8008f02:	2101      	movs	r1, #1
 8008f04:	4803      	ldr	r0, [pc, #12]	@ (8008f14 <USBD_LL_Init+0x94>)
 8008f06:	f7fa fd93 	bl	8003a30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20000770 	.word	0x20000770

08008f18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7f9 fcb6 	bl	80028a0 <HAL_PCD_Start>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 f930 	bl	80091a0 <USBD_Get_USB_Status>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	4608      	mov	r0, r1
 8008f58:	4611      	mov	r1, r2
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	70fb      	strb	r3, [r7, #3]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70bb      	strb	r3, [r7, #2]
 8008f64:	4613      	mov	r3, r2
 8008f66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f76:	78bb      	ldrb	r3, [r7, #2]
 8008f78:	883a      	ldrh	r2, [r7, #0]
 8008f7a:	78f9      	ldrb	r1, [r7, #3]
 8008f7c:	f7fa f98a 	bl	8003294 <HAL_PCD_EP_Open>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f90a 	bl	80091a0 <USBD_Get_USB_Status>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fb4:	78fa      	ldrb	r2, [r7, #3]
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fa f9d5 	bl	8003368 <HAL_PCD_EP_Close>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 f8eb 	bl	80091a0 <USBD_Get_USB_Status>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fa fa75 	bl	80034e6 <HAL_PCD_EP_SetStall>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009000:	7bfb      	ldrb	r3, [r7, #15]
 8009002:	4618      	mov	r0, r3
 8009004:	f000 f8cc 	bl	80091a0 <USBD_Get_USB_Status>
 8009008:	4603      	mov	r3, r0
 800900a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800900c:	7bbb      	ldrb	r3, [r7, #14]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	460b      	mov	r3, r1
 8009020:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009030:	78fa      	ldrb	r2, [r7, #3]
 8009032:	4611      	mov	r1, r2
 8009034:	4618      	mov	r0, r3
 8009036:	f7fa fab9 	bl	80035ac <HAL_PCD_EP_ClrStall>
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800903e:	7bfb      	ldrb	r3, [r7, #15]
 8009040:	4618      	mov	r0, r3
 8009042:	f000 f8ad 	bl	80091a0 <USBD_Get_USB_Status>
 8009046:	4603      	mov	r3, r0
 8009048:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800904a:	7bbb      	ldrb	r3, [r7, #14]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009066:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800906c:	2b00      	cmp	r3, #0
 800906e:	da0b      	bge.n	8009088 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009076:	68f9      	ldr	r1, [r7, #12]
 8009078:	4613      	mov	r3, r2
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	4413      	add	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	440b      	add	r3, r1
 8009082:	3316      	adds	r3, #22
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	e00b      	b.n	80090a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800908e:	68f9      	ldr	r1, [r7, #12]
 8009090:	4613      	mov	r3, r2
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	4413      	add	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	440b      	add	r3, r1
 800909a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800909e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090c6:	78fa      	ldrb	r2, [r7, #3]
 80090c8:	4611      	mov	r1, r2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fa f8be 	bl	800324c <HAL_PCD_SetAddress>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f862 	bl	80091a0 <USBD_Get_USB_Status>
 80090dc:	4603      	mov	r3, r0
 80090de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b086      	sub	sp, #24
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	603b      	str	r3, [r7, #0]
 80090f6:	460b      	mov	r3, r1
 80090f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009108:	7af9      	ldrb	r1, [r7, #11]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	f7fa f9b0 	bl	8003472 <HAL_PCD_EP_Transmit>
 8009112:	4603      	mov	r3, r0
 8009114:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	4618      	mov	r0, r3
 800911a:	f000 f841 	bl	80091a0 <USBD_Get_USB_Status>
 800911e:	4603      	mov	r3, r0
 8009120:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009122:	7dbb      	ldrb	r3, [r7, #22]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	607a      	str	r2, [r7, #4]
 8009136:	603b      	str	r3, [r7, #0]
 8009138:	460b      	mov	r3, r1
 800913a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800914a:	7af9      	ldrb	r1, [r7, #11]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	f7fa f954 	bl	80033fc <HAL_PCD_EP_Receive>
 8009154:	4603      	mov	r3, r0
 8009156:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	4618      	mov	r0, r3
 800915c:	f000 f820 	bl	80091a0 <USBD_Get_USB_Status>
 8009160:	4603      	mov	r3, r0
 8009162:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009164:	7dbb      	ldrb	r3, [r7, #22]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009178:	4b03      	ldr	r3, [pc, #12]	@ (8009188 <USBD_static_malloc+0x18>)
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	20000c54 	.word	0x20000c54

0800918c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]

}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	2b03      	cmp	r3, #3
 80091b2:	d817      	bhi.n	80091e4 <USBD_Get_USB_Status+0x44>
 80091b4:	a201      	add	r2, pc, #4	@ (adr r2, 80091bc <USBD_Get_USB_Status+0x1c>)
 80091b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ba:	bf00      	nop
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	080091d3 	.word	0x080091d3
 80091c4:	080091d9 	.word	0x080091d9
 80091c8:	080091df 	.word	0x080091df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73fb      	strb	r3, [r7, #15]
    break;
 80091d0:	e00b      	b.n	80091ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091d2:	2303      	movs	r3, #3
 80091d4:	73fb      	strb	r3, [r7, #15]
    break;
 80091d6:	e008      	b.n	80091ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091d8:	2301      	movs	r3, #1
 80091da:	73fb      	strb	r3, [r7, #15]
    break;
 80091dc:	e005      	b.n	80091ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091de:	2303      	movs	r3, #3
 80091e0:	73fb      	strb	r3, [r7, #15]
    break;
 80091e2:	e002      	b.n	80091ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091e4:	2303      	movs	r3, #3
 80091e6:	73fb      	strb	r3, [r7, #15]
    break;
 80091e8:	bf00      	nop
  }
  return usb_status;
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <memset>:
 80091f8:	4402      	add	r2, r0
 80091fa:	4603      	mov	r3, r0
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d100      	bne.n	8009202 <memset+0xa>
 8009200:	4770      	bx	lr
 8009202:	f803 1b01 	strb.w	r1, [r3], #1
 8009206:	e7f9      	b.n	80091fc <memset+0x4>

08009208 <__libc_init_array>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	4d0d      	ldr	r5, [pc, #52]	@ (8009240 <__libc_init_array+0x38>)
 800920c:	4c0d      	ldr	r4, [pc, #52]	@ (8009244 <__libc_init_array+0x3c>)
 800920e:	1b64      	subs	r4, r4, r5
 8009210:	10a4      	asrs	r4, r4, #2
 8009212:	2600      	movs	r6, #0
 8009214:	42a6      	cmp	r6, r4
 8009216:	d109      	bne.n	800922c <__libc_init_array+0x24>
 8009218:	4d0b      	ldr	r5, [pc, #44]	@ (8009248 <__libc_init_array+0x40>)
 800921a:	4c0c      	ldr	r4, [pc, #48]	@ (800924c <__libc_init_array+0x44>)
 800921c:	f000 f818 	bl	8009250 <_init>
 8009220:	1b64      	subs	r4, r4, r5
 8009222:	10a4      	asrs	r4, r4, #2
 8009224:	2600      	movs	r6, #0
 8009226:	42a6      	cmp	r6, r4
 8009228:	d105      	bne.n	8009236 <__libc_init_array+0x2e>
 800922a:	bd70      	pop	{r4, r5, r6, pc}
 800922c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009230:	4798      	blx	r3
 8009232:	3601      	adds	r6, #1
 8009234:	e7ee      	b.n	8009214 <__libc_init_array+0xc>
 8009236:	f855 3b04 	ldr.w	r3, [r5], #4
 800923a:	4798      	blx	r3
 800923c:	3601      	adds	r6, #1
 800923e:	e7f2      	b.n	8009226 <__libc_init_array+0x1e>
 8009240:	08009460 	.word	0x08009460
 8009244:	08009460 	.word	0x08009460
 8009248:	08009460 	.word	0x08009460
 800924c:	08009464 	.word	0x08009464

08009250 <_init>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr

0800925c <_fini>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	bf00      	nop
 8009260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009262:	bc08      	pop	{r3}
 8009264:	469e      	mov	lr, r3
 8009266:	4770      	bx	lr
