
Praca-Inzynierksa-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bd0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08009d58  08009d58  0000ad58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a008  0800a008  0000c1a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a008  0800a008  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a010  0800a010  0000c1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a010  0800a010  0000b010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a014  0800a014  0000b014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a0  20000000  0800a018  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1a0  2**0
                  CONTENTS
 10 .bss          00000adc  200001a0  200001a0  0000c1a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c7c  20000c7c  0000c1a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ffef  00000000  00000000  0000c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041b3  00000000  00000000  0002c1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  00030378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fbb  00000000  00000000  00031828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006512  00000000  00000000  000327e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b188  00000000  00000000  00038cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd1ea  00000000  00000000  00053e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00131067  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005738  00000000  00000000  001310ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  001367e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001a0 	.word	0x200001a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009d40 	.word	0x08009d40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001a4 	.word	0x200001a4
 80001c4:	08009d40 	.word	0x08009d40

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96a 	b.w	8000ca0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	460c      	mov	r4, r1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d14e      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f0:	4694      	mov	ip, r2
 80009f2:	458c      	cmp	ip, r1
 80009f4:	4686      	mov	lr, r0
 80009f6:	fab2 f282 	clz	r2, r2
 80009fa:	d962      	bls.n	8000ac2 <__udivmoddi4+0xde>
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0320 	rsb	r3, r2, #32
 8000a02:	4091      	lsls	r1, r2
 8000a04:	fa20 f303 	lsr.w	r3, r0, r3
 8000a08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0c:	4319      	orrs	r1, r3
 8000a0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a16:	fa1f f68c 	uxth.w	r6, ip
 8000a1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a22:	fb07 1114 	mls	r1, r7, r4, r1
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb04 f106 	mul.w	r1, r4, r6
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a3a:	f080 8112 	bcs.w	8000c62 <__udivmoddi4+0x27e>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 810f 	bls.w	8000c62 <__udivmoddi4+0x27e>
 8000a44:	3c02      	subs	r4, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a59      	subs	r1, r3, r1
 8000a4a:	fa1f f38e 	uxth.w	r3, lr
 8000a4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a52:	fb07 1110 	mls	r1, r7, r0, r1
 8000a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5a:	fb00 f606 	mul.w	r6, r0, r6
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x94>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a6a:	f080 80fc 	bcs.w	8000c66 <__udivmoddi4+0x282>
 8000a6e:	429e      	cmp	r6, r3
 8000a70:	f240 80f9 	bls.w	8000c66 <__udivmoddi4+0x282>
 8000a74:	4463      	add	r3, ip
 8000a76:	3802      	subs	r0, #2
 8000a78:	1b9b      	subs	r3, r3, r6
 8000a7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a7e:	2100      	movs	r1, #0
 8000a80:	b11d      	cbz	r5, 8000a8a <__udivmoddi4+0xa6>
 8000a82:	40d3      	lsrs	r3, r2
 8000a84:	2200      	movs	r2, #0
 8000a86:	e9c5 3200 	strd	r3, r2, [r5]
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d905      	bls.n	8000a9e <__udivmoddi4+0xba>
 8000a92:	b10d      	cbz	r5, 8000a98 <__udivmoddi4+0xb4>
 8000a94:	e9c5 0100 	strd	r0, r1, [r5]
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e7f5      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000a9e:	fab3 f183 	clz	r1, r3
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d146      	bne.n	8000b34 <__udivmoddi4+0x150>
 8000aa6:	42a3      	cmp	r3, r4
 8000aa8:	d302      	bcc.n	8000ab0 <__udivmoddi4+0xcc>
 8000aaa:	4290      	cmp	r0, r2
 8000aac:	f0c0 80f0 	bcc.w	8000c90 <__udivmoddi4+0x2ac>
 8000ab0:	1a86      	subs	r6, r0, r2
 8000ab2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	2d00      	cmp	r5, #0
 8000aba:	d0e6      	beq.n	8000a8a <__udivmoddi4+0xa6>
 8000abc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac0:	e7e3      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	f040 8090 	bne.w	8000be8 <__udivmoddi4+0x204>
 8000ac8:	eba1 040c 	sub.w	r4, r1, ip
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	fa1f f78c 	uxth.w	r7, ip
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ada:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ade:	fb08 4416 	mls	r4, r8, r6, r4
 8000ae2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ae6:	fb07 f006 	mul.w	r0, r7, r6
 8000aea:	4298      	cmp	r0, r3
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x11c>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x11a>
 8000af8:	4298      	cmp	r0, r3
 8000afa:	f200 80cd 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000afe:	4626      	mov	r6, r4
 8000b00:	1a1c      	subs	r4, r3, r0
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b12:	fb00 f707 	mul.w	r7, r0, r7
 8000b16:	429f      	cmp	r7, r3
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x148>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b22:	d202      	bcs.n	8000b2a <__udivmoddi4+0x146>
 8000b24:	429f      	cmp	r7, r3
 8000b26:	f200 80b0 	bhi.w	8000c8a <__udivmoddi4+0x2a6>
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	1bdb      	subs	r3, r3, r7
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	e7a5      	b.n	8000a80 <__udivmoddi4+0x9c>
 8000b34:	f1c1 0620 	rsb	r6, r1, #32
 8000b38:	408b      	lsls	r3, r1
 8000b3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b3e:	431f      	orrs	r7, r3
 8000b40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b44:	fa04 f301 	lsl.w	r3, r4, r1
 8000b48:	ea43 030c 	orr.w	r3, r3, ip
 8000b4c:	40f4      	lsrs	r4, r6
 8000b4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b52:	0c38      	lsrs	r0, r7, #16
 8000b54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b58:	fbb4 fef0 	udiv	lr, r4, r0
 8000b5c:	fa1f fc87 	uxth.w	ip, r7
 8000b60:	fb00 441e 	mls	r4, r0, lr, r4
 8000b64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b68:	fb0e f90c 	mul.w	r9, lr, ip
 8000b6c:	45a1      	cmp	r9, r4
 8000b6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b72:	d90a      	bls.n	8000b8a <__udivmoddi4+0x1a6>
 8000b74:	193c      	adds	r4, r7, r4
 8000b76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b7a:	f080 8084 	bcs.w	8000c86 <__udivmoddi4+0x2a2>
 8000b7e:	45a1      	cmp	r9, r4
 8000b80:	f240 8081 	bls.w	8000c86 <__udivmoddi4+0x2a2>
 8000b84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b88:	443c      	add	r4, r7
 8000b8a:	eba4 0409 	sub.w	r4, r4, r9
 8000b8e:	fa1f f983 	uxth.w	r9, r3
 8000b92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b96:	fb00 4413 	mls	r4, r0, r3, r4
 8000b9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	d907      	bls.n	8000bb6 <__udivmoddi4+0x1d2>
 8000ba6:	193c      	adds	r4, r7, r4
 8000ba8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bac:	d267      	bcs.n	8000c7e <__udivmoddi4+0x29a>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	d965      	bls.n	8000c7e <__udivmoddi4+0x29a>
 8000bb2:	3b02      	subs	r3, #2
 8000bb4:	443c      	add	r4, r7
 8000bb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bba:	fba0 9302 	umull	r9, r3, r0, r2
 8000bbe:	eba4 040c 	sub.w	r4, r4, ip
 8000bc2:	429c      	cmp	r4, r3
 8000bc4:	46ce      	mov	lr, r9
 8000bc6:	469c      	mov	ip, r3
 8000bc8:	d351      	bcc.n	8000c6e <__udivmoddi4+0x28a>
 8000bca:	d04e      	beq.n	8000c6a <__udivmoddi4+0x286>
 8000bcc:	b155      	cbz	r5, 8000be4 <__udivmoddi4+0x200>
 8000bce:	ebb8 030e 	subs.w	r3, r8, lr
 8000bd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bda:	40cb      	lsrs	r3, r1
 8000bdc:	431e      	orrs	r6, r3
 8000bde:	40cc      	lsrs	r4, r1
 8000be0:	e9c5 6400 	strd	r6, r4, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	e750      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000be8:	f1c2 0320 	rsb	r3, r2, #32
 8000bec:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf4:	fa24 f303 	lsr.w	r3, r4, r3
 8000bf8:	4094      	lsls	r4, r2
 8000bfa:	430c      	orrs	r4, r1
 8000bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c04:	fa1f f78c 	uxth.w	r7, ip
 8000c08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c10:	0c23      	lsrs	r3, r4, #16
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb00 f107 	mul.w	r1, r0, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x24c>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c26:	d22c      	bcs.n	8000c82 <__udivmoddi4+0x29e>
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d92a      	bls.n	8000c82 <__udivmoddi4+0x29e>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	4463      	add	r3, ip
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c38:	fb08 3311 	mls	r3, r8, r1, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb01 f307 	mul.w	r3, r1, r7
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x276>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c50:	d213      	bcs.n	8000c7a <__udivmoddi4+0x296>
 8000c52:	42a3      	cmp	r3, r4
 8000c54:	d911      	bls.n	8000c7a <__udivmoddi4+0x296>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4464      	add	r4, ip
 8000c5a:	1ae4      	subs	r4, r4, r3
 8000c5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c60:	e739      	b.n	8000ad6 <__udivmoddi4+0xf2>
 8000c62:	4604      	mov	r4, r0
 8000c64:	e6f0      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c66:	4608      	mov	r0, r1
 8000c68:	e706      	b.n	8000a78 <__udivmoddi4+0x94>
 8000c6a:	45c8      	cmp	r8, r9
 8000c6c:	d2ae      	bcs.n	8000bcc <__udivmoddi4+0x1e8>
 8000c6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c76:	3801      	subs	r0, #1
 8000c78:	e7a8      	b.n	8000bcc <__udivmoddi4+0x1e8>
 8000c7a:	4631      	mov	r1, r6
 8000c7c:	e7ed      	b.n	8000c5a <__udivmoddi4+0x276>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	e799      	b.n	8000bb6 <__udivmoddi4+0x1d2>
 8000c82:	4630      	mov	r0, r6
 8000c84:	e7d4      	b.n	8000c30 <__udivmoddi4+0x24c>
 8000c86:	46d6      	mov	lr, sl
 8000c88:	e77f      	b.n	8000b8a <__udivmoddi4+0x1a6>
 8000c8a:	4463      	add	r3, ip
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	e74d      	b.n	8000b2c <__udivmoddi4+0x148>
 8000c90:	4606      	mov	r6, r0
 8000c92:	4623      	mov	r3, r4
 8000c94:	4608      	mov	r0, r1
 8000c96:	e70f      	b.n	8000ab8 <__udivmoddi4+0xd4>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	e730      	b.n	8000b00 <__udivmoddi4+0x11c>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bfb8      	it	lt
 8000cb2:	425b      	neglt	r3, r3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_ZL20tmc4671_readRegisterh>:
#define STATE_WAIT_INIT_TIME   2
#define STATE_ESTIMATE_OFFSET  3

// spi access
static uint32_t tmc4671_readRegister(uint8_t address)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[5] = { 0 };
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	763b      	strb	r3, [r7, #24]
    uint8_t rxBuf[5];

    // clear write bit
    txBuf[0] = TMC4671_ADDRESS_MASK & address;
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	753b      	strb	r3, [r7, #20]

    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2110      	movs	r1, #16
 8000ce0:	480f      	ldr	r0, [pc, #60]	@ (8000d20 <_ZL20tmc4671_readRegisterh+0x60>)
 8000ce2:	f002 fbab 	bl	800343c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, txBuf, rxBuf, 5, 200);
 8000ce6:	f107 020c 	add.w	r2, r7, #12
 8000cea:	f107 0114 	add.w	r1, r7, #20
 8000cee:	23c8      	movs	r3, #200	@ 0xc8
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	480b      	ldr	r0, [pc, #44]	@ (8000d24 <_ZL20tmc4671_readRegisterh+0x64>)
 8000cf6:	f004 fc4c 	bl	8005592 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <_ZL20tmc4671_readRegisterh+0x60>)
 8000d00:	f002 fb9c 	bl	800343c <HAL_GPIO_WritePin>

    uint32_t ret;
	memcpy(&ret, &rxBuf[1], 4);  // Bajty danych zaczynają się od rxBuf[1]
 8000d04:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8000d08:	60bb      	str	r3, [r7, #8]
	ret = __REV(ret);  // Konwersja do little-endian
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	61fb      	str	r3, [r7, #28]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	ba1b      	rev	r3, r3
 8000d12:	bf00      	nop
 8000d14:	60bb      	str	r3, [r7, #8]

	return ret;
 8000d16:	68bb      	ldr	r3, [r7, #8]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40020000 	.word	0x40020000
 8000d24:	200001bc 	.word	0x200001bc

08000d28 <_ZL21tmc4671_writeRegisterhm>:

static void tmc4671_writeRegister(uint8_t address, uint32_t value)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
    uint8_t data[5] = { 0 };
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	743b      	strb	r3, [r7, #16]

    data[0] = TMC4671_WRITE_BIT | address;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	733b      	strb	r3, [r7, #12]

    value =__REV(value);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	ba1b      	rev	r3, r3
 8000d4e:	bf00      	nop
 8000d50:	603b      	str	r3, [r7, #0]
	memcpy(data+1,&value,4);
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	3301      	adds	r3, #1
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	601a      	str	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2110      	movs	r1, #16
 8000d60:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <_ZL21tmc4671_writeRegisterhm+0x60>)
 8000d62:	f002 fb6b 	bl	800343c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, 5, 200);
 8000d66:	f107 010c 	add.w	r1, r7, #12
 8000d6a:	23c8      	movs	r3, #200	@ 0xc8
 8000d6c:	2205      	movs	r2, #5
 8000d6e:	4807      	ldr	r0, [pc, #28]	@ (8000d8c <_ZL21tmc4671_writeRegisterhm+0x64>)
 8000d70:	f004 facb 	bl	800530a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port,SPI1_SS1_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2110      	movs	r1, #16
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <_ZL21tmc4671_writeRegisterhm+0x60>)
 8000d7a:	f002 fb5f 	bl	800343c <HAL_GPIO_WritePin>
}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	200001bc 	.word	0x200001bc

08000d90 <_ZL20tmc4671_fieldExtractm13RegisterField>:

static uint32_t tmc4671_fieldExtract(uint32_t data, RegisterField field)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	e883 0006 	stmia.w	r3, {r1, r2}
    uint32_t value = (data & field.mask) >> field.shift;
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4013      	ands	r3, r2
 8000da4:	7a3a      	ldrb	r2, [r7, #8]
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	61fb      	str	r3, [r7, #28]

    if (field.isSigned)
 8000daa:	7abb      	ldrb	r3, [r7, #10]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d00f      	beq.n	8000dd0 <_ZL20tmc4671_fieldExtractm13RegisterField+0x40>
    {
        uint32_t baseMask = field.mask >> field.shift;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7a3a      	ldrb	r2, [r7, #8]
 8000db4:	40d3      	lsrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        uint32_t signMask = baseMask & (~baseMask >> 1);
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	085b      	lsrs	r3, r3, #1
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	617b      	str	r3, [r7, #20]
        value = (value ^ signMask) - signMask;
 8000dc4:	69fa      	ldr	r2, [r7, #28]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	405a      	eors	r2, r3
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	61fb      	str	r3, [r7, #28]
    }

    return value;
 8000dd0:	69fb      	ldr	r3, [r7, #28]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	@ 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_ZL17tmc4671_fieldRead13RegisterField>:

static inline uint32_t tmc4671_fieldRead(RegisterField field)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	463b      	mov	r3, r7
 8000de6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t value = tmc4671_readRegister(field.address);
 8000dea:	797b      	ldrb	r3, [r7, #5]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff67 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8000df2:	60f8      	str	r0, [r7, #12]
    return tmc4671_fieldExtract(value, field);
 8000df4:	463b      	mov	r3, r7
 8000df6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f7ff ffc8 	bl	8000d90 <_ZL20tmc4671_fieldExtractm13RegisterField>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_ZL19tmc4671_fieldUpdatem13RegisterFieldm>:

static inline uint32_t tmc4671_fieldUpdate(uint32_t data, RegisterField field, uint32_t value)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	1d38      	adds	r0, r7, #4
 8000e14:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e18:	603b      	str	r3, [r7, #0]
    return (data & (~field.mask)) | ((value << field.shift) & field.mask);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	401a      	ands	r2, r3
 8000e22:	7a3b      	ldrb	r3, [r7, #8]
 8000e24:	4619      	mov	r1, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	fa03 f101 	lsl.w	r1, r3, r1
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
 8000e30:	4313      	orrs	r3, r2
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>:

static inline void tmc4671_fieldWrite(RegisterField field, uint32_t value)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e4c:	607a      	str	r2, [r7, #4]
    uint32_t regValue = tmc4671_readRegister(field.address);
 8000e4e:	7b7b      	ldrb	r3, [r7, #13]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff35 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8000e56:	6178      	str	r0, [r7, #20]
    regValue = tmc4671_fieldUpdate(regValue, field, value);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f107 0208 	add.w	r2, r7, #8
 8000e5e:	ca06      	ldmia	r2, {r1, r2}
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffd2 	bl	8000e0a <_ZL19tmc4671_fieldUpdatem13RegisterFieldm>
 8000e66:	6178      	str	r0, [r7, #20]
    tmc4671_writeRegister(field.address, regValue);
 8000e68:	7b7b      	ldrb	r3, [r7, #13]
 8000e6a:	6979      	ldr	r1, [r7, #20]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5b 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <_ZN14TMC4671_Driver4initEv>:
#include <TMC4671_controller.h>

TMC4671_Driver tmc4671;

void TMC4671_Driver::init()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	6078      	str	r0, [r7, #4]
	setDriverState(DRIVER_DISABLE);
 8000e84:	2100      	movs	r1, #0
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f001 f834 	bl	8001ef4 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
	// Ping driver
	tmc4671_writeRegister(TMC4671_CHIPINFO_ADDR, 0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f7ff ff4a 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
	if (tmc4671_readRegister(TMC4671_CHIPINFO_DATA) == 0x34363731) {
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff ff13 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a79      	ldr	r2, [pc, #484]	@ (8001084 <_ZN14TMC4671_Driver4initEv+0x208>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	bf0c      	ite	eq
 8000ea2:	2301      	moveq	r3, #1
 8000ea4:	2300      	movne	r3, #0
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d01d      	beq.n	8000ee8 <_ZN14TMC4671_Driver4initEv+0x6c>
		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2180      	movs	r1, #128	@ 0x80
 8000eb0:	4875      	ldr	r0, [pc, #468]	@ (8001088 <_ZN14TMC4671_Driver4initEv+0x20c>)
 8000eb2:	f002 fac3 	bl	800343c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000eb6:	20c8      	movs	r0, #200	@ 0xc8
 8000eb8:	f001 ffee 	bl	8002e98 <HAL_Delay>
		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2180      	movs	r1, #128	@ 0x80
 8000ec0:	4871      	ldr	r0, [pc, #452]	@ (8001088 <_ZN14TMC4671_Driver4initEv+0x20c>)
 8000ec2:	f002 fabb 	bl	800343c <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
	  return;
	}

	// Check TMC version if it is not ES
	tmc4671_writeRegister(TMC4671_CHIPINFO_ADDR, 1);
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff ff2d 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
	if(tmc4671_readRegister(TMC4671_CHIPINFO_DATA) == 0x00010000){
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f7ff fef6 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eda:	bf0c      	ite	eq
 8000edc:	2301      	moveq	r3, #1
 8000ede:	2300      	movne	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d019      	beq.n	8000f1a <_ZN14TMC4671_Driver4initEv+0x9e>
 8000ee6:	e009      	b.n	8000efc <_ZN14TMC4671_Driver4initEv+0x80>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2102      	movs	r1, #2
 8000eec:	4867      	ldr	r0, [pc, #412]	@ (800108c <_ZN14TMC4671_Driver4initEv+0x210>)
 8000eee:	f002 faa5 	bl	800343c <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 fffd 	bl	8001ef4 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
	  return;
 8000efa:	e0c0      	b.n	800107e <_ZN14TMC4671_Driver4initEv+0x202>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2102      	movs	r1, #2
 8000f00:	4862      	ldr	r0, [pc, #392]	@ (800108c <_ZN14TMC4671_Driver4initEv+0x210>)
 8000f02:	f002 fa9b 	bl	800343c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4860      	ldr	r0, [pc, #384]	@ (800108c <_ZN14TMC4671_Driver4initEv+0x210>)
 8000f0c:	f002 fa96 	bl	800343c <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
 8000f10:	2100      	movs	r1, #0
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 ffee 	bl	8001ef4 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
		return;
 8000f18:	e0b1      	b.n	800107e <_ZN14TMC4671_Driver4initEv+0x202>
	}

	// Setup main constants
	tmc4671_writeRegister(TMC4671_PID_TORQUE_FLUX_TARGET, 0);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2064      	movs	r0, #100	@ 0x64
 8000f1e:	f7ff ff03 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
	setPWM(PwmMode::off ,pwmCnt, bbmL, bbmH);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f8b3 207a 	ldrh.w	r2, [r3, #122]	@ 0x7a
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	460b      	mov	r3, r1
 8000f38:	2100      	movs	r1, #0
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f001 f8e0 	bl	8002100 <_ZN14TMC4671_Driver6setPWME7PwmModethh>
	setMotorTypeAndPoles(motorType, encoder.pole_pairs);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 1072 	ldrb.w	r1, [r3, #114]	@ 0x72
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fff2 	bl	8001f38 <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet>
	setPhiEType(phiEType);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f001 fac3 	bl	80024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setHallConfig(&hallConfig); //enables hall filter and masking
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4619      	mov	r1, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f001 f810 	bl	8001f8c <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig>
	initAdc(&adcConfig);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3344      	adds	r3, #68	@ 0x44
 8000f70:	4619      	mov	r1, r3
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f001 f99e 	bl	80022b4 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig>

	if(!calibrateAdcOffset(300)){
 8000f78:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 feb5 	bl	8001cec <_ZN14TMC4671_Driver18calibrateAdcOffsetEt>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f083 0301 	eor.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d009      	beq.n	8000fa2 <_ZN14TMC4671_Driver4initEv+0x126>
		// ADC or shunt amp is broken!
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2102      	movs	r1, #2
 8000f92:	483e      	ldr	r0, [pc, #248]	@ (800108c <_ZN14TMC4671_Driver4initEv+0x210>)
 8000f94:	f002 fa52 	bl	800343c <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 ffaa 	bl	8001ef4 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
		return;
 8000fa0:	e06d      	b.n	800107e <_ZN14TMC4671_Driver4initEv+0x202>
	}

	setAdcBrakeLimits(brakeLimLow, brakeLimHigh);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f8b3 107e 	ldrh.w	r1, [r3, #126]	@ 0x7e
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8000fae:	461a      	mov	r2, r3
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f001 f95d 	bl	8002270 <_ZN14TMC4671_Driver17setAdcBrakeLimitsEtt>

	// Enable adc clipping and pll errors
	statusMask.asInt = 0;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	statusMask.flags.adc_i_clipped = 1;
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	f892 308b 	ldrb.w	r3, [r2, #139]	@ 0x8b
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	f882 308b 	strb.w	r3, [r2, #139]	@ 0x8b
	statusMask.flags.not_PLL_locked = 1;
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	f892 308a 	ldrb.w	r3, [r2, #138]	@ 0x8a
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	f882 308a 	strb.w	r3, [r2, #138]	@ 0x8a
	setStatusMask(statusMask);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f001 fbab 	bl	800273c <_ZN14TMC4671_Driver13setStatusMaskE11StatusFlags>

	setPids(&pidConfig);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	331a      	adds	r3, #26
 8000fea:	4619      	mov	r1, r3
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f001 f8d5 	bl	800219c <_ZN14TMC4671_Driver7setPidsEP9PIDConfig>
	uint8_t flags = tmc4671_readRegister(TMC4671_STATUS_FLAGS);
 8000ff2:	207c      	movs	r0, #124	@ 0x7c
 8000ff4:	f7ff fe64 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]
	this->statusFlags.asInt = flags;
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	setDriverState(DRIVER_ENABLE);
 8001004:	2101      	movs	r1, #1
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 ff74 	bl	8001ef4 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
	setPWM(PwmMode::PWM_FOC);
 800100c:	2107      	movs	r1, #7
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f001 f860 	bl	80020d4 <_ZN14TMC4671_Driver6setPWME7PwmMode>

	while(!encoder.isAligned){
 8001014:	e005      	b.n	8001022 <_ZN14TMC4671_Driver4initEv+0x1a6>
		setupEncoder(&encoder);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	335c      	adds	r3, #92	@ 0x5c
 800101a:	4619      	mov	r1, r3
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f90b 	bl	8001238 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder>
	while(!encoder.isAligned){
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8001028:	f083 0301 	eor.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f1      	bne.n	8001016 <_ZN14TMC4671_Driver4initEv+0x19a>
	}

	setMotionMode(MotionMode::stopped);
 8001032:	2100      	movs	r1, #0
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f001 fa1d 	bl	8002474 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
	HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	4812      	ldr	r0, [pc, #72]	@ (8001088 <_ZN14TMC4671_Driver4initEv+0x20c>)
 8001040:	f002 f9fc 	bl	800343c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2101      	movs	r1, #1
 8001048:	4810      	ldr	r0, [pc, #64]	@ (800108c <_ZN14TMC4671_Driver4initEv+0x210>)
 800104a:	f002 f9f7 	bl	800343c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2102      	movs	r1, #2
 8001052:	480e      	ldr	r0, [pc, #56]	@ (800108c <_ZN14TMC4671_Driver4initEv+0x210>)
 8001054:	f002 f9f2 	bl	800343c <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8001058:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800105c:	f001 ff1c 	bl	8002e98 <HAL_Delay>
	HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2180      	movs	r1, #128	@ 0x80
 8001064:	4808      	ldr	r0, [pc, #32]	@ (8001088 <_ZN14TMC4671_Driver4initEv+0x20c>)
 8001066:	f002 f9e9 	bl	800343c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2101      	movs	r1, #1
 800106e:	4807      	ldr	r0, [pc, #28]	@ (800108c <_ZN14TMC4671_Driver4initEv+0x210>)
 8001070:	f002 f9e4 	bl	800343c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2102      	movs	r1, #2
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <_ZN14TMC4671_Driver4initEv+0x210>)
 800107a:	f002 f9df 	bl	800343c <HAL_GPIO_WritePin>
}
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	34363731 	.word	0x34363731
 8001088:	40020c00 	.word	0x40020c00
 800108c:	40021000 	.word	0x40021000

08001090 <_ZN14TMC4671_Driver11moveByAngleEs>:
//	actualMotionMode = TMC4671_MOTION_MODE_POSITION;
//
	return TMC_ERROR_NONE;
}

void TMC4671_Driver::moveByAngle(int16_t angle) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
//
//	// remember switched motion mode
//	actualMotionMode = TMC4671_MOTION_MODE_POSITION;
//
	// Start angle offsets all angles later so there is no jump if angle is already properly aligned
	const int32_t startAngle = getPhiE_Enc();
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 fa73 	bl	8002588 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 80010a2:	4603      	mov	r3, r0
 80010a4:	617b      	str	r3, [r7, #20]
	const int32_t targetAngle = ((float)(angle*POSITION_SCALE_MAX)/360.0);
 80010a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010aa:	041b      	lsls	r3, r3, #16
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b4:	ee17 0a90 	vmov	r0, s15
 80010b8:	f7ff f9ea 	bl	8000490 <__aeabi_f2d>
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b44      	ldr	r3, [pc, #272]	@ (80011d4 <_ZN14TMC4671_Driver11moveByAngleEs+0x144>)
 80010c2:	f7ff fb67 	bl	8000794 <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fc49 	bl	8000964 <__aeabi_d2iz>
 80010d2:	4603      	mov	r3, r0
 80010d4:	613b      	str	r3, [r7, #16]

	PhiE lastphie = getPhiEType();
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f001 fa28 	bl	800252c <_ZN14TMC4671_Driver11getPhiETypeEv>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]
	MotionMode lastmode = getMotionMode();
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f001 f9e9 	bl	80024b8 <_ZN14TMC4671_Driver13getMotionModeEv>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73bb      	strb	r3, [r7, #14]
	setFluxTorque(0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f001 fafc 	bl	80026ec <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setPhiEType(PhiE::ext);
 80010f4:	2101      	movs	r1, #1
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f001 f9f6 	bl	80024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setPhiE_ext(startAngle);
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4619      	mov	r1, r3
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f001 fa2c 	bl	8002560 <_ZN14TMC4671_Driver11setPhiE_extEs>

	// Ramp up flux
	for(int16_t flux = 0; flux <= this->initPower; flux+=20){
 8001108:	2300      	movs	r3, #0
 800110a:	83fb      	strh	r3, [r7, #30]
 800110c:	e00d      	b.n	800112a <_ZN14TMC4671_Driver11moveByAngleEs+0x9a>
		setFluxTorque(flux, 0);
 800110e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001112:	2200      	movs	r2, #0
 8001114:	4619      	mov	r1, r3
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f001 fae8 	bl	80026ec <_ZN14TMC4671_Driver13setFluxTorqueEss>
		HAL_Delay(2);
 800111c:	2002      	movs	r0, #2
 800111e:	f001 febb 	bl	8002e98 <HAL_Delay>
	for(int16_t flux = 0; flux <= this->initPower; flux+=20){
 8001122:	8bfb      	ldrh	r3, [r7, #30]
 8001124:	3314      	adds	r3, #20
 8001126:	b29b      	uxth	r3, r3
 8001128:	83fb      	strh	r3, [r7, #30]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 8001130:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001134:	429a      	cmp	r2, r3
 8001136:	ddea      	ble.n	800110e <_ZN14TMC4671_Driver11moveByAngleEs+0x7e>
	}

	if(angle > 0){
 8001138:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800113c:	2b00      	cmp	r3, #0
 800113e:	dd19      	ble.n	8001174 <_ZN14TMC4671_Driver11moveByAngleEs+0xe4>
		for(int16_t curr_angle = 0; curr_angle <= targetAngle; curr_angle+=0x00ff){
 8001140:	2300      	movs	r3, #0
 8001142:	83bb      	strh	r3, [r7, #28]
 8001144:	e010      	b.n	8001168 <_ZN14TMC4671_Driver11moveByAngleEs+0xd8>
			setPhiE_ext(curr_angle+startAngle);
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	b29a      	uxth	r2, r3
 800114a:	8bbb      	ldrh	r3, [r7, #28]
 800114c:	4413      	add	r3, r2
 800114e:	b29b      	uxth	r3, r3
 8001150:	b21b      	sxth	r3, r3
 8001152:	4619      	mov	r1, r3
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f001 fa03 	bl	8002560 <_ZN14TMC4671_Driver11setPhiE_extEs>
			HAL_Delay(5);
 800115a:	2005      	movs	r0, #5
 800115c:	f001 fe9c 	bl	8002e98 <HAL_Delay>
		for(int16_t curr_angle = 0; curr_angle <= targetAngle; curr_angle+=0x00ff){
 8001160:	8bbb      	ldrh	r3, [r7, #28]
 8001162:	33ff      	adds	r3, #255	@ 0xff
 8001164:	b29b      	uxth	r3, r3
 8001166:	83bb      	strh	r3, [r7, #28]
 8001168:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	429a      	cmp	r2, r3
 8001170:	dae9      	bge.n	8001146 <_ZN14TMC4671_Driver11moveByAngleEs+0xb6>
 8001172:	e018      	b.n	80011a6 <_ZN14TMC4671_Driver11moveByAngleEs+0x116>
		}
	}
	else {
		for(int16_t curr_angle = 0; curr_angle >= targetAngle; curr_angle-=0x00ff){
 8001174:	2300      	movs	r3, #0
 8001176:	837b      	strh	r3, [r7, #26]
 8001178:	e010      	b.n	800119c <_ZN14TMC4671_Driver11moveByAngleEs+0x10c>
			setPhiE_ext(curr_angle+startAngle);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	b29a      	uxth	r2, r3
 800117e:	8b7b      	ldrh	r3, [r7, #26]
 8001180:	4413      	add	r3, r2
 8001182:	b29b      	uxth	r3, r3
 8001184:	b21b      	sxth	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f001 f9e9 	bl	8002560 <_ZN14TMC4671_Driver11setPhiE_extEs>
			HAL_Delay(5);
 800118e:	2005      	movs	r0, #5
 8001190:	f001 fe82 	bl	8002e98 <HAL_Delay>
		for(int16_t curr_angle = 0; curr_angle >= targetAngle; curr_angle-=0x00ff){
 8001194:	8b7b      	ldrh	r3, [r7, #26]
 8001196:	3bff      	subs	r3, #255	@ 0xff
 8001198:	b29b      	uxth	r3, r3
 800119a:	837b      	strh	r3, [r7, #26]
 800119c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	dde9      	ble.n	800117a <_ZN14TMC4671_Driver11moveByAngleEs+0xea>
		}
	}
	setFluxTorque(0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f001 fa9e 	bl	80026ec <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setPhiE_ext(0);
 80011b0:	2100      	movs	r1, #0
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f001 f9d4 	bl	8002560 <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(lastphie);
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	4619      	mov	r1, r3
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f001 f993 	bl	80024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 80011c2:	7bbb      	ldrb	r3, [r7, #14]
 80011c4:	4619      	mov	r1, r3
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 f954 	bl	8002474 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40768000 	.word	0x40768000

080011d8 <_ZN14TMC4671_Driver16setMoveAngleFlagEbs>:

void TMC4671_Driver::setMoveAngleFlag(bool state, int16_t angle){
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
 80011e4:	4613      	mov	r3, r2
 80011e6:	803b      	strh	r3, [r7, #0]
	this->moveAngle = angle;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	883a      	ldrh	r2, [r7, #0]
 80011ec:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
	this->moveFlag = state;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	78fa      	ldrb	r2, [r7, #3]
 80011f4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_ZN14TMC4671_Driver11periodicJobEv>:

void TMC4671_Driver::periodicJob() {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	if(this->moveFlag){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00b      	beq.n	8001230 <_ZN14TMC4671_Driver11periodicJobEv+0x2c>
		moveFlag = false;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
		moveByAngle(this->moveAngle);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8001226:	b21b      	sxth	r3, r3
 8001228:	4619      	mov	r1, r3
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff30 	bl	8001090 <_ZN14TMC4671_Driver11moveByAngleEs>
	}
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder>:

void TMC4671_Driver::setupEncoder(ABNencoder* abnEncoder_p){
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	this->statusMask.flags.AENC_N = 0;
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	f892 308b 	ldrb.w	r3, [r2, #139]	@ 0x8b
 8001248:	f36f 1386 	bfc	r3, #6, #1
 800124c:	f882 308b 	strb.w	r3, [r2, #139]	@ 0x8b
	this->statusMask.flags.ENC_N = 0;
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	f892 308b 	ldrb.w	r3, [r2, #139]	@ 0x8b
 8001256:	f36f 1304 	bfc	r3, #4, #1
 800125a:	f882 308b 	strb.w	r3, [r2, #139]	@ 0x8b
	setStatusMask(statusMask);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f001 fa69 	bl	800273c <_ZN14TMC4671_Driver13setStatusMaskE11StatusFlags>

	memcpy(&this->encoder, abnEncoder_p, sizeof(this->encoder));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	335c      	adds	r3, #92	@ 0x5c
 800126e:	2216      	movs	r2, #22
 8001270:	6839      	ldr	r1, [r7, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f008 fd56 	bl	8009d24 <memcpy>

	tmc4671_fieldWrite(TMC4671_ABN_APOL_FIELD, abnEncoder_p->apol);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	795b      	ldrb	r3, [r3, #5]
 800127c:	461a      	mov	r2, r3
 800127e:	4b5f      	ldr	r3, [pc, #380]	@ (80013fc <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1c4>)
 8001280:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001284:	f7ff fddb 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_BPOL_FIELD, abnEncoder_p->bpol);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	799b      	ldrb	r3, [r3, #6]
 800128c:	461a      	mov	r2, r3
 800128e:	4b5c      	ldr	r3, [pc, #368]	@ (8001400 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1c8>)
 8001290:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001294:	f7ff fdd3 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_NPOL_FIELD, abnEncoder_p->npol);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	79db      	ldrb	r3, [r3, #7]
 800129c:	461a      	mov	r2, r3
 800129e:	4b59      	ldr	r3, [pc, #356]	@ (8001404 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1cc>)
 80012a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012a4:	f7ff fdcb 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_USE_ABN_AS_N_FIELD, abnEncoder_p->ab_as_n);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	7a5b      	ldrb	r3, [r3, #9]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b56      	ldr	r3, [pc, #344]	@ (8001408 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1d0>)
 80012b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012b4:	f7ff fdc3 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_CLN_FIELD, abnEncoder_p->latch_on_N);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	7a9b      	ldrb	r3, [r3, #10]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b53      	ldr	r3, [pc, #332]	@ (800140c <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1d4>)
 80012c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012c4:	f7ff fdbb 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_DIRECTION_FIELD, abnEncoder_p->rdir);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	7a1b      	ldrb	r3, [r3, #8]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b50      	ldr	r3, [pc, #320]	@ (8001410 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1d8>)
 80012d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012d4:	f7ff fdb3 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_ABN_DECODER_PPR_FIELD, abnEncoder_p->cpr);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	885b      	ldrh	r3, [r3, #2]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b4d      	ldr	r3, [pc, #308]	@ (8001414 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1dc>)
 80012e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012e4:	f7ff fdab 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_ABN_DECODER_PHI_E_OFFSET_FIELD, abnEncoder_p->phiEoffset);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b49      	ldr	r3, [pc, #292]	@ (8001418 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1e0>)
 80012f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012f6:	f7ff fda2 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ABN_DECODER_PHI_M_OFFSET_FIELD, abnEncoder_p->phiMoffset);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001300:	461a      	mov	r2, r3
 8001302:	4b46      	ldr	r3, [pc, #280]	@ (800141c <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1e4>)
 8001304:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001308:	f7ff fd99 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	// Set mechanical angle
	this->encoder.posSelection = PosAndVelSelection::PhiM_abn;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2209      	movs	r2, #9
 8001310:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
	this->encoder.velSelection = PosAndVelSelection::PhiM_abn;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2209      	movs	r2, #9
 8001318:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	tmc4671_fieldWrite(TMC4671_POSITION_SELECTION_FIELD, (uint8_t)this->encoder.posSelection);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 8001322:	461a      	mov	r2, r3
 8001324:	4b3e      	ldr	r3, [pc, #248]	@ (8001420 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1e8>)
 8001326:	e893 0003 	ldmia.w	r3, {r0, r1}
 800132a:	f7ff fd88 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_VELOCITY_SELECTION_FIELD, (uint8_t)this->encoder.velSelection);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001334:	461a      	mov	r2, r3
 8001336:	4b3b      	ldr	r3, [pc, #236]	@ (8001424 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1ec>)
 8001338:	e893 0003 	ldmia.w	r3, {r0, r1}
 800133c:	f7ff fd7f 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_VELOCITY_METER_SELECTION_FIELD, 0); // 0: default velocity meter (fixed frequency sampling)
 8001340:	4b39      	ldr	r3, [pc, #228]	@ (8001428 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1f0>)
 8001342:	2200      	movs	r2, #0
 8001344:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001348:	f7ff fd79 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>


	estimateABNparams();
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f86f 	bl	8001430 <_ZN14TMC4671_Driver17estimateABNparamsEv>

	setPhiE_ext(tmc4671_readRegister(TMC4671_PHI_E));
 8001352:	2053      	movs	r0, #83	@ 0x53
 8001354:	f7ff fcb4 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8001358:	4603      	mov	r3, r0
 800135a:	b21b      	sxth	r3, r3
 800135c:	4619      	mov	r1, r3
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f001 f8fe 	bl	8002560 <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(PhiE::ext);
 8001364:	2101      	movs	r1, #1
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f001 f8be 	bl	80024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>

	// Align encoder
	powerInitEncoder(this->initPower);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 fb5d 	bl	8001a34 <_ZN14TMC4671_Driver16powerInitEncoderEs>

	uint8_t enc_retry = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]
	while(!encoder.isAligned && enc_retry < 3){
 800137e:	e005      	b.n	800138c <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x154>
		checkEncoder();
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f955 	bl	8001630 <_ZN14TMC4671_Driver12checkEncoderEv>
		enc_retry++;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	3301      	adds	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
	while(!encoder.isAligned && enc_retry < 3){
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8001392:	f083 0301 	eor.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x16a>
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d9ee      	bls.n	8001380 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x148>
	}
	if(!encoder.isAligned) {
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d009      	beq.n	80013c6 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x18e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2102      	movs	r1, #2
 80013b6:	481d      	ldr	r0, [pc, #116]	@ (800142c <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1f4>)
 80013b8:	f002 f840 	bl	800343c <HAL_GPIO_WritePin>
		setDriverState(DRIVER_DISABLE);
 80013bc:	2100      	movs	r1, #0
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 fd98 	bl	8001ef4 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>
		return;
 80013c4:	e017      	b.n	80013f6 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1be>
	}

	if(this->encoderType == EncoderType::abn){
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d104      	bne.n	80013da <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1a2>
		setPhiEType(PhiE::abn);
 80013d0:	2103      	movs	r1, #3
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f001 f888 	bl	80024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
 80013d8:	e00d      	b.n	80013f6 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1be>
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d004      	beq.n	80013ee <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1b6>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d103      	bne.n	80013f6 <_ZN14TMC4671_Driver12setupEncoderEP10ABNencoder+0x1be>
		setPhiEType(PhiE::aenc);
 80013ee:	2106      	movs	r1, #6
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f001 f879 	bl	80024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
//	HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
//	HAL_Delay(1000);
//	else if(usingExternalEncoder()){
//		setPhiEType(PhiE::extEncoder);
//	}
}
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	08009e70 	.word	0x08009e70
 8001400:	08009e78 	.word	0x08009e78
 8001404:	08009e80 	.word	0x08009e80
 8001408:	08009e88 	.word	0x08009e88
 800140c:	08009e90 	.word	0x08009e90
 8001410:	08009e98 	.word	0x08009e98
 8001414:	08009ea0 	.word	0x08009ea0
 8001418:	08009eb0 	.word	0x08009eb0
 800141c:	08009ea8 	.word	0x08009ea8
 8001420:	08009f70 	.word	0x08009f70
 8001424:	08009f60 	.word	0x08009f60
 8001428:	08009f68 	.word	0x08009f68
 800142c:	40021000 	.word	0x40021000

08001430 <_ZN14TMC4671_Driver17estimateABNparamsEv>:
/**
 * Moves the rotor and estimates polarity and direction of the encoder
 * Polarity is found by measuring the n pulse.
 * If polarity was found to be reversed during the test direction will be reversed again to account for that
 */
void TMC4671_Driver::estimateABNparams(){
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	int32_t pos = getActualPosition();
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f001 f905 	bl	8002648 <_ZN14TMC4671_Driver17getActualPositionEv>
 800143e:	6138      	str	r0, [r7, #16]
	setActualPosition(0);
 8001440:	2100      	movs	r1, #0
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f001 f8ee 	bl	8002624 <_ZN14TMC4671_Driver17setActualPositionEl>
	PhiE lastphie = getPhiEType();
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f001 f86f 	bl	800252c <_ZN14TMC4671_Driver11getPhiETypeEv>
 800144e:	4603      	mov	r3, r0
 8001450:	73fb      	strb	r3, [r7, #15]
	MotionMode lastmode = getMotionMode();
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f001 f830 	bl	80024b8 <_ZN14TMC4671_Driver13getMotionModeEv>
 8001458:	4603      	mov	r3, r0
 800145a:	73bb      	strb	r3, [r7, #14]
	tmc4671_fieldWrite(TMC4671_ABN_DIRECTION_FIELD, 0); // Set direction positive (0)
 800145c:	4b70      	ldr	r3, [pc, #448]	@ (8001620 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1f0>)
 800145e:	2200      	movs	r2, #0
 8001460:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001464:	f7ff fceb 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	setPhiE_ext(0); // Electrical angle phi_e_ext for external writing into this register
 8001468:	2100      	movs	r1, #0
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f001 f878 	bl	8002560 <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(PhiE::ext);
 8001470:	2101      	movs	r1, #1
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f001 f838 	bl	80024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setFluxTorque(0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f001 f935 	bl	80026ec <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setMotionMode(MotionMode::torque);
 8001482:	2101      	movs	r1, #1
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 fff5 	bl	8002474 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>

	for(int16_t flux = 0; flux <= initPower; flux+=20){
 800148a:	2300      	movs	r3, #0
 800148c:	83fb      	strh	r3, [r7, #30]
 800148e:	e00d      	b.n	80014ac <_ZN14TMC4671_Driver17estimateABNparamsEv+0x7c>
		setFluxTorque(flux, 0);
 8001490:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f001 f927 	bl	80026ec <_ZN14TMC4671_Driver13setFluxTorqueEss>
		HAL_Delay(5);
 800149e:	2005      	movs	r0, #5
 80014a0:	f001 fcfa 	bl	8002e98 <HAL_Delay>
	for(int16_t flux = 0; flux <= initPower; flux+=20){
 80014a4:	8bfb      	ldrh	r3, [r7, #30]
 80014a6:	3314      	adds	r3, #20
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	83fb      	strh	r3, [r7, #30]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 80014b2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	ddea      	ble.n	8001490 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x60>
	}

	int16_t phiE_abn = tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_E_FIELD);
 80014ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001624 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1f4>)
 80014bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014c0:	f7ff fc8d 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 80014c4:	4603      	mov	r3, r0
 80014c6:	83bb      	strh	r3, [r7, #28]
	int16_t phiE_abn_old = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	81bb      	strh	r3, [r7, #12]
	int16_t rcount = 0, c = 0; // Count how often direction was in reverse
 80014cc:	2300      	movs	r3, #0
 80014ce:	837b      	strh	r3, [r7, #26]
 80014d0:	2300      	movs	r3, #0
 80014d2:	833b      	strh	r3, [r7, #24]
	uint16_t highcount = 0; // Count high state of n pulse for polarity estimation
 80014d4:	2300      	movs	r3, #0
 80014d6:	82fb      	strh	r3, [r7, #22]

	// Rotate a bit
	for(int16_t p = 0;p<0x0fff;p+=0x2f){
 80014d8:	2300      	movs	r3, #0
 80014da:	82bb      	strh	r3, [r7, #20]
 80014dc:	e037      	b.n	800154e <_ZN14TMC4671_Driver17estimateABNparamsEv+0x11e>
		setPhiE_ext(p);
 80014de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f001 f83b 	bl	8002560 <_ZN14TMC4671_Driver11setPhiE_extEs>
		HAL_Delay(10);
 80014ea:	200a      	movs	r0, #10
 80014ec:	f001 fcd4 	bl	8002e98 <HAL_Delay>
		c++;
 80014f0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	833b      	strh	r3, [r7, #24]
		phiE_abn_old = phiE_abn;
 80014fc:	8bbb      	ldrh	r3, [r7, #28]
 80014fe:	81bb      	strh	r3, [r7, #12]
		phiE_abn = tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_E_FIELD);
 8001500:	4b48      	ldr	r3, [pc, #288]	@ (8001624 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1f4>)
 8001502:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001506:	f7ff fc6a 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 800150a:	4603      	mov	r3, r0
 800150c:	83bb      	strh	r3, [r7, #28]

		// Count how often the new position was lower than the previous indicating a reversed encoder or motor direction
		if(phiE_abn < phiE_abn_old){
 800150e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001512:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001516:	429a      	cmp	r2, r3
 8001518:	da05      	bge.n	8001526 <_ZN14TMC4671_Driver17estimateABNparamsEv+0xf6>
			rcount++;
 800151a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800151e:	b29b      	uxth	r3, r3
 8001520:	3301      	adds	r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	837b      	strh	r3, [r7, #26]
		}

		if(tmc4671_fieldRead(TMC4671_N_OF_ABN_RAW_FIELD)){
 8001526:	4b40      	ldr	r3, [pc, #256]	@ (8001628 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1f8>)
 8001528:	e893 0003 	ldmia.w	r3, {r0, r1}
 800152c:	f7ff fc57 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	bf14      	ite	ne
 8001536:	2301      	movne	r3, #1
 8001538:	2300      	moveq	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <_ZN14TMC4671_Driver17estimateABNparamsEv+0x116>
			highcount++;
 8001540:	8afb      	ldrh	r3, [r7, #22]
 8001542:	3301      	adds	r3, #1
 8001544:	82fb      	strh	r3, [r7, #22]
	for(int16_t p = 0;p<0x0fff;p+=0x2f){
 8001546:	8abb      	ldrh	r3, [r7, #20]
 8001548:	332f      	adds	r3, #47	@ 0x2f
 800154a:	b29b      	uxth	r3, r3
 800154c:	82bb      	strh	r3, [r7, #20]
 800154e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001552:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001556:	4293      	cmp	r3, r2
 8001558:	ddc1      	ble.n	80014de <_ZN14TMC4671_Driver17estimateABNparamsEv+0xae>
		}
	}
	setActualPosition(pos + getActualPosition());
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f001 f874 	bl	8002648 <_ZN14TMC4671_Driver17getActualPositionEv>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4413      	add	r3, r2
 8001566:	4619      	mov	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f001 f85b 	bl	8002624 <_ZN14TMC4671_Driver17setActualPositionEl>

	setFluxTorque(0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f001 f8ba 	bl	80026ec <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setPhiEType(lastphie);
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	4619      	mov	r1, r3
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 ffb3 	bl	80024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 8001582:	7bbb      	ldrb	r3, [r7, #14]
 8001584:	4619      	mov	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 ff74 	bl	8002474 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>

	bool npol = highcount > c/2;
 800158c:	8afa      	ldrh	r2, [r7, #22]
 800158e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001592:	0fd9      	lsrs	r1, r3, #31
 8001594:	440b      	add	r3, r1
 8001596:	105b      	asrs	r3, r3, #1
 8001598:	b21b      	sxth	r3, r3
 800159a:	429a      	cmp	r2, r3
 800159c:	bfcc      	ite	gt
 800159e:	2301      	movgt	r3, #1
 80015a0:	2300      	movle	r3, #0
 80015a2:	72fb      	strb	r3, [r7, #11]
	encoder.rdir = rcount > c/2;
 80015a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015a8:	0fda      	lsrs	r2, r3, #31
 80015aa:	4413      	add	r3, r2
 80015ac:	105b      	asrs	r3, r3, #1
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	bfcc      	ite	gt
 80015b8:	2301      	movgt	r3, #1
 80015ba:	2300      	movle	r3, #0
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

	if(npol != encoder.npol){ // Invert dir if polarity was reversed TODO correct? likely wrong at the moment
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 80015ca:	7afa      	ldrb	r2, [r7, #11]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d016      	beq.n	80015fe <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1ce>
		encoder.rdir = !encoder.rdir;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80015d6:	f083 0301 	eor.w	r3, r3, #1
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2102      	movs	r1, #2
 80015e6:	4811      	ldr	r0, [pc, #68]	@ (800162c <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1fc>)
 80015e8:	f001 ff28 	bl	800343c <HAL_GPIO_WritePin>
		HAL_Delay(300);
 80015ec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015f0:	f001 fc52 	bl	8002e98 <HAL_Delay>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2102      	movs	r1, #2
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <_ZN14TMC4671_Driver17estimateABNparamsEv+0x1fc>)
 80015fa:	f001 ff1f 	bl	800343c <HAL_GPIO_WritePin>
	}


	encoder.apol = npol;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7afa      	ldrb	r2, [r7, #11]
 8001602:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
	encoder.bpol = npol;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7afa      	ldrb	r2, [r7, #11]
 800160a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	encoder.npol = npol;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7afa      	ldrb	r2, [r7, #11]
 8001612:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63

//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
//	HAL_Delay(200);
//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	08009e98 	.word	0x08009e98
 8001624:	08009ec0 	.word	0x08009ec0
 8001628:	08009ff0 	.word	0x08009ff0
 800162c:	40021000 	.word	0x40021000

08001630 <_ZN14TMC4671_Driver12checkEncoderEv>:

/**
 * Steps the motor a few times to check if the encoder follows correctly
 */
bool TMC4671_Driver::checkEncoder(){
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	@ 0x30
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	if(this->motorType != MotorType::STEPPER && this->motorType != MotorType::BLDC){
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800163e:	2b02      	cmp	r3, #2
 8001640:	d006      	beq.n	8001650 <_ZN14TMC4671_Driver12checkEncoderEv+0x20>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001648:	2b03      	cmp	r3, #3
 800164a:	d001      	beq.n	8001650 <_ZN14TMC4671_Driver12checkEncoderEv+0x20>
		// If not stepper or bldc return
		return true;
 800164c:	2301      	movs	r3, #1
 800164e:	e1e8      	b.n	8001a22 <_ZN14TMC4671_Driver12checkEncoderEv+0x3f2>
	}

	const uint16_t maxcount = 80; // Allowed reversals
 8001650:	2350      	movs	r3, #80	@ 0x50
 8001652:	82fb      	strh	r3, [r7, #22]
	const uint16_t maxfail = 10; // Allowed fails
 8001654:	230a      	movs	r3, #10
 8001656:	82bb      	strh	r3, [r7, #20]

	// Start angle offsets all angles later so there is no jump if angle is already properly aligned
	const int16_t startAngle = getPhiE_Enc();
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 ff95 	bl	8002588 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 800165e:	4603      	mov	r3, r0
 8001660:	827b      	strh	r3, [r7, #18]
	const int16_t targetAngle = 0x3FFF;
 8001662:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8001666:	823b      	strh	r3, [r7, #16]

	bool result = true;
 8001668:	2301      	movs	r3, #1
 800166a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	PhiE lastphie = getPhiEType();
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 ff5c 	bl	800252c <_ZN14TMC4671_Driver11getPhiETypeEv>
 8001674:	4603      	mov	r3, r0
 8001676:	73fb      	strb	r3, [r7, #15]
	MotionMode lastmode = getMotionMode();
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 ff1d 	bl	80024b8 <_ZN14TMC4671_Driver13getMotionModeEv>
 800167e:	4603      	mov	r3, r0
 8001680:	73bb      	strb	r3, [r7, #14]

//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
//	HAL_Delay(200);
//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);

	setFluxTorque(0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f001 f830 	bl	80026ec <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setPhiEType(PhiE::ext);
 800168c:	2101      	movs	r1, #1
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 ff2a 	bl	80024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setPhiE_ext(startAngle);
 8001694:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001698:	4619      	mov	r1, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 ff60 	bl	8002560 <_ZN14TMC4671_Driver11setPhiE_extEs>

	// Ramp up flux
	for(int16_t flux = 0; flux <= 2*this->initPower/3; flux+=20){
 80016a0:	2300      	movs	r3, #0
 80016a2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80016a4:	e00d      	b.n	80016c2 <_ZN14TMC4671_Driver12checkEncoderEv+0x92>
		setFluxTorque(flux, 0);
 80016a6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80016aa:	2200      	movs	r2, #0
 80016ac:	4619      	mov	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f001 f81c 	bl	80026ec <_ZN14TMC4671_Driver13setFluxTorqueEss>
		HAL_Delay(2);
 80016b4:	2002      	movs	r0, #2
 80016b6:	f001 fbef 	bl	8002e98 <HAL_Delay>
	for(int16_t flux = 0; flux <= 2*this->initPower/3; flux+=20){
 80016ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80016bc:	3314      	adds	r3, #20
 80016be:	b29b      	uxth	r3, r3
 80016c0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80016c2:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	49ab      	ldr	r1, [pc, #684]	@ (800197c <_ZN14TMC4671_Driver12checkEncoderEv+0x34c>)
 80016d0:	fb81 0103 	smull	r0, r1, r1, r3
 80016d4:	17db      	asrs	r3, r3, #31
 80016d6:	1acb      	subs	r3, r1, r3
 80016d8:	429a      	cmp	r2, r3
 80016da:	dde4      	ble.n	80016a6 <_ZN14TMC4671_Driver12checkEncoderEv+0x76>
	}

	//Forward
	int16_t phiE_enc = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	81bb      	strh	r3, [r7, #12]
	uint16_t failcount = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	857b      	strh	r3, [r7, #42]	@ 0x2a
	int16_t revCount = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	853b      	strh	r3, [r7, #40]	@ 0x28
	for(int16_t angle = 0; angle<targetAngle; angle+=0x00ff){
 80016e8:	2300      	movs	r3, #0
 80016ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80016ec:	e088      	b.n	8001800 <_ZN14TMC4671_Driver12checkEncoderEv+0x1d0>
		uint16_t c = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		setPhiE_ext(angle+startAngle);
 80016f2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80016f4:	8a7b      	ldrh	r3, [r7, #18]
 80016f6:	4413      	add	r3, r2
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	4619      	mov	r1, r3
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 ff2e 	bl	8002560 <_ZN14TMC4671_Driver11setPhiE_extEs>
		HAL_Delay(5);
 8001704:	2005      	movs	r0, #5
 8001706:	f001 fbc7 	bl	8002e98 <HAL_Delay>

		phiE_enc = getPhiE_Enc() - startAngle;
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 ff3c 	bl	8002588 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	8a7b      	ldrh	r3, [r7, #18]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	b29b      	uxth	r3, r3
 800171a:	81bb      	strh	r3, [r7, #12]
		int16_t err = abs(phiE_enc - angle);
 800171c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001720:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	bfb8      	it	lt
 800172a:	425b      	neglt	r3, r3
 800172c:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t nErr = abs(phiE_enc + angle);
 800172e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001732:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001736:	4413      	add	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	bfb8      	it	lt
 800173c:	425b      	neglt	r3, r3
 800173e:	843b      	strh	r3, [r7, #32]

		// Wait more until encoder settles a bit
		while(err > 2500 && nErr > 2500 && c++ < maxcount){
 8001740:	e01d      	b.n	800177e <_ZN14TMC4671_Driver12checkEncoderEv+0x14e>
			phiE_enc = getPhiE_Enc() - startAngle;
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 ff20 	bl	8002588 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8001748:	4603      	mov	r3, r0
 800174a:	b29a      	uxth	r2, r3
 800174c:	8a7b      	ldrh	r3, [r7, #18]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	b29b      	uxth	r3, r3
 8001752:	81bb      	strh	r3, [r7, #12]
			err = abs(phiE_enc - angle);
 8001754:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001758:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	bfb8      	it	lt
 8001762:	425b      	neglt	r3, r3
 8001764:	847b      	strh	r3, [r7, #34]	@ 0x22
			nErr = abs(angle - phiE_enc);
 8001766:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800176a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	bfb8      	it	lt
 8001774:	425b      	neglt	r3, r3
 8001776:	843b      	strh	r3, [r7, #32]
			HAL_Delay(10);
 8001778:	200a      	movs	r0, #10
 800177a:	f001 fb8d 	bl	8002e98 <HAL_Delay>
		while(err > 2500 && nErr > 2500 && c++ < maxcount){
 800177e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001782:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001786:	4293      	cmp	r3, r2
 8001788:	dd0c      	ble.n	80017a4 <_ZN14TMC4671_Driver12checkEncoderEv+0x174>
 800178a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800178e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001792:	4293      	cmp	r3, r2
 8001794:	dd06      	ble.n	80017a4 <_ZN14TMC4671_Driver12checkEncoderEv+0x174>
 8001796:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800179c:	2b4f      	cmp	r3, #79	@ 0x4f
 800179e:	d801      	bhi.n	80017a4 <_ZN14TMC4671_Driver12checkEncoderEv+0x174>
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <_ZN14TMC4671_Driver12checkEncoderEv+0x176>
 80017a4:	2300      	movs	r3, #0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1cb      	bne.n	8001742 <_ZN14TMC4671_Driver12checkEncoderEv+0x112>
		}

		if(err > nErr){
 80017aa:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80017ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dd05      	ble.n	80017c2 <_ZN14TMC4671_Driver12checkEncoderEv+0x192>
			revCount++;
 80017b6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3301      	adds	r3, #1
 80017be:	b29b      	uxth	r3, r3
 80017c0:	853b      	strh	r3, [r7, #40]	@ 0x28
		}

		if(c >= maxcount){
 80017c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017c4:	2b4f      	cmp	r3, #79	@ 0x4f
 80017c6:	d917      	bls.n	80017f8 <_ZN14TMC4671_Driver12checkEncoderEv+0x1c8>
			failcount++;
 80017c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80017ca:	3301      	adds	r3, #1
 80017cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
			if(failcount > maxfail){
 80017ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80017d0:	2b0a      	cmp	r3, #10
 80017d2:	d911      	bls.n	80017f8 <_ZN14TMC4671_Driver12checkEncoderEv+0x1c8>
				result = false;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80017da:	2201      	movs	r2, #1
 80017dc:	2102      	movs	r1, #2
 80017de:	4868      	ldr	r0, [pc, #416]	@ (8001980 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 80017e0:	f001 fe2c 	bl	800343c <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80017e4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80017e8:	f001 fb56 	bl	8002e98 <HAL_Delay>
				HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2102      	movs	r1, #2
 80017f0:	4863      	ldr	r0, [pc, #396]	@ (8001980 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 80017f2:	f001 fe23 	bl	800343c <HAL_GPIO_WritePin>
				break;
 80017f6:	e00a      	b.n	800180e <_ZN14TMC4671_Driver12checkEncoderEv+0x1de>
	for(int16_t angle = 0; angle<targetAngle; angle+=0x00ff){
 80017f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017fa:	33ff      	adds	r3, #255	@ 0xff
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001800:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001804:	f643 72fe 	movw	r2, #16382	@ 0x3ffe
 8001808:	4293      	cmp	r3, r2
 800180a:	f77f af70 	ble.w	80016ee <_ZN14TMC4671_Driver12checkEncoderEv+0xbe>
	 * Encoder connection wrong
	 * Wrong encoder selection
	 * No motor movement
	 * No encoder power
	 */
	if(startAngle == getPhiE_Enc()){
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 feba 	bl	8002588 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800181c:	4293      	cmp	r3, r2
 800181e:	bf0c      	ite	eq
 8001820:	2301      	moveq	r3, #1
 8001822:	2300      	movne	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d010      	beq.n	800184c <_ZN14TMC4671_Driver12checkEncoderEv+0x21c>
		// TODO: error handler
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	2102      	movs	r1, #2
 800182e:	4854      	ldr	r0, [pc, #336]	@ (8001980 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8001830:	f001 fe04 	bl	800343c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001834:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001838:	f001 fb2e 	bl	8002e98 <HAL_Delay>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2102      	movs	r1, #2
 8001840:	484f      	ldr	r0, [pc, #316]	@ (8001980 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8001842:	f001 fdfb 	bl	800343c <HAL_GPIO_WritePin>
		result = false;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	// Backward

	if(result){ // Only if not already failed
 800184c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80a0 	beq.w	8001996 <_ZN14TMC4671_Driver12checkEncoderEv+0x366>
		for(int16_t angle = targetAngle;angle>0;angle -= 0x00ff){
 8001856:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800185a:	83fb      	strh	r3, [r7, #30]
 800185c:	e096      	b.n	800198c <_ZN14TMC4671_Driver12checkEncoderEv+0x35c>
			uint16_t c = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	83bb      	strh	r3, [r7, #28]
			setPhiE_ext(angle+startAngle);
 8001862:	8bfa      	ldrh	r2, [r7, #30]
 8001864:	8a7b      	ldrh	r3, [r7, #18]
 8001866:	4413      	add	r3, r2
 8001868:	b29b      	uxth	r3, r3
 800186a:	b21b      	sxth	r3, r3
 800186c:	4619      	mov	r1, r3
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fe76 	bl	8002560 <_ZN14TMC4671_Driver11setPhiE_extEs>
			HAL_Delay(5);
 8001874:	2005      	movs	r0, #5
 8001876:	f001 fb0f 	bl	8002e98 <HAL_Delay>

			phiE_enc = getPhiE_Enc() - startAngle;
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 fe84 	bl	8002588 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8001880:	4603      	mov	r3, r0
 8001882:	b29a      	uxth	r2, r3
 8001884:	8a7b      	ldrh	r3, [r7, #18]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	b29b      	uxth	r3, r3
 800188a:	81bb      	strh	r3, [r7, #12]
			int16_t err = abs(phiE_enc - angle);
 800188c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001890:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	bfb8      	it	lt
 800189a:	425b      	neglt	r3, r3
 800189c:	837b      	strh	r3, [r7, #26]
			int16_t nErr = abs(phiE_enc + angle);
 800189e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018a6:	4413      	add	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bfb8      	it	lt
 80018ac:	425b      	neglt	r3, r3
 80018ae:	833b      	strh	r3, [r7, #24]

			// Wait more
			while(err > 2500 && nErr > 2500 && c++ < maxcount){
 80018b0:	e01d      	b.n	80018ee <_ZN14TMC4671_Driver12checkEncoderEv+0x2be>
				phiE_enc = getPhiE_Enc() - startAngle;
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 fe68 	bl	8002588 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 80018b8:	4603      	mov	r3, r0
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	8a7b      	ldrh	r3, [r7, #18]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	81bb      	strh	r3, [r7, #12]
				err = abs(phiE_enc - angle);
 80018c4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bfb8      	it	lt
 80018d2:	425b      	neglt	r3, r3
 80018d4:	837b      	strh	r3, [r7, #26]
				nErr = abs(angle - phiE_enc);
 80018d6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80018da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	bfb8      	it	lt
 80018e4:	425b      	neglt	r3, r3
 80018e6:	833b      	strh	r3, [r7, #24]
				HAL_Delay(10);
 80018e8:	200a      	movs	r0, #10
 80018ea:	f001 fad5 	bl	8002e98 <HAL_Delay>
			while(err > 2500 && nErr > 2500 && c++ < maxcount){
 80018ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018f2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80018f6:	4293      	cmp	r3, r2
 80018f8:	dd0c      	ble.n	8001914 <_ZN14TMC4671_Driver12checkEncoderEv+0x2e4>
 80018fa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80018fe:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001902:	4293      	cmp	r3, r2
 8001904:	dd06      	ble.n	8001914 <_ZN14TMC4671_Driver12checkEncoderEv+0x2e4>
 8001906:	8bbb      	ldrh	r3, [r7, #28]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	83ba      	strh	r2, [r7, #28]
 800190c:	2b4f      	cmp	r3, #79	@ 0x4f
 800190e:	d801      	bhi.n	8001914 <_ZN14TMC4671_Driver12checkEncoderEv+0x2e4>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <_ZN14TMC4671_Driver12checkEncoderEv+0x2e6>
 8001914:	2300      	movs	r3, #0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1cb      	bne.n	80018b2 <_ZN14TMC4671_Driver12checkEncoderEv+0x282>
			}

			if(err > nErr){
 800191a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800191e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001922:	429a      	cmp	r2, r3
 8001924:	dd05      	ble.n	8001932 <_ZN14TMC4671_Driver12checkEncoderEv+0x302>
				revCount++;
 8001926:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800192a:	b29b      	uxth	r3, r3
 800192c:	3301      	adds	r3, #1
 800192e:	b29b      	uxth	r3, r3
 8001930:	853b      	strh	r3, [r7, #40]	@ 0x28
			}

			if(c >= maxcount){
 8001932:	8bbb      	ldrh	r3, [r7, #28]
 8001934:	2b4f      	cmp	r3, #79	@ 0x4f
 8001936:	d925      	bls.n	8001984 <_ZN14TMC4671_Driver12checkEncoderEv+0x354>
				failcount++;
 8001938:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800193a:	3301      	adds	r3, #1
 800193c:	857b      	strh	r3, [r7, #42]	@ 0x2a
				if(failcount > maxfail){
 800193e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001940:	2b0a      	cmp	r3, #10
 8001942:	d91f      	bls.n	8001984 <_ZN14TMC4671_Driver12checkEncoderEv+0x354>
					result = false;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 800194a:	2201      	movs	r2, #1
 800194c:	2101      	movs	r1, #1
 800194e:	480c      	ldr	r0, [pc, #48]	@ (8001980 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8001950:	f001 fd74 	bl	800343c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	2102      	movs	r1, #2
 8001958:	4809      	ldr	r0, [pc, #36]	@ (8001980 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 800195a:	f001 fd6f 	bl	800343c <HAL_GPIO_WritePin>
					HAL_Delay(150);
 800195e:	2096      	movs	r0, #150	@ 0x96
 8001960:	f001 fa9a 	bl	8002e98 <HAL_Delay>
					HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	2101      	movs	r1, #1
 8001968:	4805      	ldr	r0, [pc, #20]	@ (8001980 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 800196a:	f001 fd67 	bl	800343c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 800196e:	2200      	movs	r2, #0
 8001970:	2102      	movs	r1, #2
 8001972:	4803      	ldr	r0, [pc, #12]	@ (8001980 <_ZN14TMC4671_Driver12checkEncoderEv+0x350>)
 8001974:	f001 fd62 	bl	800343c <HAL_GPIO_WritePin>
					break;
 8001978:	e00d      	b.n	8001996 <_ZN14TMC4671_Driver12checkEncoderEv+0x366>
 800197a:	bf00      	nop
 800197c:	55555556 	.word	0x55555556
 8001980:	40021000 	.word	0x40021000
		for(int16_t angle = targetAngle;angle>0;angle -= 0x00ff){
 8001984:	8bfb      	ldrh	r3, [r7, #30]
 8001986:	3bff      	subs	r3, #255	@ 0xff
 8001988:	b29b      	uxth	r3, r3
 800198a:	83fb      	strh	r3, [r7, #30]
 800198c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f73f af64 	bgt.w	800185e <_ZN14TMC4671_Driver12checkEncoderEv+0x22e>
				}
			}
		}
	}

	if(revCount > maxcount){ // Encoder seems reversed
 8001996:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800199a:	2b50      	cmp	r3, #80	@ 0x50
 800199c:	dd24      	ble.n	80019e8 <_ZN14TMC4671_Driver12checkEncoderEv+0x3b8>
		// reverse encoder
		if(this->encoderType == EncoderType::abn){
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d11f      	bne.n	80019e8 <_ZN14TMC4671_Driver12checkEncoderEv+0x3b8>
			this->encoder.rdir = !this->encoder.rdir;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80019ae:	f083 0301 	eor.w	r3, r3, #1
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
//			this->encoder.apol = !this->encoder.apol;
//			this->encoder.bpol = !this->encoder.bpol;
//			this->encoder.npol = !this->encoder.npol;
			HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80019ba:	2201      	movs	r2, #1
 80019bc:	2102      	movs	r1, #2
 80019be:	481b      	ldr	r0, [pc, #108]	@ (8001a2c <_ZN14TMC4671_Driver12checkEncoderEv+0x3fc>)
 80019c0:	f001 fd3c 	bl	800343c <HAL_GPIO_WritePin>
			HAL_Delay(300);
 80019c4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019c8:	f001 fa66 	bl	8002e98 <HAL_Delay>
			HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2102      	movs	r1, #2
 80019d0:	4816      	ldr	r0, [pc, #88]	@ (8001a2c <_ZN14TMC4671_Driver12checkEncoderEv+0x3fc>)
 80019d2:	f001 fd33 	bl	800343c <HAL_GPIO_WritePin>
			tmc4671_fieldWrite(TMC4671_ABN_DIRECTION_FIELD, this->encoder.rdir);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80019dc:	461a      	mov	r2, r3
 80019de:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <_ZN14TMC4671_Driver12checkEncoderEv+0x400>)
 80019e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019e4:	f7ff fa2b 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
		else if(this->encoderType == EncoderType::ext){
//			this->encoderReversed = !this->encoderReversed;
		}
	}

	setFluxTorque(0, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 fe7d 	bl	80026ec <_ZN14TMC4671_Driver13setFluxTorqueEss>
	setPhiE_ext(0);
 80019f2:	2100      	movs	r1, #0
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fdb3 	bl	8002560 <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(lastphie);
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	4619      	mov	r1, r3
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fd72 	bl	80024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 8001a04:	7bbb      	ldrb	r3, [r7, #14]
 8001a06:	4619      	mov	r1, r3
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fd33 	bl	8002474 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>

	if(result){
 8001a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <_ZN14TMC4671_Driver12checkEncoderEv+0x3ee>
		encoder.isAligned = true;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
	}

	return result;
 8001a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3730      	adds	r7, #48	@ 0x30
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	08009e98 	.word	0x08009e98

08001a34 <_ZN14TMC4671_Driver16powerInitEncoderEs>:
/**
 * Aligns ABN encoders by forcing an angle with high current and calculating the offset
 * Will start at the current phiE to minimize any extra movements (useful if motor was turned in openloop mode before already)
 * @param power Maximum current reached during flux ramp
 */
void TMC4671_Driver::powerInitEncoder(int16_t power){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
	// This aligning technique is only for stepper and bldc motors
	if(motorType != MotorType::STEPPER && motorType != MotorType::BLDC){
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d005      	beq.n	8001a56 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x22>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	f040 80f3 	bne.w	8001c3c <_ZN14TMC4671_Driver16powerInitEncoderEs+0x208>
		return;
	}

	PhiE lastphie = getPhiEType();
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fd68 	bl	800252c <_ZN14TMC4671_Driver11getPhiETypeEv>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	74fb      	strb	r3, [r7, #19]
	MotionMode lastmode = getMotionMode();
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fd29 	bl	80024b8 <_ZN14TMC4671_Driver13getMotionModeEv>
 8001a66:	4603      	mov	r3, r0
 8001a68:	74bb      	strb	r3, [r7, #18]
	setFluxTorque(0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 fe3c 	bl	80026ec <_ZN14TMC4671_Driver13setFluxTorqueEss>

	RegisterField phiEoffsetReg = TMC4671_ABN_DECODER_PHI_E_OFFSET_FIELD;
 8001a74:	4a73      	ldr	r2, [pc, #460]	@ (8001c44 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x210>)
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a7e:	e883 0003 	stmia.w	r3, {r0, r1}

	if(this->encoderType == EncoderType::abn){
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d10b      	bne.n	8001aa4 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x70>
		phiEoffsetReg = TMC4671_ABN_DECODER_PHI_E_OFFSET_FIELD;
 8001a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c48 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x214>)
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a96:	e883 0003 	stmia.w	r3, {r0, r1}
		zeroAbnUsingPhiM();
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f8d9 	bl	8001c54 <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb>
 8001aa2:	e018      	b.n	8001ad6 <_ZN14TMC4671_Driver16powerInitEncoderEs+0xa2>
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d004      	beq.n	8001ab8 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x84>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d10e      	bne.n	8001ad6 <_ZN14TMC4671_Driver16powerInitEncoderEs+0xa2>
		tmc4671_writeRegister(TMC4671_AENC_DECODER_COUNT, 0); //Zero encoder
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2041      	movs	r0, #65	@ 0x41
 8001abc:	f7ff f934 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
		tmc4671_writeRegister(TMC4671_AENC_DECODER_POSITION, 0); //Zero encoder
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2047      	movs	r0, #71	@ 0x47
 8001ac4:	f7ff f930 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
		phiEoffsetReg = TMC4671_AENC_DECODER_PHI_E_OFFSET_FIELD;
 8001ac8:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <_ZN14TMC4671_Driver16powerInitEncoderEs+0x218>)
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad2:	e883 0003 	stmia.w	r3, {r0, r1}
//	}
//	else{
//		return; // Not relevant
//	}

	int16_t phiEpos = getPhiE(); // starts at current encoder position
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fd96 	bl	8002608 <_ZN14TMC4671_Driver7getPhiEEv>
 8001adc:	4603      	mov	r3, r0
 8001ade:	823b      	strh	r3, [r7, #16]
	tmc4671_fieldWrite(phiEoffsetReg, 0); // Set phiE offset to zero
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001aea:	f7ff f9a8 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	setPhiE_ext(phiEpos);
 8001aee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001af2:	4619      	mov	r1, r3
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fd33 	bl	8002560 <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(PhiE::ext);
 8001afa:	2101      	movs	r1, #1
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fcf3 	bl	80024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>

	// Ramp up flux
	for(int16_t flux = 0; flux <= power; flux+=10){
 8001b02:	2300      	movs	r3, #0
 8001b04:	83fb      	strh	r3, [r7, #30]
 8001b06:	e00d      	b.n	8001b24 <_ZN14TMC4671_Driver16powerInitEncoderEs+0xf0>
		setFluxTorque(flux, 0);
 8001b08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fdeb 	bl	80026ec <_ZN14TMC4671_Driver13setFluxTorqueEss>
		HAL_Delay(3);
 8001b16:	2003      	movs	r0, #3
 8001b18:	f001 f9be 	bl	8002e98 <HAL_Delay>
	for(int16_t flux = 0; flux <= power; flux+=10){
 8001b1c:	8bfb      	ldrh	r3, [r7, #30]
 8001b1e:	330a      	adds	r3, #10
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	83fb      	strh	r3, [r7, #30]
 8001b24:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001b28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	ddeb      	ble.n	8001b08 <_ZN14TMC4671_Driver16powerInitEncoderEs+0xd4>
	}

	int16_t phiE_enc = getPhiE_Enc();
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fd29 	bl	8002588 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8001b36:	4603      	mov	r3, r0
 8001b38:	83bb      	strh	r3, [r7, #28]
	HAL_Delay(50);
 8001b3a:	2032      	movs	r0, #50	@ 0x32
 8001b3c:	f001 f9ac 	bl	8002e98 <HAL_Delay>
	int16_t phiE_abn_old = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	837b      	strh	r3, [r7, #26]
	int16_t c = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	833b      	strh	r3, [r7, #24]
	uint16_t still = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82fb      	strh	r3, [r7, #22]

//	HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
	while(still < 30 && c++ < 1000){
 8001b4c:	e019      	b.n	8001b82 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x14e>
		// Wait for motor to stop moving
		if(abs(phiE_enc - phiE_abn_old) < 100){
 8001b4e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001b52:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bfb8      	it	lt
 8001b5c:	425b      	neglt	r3, r3
 8001b5e:	2b63      	cmp	r3, #99	@ 0x63
 8001b60:	dc03      	bgt.n	8001b6a <_ZN14TMC4671_Driver16powerInitEncoderEs+0x136>
			still++;
 8001b62:	8afb      	ldrh	r3, [r7, #22]
 8001b64:	3301      	adds	r3, #1
 8001b66:	82fb      	strh	r3, [r7, #22]
 8001b68:	e001      	b.n	8001b6e <_ZN14TMC4671_Driver16powerInitEncoderEs+0x13a>
		}
		else{
			still = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	82fb      	strh	r3, [r7, #22]
		}
		phiE_abn_old = phiE_enc;
 8001b6e:	8bbb      	ldrh	r3, [r7, #28]
 8001b70:	837b      	strh	r3, [r7, #26]
		phiE_enc = getPhiE_Enc();
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fd08 	bl	8002588 <_ZN14TMC4671_Driver11getPhiE_EncEv>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	83bb      	strh	r3, [r7, #28]
		HAL_Delay(10);
 8001b7c:	200a      	movs	r0, #10
 8001b7e:	f001 f98b 	bl	8002e98 <HAL_Delay>
	while(still < 30 && c++ < 1000){
 8001b82:	8afb      	ldrh	r3, [r7, #22]
 8001b84:	2b1d      	cmp	r3, #29
 8001b86:	d80a      	bhi.n	8001b9e <_ZN14TMC4671_Driver16powerInitEncoderEs+0x16a>
 8001b88:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	3201      	adds	r2, #1
 8001b90:	b292      	uxth	r2, r2
 8001b92:	833a      	strh	r2, [r7, #24]
 8001b94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b98:	da01      	bge.n	8001b9e <_ZN14TMC4671_Driver16powerInitEncoderEs+0x16a>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x16c>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1d4      	bne.n	8001b4e <_ZN14TMC4671_Driver16powerInitEncoderEs+0x11a>
	}
	setFluxTorque(0, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 fd9f 	bl	80026ec <_ZN14TMC4671_Driver13setFluxTorqueEss>

	//Write offset
	int16_t phiEoffset =  phiEpos-phiE_enc;
 8001bae:	8a3a      	ldrh	r2, [r7, #16]
 8001bb0:	8bbb      	ldrh	r3, [r7, #28]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	82bb      	strh	r3, [r7, #20]

	if(phiEoffset == 0){ // 0 invalid
 8001bb8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10d      	bne.n	8001bdc <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1a8>
		HAL_Delay(200);
 8001bc0:	20c8      	movs	r0, #200	@ 0xc8
 8001bc2:	f001 f969 	bl	8002e98 <HAL_Delay>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2102      	movs	r1, #2
 8001bca:	4821      	ldr	r0, [pc, #132]	@ (8001c50 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x21c>)
 8001bcc:	f001 fc36 	bl	800343c <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8001bd0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001bd4:	f001 f960 	bl	8002e98 <HAL_Delay>
		phiEoffset = 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	82bb      	strh	r3, [r7, #20]
	}

	tmc4671_fieldWrite(phiEoffsetReg, phiEoffset);
 8001bdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001be0:	461a      	mov	r2, r3
 8001be2:	f107 0308 	add.w	r3, r7, #8
 8001be6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bea:	f7ff f928 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	if(this->encoderType == EncoderType::abn){
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d104      	bne.n	8001c02 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1ce>
		encoder.phiEoffset = phiEoffset;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	8aba      	ldrh	r2, [r7, #20]
 8001bfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8001c00:	e00d      	b.n	8001c1e <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1ea>
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d004      	beq.n	8001c16 <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1e2>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d103      	bne.n	8001c1e <_ZN14TMC4671_Driver16powerInitEncoderEs+0x1ea>
		encoder.phiEoffset = phiEoffset;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	8aba      	ldrh	r2, [r7, #20]
 8001c1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	}

	setPhiE_ext(0);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fc9d 	bl	8002560 <_ZN14TMC4671_Driver11setPhiE_extEs>
	setPhiEType(lastphie);
 8001c26:	7cfb      	ldrb	r3, [r7, #19]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fc5c 	bl	80024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 8001c30:	7cbb      	ldrb	r3, [r7, #18]
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 fc1d 	bl	8002474 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
 8001c3a:	e000      	b.n	8001c3e <_ZN14TMC4671_Driver16powerInitEncoderEs+0x20a>
		return;
 8001c3c:	bf00      	nop
}
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	08009d58 	.word	0x08009d58
 8001c48:	08009eb0 	.word	0x08009eb0
 8001c4c:	08009f48 	.word	0x08009f48
 8001c50:	40021000 	.word	0x40021000

08001c54 <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb>:

void TMC4671_Driver::zeroAbnUsingPhiM(bool offsetPhiE){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
	int32_t npos = tmc4671_readRegister(TMC4671_ABN_DECODER_COUNT_N); // raw encoder counts at index hit
 8001c60:	2028      	movs	r0, #40	@ 0x28
 8001c62:	f7ff f82d 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8001c66:	4603      	mov	r3, r0
 8001c68:	60fb      	str	r3, [r7, #12]
	int32_t npos_M = (npos * 0xffff) / encoder.cpr; // Scaled encoder angle at index
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	041b      	lsls	r3, r3, #16
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8001c78:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c7c:	60bb      	str	r3, [r7, #8]
	encoder.phiMoffset = -npos_M;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	425b      	negs	r3, r3
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

	if(offsetPhiE){
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb+0x68>
		encoder.phiEoffset += npos_M * encoder.pole_pairs;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	@ 0x68
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	fb11 f303 	smulbb	r3, r1, r3
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8001cba:	e008      	b.n	8001cce <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb+0x7a>
	}else{
		tmc4671_fieldWrite(TMC4671_ABN_DECODER_PHI_M_OFFSET_FIELD, encoder.phiMoffset);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	@ 0x6a
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <_ZN14TMC4671_Driver16zeroAbnUsingPhiMEb+0x94>)
 8001cc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001cca:	f7ff f8b8 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	}

	setActualPosition(getAbsolutePosition()); // Set position to absolute position = ~zero
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fcca 	bl	8002668 <_ZN14TMC4671_Driver19getAbsolutePositionEv>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fca3 	bl	8002624 <_ZN14TMC4671_Driver17setActualPositionEl>
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	08009ea8 	.word	0x08009ea8

08001cec <_ZN14TMC4671_Driver18calibrateAdcOffsetEt>:

/**
 * Calibrates the ADC by disabling the power stage and sampling a mean value. Takes time!
 */
bool TMC4671_Driver::calibrateAdcOffset(uint16_t time){
 8001cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf0:	b096      	sub	sp, #88	@ 0x58
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	61f8      	str	r0, [r7, #28]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	837b      	strh	r3, [r7, #26]

	uint16_t measuretime_idle = time;
 8001cfa:	8b7b      	ldrh	r3, [r7, #26]
 8001cfc:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint32_t measurements_idle = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	657b      	str	r3, [r7, #84]	@ 0x54
	uint64_t totalA=0;
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	uint64_t totalB=0;
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	tmc4671_writeRegister(TMC4671_ADC_RAW_ADDR, 0); // Read raw adc
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f7ff f803 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
	PhiE lastphie = getPhiEType();
 8001d22:	69f8      	ldr	r0, [r7, #28]
 8001d24:	f000 fc02 	bl	800252c <_ZN14TMC4671_Driver11getPhiETypeEv>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	MotionMode lastmode = getMotionMode();
 8001d2e:	69f8      	ldr	r0, [r7, #28]
 8001d30:	f000 fbc2 	bl	80024b8 <_ZN14TMC4671_Driver13getMotionModeEv>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	setMotionMode(MotionMode::stopped);
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	69f8      	ldr	r0, [r7, #28]
 8001d3e:	f000 fb99 	bl	8002474 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
	HAL_Delay(100); // Wait a bit before sampling
 8001d42:	2064      	movs	r0, #100	@ 0x64
 8001d44:	f001 f8a8 	bl	8002e98 <HAL_Delay>
	uint16_t lastrawA = this->adcConfig.adc_I0_offset, lastrawB = this->adcConfig.adc_I1_offset;
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001d56:	87bb      	strh	r3, [r7, #60]	@ 0x3c

	//pulseClipLed(); // Turn on led
	// Disable drivers and measure many samples of zero current
	//enablePin.reset();
	uint32_t tick = HAL_GetTick();
 8001d58:	f001 f892 	bl	8002e80 <HAL_GetTick>
 8001d5c:	6378      	str	r0, [r7, #52]	@ 0x34
	while(HAL_GetTick() - tick < measuretime_idle){ // Measure idle
 8001d5e:	e043      	b.n	8001de8 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0xfc>
		tmc4671_writeRegister(TMC4671_ADC_RAW_ADDR, 0); // Read raw adc
 8001d60:	2100      	movs	r1, #0
 8001d62:	2003      	movs	r0, #3
 8001d64:	f7fe ffe0 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
		uint32_t adcraw = tmc4671_readRegister(TMC4671_ADC_RAW_DATA);
 8001d68:	2002      	movs	r0, #2
 8001d6a:	f7fe ffa9 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8001d6e:	62b8      	str	r0, [r7, #40]	@ 0x28
		uint16_t rawA = adcraw & 0xffff;
 8001d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d72:	84fb      	strh	r3, [r7, #38]	@ 0x26
		uint16_t rawB = (adcraw >> 16) & 0xffff;
 8001d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d76:	0c1b      	lsrs	r3, r3, #16
 8001d78:	84bb      	strh	r3, [r7, #36]	@ 0x24

		// Signflip filter for SPI bug
		if(abs(lastrawA-rawA) < 10000 && abs(lastrawB-rawB) < 10000){
 8001d7a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001d7c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bfb8      	it	lt
 8001d84:	425b      	neglt	r3, r3
 8001d86:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	dc2c      	bgt.n	8001de8 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0xfc>
 8001d8e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001d90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bfb8      	it	lt
 8001d98:	425b      	neglt	r3, r3
 8001d9a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	dc22      	bgt.n	8001de8 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0xfc>
			totalA += rawA;
 8001da2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001da4:	2200      	movs	r2, #0
 8001da6:	461c      	mov	r4, r3
 8001da8:	4615      	mov	r5, r2
 8001daa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001dae:	eb12 0a04 	adds.w	sl, r2, r4
 8001db2:	eb43 0b05 	adc.w	fp, r3, r5
 8001db6:	e9c7 ab12 	strd	sl, fp, [r7, #72]	@ 0x48
			totalB += rawB;
 8001dba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4698      	mov	r8, r3
 8001dc0:	4691      	mov	r9, r2
 8001dc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001dc6:	eb12 0108 	adds.w	r1, r2, r8
 8001dca:	6039      	str	r1, [r7, #0]
 8001dcc:	eb43 0309 	adc.w	r3, r3, r9
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dd6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			measurements_idle++;
 8001dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ddc:	3301      	adds	r3, #1
 8001dde:	657b      	str	r3, [r7, #84]	@ 0x54
			lastrawA = rawA;
 8001de0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001de2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			lastrawB = rawB;
 8001de4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001de6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	while(HAL_GetTick() - tick < measuretime_idle){ // Measure idle
 8001de8:	f001 f84a 	bl	8002e80 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df0:	1ad2      	subs	r2, r2, r3
 8001df2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001df4:	429a      	cmp	r2, r3
 8001df6:	bf34      	ite	cc
 8001df8:	2301      	movcc	r3, #1
 8001dfa:	2300      	movcs	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1ae      	bne.n	8001d60 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x74>
		}
//		uint32_t lastMicros = micros();
//		while(micros()-lastMicros < 100){} // Wait 100µs at least
	}
	//enablePin.set();
	int32_t offsetAidle = totalA / (measurements_idle);
 8001e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e04:	2200      	movs	r2, #0
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	617a      	str	r2, [r7, #20]
 8001e0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001e12:	f7fe fdcf 	bl	80009b4 <__aeabi_uldivmod>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t offsetBidle = totalB / (measurements_idle);
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e20:	2200      	movs	r2, #0
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	60fa      	str	r2, [r7, #12]
 8001e26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e2a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001e2e:	f7fe fdc1 	bl	80009b4 <__aeabi_uldivmod>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4613      	mov	r3, r2
 8001e38:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Check if offsets are in a valid range
	if(totalA < 100 || totalB < 100 || ((abs(offsetAidle - 0x7fff) > TMC_ADCOFFSETFAIL) || (abs(offsetBidle - 0x7fff) > TMC_ADCOFFSETFAIL)) ){
 8001e3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e3e:	2a64      	cmp	r2, #100	@ 0x64
 8001e40:	f173 0300 	sbcs.w	r3, r3, #0
 8001e44:	d31d      	bcc.n	8001e82 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x196>
 8001e46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e4a:	2a64      	cmp	r2, #100	@ 0x64
 8001e4c:	f173 0300 	sbcs.w	r3, r3, #0
 8001e50:	d317      	bcc.n	8001e82 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x196>
 8001e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e54:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001e58:	3b7f      	subs	r3, #127	@ 0x7f
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe ff22 	bl	8000ca4 <_ZSt3absl>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	dc0b      	bgt.n	8001e82 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x196>
 8001e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e6c:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001e70:	3b7f      	subs	r3, #127	@ 0x7f
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe ff16 	bl	8000ca4 <_ZSt3absl>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	dd01      	ble.n	8001e86 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x19a>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x19c>
 8001e86:	2300      	movs	r3, #0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x1b6>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2102      	movs	r1, #2
 8001e90:	4817      	ldr	r0, [pc, #92]	@ (8001ef0 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x204>)
 8001e92:	f001 fad3 	bl	800343c <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
//		ErrorHandler::addError(Error(ErrorCode::adcCalibrationError,ErrorType::critical,"TMC ADC offset calibration failed."));
//		blinkErrLed(100, 0); // Blink forever
//		setPwm(TMC_PwmMode::off); //Disable pwm
//		this->changeState(TMC_ControlState::HardError);
		this->adcConfig.adcCalibrated = false;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		return false; // An adc or shunt amp is likely broken. do not proceed.
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e020      	b.n	8001ee4 <_ZN14TMC4671_Driver18calibrateAdcOffsetEt+0x1f8>
	}
	this->adcConfig.adc_I0_offset = offsetAidle;
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	this->adcConfig.adc_I1_offset = offsetBidle;
 8001eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	setAdcOffset(&this->adcConfig);
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3344      	adds	r3, #68	@ 0x44
 8001eba:	4619      	mov	r1, r3
 8001ebc:	69f8      	ldr	r0, [r7, #28]
 8001ebe:	f000 fa89 	bl	80023d4 <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig>
	// ADC Offsets should now be close to perfect

	setPhiEType(lastphie);
 8001ec2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	69f8      	ldr	r0, [r7, #28]
 8001eca:	f000 fb0d 	bl	80024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>
	setMotionMode(lastmode);
 8001ece:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	69f8      	ldr	r0, [r7, #28]
 8001ed6:	f000 facd 	bl	8002474 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
	this->adcConfig.adcCalibrated = true;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	return true;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3758      	adds	r7, #88	@ 0x58
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000

08001ef4 <_ZN14TMC4671_Driver14setDriverStateE11DriverState>:

void TMC4671_Driver::setDriverState(DriverState state) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
	if (state == DRIVER_DISABLE) {
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <_ZN14TMC4671_Driver14setDriverStateE11DriverState+0x26>
		this->driverState = DRIVER_DISABLE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
		HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2180      	movs	r1, #128	@ 0x80
 8001f12:	4808      	ldr	r0, [pc, #32]	@ (8001f34 <_ZN14TMC4671_Driver14setDriverStateE11DriverState+0x40>)
 8001f14:	f001 fa92 	bl	800343c <HAL_GPIO_WritePin>
	} else {
		this->driverState = DRIVER_ENABLE;
		HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_SET);
	}
}
 8001f18:	e008      	b.n	8001f2c <_ZN14TMC4671_Driver14setDriverStateE11DriverState+0x38>
		this->driverState = DRIVER_ENABLE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
		HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_SET);
 8001f22:	2201      	movs	r2, #1
 8001f24:	2180      	movs	r1, #128	@ 0x80
 8001f26:	4803      	ldr	r0, [pc, #12]	@ (8001f34 <_ZN14TMC4671_Driver14setDriverStateE11DriverState+0x40>)
 8001f28:	f001 fa88 	bl	800343c <HAL_GPIO_WritePin>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000

08001f38 <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet>:

void TMC4671_Driver::setMotorTypeAndPoles(MotorType motor, uint16_t poles){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
 8001f44:	4613      	mov	r3, r2
 8001f46:	803b      	strh	r3, [r7, #0]
	if(motor == MotorType::DC){
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet+0x1a>
		poles = 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	803b      	strh	r3, [r7, #0]
	}
	this->motorType = motor;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	this->encoder.pole_pairs = poles;
 8001f5a:	883b      	ldrh	r3, [r7, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

	tmc4671_fieldWrite(TMC4671_N_POLE_PAIRS_FIELD, poles);
 8001f64:	883b      	ldrh	r3, [r7, #0]
 8001f66:	4907      	ldr	r1, [pc, #28]	@ (8001f84 <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet+0x4c>)
 8001f68:	461a      	mov	r2, r3
 8001f6a:	c903      	ldmia	r1, {r0, r1}
 8001f6c:	f7fe ff67 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_MOTOR_TYPE_FIELD, (uint8_t)motor);
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	4905      	ldr	r1, [pc, #20]	@ (8001f88 <_ZN14TMC4671_Driver20setMotorTypeAndPolesE9MotorTypet+0x50>)
 8001f74:	461a      	mov	r2, r3
 8001f76:	c903      	ldmia	r1, {r0, r1}
 8001f78:	f7fe ff61 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	08009e58 	.word	0x08009e58
 8001f88:	08009e60 	.word	0x08009e60

08001f8c <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig>:

void TMC4671_Driver::setHallConfig(HallConfig* hallConfig_p){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
	memcpy(&this->hallConfig, hallConfig_p, sizeof(this->hallConfig));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	221a      	movs	r2, #26
 8001f9a:	6839      	ldr	r1, [r7, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f007 fec1 	bl	8009d24 <memcpy>

	tmc4671_fieldWrite(TMC4671_HALL_POLARITY_FIELD, hallConfig_p->polarity);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b3c      	ldr	r3, [pc, #240]	@ (800209c <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x110>)
 8001faa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fae:	f7fe ff46 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_SYNCHRONOUS_PWM_SAMPLING_FIELD, hallConfig_p->pwmSamplingFilter);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	791b      	ldrb	r3, [r3, #4]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b39      	ldr	r3, [pc, #228]	@ (80020a0 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x114>)
 8001fba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fbe:	f7fe ff3e 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_INTERPOLATION_FIELD, hallConfig_p->interpolation);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	789b      	ldrb	r3, [r3, #2]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b36      	ldr	r3, [pc, #216]	@ (80020a4 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x118>)
 8001fca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fce:	f7fe ff36 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_DIRECTION_FIELD, hallConfig_p->direction);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	78db      	ldrb	r3, [r3, #3]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b33      	ldr	r3, [pc, #204]	@ (80020a8 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x11c>)
 8001fda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fde:	f7fe ff2e 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_BLANK_FIELD, hallConfig_p->blank);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	88db      	ldrh	r3, [r3, #6]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b30      	ldr	r3, [pc, #192]	@ (80020ac <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x120>)
 8001fea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fee:	f7fe ff26 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_HALL_POSITION_000_FIELD, hallConfig_p->pos0);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80020b0 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x124>)
 8001ffc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002000:	f7fe ff1d 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_060_FIELD, hallConfig_p->pos60);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800200a:	461a      	mov	r2, r3
 800200c:	4b29      	ldr	r3, [pc, #164]	@ (80020b4 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x128>)
 800200e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002012:	f7fe ff14 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_120_FIELD, hallConfig_p->pos120);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800201c:	461a      	mov	r2, r3
 800201e:	4b26      	ldr	r3, [pc, #152]	@ (80020b8 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x12c>)
 8002020:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002024:	f7fe ff0b 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_180_FIELD, hallConfig_p->pos180);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800202e:	461a      	mov	r2, r3
 8002030:	4b22      	ldr	r3, [pc, #136]	@ (80020bc <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x130>)
 8002032:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002036:	f7fe ff02 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_240_FIELD, hallConfig_p->pos240);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002040:	461a      	mov	r2, r3
 8002042:	4b1f      	ldr	r3, [pc, #124]	@ (80020c0 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x134>)
 8002044:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002048:	f7fe fef9 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_POSITION_300_FIELD, hallConfig_p->pos300);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002052:	461a      	mov	r2, r3
 8002054:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x138>)
 8002056:	e893 0003 	ldmia.w	r3, {r0, r1}
 800205a:	f7fe fef0 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_HALL_PHI_M_OFFSET_FIELD, hallConfig_p->phiMoffset);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002064:	461a      	mov	r2, r3
 8002066:	4b18      	ldr	r3, [pc, #96]	@ (80020c8 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x13c>)
 8002068:	e893 0003 	ldmia.w	r3, {r0, r1}
 800206c:	f7fe fee7 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_PHI_E_OFFSET_FIELD, hallConfig_p->phiEoffset);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002076:	461a      	mov	r2, r3
 8002078:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x140>)
 800207a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800207e:	f7fe fede 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_HALL_DPHI_MAX_FIELD, hallConfig_p->dPhiMax);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	8b1b      	ldrh	r3, [r3, #24]
 8002086:	461a      	mov	r2, r3
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <_ZN14TMC4671_Driver13setHallConfigEP10HallConfig+0x144>)
 800208a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800208e:	f7fe fed6 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	08009ec8 	.word	0x08009ec8
 80020a0:	08009ed0 	.word	0x08009ed0
 80020a4:	08009ed8 	.word	0x08009ed8
 80020a8:	08009ee0 	.word	0x08009ee0
 80020ac:	08009ee8 	.word	0x08009ee8
 80020b0:	08009ef0 	.word	0x08009ef0
 80020b4:	08009ef8 	.word	0x08009ef8
 80020b8:	08009f00 	.word	0x08009f00
 80020bc:	08009f08 	.word	0x08009f08
 80020c0:	08009f10 	.word	0x08009f10
 80020c4:	08009f18 	.word	0x08009f18
 80020c8:	08009f20 	.word	0x08009f20
 80020cc:	08009f28 	.word	0x08009f28
 80020d0:	08009f30 	.word	0x08009f30

080020d4 <_ZN14TMC4671_Driver6setPWME7PwmMode>:

void TMC4671_Driver::setPWM(PwmMode pwmMode){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
	this->pwmMode = pwmMode;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	tmc4671_fieldWrite(TMC4671_PWM_CHOP_FIELD, (uint8_t)pwmMode);
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	4904      	ldr	r1, [pc, #16]	@ (80020fc <_ZN14TMC4671_Driver6setPWME7PwmMode+0x28>)
 80020ec:	461a      	mov	r2, r3
 80020ee:	c903      	ldmia	r1, {r0, r1}
 80020f0:	f7fe fea5 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	08009e50 	.word	0x08009e50

08002100 <_ZN14TMC4671_Driver6setPWME7PwmModethh>:

void TMC4671_Driver::setPWM(PwmMode pwmMode,uint16_t maxcnt,uint8_t bbmL,uint8_t bbmH){
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	4608      	mov	r0, r1
 800210a:	4611      	mov	r1, r2
 800210c:	461a      	mov	r2, r3
 800210e:	4603      	mov	r3, r0
 8002110:	70fb      	strb	r3, [r7, #3]
 8002112:	460b      	mov	r3, r1
 8002114:	803b      	strh	r3, [r7, #0]
 8002116:	4613      	mov	r3, r2
 8002118:	70bb      	strb	r3, [r7, #2]
	maxcnt = clip(maxcnt, 255, 4095);
 800211a:	883b      	ldrh	r3, [r7, #0]
 800211c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002120:	21ff      	movs	r1, #255	@ 0xff
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fb18 	bl	8002758 <_Z4clipItiET_S0_T0_S1_>
 8002128:	4603      	mov	r3, r0
 800212a:	803b      	strh	r3, [r7, #0]
	this->pwmMode = pwmMode;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	78fa      	ldrb	r2, [r7, #3]
 8002130:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	this->pwmCnt = maxcnt;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	883a      	ldrh	r2, [r7, #0]
 8002138:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
	this->bbmL = bbmL;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	78ba      	ldrb	r2, [r7, #2]
 8002140:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	this->bbmH = bbmH;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7c3a      	ldrb	r2, [r7, #16]
 8002148:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	tmc4671_fieldWrite(TMC4671_PWM_MAXCNT_FIELD, maxcnt);
 800214c:	883b      	ldrh	r3, [r7, #0]
 800214e:	490f      	ldr	r1, [pc, #60]	@ (800218c <_ZN14TMC4671_Driver6setPWME7PwmModethh+0x8c>)
 8002150:	461a      	mov	r2, r3
 8002152:	c903      	ldmia	r1, {r0, r1}
 8002154:	f7fe fe73 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PWM_CHOP_FIELD, (uint8_t)pwmMode);
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	490d      	ldr	r1, [pc, #52]	@ (8002190 <_ZN14TMC4671_Driver6setPWME7PwmModethh+0x90>)
 800215c:	461a      	mov	r2, r3
 800215e:	c903      	ldmia	r1, {r0, r1}
 8002160:	f7fe fe6d 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PWM_BBM_L_FIELD, bbmL);
 8002164:	78bb      	ldrb	r3, [r7, #2]
 8002166:	490b      	ldr	r1, [pc, #44]	@ (8002194 <_ZN14TMC4671_Driver6setPWME7PwmModethh+0x94>)
 8002168:	461a      	mov	r2, r3
 800216a:	c903      	ldmia	r1, {r0, r1}
 800216c:	f7fe fe67 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PWM_BBM_H_FIELD, bbmH);
 8002170:	7c3b      	ldrb	r3, [r7, #16]
 8002172:	4909      	ldr	r1, [pc, #36]	@ (8002198 <_ZN14TMC4671_Driver6setPWME7PwmModethh+0x98>)
 8002174:	461a      	mov	r2, r3
 8002176:	c903      	ldmia	r1, {r0, r1}
 8002178:	f7fe fe61 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_writeRegister(TMC4671_PWM_POLARITIES, 0x00);
 800217c:	2100      	movs	r1, #0
 800217e:	2017      	movs	r0, #23
 8002180:	f7fe fdd2 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	08009e38 	.word	0x08009e38
 8002190:	08009e50 	.word	0x08009e50
 8002194:	08009e40 	.word	0x08009e40
 8002198:	08009e48 	.word	0x08009e48

0800219c <_ZN14TMC4671_Driver7setPidsEP9PIDConfig>:

void TMC4671_Driver::setPids(PIDConfig* pidConfig_p){
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
	memcpy(&this->pidConfig, pidConfig_p, sizeof(this->pidConfig));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	331a      	adds	r3, #26
 80021aa:	2212      	movs	r2, #18
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f007 fdb8 	bl	8009d24 <memcpy>

	tmc4671_fieldWrite(TMC4671_PID_FLUX_I_FIELD, pidConfig_p->fluxI);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	885b      	ldrh	r3, [r3, #2]
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b24      	ldr	r3, [pc, #144]	@ (800224c <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xb0>)
 80021bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021c0:	f7fe fe3d 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_FLUX_P_FIELD, pidConfig_p->fluxP);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b21      	ldr	r3, [pc, #132]	@ (8002250 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xb4>)
 80021cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021d0:	f7fe fe35 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_TORQUE_I_FIELD, pidConfig_p->torqueI);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	88db      	ldrh	r3, [r3, #6]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b1e      	ldr	r3, [pc, #120]	@ (8002254 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xb8>)
 80021dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021e0:	f7fe fe2d 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_TORQUE_P_FIELD, pidConfig_p->fluxP);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xbc>)
 80021ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021f0:	f7fe fe25 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_VELOCITY_I_FIELD, pidConfig_p->velocityI);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	895b      	ldrh	r3, [r3, #10]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b18      	ldr	r3, [pc, #96]	@ (800225c <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xc0>)
 80021fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002200:	f7fe fe1d 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_VELOCITY_P_FIELD, pidConfig_p->velocityP);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	891b      	ldrh	r3, [r3, #8]
 8002208:	461a      	mov	r2, r3
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xc4>)
 800220c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002210:	f7fe fe15 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_POSITION_I_FIELD, pidConfig_p->positionI);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	89db      	ldrh	r3, [r3, #14]
 8002218:	461a      	mov	r2, r3
 800221a:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xc8>)
 800221c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002220:	f7fe fe0d 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_POSITION_P_FIELD, pidConfig_p->positionP);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	899b      	ldrh	r3, [r3, #12]
 8002228:	461a      	mov	r2, r3
 800222a:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xcc>)
 800222c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002230:	f7fe fe05 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_MODE_PID_TYPE_FIELD, pidConfig_p->sequentialPI);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	7c1b      	ldrb	r3, [r3, #16]
 8002238:	461a      	mov	r2, r3
 800223a:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <_ZN14TMC4671_Driver7setPidsEP9PIDConfig+0xd0>)
 800223c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002240:	f7fe fdfd 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	08009f80 	.word	0x08009f80
 8002250:	08009f88 	.word	0x08009f88
 8002254:	08009f90 	.word	0x08009f90
 8002258:	08009f98 	.word	0x08009f98
 800225c:	08009fa0 	.word	0x08009fa0
 8002260:	08009fa8 	.word	0x08009fa8
 8002264:	08009fb0 	.word	0x08009fb0
 8002268:	08009fb8 	.word	0x08009fb8
 800226c:	08009fc8 	.word	0x08009fc8

08002270 <_ZN14TMC4671_Driver17setAdcBrakeLimitsEtt>:
/**
 *  Sets the raw brake resistor limits.
 *  Centered at 0x7fff
 *  Set both 0 to deactivate
 */
void TMC4671_Driver::setAdcBrakeLimits(uint16_t low,uint16_t high){
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	803b      	strh	r3, [r7, #0]
	this->brakeLimLow = low;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	this->brakeLimHigh = high;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	883a      	ldrh	r2, [r7, #0]
 800228c:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	tmc4671_fieldWrite(TMC4671_ADC_VM_LIMIT_LOW_FIELD, low);
 8002290:	887b      	ldrh	r3, [r7, #2]
 8002292:	4907      	ldr	r1, [pc, #28]	@ (80022b0 <_ZN14TMC4671_Driver17setAdcBrakeLimitsEtt+0x40>)
 8002294:	461a      	mov	r2, r3
 8002296:	c903      	ldmia	r1, {r0, r1}
 8002298:	f7fe fdd1 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_VM_LIMIT_LOW_FIELD, high);
 800229c:	883b      	ldrh	r3, [r7, #0]
 800229e:	4904      	ldr	r1, [pc, #16]	@ (80022b0 <_ZN14TMC4671_Driver17setAdcBrakeLimitsEtt+0x40>)
 80022a0:	461a      	mov	r2, r3
 80022a2:	c903      	ldmia	r1, {r0, r1}
 80022a4:	f7fe fdcb 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	08009fe8 	.word	0x08009fe8

080022b4 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig>:

void TMC4671_Driver::initAdc(AdcConfig* adcConfig_p){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
	this->adcConfig.mclkA = adcConfig_p->mclkA;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	649a      	str	r2, [r3, #72]	@ 0x48
	this->adcConfig.mclkB = adcConfig_p->mclkB;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	64da      	str	r2, [r3, #76]	@ 0x4c
	this->adcConfig.mdecA = adcConfig_p->mdecA;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	881a      	ldrh	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	this->adcConfig.mdecB = adcConfig_p->mdecB;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	885a      	ldrh	r2, [r3, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	tmc4671_fieldWrite(TMC4671_DSADC_MDEC_A_FIELD, adcConfig_p->mdecA);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b2f      	ldr	r3, [pc, #188]	@ (80023a8 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0xf4>)
 80022ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022ee:	f7fe fda6 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_DSADC_MDEC_B_FIELD, adcConfig_p->mdecB);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	885b      	ldrh	r3, [r3, #2]
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b2c      	ldr	r3, [pc, #176]	@ (80023ac <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0xf8>)
 80022fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022fe:	f7fe fd9e 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_DSADC_MCLK_A_FIELD, adcConfig_p->mclkA);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	492a      	ldr	r1, [pc, #168]	@ (80023b0 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0xfc>)
 8002308:	461a      	mov	r2, r3
 800230a:	c903      	ldmia	r1, {r0, r1}
 800230c:	f7fe fd97 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_DSADC_MCLK_B_FIELD, adcConfig_p->mclkB);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4927      	ldr	r1, [pc, #156]	@ (80023b4 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x100>)
 8002316:	461a      	mov	r2, r3
 8002318:	c903      	ldmia	r1, {r0, r1}
 800231a:	f7fe fd90 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_SEL_NCLK_MCLK_I_A_FIELD, adcConfig_p->mclkA == 0 ? 0 : 1);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	bf14      	ite	ne
 8002326:	2301      	movne	r3, #1
 8002328:	2300      	moveq	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x104>)
 8002330:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002334:	f7fe fd83 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_SEL_NCLK_MCLK_I_B_FIELD, adcConfig_p->mclkB == 0 ? 0 : 1);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf14      	ite	ne
 8002340:	2301      	movne	r3, #1
 8002342:	2300      	moveq	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	4b1c      	ldr	r3, [pc, #112]	@ (80023bc <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x108>)
 800234a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800234e:	f7fe fd76 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	tmc4671_fieldWrite(TMC4671_ADC_I0_SELECT_FIELD, 0x0);   // 0: ADCSD_I0_RAW (sigma delta ADC)
 8002352:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x10c>)
 8002354:	2200      	movs	r2, #0
 8002356:	e893 0003 	ldmia.w	r3, {r0, r1}
 800235a:	f7fe fd70 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I1_SELECT_FIELD, 0x01);  // 1: ADCSD_I1_RAW (sigma delta ADC)
 800235e:	4b19      	ldr	r3, [pc, #100]	@ (80023c4 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x110>)
 8002360:	2201      	movs	r2, #1
 8002362:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002366:	f7fe fd6a 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I_UX_SELECT_FIELD,0x00); // 0: UX = ADC_I0 (default)
 800236a:	4b17      	ldr	r3, [pc, #92]	@ (80023c8 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x114>)
 800236c:	2200      	movs	r2, #0
 800236e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002372:	f7fe fd64 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I_V_SELECT_FIELD, 0x02); // 2: V = ADC_I2
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x118>)
 8002378:	2202      	movs	r2, #2
 800237a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800237e:	f7fe fd5e 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I_WY_SELECT_FIELD, 0x01);// 1: WY = ADC_I1
 8002382:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <_ZN14TMC4671_Driver7initAdcEP9AdcConfig+0x11c>)
 8002384:	2201      	movs	r2, #1
 8002386:	e893 0003 	ldmia.w	r3, {r0, r1}
 800238a:	f7fe fd58 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>

	setAdcOffset(adcConfig_p);
 800238e:	6839      	ldr	r1, [r7, #0]
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f81f 	bl	80023d4 <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig>
	setAdcScale(adcConfig_p);
 8002396:	6839      	ldr	r1, [r7, #0]
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f843 	bl	8002424 <_ZN14TMC4671_Driver11setAdcScaleEP9AdcConfig>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	08009de0 	.word	0x08009de0
 80023ac:	08009de8 	.word	0x08009de8
 80023b0:	08009dd0 	.word	0x08009dd0
 80023b4:	08009dd8 	.word	0x08009dd8
 80023b8:	08009dc0 	.word	0x08009dc0
 80023bc:	08009dc8 	.word	0x08009dc8
 80023c0:	08009e10 	.word	0x08009e10
 80023c4:	08009e18 	.word	0x08009e18
 80023c8:	08009e20 	.word	0x08009e20
 80023cc:	08009e28 	.word	0x08009e28
 80023d0:	08009e30 	.word	0x08009e30

080023d4 <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig>:

void TMC4671_Driver::setAdcOffset(AdcConfig* adcConfig_p){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
	this->adcConfig.adc_I0_offset = adcConfig_p->adc_I0_offset;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	899a      	ldrh	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	this->adcConfig.adc_I1_offset = adcConfig_p->adc_I1_offset;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	89da      	ldrh	r2, [r3, #14]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

	tmc4671_fieldWrite(TMC4671_ADC_I0_OFFSET_FIELD, adcConfig_p->adc_I0_offset);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	899b      	ldrh	r3, [r3, #12]
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b08      	ldr	r3, [pc, #32]	@ (800241c <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig+0x48>)
 80023fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023fe:	f7fe fd1e 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I1_OFFSET_FIELD, adcConfig_p->adc_I1_offset);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	89db      	ldrh	r3, [r3, #14]
 8002406:	461a      	mov	r2, r3
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <_ZN14TMC4671_Driver12setAdcOffsetEP9AdcConfig+0x4c>)
 800240a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800240e:	f7fe fd16 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	08009e00 	.word	0x08009e00
 8002420:	08009df0 	.word	0x08009df0

08002424 <_ZN14TMC4671_Driver11setAdcScaleEP9AdcConfig>:

void TMC4671_Driver::setAdcScale(AdcConfig* adcConfig_p){
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
	this->adcConfig.adc_I0_scale = adcConfig_p->adc_I0_scale;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	8a1a      	ldrh	r2, [r3, #16]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	this->adcConfig.adc_I1_scale = adcConfig_p->adc_I1_scale;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	8a5a      	ldrh	r2, [r3, #18]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

	tmc4671_fieldWrite(TMC4671_ADC_I0_SCALE_FIELD, adcConfig_p->adc_I0_scale);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	8a1b      	ldrh	r3, [r3, #16]
 8002446:	461a      	mov	r2, r3
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <_ZN14TMC4671_Driver11setAdcScaleEP9AdcConfig+0x48>)
 800244a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800244e:	f7fe fcf6 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_ADC_I1_SCALE_FIELD, adcConfig_p->adc_I1_scale);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	8a5b      	ldrh	r3, [r3, #18]
 8002456:	461a      	mov	r2, r3
 8002458:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <_ZN14TMC4671_Driver11setAdcScaleEP9AdcConfig+0x4c>)
 800245a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800245e:	f7fe fcee 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	08009e08 	.word	0x08009e08
 8002470:	08009df8 	.word	0x08009df8

08002474 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>:

void TMC4671_Driver::setMotionMode(MotionMode mode){
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	70fb      	strb	r3, [r7, #3]
	if(mode != curr_motionMode){
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	429a      	cmp	r2, r3
 800248a:	d005      	beq.n	8002498 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode+0x24>
		last_motionMode = curr_motionMode;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	}
	this->curr_motionMode = mode;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	tmc4671_fieldWrite(TMC4671_MODE_MOTION_FIELD, (uint8_t) mode);
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	4904      	ldr	r1, [pc, #16]	@ (80024b4 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode+0x40>)
 80024a4:	461a      	mov	r2, r3
 80024a6:	c903      	ldmia	r1, {r0, r1}
 80024a8:	f7fe fcc9 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	08009fc0 	.word	0x08009fc0

080024b8 <_ZN14TMC4671_Driver13getMotionModeEv>:

MotionMode TMC4671_Driver::getMotionMode(){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	this->curr_motionMode = (MotionMode) tmc4671_fieldRead(TMC4671_MODE_MOTION_FIELD);
 80024c0:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <_ZN14TMC4671_Driver13getMotionModeEv+0x2c>)
 80024c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024c6:	f7fe fc8a 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 80024ca:	4603      	mov	r3, r0
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	return this->curr_motionMode;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	08009fc0 	.word	0x08009fc0

080024e8 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE>:

void TMC4671_Driver::setPhiEType(PhiE phiEType){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
	if(phiEType == PhiE::extEncoder){
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	2b09      	cmp	r3, #9
 80024f8:	d101      	bne.n	80024fe <_ZN14TMC4671_Driver11setPhiETypeE4PhiE+0x16>
		phiEType = PhiE::ext;
 80024fa:	2301      	movs	r3, #1
 80024fc:	70fb      	strb	r3, [r7, #3]
	}
	this->phiEType = phiEType;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

	tmc4671_fieldWrite(TMC4671_PHI_E_SELECTION_FIELD, (uint8_t)phiEType && 0xFF);
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <_ZN14TMC4671_Driver11setPhiETypeE4PhiE+0x40>)
 8002516:	e893 0003 	ldmia.w	r3, {r0, r1}
 800251a:	f7fe fc90 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	08009f78 	.word	0x08009f78

0800252c <_ZN14TMC4671_Driver11getPhiETypeEv>:

PhiE TMC4671_Driver::getPhiEType(){
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	this->phiEType = (PhiE) (tmc4671_fieldRead(TMC4671_PHI_E_SELECTION_FIELD) & 0x07);
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <_ZN14TMC4671_Driver11getPhiETypeEv+0x30>)
 8002536:	e893 0003 	ldmia.w	r3, {r0, r1}
 800253a:	f7fe fc50 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 800253e:	4603      	mov	r3, r0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	b2da      	uxtb	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	return this->phiEType;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	08009f78 	.word	0x08009f78

08002560 <_ZN14TMC4671_Driver11setPhiE_extEs>:

void TMC4671_Driver::setPhiE_ext(int16_t phiE){
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
	tmc4671_fieldWrite(TMC4671_PHI_E_EXT_FIELD, (uint32_t)phiE);
 800256c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002570:	4904      	ldr	r1, [pc, #16]	@ (8002584 <_ZN14TMC4671_Driver11setPhiE_extEs+0x24>)
 8002572:	461a      	mov	r2, r3
 8002574:	c903      	ldmia	r1, {r0, r1}
 8002576:	f7fe fc62 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	08009e68 	.word	0x08009e68

08002588 <_ZN14TMC4671_Driver11getPhiE_EncEv>:

/**
 * Reads phiE directly from the encoder selection instead of the current phiE selection
 */
int16_t TMC4671_Driver::getPhiE_Enc(){
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	if(this->encoderType == EncoderType::abn){
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8002596:	2b01      	cmp	r3, #1
 8002598:	d107      	bne.n	80025aa <_ZN14TMC4671_Driver11getPhiE_EncEv+0x22>
		return (int16_t)tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_E_FIELD);
 800259a:	4b18      	ldr	r3, [pc, #96]	@ (80025fc <_ZN14TMC4671_Driver11getPhiE_EncEv+0x74>)
 800259c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025a0:	f7fe fc1d 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 80025a4:	4603      	mov	r3, r0
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	e023      	b.n	80025f2 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x6a>
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d004      	beq.n	80025be <_ZN14TMC4671_Driver11getPhiE_EncEv+0x36>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d107      	bne.n	80025ce <_ZN14TMC4671_Driver11getPhiE_EncEv+0x46>
		return (int16_t)tmc4671_fieldRead(TMC4671_AENC_DECODER_PHI_E_FIELD);
 80025be:	4b10      	ldr	r3, [pc, #64]	@ (8002600 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x78>)
 80025c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025c4:	f7fe fc0b 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 80025c8:	4603      	mov	r3, r0
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	e011      	b.n	80025f2 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x6a>
	}
	else if(this->encoderType == EncoderType::hall){
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d107      	bne.n	80025e8 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x60>
		return (int16_t)tmc4671_fieldRead(TMC4671_HALL_PHI_E_FIELD);
 80025d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x7c>)
 80025da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025de:	f7fe fbfe 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 80025e2:	4603      	mov	r3, r0
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	e004      	b.n	80025f2 <_ZN14TMC4671_Driver11getPhiE_EncEv+0x6a>
	}
	else{
		return getPhiE();
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f80d 	bl	8002608 <_ZN14TMC4671_Driver7getPhiEEv>
 80025ee:	4603      	mov	r3, r0
 80025f0:	bf00      	nop
	}
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	08009ec0 	.word	0x08009ec0
 8002600:	08009f58 	.word	0x08009f58
 8002604:	08009f38 	.word	0x08009f38

08002608 <_ZN14TMC4671_Driver7getPhiEEv>:

int16_t TMC4671_Driver::getPhiE(){
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	return (int16_t)tmc4671_readRegister(TMC4671_PHI_E);
 8002610:	2053      	movs	r0, #83	@ 0x53
 8002612:	f7fe fb55 	bl	8000cc0 <_ZL20tmc4671_readRegisterh>
 8002616:	4603      	mov	r3, r0
 8002618:	b21b      	sxth	r3, r3
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <_ZN14TMC4671_Driver17setActualPositionEl>:

// Changes actual multi turn position for positioning
void TMC4671_Driver::setActualPosition(int32_t pos){
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
	tmc4671_fieldWrite(TMC4671_PID_POSITION_ACTUAL_FIELD, (uint32_t)pos);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	4904      	ldr	r1, [pc, #16]	@ (8002644 <_ZN14TMC4671_Driver17setActualPositionEl+0x20>)
 8002632:	461a      	mov	r2, r3
 8002634:	c903      	ldmia	r1, {r0, r1}
 8002636:	f7fe fc02 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	08009fe0 	.word	0x08009fe0

08002648 <_ZN14TMC4671_Driver17getActualPositionEv>:

// Returns actual multi turn position from tmc
int32_t TMC4671_Driver::getActualPosition(){
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	return (int32_t)tmc4671_fieldRead(TMC4671_PID_POSITION_ACTUAL_FIELD);
 8002650:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <_ZN14TMC4671_Driver17getActualPositionEv+0x1c>)
 8002652:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002656:	f7fe fbc2 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 800265a:	4603      	mov	r3, r0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	08009fe0 	.word	0x08009fe0

08002668 <_ZN14TMC4671_Driver19getAbsolutePositionEv>:

int32_t TMC4671_Driver::getAbsolutePosition(){
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	int16_t pos;

	if(this->encoderType == EncoderType::abn){
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x22>
		pos = (int16_t)tmc4671_fieldRead(TMC4671_ABN_DECODER_PHI_M_FIELD);
 800267a:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x78>)
 800267c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002680:	f7fe fbad 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 8002684:	4603      	mov	r3, r0
 8002686:	81fb      	strh	r3, [r7, #14]
 8002688:	e023      	b.n	80026d2 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x6a>
	}
	else if(this->encoderType == EncoderType::hall){
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8002690:	2b04      	cmp	r3, #4
 8002692:	d107      	bne.n	80026a4 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x3c>
		pos = (int16_t)tmc4671_fieldRead(TMC4671_HALL_PHI_M_FIELD);
 8002694:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x7c>)
 8002696:	e893 0003 	ldmia.w	r3, {r0, r1}
 800269a:	f7fe fba0 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 800269e:	4603      	mov	r3, r0
 80026a0:	81fb      	strh	r3, [r7, #14]
 80026a2:	e016      	b.n	80026d2 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x6a>
	}
	else if(this->encoderType == EncoderType::sincos || this->encoderType == EncoderType::uvw){
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d004      	beq.n	80026b8 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x50>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d107      	bne.n	80026c8 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x60>
		pos = (int16_t)tmc4671_fieldRead(TMC4671_AENC_DECODER_PHI_M_FIELD);
 80026b8:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x80>)
 80026ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026be:	f7fe fb8e 	bl	8000dde <_ZL17tmc4671_fieldRead13RegisterField>
 80026c2:	4603      	mov	r3, r0
 80026c4:	81fb      	strh	r3, [r7, #14]
 80026c6:	e004      	b.n	80026d2 <_ZN14TMC4671_Driver19getAbsolutePositionEv+0x6a>
	}
	else{
		pos = getActualPosition(); // read phiM
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ffbd 	bl	8002648 <_ZN14TMC4671_Driver17getActualPositionEv>
 80026ce:	4603      	mov	r3, r0
 80026d0:	81fb      	strh	r3, [r7, #14]
	}

	return pos;
 80026d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	08009eb8 	.word	0x08009eb8
 80026e4:	08009f40 	.word	0x08009f40
 80026e8:	08009f50 	.word	0x08009f50

080026ec <_ZN14TMC4671_Driver13setFluxTorqueEss>:

void TMC4671_Driver::setFluxTorque(int16_t flux, int16_t torque){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
 80026f8:	4613      	mov	r3, r2
 80026fa:	803b      	strh	r3, [r7, #0]
	if(curr_motionMode != MotionMode::torque){
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8002702:	2b01      	cmp	r3, #1
 8002704:	d003      	beq.n	800270e <_ZN14TMC4671_Driver13setFluxTorqueEss+0x22>
		setMotionMode(MotionMode::torque);
 8002706:	2101      	movs	r1, #1
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff feb3 	bl	8002474 <_ZN14TMC4671_Driver13setMotionModeE10MotionMode>
	}

	tmc4671_fieldWrite(TMC4671_PID_FLUX_TARGET_FIELD, flux);
 800270e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002712:	4908      	ldr	r1, [pc, #32]	@ (8002734 <_ZN14TMC4671_Driver13setFluxTorqueEss+0x48>)
 8002714:	461a      	mov	r2, r3
 8002716:	c903      	ldmia	r1, {r0, r1}
 8002718:	f7fe fb91 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
	tmc4671_fieldWrite(TMC4671_PID_TORQUE_TARGET_FIELD, torque);
 800271c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002720:	4905      	ldr	r1, [pc, #20]	@ (8002738 <_ZN14TMC4671_Driver13setFluxTorqueEss+0x4c>)
 8002722:	461a      	mov	r2, r3
 8002724:	c903      	ldmia	r1, {r0, r1}
 8002726:	f7fe fb8a 	bl	8000e3e <_ZL18tmc4671_fieldWrite13RegisterFieldm>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	08009fd0 	.word	0x08009fd0
 8002738:	08009fd8 	.word	0x08009fd8

0800273c <_ZN14TMC4671_Driver13setStatusMaskE11StatusFlags>:

void TMC4671_Driver::setStatusFlags(StatusFlags flag){
	tmc4671_writeRegister(TMC4671_STATUS_MASK, flag.asInt);
}

void TMC4671_Driver::setStatusMask(StatusFlags mask){
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
	tmc4671_writeRegister(TMC4671_STATUS_MASK, mask.asInt);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	207d      	movs	r0, #125	@ 0x7d
 800274c:	f7fe faec 	bl	8000d28 <_ZL21tmc4671_writeRegisterhm>
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_Z4clipItiET_S0_T0_S1_>:
#define INC_UTIL_FUNCTIONS_H_

#include <stdint.h>

template<class T,class C>
T clip(T v, C l, C h)
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	81fb      	strh	r3, [r7, #14]
{
  return { v > h ? h : v < l ? l : v };
 8002766:	89fb      	ldrh	r3, [r7, #14]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	429a      	cmp	r2, r3
 800276c:	db06      	blt.n	800277c <_Z4clipItiET_S0_T0_S1_+0x24>
 800276e:	89fa      	ldrh	r2, [r7, #14]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4293      	cmp	r3, r2
 8002774:	bfb8      	it	lt
 8002776:	4613      	movlt	r3, r2
 8002778:	b29b      	uxth	r3, r3
 800277a:	e001      	b.n	8002780 <_Z4clipItiET_S0_T0_S1_+0x28>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	b29b      	uxth	r3, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	@ 0x28
 8002790:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002792:	f107 0314 	add.w	r3, r7, #20
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	60da      	str	r2, [r3, #12]
 80027a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b47      	ldr	r3, [pc, #284]	@ (80028c4 <MX_GPIO_Init+0x138>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	4a46      	ldr	r2, [pc, #280]	@ (80028c4 <MX_GPIO_Init+0x138>)
 80027ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b2:	4b44      	ldr	r3, [pc, #272]	@ (80028c4 <MX_GPIO_Init+0x138>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b40      	ldr	r3, [pc, #256]	@ (80028c4 <MX_GPIO_Init+0x138>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a3f      	ldr	r2, [pc, #252]	@ (80028c4 <MX_GPIO_Init+0x138>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b3d      	ldr	r3, [pc, #244]	@ (80028c4 <MX_GPIO_Init+0x138>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	4b39      	ldr	r3, [pc, #228]	@ (80028c4 <MX_GPIO_Init+0x138>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	4a38      	ldr	r2, [pc, #224]	@ (80028c4 <MX_GPIO_Init+0x138>)
 80027e4:	f043 0310 	orr.w	r3, r3, #16
 80027e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ea:	4b36      	ldr	r3, [pc, #216]	@ (80028c4 <MX_GPIO_Init+0x138>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	4b32      	ldr	r3, [pc, #200]	@ (80028c4 <MX_GPIO_Init+0x138>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	4a31      	ldr	r2, [pc, #196]	@ (80028c4 <MX_GPIO_Init+0x138>)
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	6313      	str	r3, [r2, #48]	@ 0x30
 8002806:	4b2f      	ldr	r3, [pc, #188]	@ (80028c4 <MX_GPIO_Init+0x138>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	4b2b      	ldr	r3, [pc, #172]	@ (80028c4 <MX_GPIO_Init+0x138>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	4a2a      	ldr	r2, [pc, #168]	@ (80028c4 <MX_GPIO_Init+0x138>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	6313      	str	r3, [r2, #48]	@ 0x30
 8002822:	4b28      	ldr	r3, [pc, #160]	@ (80028c4 <MX_GPIO_Init+0x138>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port, SPI1_SS1_Pin, GPIO_PIN_SET);
 800282e:	2201      	movs	r2, #1
 8002830:	2110      	movs	r1, #16
 8002832:	4825      	ldr	r0, [pc, #148]	@ (80028c8 <MX_GPIO_Init+0x13c>)
 8002834:	f000 fe02 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DRV_ENABLE_Pin|LED_CLIP_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8002838:	2200      	movs	r2, #0
 800283a:	2183      	movs	r1, #131	@ 0x83
 800283c:	4823      	ldr	r0, [pc, #140]	@ (80028cc <MX_GPIO_Init+0x140>)
 800283e:	f000 fdfd 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 8002842:	2200      	movs	r2, #0
 8002844:	2180      	movs	r1, #128	@ 0x80
 8002846:	4822      	ldr	r0, [pc, #136]	@ (80028d0 <MX_GPIO_Init+0x144>)
 8002848:	f000 fdf8 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_SS1_Pin;
 800284c:	2310      	movs	r3, #16
 800284e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002850:	2301      	movs	r3, #1
 8002852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_SS1_GPIO_Port, &GPIO_InitStruct);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4619      	mov	r1, r3
 8002862:	4819      	ldr	r0, [pc, #100]	@ (80028c8 <MX_GPIO_Init+0x13c>)
 8002864:	f000 fc4e 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_ENABLE_Pin;
 8002868:	2380      	movs	r3, #128	@ 0x80
 800286a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286c:	2301      	movs	r3, #1
 800286e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002870:	2302      	movs	r3, #2
 8002872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	4619      	mov	r1, r3
 800287e:	4813      	ldr	r0, [pc, #76]	@ (80028cc <MX_GPIO_Init+0x140>)
 8002880:	f000 fc40 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SYS_Pin;
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002888:	2301      	movs	r3, #1
 800288a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_SYS_GPIO_Port, &GPIO_InitStruct);
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	4619      	mov	r1, r3
 800289a:	480d      	ldr	r0, [pc, #52]	@ (80028d0 <MX_GPIO_Init+0x144>)
 800289c:	f000 fc32 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_CLIP_Pin|LED_ERR_Pin;
 80028a0:	2303      	movs	r3, #3
 80028a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	4805      	ldr	r0, [pc, #20]	@ (80028cc <MX_GPIO_Init+0x140>)
 80028b8:	f000 fc24 	bl	8003104 <HAL_GPIO_Init>

}
 80028bc:	bf00      	nop
 80028be:	3728      	adds	r7, #40	@ 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40020000 	.word	0x40020000
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40020c00 	.word	0x40020c00

080028d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028d8:	f000 fa6c 	bl	8002db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028dc:	f000 f844 	bl	8002968 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028e0:	f7ff ff54 	bl	800278c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80028e4:	f006 fd58 	bl	8009398 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80028e8:	f000 f8f2 	bl	8002ad0 <MX_SPI1_Init>
  MX_TIM10_Init();
 80028ec:	f000 f9ec 	bl	8002cc8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80028f0:	2201      	movs	r2, #1
 80028f2:	2102      	movs	r1, #2
 80028f4:	4818      	ldr	r0, [pc, #96]	@ (8002958 <main+0x84>)
 80028f6:	f000 fda1 	bl	800343c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_SET);
 80028fa:	2201      	movs	r2, #1
 80028fc:	2101      	movs	r1, #1
 80028fe:	4816      	ldr	r0, [pc, #88]	@ (8002958 <main+0x84>)
 8002900:	f000 fd9c 	bl	800343c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
 8002904:	2201      	movs	r2, #1
 8002906:	2180      	movs	r1, #128	@ 0x80
 8002908:	4814      	ldr	r0, [pc, #80]	@ (800295c <main+0x88>)
 800290a:	f000 fd97 	bl	800343c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800290e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002912:	f000 fac1 	bl	8002e98 <HAL_Delay>
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8002916:	2200      	movs	r2, #0
 8002918:	2102      	movs	r1, #2
 800291a:	480f      	ldr	r0, [pc, #60]	@ (8002958 <main+0x84>)
 800291c:	f000 fd8e 	bl	800343c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin, GPIO_PIN_RESET);
 8002920:	2200      	movs	r2, #0
 8002922:	2101      	movs	r1, #1
 8002924:	480c      	ldr	r0, [pc, #48]	@ (8002958 <main+0x84>)
 8002926:	f000 fd89 	bl	800343c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_RESET);
 800292a:	2200      	movs	r2, #0
 800292c:	2180      	movs	r1, #128	@ 0x80
 800292e:	480b      	ldr	r0, [pc, #44]	@ (800295c <main+0x88>)
 8002930:	f000 fd84 	bl	800343c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002934:	2064      	movs	r0, #100	@ 0x64
 8002936:	f000 faaf 	bl	8002e98 <HAL_Delay>
  /* USER CODE END 2 */
  tmc4671.init();
 800293a:	4809      	ldr	r0, [pc, #36]	@ (8002960 <main+0x8c>)
 800293c:	f7fe fa9e 	bl	8000e7c <_ZN14TMC4671_Driver4initEv>
  HAL_TIM_Base_Start_IT(&htim10);
 8002940:	4808      	ldr	r0, [pc, #32]	@ (8002964 <main+0x90>)
 8002942:	f003 f8fb 	bl	8005b3c <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	HAL_Delay(1);
    /* USER CODE END WHILE */
	  HAL_Delay(5);
 8002946:	2005      	movs	r0, #5
 8002948:	f000 faa6 	bl	8002e98 <HAL_Delay>
	  tmc4671.periodicJob();
 800294c:	4804      	ldr	r0, [pc, #16]	@ (8002960 <main+0x8c>)
 800294e:	f7fe fc59 	bl	8001204 <_ZN14TMC4671_Driver11periodicJobEv>
	  HAL_Delay(5);
 8002952:	bf00      	nop
 8002954:	e7f7      	b.n	8002946 <main+0x72>
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	40020c00 	.word	0x40020c00
 8002960:	20000000 	.word	0x20000000
 8002964:	20000214 	.word	0x20000214

08002968 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b094      	sub	sp, #80	@ 0x50
 800296c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800296e:	f107 0320 	add.w	r3, r7, #32
 8002972:	2230      	movs	r2, #48	@ 0x30
 8002974:	2100      	movs	r1, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f007 f9a8 	bl	8009ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800297c:	f107 030c 	add.w	r3, r7, #12
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	4b2d      	ldr	r3, [pc, #180]	@ (8002a48 <_Z18SystemClock_Configv+0xe0>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	4a2c      	ldr	r2, [pc, #176]	@ (8002a48 <_Z18SystemClock_Configv+0xe0>)
 8002996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800299a:	6413      	str	r3, [r2, #64]	@ 0x40
 800299c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a48 <_Z18SystemClock_Configv+0xe0>)
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a8:	2300      	movs	r3, #0
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	4b27      	ldr	r3, [pc, #156]	@ (8002a4c <_Z18SystemClock_Configv+0xe4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a26      	ldr	r2, [pc, #152]	@ (8002a4c <_Z18SystemClock_Configv+0xe4>)
 80029b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b24      	ldr	r3, [pc, #144]	@ (8002a4c <_Z18SystemClock_Configv+0xe4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029c4:	2301      	movs	r3, #1
 80029c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029ce:	2302      	movs	r3, #2
 80029d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80029d8:	2304      	movs	r3, #4
 80029da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80029dc:	23a8      	movs	r3, #168	@ 0xa8
 80029de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029e0:	2302      	movs	r3, #2
 80029e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029e4:	2307      	movs	r3, #7
 80029e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029e8:	f107 0320 	add.w	r3, r7, #32
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 ff93 	bl	8004918 <HAL_RCC_OscConfig>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002a02:	f000 f859 	bl	8002ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a06:	230f      	movs	r3, #15
 8002a08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a1e:	f107 030c 	add.w	r3, r7, #12
 8002a22:	2105      	movs	r1, #5
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 f9ef 	bl	8004e08 <HAL_RCC_ClockConfig>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002a3a:	f000 f83d 	bl	8002ab8 <Error_Handler>
  }
}
 8002a3e:	bf00      	nop
 8002a40:	3750      	adds	r7, #80	@ 0x50
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40007000 	.word	0x40007000

08002a50 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a12      	ldr	r2, [pc, #72]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d11d      	bne.n	8002a9e <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		static uint32_t counter = 1;
		if(counter%2000 == 0){
 8002a62:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002a68:	fba3 1302 	umull	r1, r3, r3, r2
 8002a6c:	09db      	lsrs	r3, r3, #7
 8002a6e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <HAL_TIM_PeriodElapsedCallback+0x34>
			HAL_GPIO_TogglePin(LED_SYS_GPIO_Port, LED_SYS_Pin);
 8002a7c:	2180      	movs	r1, #128	@ 0x80
 8002a7e:	480d      	ldr	r0, [pc, #52]	@ (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002a80:	f000 fcf5 	bl	800346e <HAL_GPIO_TogglePin>
//			tmc4671.setMoveBy(true, 90);
		}
		if(counter == UINT32_MAX - 1){
 8002a84:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f113 0f02 	cmn.w	r3, #2
 8002a8c:	d102      	bne.n	8002a94 <HAL_TIM_PeriodElapsedCallback+0x44>
			counter = 0;
 8002a8e:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
		}
		counter++;
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	4a04      	ldr	r2, [pc, #16]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a9c:	6013      	str	r3, [r2, #0]
//		tmc4671.periodicJob();
	}
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40014400 	.word	0x40014400
 8002aac:	20000090 	.word	0x20000090
 8002ab0:	10624dd3 	.word	0x10624dd3
 8002ab4:	40020c00 	.word	0x40020c00

08002ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002abc:	b672      	cpsid	i
}
 8002abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	2102      	movs	r1, #2
 8002ac4:	4801      	ldr	r0, [pc, #4]	@ (8002acc <Error_Handler+0x14>)
 8002ac6:	f000 fcb9 	bl	800343c <HAL_GPIO_WritePin>
 8002aca:	e7f9      	b.n	8002ac0 <Error_Handler+0x8>
 8002acc:	40021000 	.word	0x40021000

08002ad0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ad4:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <MX_SPI1_Init+0x64>)
 8002ad6:	4a18      	ldr	r2, [pc, #96]	@ (8002b38 <MX_SPI1_Init+0x68>)
 8002ad8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ada:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <MX_SPI1_Init+0x64>)
 8002adc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ae0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ae2:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <MX_SPI1_Init+0x64>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ae8:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <MX_SPI1_Init+0x64>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002aee:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <MX_SPI1_Init+0x64>)
 8002af0:	2202      	movs	r2, #2
 8002af2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002af4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <MX_SPI1_Init+0x64>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002afa:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <MX_SPI1_Init+0x64>)
 8002afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b02:	4b0c      	ldr	r3, [pc, #48]	@ (8002b34 <MX_SPI1_Init+0x64>)
 8002b04:	2210      	movs	r2, #16
 8002b06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b08:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <MX_SPI1_Init+0x64>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b0e:	4b09      	ldr	r3, [pc, #36]	@ (8002b34 <MX_SPI1_Init+0x64>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b14:	4b07      	ldr	r3, [pc, #28]	@ (8002b34 <MX_SPI1_Init+0x64>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b1a:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <MX_SPI1_Init+0x64>)
 8002b1c:	220a      	movs	r2, #10
 8002b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b20:	4804      	ldr	r0, [pc, #16]	@ (8002b34 <MX_SPI1_Init+0x64>)
 8002b22:	f002 fb69 	bl	80051f8 <HAL_SPI_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b2c:	f7ff ffc4 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	200001bc 	.word	0x200001bc
 8002b38:	40013000 	.word	0x40013000

08002b3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	@ 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a19      	ldr	r2, [pc, #100]	@ (8002bc0 <HAL_SPI_MspInit+0x84>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d12b      	bne.n	8002bb6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <HAL_SPI_MspInit+0x88>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	4a17      	ldr	r2, [pc, #92]	@ (8002bc4 <HAL_SPI_MspInit+0x88>)
 8002b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b6e:	4b15      	ldr	r3, [pc, #84]	@ (8002bc4 <HAL_SPI_MspInit+0x88>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <HAL_SPI_MspInit+0x88>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	4a10      	ldr	r2, [pc, #64]	@ (8002bc4 <HAL_SPI_MspInit+0x88>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <HAL_SPI_MspInit+0x88>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b96:	23e0      	movs	r3, #224	@ 0xe0
 8002b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ba6:	2305      	movs	r3, #5
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	f107 0314 	add.w	r3, r7, #20
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4805      	ldr	r0, [pc, #20]	@ (8002bc8 <HAL_SPI_MspInit+0x8c>)
 8002bb2:	f000 faa7 	bl	8003104 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	3728      	adds	r7, #40	@ 0x28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40013000 	.word	0x40013000
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40020000 	.word	0x40020000

08002bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	4b10      	ldr	r3, [pc, #64]	@ (8002c18 <HAL_MspInit+0x4c>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	4a0f      	ldr	r2, [pc, #60]	@ (8002c18 <HAL_MspInit+0x4c>)
 8002bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002be2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c18 <HAL_MspInit+0x4c>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <HAL_MspInit+0x4c>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	4a08      	ldr	r2, [pc, #32]	@ (8002c18 <HAL_MspInit+0x4c>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfe:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_MspInit+0x4c>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800

08002c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <NMI_Handler+0x4>

08002c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <HardFault_Handler+0x4>

08002c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <MemManage_Handler+0x4>

08002c34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <BusFault_Handler+0x4>

08002c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c40:	bf00      	nop
 8002c42:	e7fd      	b.n	8002c40 <UsageFault_Handler+0x4>

08002c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c72:	f000 f8f1 	bl	8002e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002c80:	4802      	ldr	r0, [pc, #8]	@ (8002c8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c82:	f002 ffcb 	bl	8005c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000214 	.word	0x20000214

08002c90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c94:	4802      	ldr	r0, [pc, #8]	@ (8002ca0 <OTG_FS_IRQHandler+0x10>)
 8002c96:	f000 fd48 	bl	800372a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000740 	.word	0x20000740

08002ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ca8:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <SystemInit+0x20>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cae:	4a05      	ldr	r2, [pc, #20]	@ (8002cc4 <SystemInit+0x20>)
 8002cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <MX_TIM10_Init+0x40>)
 8002cce:	4a0f      	ldr	r2, [pc, #60]	@ (8002d0c <MX_TIM10_Init+0x44>)
 8002cd0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <MX_TIM10_Init+0x40>)
 8002cd4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002cd8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <MX_TIM10_Init+0x40>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 41;
 8002ce0:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <MX_TIM10_Init+0x40>)
 8002ce2:	2229      	movs	r2, #41	@ 0x29
 8002ce4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	@ (8002d08 <MX_TIM10_Init+0x40>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <MX_TIM10_Init+0x40>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002cf2:	4805      	ldr	r0, [pc, #20]	@ (8002d08 <MX_TIM10_Init+0x40>)
 8002cf4:	f002 fed2 	bl	8005a9c <HAL_TIM_Base_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002cfe:	f7ff fedb 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000214 	.word	0x20000214
 8002d0c:	40014400 	.word	0x40014400

08002d10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d58 <HAL_TIM_Base_MspInit+0x48>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d115      	bne.n	8002d4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <HAL_TIM_Base_MspInit+0x4c>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002d5c <HAL_TIM_Base_MspInit+0x4c>)
 8002d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <HAL_TIM_Base_MspInit+0x4c>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2101      	movs	r1, #1
 8002d42:	2019      	movs	r0, #25
 8002d44:	f000 f9a7 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d48:	2019      	movs	r0, #25
 8002d4a:	f000 f9c0 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40014400 	.word	0x40014400
 8002d5c:	40023800 	.word	0x40023800

08002d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d64:	f7ff ff9e 	bl	8002ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d68:	480c      	ldr	r0, [pc, #48]	@ (8002d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d6a:	490d      	ldr	r1, [pc, #52]	@ (8002da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d70:	e002      	b.n	8002d78 <LoopCopyDataInit>

08002d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d76:	3304      	adds	r3, #4

08002d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d7c:	d3f9      	bcc.n	8002d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d80:	4c0a      	ldr	r4, [pc, #40]	@ (8002dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d84:	e001      	b.n	8002d8a <LoopFillZerobss>

08002d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d88:	3204      	adds	r2, #4

08002d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d8c:	d3fb      	bcc.n	8002d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d8e:	f006 ffa5 	bl	8009cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d92:	f7ff fd9f 	bl	80028d4 <main>
  bx  lr    
 8002d96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da0:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8002da4:	0800a018 	.word	0x0800a018
  ldr r2, =_sbss
 8002da8:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8002dac:	20000c7c 	.word	0x20000c7c

08002db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002db0:	e7fe      	b.n	8002db0 <ADC_IRQHandler>
	...

08002db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002db8:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <HAL_Init+0x40>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002df4 <HAL_Init+0x40>)
 8002dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <HAL_Init+0x40>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <HAL_Init+0x40>)
 8002dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd0:	4b08      	ldr	r3, [pc, #32]	@ (8002df4 <HAL_Init+0x40>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a07      	ldr	r2, [pc, #28]	@ (8002df4 <HAL_Init+0x40>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ddc:	2003      	movs	r0, #3
 8002dde:	f000 f94f 	bl	8003080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002de2:	200f      	movs	r0, #15
 8002de4:	f000 f808 	bl	8002df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de8:	f7ff fef0 	bl	8002bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023c00 	.word	0x40023c00

08002df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e00:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <HAL_InitTick+0x54>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <HAL_InitTick+0x58>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f967 	bl	80030ea <HAL_SYSTICK_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e00e      	b.n	8002e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b0f      	cmp	r3, #15
 8002e2a:	d80a      	bhi.n	8002e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f000 f92f 	bl	8003096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e38:	4a06      	ldr	r2, [pc, #24]	@ (8002e54 <HAL_InitTick+0x5c>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000094 	.word	0x20000094
 8002e50:	2000009c 	.word	0x2000009c
 8002e54:	20000098 	.word	0x20000098

08002e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <HAL_IncTick+0x20>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <HAL_IncTick+0x24>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4413      	add	r3, r2
 8002e68:	4a04      	ldr	r2, [pc, #16]	@ (8002e7c <HAL_IncTick+0x24>)
 8002e6a:	6013      	str	r3, [r2, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	2000009c 	.word	0x2000009c
 8002e7c:	2000025c 	.word	0x2000025c

08002e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return uwTick;
 8002e84:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <HAL_GetTick+0x14>)
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	2000025c 	.word	0x2000025c

08002e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea0:	f7ff ffee 	bl	8002e80 <HAL_GetTick>
 8002ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d005      	beq.n	8002ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <HAL_Delay+0x44>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ebe:	bf00      	nop
 8002ec0:	f7ff ffde 	bl	8002e80 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d8f7      	bhi.n	8002ec0 <HAL_Delay+0x28>
  {
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000009c 	.word	0x2000009c

08002ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f12:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	60d3      	str	r3, [r2, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2c:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <__NVIC_GetPriorityGrouping+0x18>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 0307 	and.w	r3, r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db0b      	blt.n	8002f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4907      	ldr	r1, [pc, #28]	@ (8002f7c <__NVIC_EnableIRQ+0x38>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2001      	movs	r0, #1
 8002f66:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	db0a      	blt.n	8002faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	490c      	ldr	r1, [pc, #48]	@ (8002fcc <__NVIC_SetPriority+0x4c>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa8:	e00a      	b.n	8002fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4908      	ldr	r1, [pc, #32]	@ (8002fd0 <__NVIC_SetPriority+0x50>)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	761a      	strb	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	@ 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f1c3 0307 	rsb	r3, r3, #7
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	bf28      	it	cs
 8002ff2:	2304      	movcs	r3, #4
 8002ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d902      	bls.n	8003004 <NVIC_EncodePriority+0x30>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3b03      	subs	r3, #3
 8003002:	e000      	b.n	8003006 <NVIC_EncodePriority+0x32>
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	401a      	ands	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	43d9      	mvns	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	4313      	orrs	r3, r2
         );
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	@ 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800304c:	d301      	bcc.n	8003052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304e:	2301      	movs	r3, #1
 8003050:	e00f      	b.n	8003072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003052:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <SysTick_Config+0x40>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305a:	210f      	movs	r1, #15
 800305c:	f04f 30ff 	mov.w	r0, #4294967295
 8003060:	f7ff ff8e 	bl	8002f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003064:	4b05      	ldr	r3, [pc, #20]	@ (800307c <SysTick_Config+0x40>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306a:	4b04      	ldr	r3, [pc, #16]	@ (800307c <SysTick_Config+0x40>)
 800306c:	2207      	movs	r2, #7
 800306e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	e000e010 	.word	0xe000e010

08003080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff29 	bl	8002ee0 <__NVIC_SetPriorityGrouping>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a8:	f7ff ff3e 	bl	8002f28 <__NVIC_GetPriorityGrouping>
 80030ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f7ff ff8e 	bl	8002fd4 <NVIC_EncodePriority>
 80030b8:	4602      	mov	r2, r0
 80030ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff5d 	bl	8002f80 <__NVIC_SetPriority>
}
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4603      	mov	r3, r0
 80030d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff31 	bl	8002f44 <__NVIC_EnableIRQ>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff ffa2 	bl	800303c <SysTick_Config>
 80030f8:	4603      	mov	r3, r0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	@ 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	e16b      	b.n	80033f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003120:	2201      	movs	r2, #1
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	429a      	cmp	r2, r3
 800313a:	f040 815a 	bne.w	80033f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d005      	beq.n	8003156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003152:	2b02      	cmp	r3, #2
 8003154:	d130      	bne.n	80031b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	2203      	movs	r2, #3
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800318c:	2201      	movs	r2, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 0201 	and.w	r2, r3, #1
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d017      	beq.n	80031f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2203      	movs	r2, #3
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d123      	bne.n	8003248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	08da      	lsrs	r2, r3, #3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3208      	adds	r2, #8
 8003208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	220f      	movs	r2, #15
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	08da      	lsrs	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3208      	adds	r2, #8
 8003242:	69b9      	ldr	r1, [r7, #24]
 8003244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2203      	movs	r2, #3
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0203 	and.w	r2, r3, #3
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80b4 	beq.w	80033f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	4b60      	ldr	r3, [pc, #384]	@ (8003410 <HAL_GPIO_Init+0x30c>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	4a5f      	ldr	r2, [pc, #380]	@ (8003410 <HAL_GPIO_Init+0x30c>)
 8003294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003298:	6453      	str	r3, [r2, #68]	@ 0x44
 800329a:	4b5d      	ldr	r3, [pc, #372]	@ (8003410 <HAL_GPIO_Init+0x30c>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003414 <HAL_GPIO_Init+0x310>)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	3302      	adds	r3, #2
 80032ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	220f      	movs	r2, #15
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a52      	ldr	r2, [pc, #328]	@ (8003418 <HAL_GPIO_Init+0x314>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d02b      	beq.n	800332a <HAL_GPIO_Init+0x226>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a51      	ldr	r2, [pc, #324]	@ (800341c <HAL_GPIO_Init+0x318>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d025      	beq.n	8003326 <HAL_GPIO_Init+0x222>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a50      	ldr	r2, [pc, #320]	@ (8003420 <HAL_GPIO_Init+0x31c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01f      	beq.n	8003322 <HAL_GPIO_Init+0x21e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003424 <HAL_GPIO_Init+0x320>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d019      	beq.n	800331e <HAL_GPIO_Init+0x21a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4e      	ldr	r2, [pc, #312]	@ (8003428 <HAL_GPIO_Init+0x324>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_GPIO_Init+0x216>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4d      	ldr	r2, [pc, #308]	@ (800342c <HAL_GPIO_Init+0x328>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00d      	beq.n	8003316 <HAL_GPIO_Init+0x212>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003430 <HAL_GPIO_Init+0x32c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <HAL_GPIO_Init+0x20e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4b      	ldr	r2, [pc, #300]	@ (8003434 <HAL_GPIO_Init+0x330>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_GPIO_Init+0x20a>
 800330a:	2307      	movs	r3, #7
 800330c:	e00e      	b.n	800332c <HAL_GPIO_Init+0x228>
 800330e:	2308      	movs	r3, #8
 8003310:	e00c      	b.n	800332c <HAL_GPIO_Init+0x228>
 8003312:	2306      	movs	r3, #6
 8003314:	e00a      	b.n	800332c <HAL_GPIO_Init+0x228>
 8003316:	2305      	movs	r3, #5
 8003318:	e008      	b.n	800332c <HAL_GPIO_Init+0x228>
 800331a:	2304      	movs	r3, #4
 800331c:	e006      	b.n	800332c <HAL_GPIO_Init+0x228>
 800331e:	2303      	movs	r3, #3
 8003320:	e004      	b.n	800332c <HAL_GPIO_Init+0x228>
 8003322:	2302      	movs	r3, #2
 8003324:	e002      	b.n	800332c <HAL_GPIO_Init+0x228>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_GPIO_Init+0x228>
 800332a:	2300      	movs	r3, #0
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	f002 0203 	and.w	r2, r2, #3
 8003332:	0092      	lsls	r2, r2, #2
 8003334:	4093      	lsls	r3, r2
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800333c:	4935      	ldr	r1, [pc, #212]	@ (8003414 <HAL_GPIO_Init+0x310>)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	3302      	adds	r3, #2
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800334a:	4b3b      	ldr	r3, [pc, #236]	@ (8003438 <HAL_GPIO_Init+0x334>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800336e:	4a32      	ldr	r2, [pc, #200]	@ (8003438 <HAL_GPIO_Init+0x334>)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003374:	4b30      	ldr	r3, [pc, #192]	@ (8003438 <HAL_GPIO_Init+0x334>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003398:	4a27      	ldr	r2, [pc, #156]	@ (8003438 <HAL_GPIO_Init+0x334>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800339e:	4b26      	ldr	r3, [pc, #152]	@ (8003438 <HAL_GPIO_Init+0x334>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <HAL_GPIO_Init+0x334>)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <HAL_GPIO_Init+0x334>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ec:	4a12      	ldr	r2, [pc, #72]	@ (8003438 <HAL_GPIO_Init+0x334>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3301      	adds	r3, #1
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	f67f ae90 	bls.w	8003120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3724      	adds	r7, #36	@ 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800
 8003414:	40013800 	.word	0x40013800
 8003418:	40020000 	.word	0x40020000
 800341c:	40020400 	.word	0x40020400
 8003420:	40020800 	.word	0x40020800
 8003424:	40020c00 	.word	0x40020c00
 8003428:	40021000 	.word	0x40021000
 800342c:	40021400 	.word	0x40021400
 8003430:	40021800 	.word	0x40021800
 8003434:	40021c00 	.word	0x40021c00
 8003438:	40013c00 	.word	0x40013c00

0800343c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
 8003448:	4613      	mov	r3, r2
 800344a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800344c:	787b      	ldrb	r3, [r7, #1]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003458:	e003      	b.n	8003462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800345a:	887b      	ldrh	r3, [r7, #2]
 800345c:	041a      	lsls	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	619a      	str	r2, [r3, #24]
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003480:	887a      	ldrh	r2, [r7, #2]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4013      	ands	r3, r2
 8003486:	041a      	lsls	r2, r3, #16
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	43d9      	mvns	r1, r3
 800348c:	887b      	ldrh	r3, [r7, #2]
 800348e:	400b      	ands	r3, r1
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	619a      	str	r2, [r3, #24]
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af02      	add	r7, sp, #8
 80034a8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e101      	b.n	80036b8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f006 f8ec 	bl	80096ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2203      	movs	r2, #3
 80034d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034e2:	d102      	bne.n	80034ea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f002 fe83 	bl	80061fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	7c1a      	ldrb	r2, [r3, #16]
 80034fc:	f88d 2000 	strb.w	r2, [sp]
 8003500:	3304      	adds	r3, #4
 8003502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003504:	f002 fd62 	bl	8005fcc <USB_CoreInit>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0ce      	b.n	80036b8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f002 fe7b 	bl	800621c <USB_SetCurrentMode>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0bf      	b.n	80036b8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]
 800353c:	e04a      	b.n	80035d4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3315      	adds	r3, #21
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3314      	adds	r3, #20
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	b298      	uxth	r0, r3
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	332e      	adds	r3, #46	@ 0x2e
 800357a:	4602      	mov	r2, r0
 800357c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	3318      	adds	r3, #24
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	331c      	adds	r3, #28
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3320      	adds	r3, #32
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	3324      	adds	r3, #36	@ 0x24
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	3301      	adds	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	791b      	ldrb	r3, [r3, #4]
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d3af      	bcc.n	800353e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
 80035e2:	e044      	b.n	800366e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003610:	7bfa      	ldrb	r2, [r7, #15]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	3301      	adds	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	791b      	ldrb	r3, [r3, #4]
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	429a      	cmp	r2, r3
 8003676:	d3b5      	bcc.n	80035e4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7c1a      	ldrb	r2, [r3, #16]
 8003680:	f88d 2000 	strb.w	r2, [sp]
 8003684:	3304      	adds	r3, #4
 8003686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003688:	f002 fe14 	bl	80062b4 <USB_DevInit>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e00c      	b.n	80036b8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f003 fe5e 	bl	8007372 <USB_DevDisconnect>

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_PCD_Start+0x1c>
 80036d8:	2302      	movs	r3, #2
 80036da:	e022      	b.n	8003722 <HAL_PCD_Start+0x62>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d009      	beq.n	8003704 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d105      	bne.n	8003704 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f002 fd65 	bl	80061d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f003 fe0c 	bl	8007330 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800372a:	b590      	push	{r4, r7, lr}
 800372c:	b08d      	sub	sp, #52	@ 0x34
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f003 feca 	bl	80074da <USB_GetMode>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	f040 848c 	bne.w	8004066 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f003 fe2e 	bl	80073b4 <USB_ReadInterrupts>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8482 	beq.w	8004064 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f003 fe1b 	bl	80073b4 <USB_ReadInterrupts>
 800377e:	4603      	mov	r3, r0
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b02      	cmp	r3, #2
 8003786:	d107      	bne.n	8003798 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f002 0202 	and.w	r2, r2, #2
 8003796:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f003 fe09 	bl	80073b4 <USB_ReadInterrupts>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b10      	cmp	r3, #16
 80037aa:	d161      	bne.n	8003870 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0210 	bic.w	r2, r2, #16
 80037ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f003 020f 	and.w	r2, r3, #15
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	3304      	adds	r3, #4
 80037da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	0c5b      	lsrs	r3, r3, #17
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d124      	bne.n	8003832 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d035      	beq.n	8003860 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003802:	b29b      	uxth	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	6a38      	ldr	r0, [r7, #32]
 8003808:	f003 fc40 	bl	800708c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003818:	441a      	add	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800382a:	441a      	add	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	615a      	str	r2, [r3, #20]
 8003830:	e016      	b.n	8003860 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	0c5b      	lsrs	r3, r3, #17
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	2b06      	cmp	r3, #6
 800383c:	d110      	bne.n	8003860 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003844:	2208      	movs	r2, #8
 8003846:	4619      	mov	r1, r3
 8003848:	6a38      	ldr	r0, [r7, #32]
 800384a:	f003 fc1f 	bl	800708c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800385a:	441a      	add	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0210 	orr.w	r2, r2, #16
 800386e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f003 fd9d 	bl	80073b4 <USB_ReadInterrupts>
 800387a:	4603      	mov	r3, r0
 800387c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003880:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003884:	f040 80a7 	bne.w	80039d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f003 fda2 	bl	80073da <USB_ReadDevAllOutEpInterrupt>
 8003896:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003898:	e099      	b.n	80039ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 808e 	beq.w	80039c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f003 fdc6 	bl	8007442 <USB_ReadDevOutEPInterrupt>
 80038b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00c      	beq.n	80038dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ce:	461a      	mov	r2, r3
 80038d0:	2301      	movs	r3, #1
 80038d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fe8c 	bl	80045f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00c      	beq.n	8003900 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f2:	461a      	mov	r2, r3
 80038f4:	2308      	movs	r3, #8
 80038f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 ff62 	bl	80047c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003916:	461a      	mov	r2, r3
 8003918:	2310      	movs	r3, #16
 800391a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d030      	beq.n	8003988 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392e:	2b80      	cmp	r3, #128	@ 0x80
 8003930:	d109      	bne.n	8003946 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003940:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003944:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003948:	4613      	mov	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	3304      	adds	r3, #4
 800395a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	78db      	ldrb	r3, [r3, #3]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d108      	bne.n	8003976 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2200      	movs	r2, #0
 8003968:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	b2db      	uxtb	r3, r3
 800396e:	4619      	mov	r1, r3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f005 ffaf 	bl	80098d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003982:	461a      	mov	r2, r3
 8003984:	2302      	movs	r3, #2
 8003986:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800399e:	461a      	mov	r2, r3
 80039a0:	2320      	movs	r3, #32
 80039a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ba:	461a      	mov	r2, r3
 80039bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	3301      	adds	r3, #1
 80039c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80039c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80039ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f47f af62 	bne.w	800389a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f003 fcea 	bl	80073b4 <USB_ReadInterrupts>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039ea:	f040 80db 	bne.w	8003ba4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f003 fd0b 	bl	800740e <USB_ReadDevAllInEpInterrupt>
 80039f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80039fe:	e0cd      	b.n	8003b9c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80c2 	beq.w	8003b90 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	4611      	mov	r1, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f003 fd31 	bl	800747e <USB_ReadDevInEPInterrupt>
 8003a1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d057      	beq.n	8003ad8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	2201      	movs	r2, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69f9      	ldr	r1, [r7, #28]
 8003a44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a48:	4013      	ands	r3, r2
 8003a4a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	799b      	ldrb	r3, [r3, #6]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d132      	bne.n	8003acc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	3320      	adds	r3, #32
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4403      	add	r3, r0
 8003a86:	331c      	adds	r3, #28
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4419      	add	r1, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4403      	add	r3, r0
 8003a9a:	3320      	adds	r3, #32
 8003a9c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d113      	bne.n	8003acc <HAL_PCD_IRQHandler+0x3a2>
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	3324      	adds	r3, #36	@ 0x24
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d108      	bne.n	8003acc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	f003 fd38 	bl	800753c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f005 fe79 	bl	80097ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aee:	461a      	mov	r2, r3
 8003af0:	2308      	movs	r3, #8
 8003af2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b26:	461a      	mov	r2, r3
 8003b28:	2340      	movs	r3, #64	@ 0x40
 8003b2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d023      	beq.n	8003b7e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b38:	6a38      	ldr	r0, [r7, #32]
 8003b3a:	f002 fd1f 	bl	800657c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	3310      	adds	r3, #16
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3304      	adds	r3, #4
 8003b50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	78db      	ldrb	r3, [r3, #3]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d108      	bne.n	8003b6c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f005 fec6 	bl	80098f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fca5 	bl	80044da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	3301      	adds	r3, #1
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f47f af2e 	bne.w	8003a00 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f003 fc03 	bl	80073b4 <USB_ReadInterrupts>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bb8:	d122      	bne.n	8003c00 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d108      	bne.n	8003bea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003be0:	2100      	movs	r1, #0
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fe8c 	bl	8004900 <HAL_PCDEx_LPM_Callback>
 8003be8:	e002      	b.n	8003bf0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f005 fe64 	bl	80098b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f003 fbd5 	bl	80073b4 <USB_ReadInterrupts>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c14:	d112      	bne.n	8003c3c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d102      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f005 fe20 	bl	800986c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003c3a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f003 fbb7 	bl	80073b4 <USB_ReadInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c50:	f040 80b7 	bne.w	8003dc2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2110      	movs	r1, #16
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f002 fc84 	bl	800657c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c74:	2300      	movs	r3, #0
 8003c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c78:	e046      	b.n	8003d08 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c86:	461a      	mov	r2, r3
 8003c88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c9e:	0151      	lsls	r1, r2, #5
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	440a      	add	r2, r1
 8003ca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ca8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cc0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cd2:	0151      	lsls	r1, r2, #5
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	440a      	add	r2, r1
 8003cd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cdc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ce0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf2:	0151      	lsls	r1, r2, #5
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	440a      	add	r2, r1
 8003cf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cfc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d00:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d04:	3301      	adds	r3, #1
 8003d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	791b      	ldrb	r3, [r3, #4]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d3b2      	bcc.n	8003c7a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d22:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003d26:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	7bdb      	ldrb	r3, [r3, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d016      	beq.n	8003d5e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d40:	f043 030b 	orr.w	r3, r3, #11
 8003d44:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d56:	f043 030b 	orr.w	r3, r3, #11
 8003d5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d5c:	e015      	b.n	8003d8a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d70:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003d74:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d84:	f043 030b 	orr.w	r3, r3, #11
 8003d88:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d98:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d9c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dac:	461a      	mov	r2, r3
 8003dae:	f003 fbc5 	bl	800753c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f003 faf4 	bl	80073b4 <USB_ReadInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dd6:	d123      	bne.n	8003e20 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f003 fb8a 	bl	80074f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f002 fc41 	bl	800666e <USB_GetDevSpeed>
 8003dec:	4603      	mov	r3, r0
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681c      	ldr	r4, [r3, #0]
 8003df8:	f001 f9f2 	bl	80051e0 <HAL_RCC_GetHCLKFreq>
 8003dfc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e02:	461a      	mov	r2, r3
 8003e04:	4620      	mov	r0, r4
 8003e06:	f002 f945 	bl	8006094 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f005 fd05 	bl	800981a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f003 fac5 	bl	80073b4 <USB_ReadInterrupts>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d10a      	bne.n	8003e4a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f005 fce2 	bl	80097fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f002 0208 	and.w	r2, r2, #8
 8003e48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f003 fab0 	bl	80073b4 <USB_ReadInterrupts>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5a:	2b80      	cmp	r3, #128	@ 0x80
 8003e5c:	d123      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e6e:	e014      	b.n	8003e9a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 faf2 	bl	8004478 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	3301      	adds	r3, #1
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	791b      	ldrb	r3, [r3, #4]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d3e4      	bcc.n	8003e70 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f003 fa82 	bl	80073b4 <USB_ReadInterrupts>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eba:	d13c      	bne.n	8003f36 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec0:	e02b      	b.n	8003f1a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	3318      	adds	r3, #24
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d115      	bne.n	8003f14 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ee8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	da12      	bge.n	8003f14 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	3317      	adds	r3, #23
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fab2 	bl	8004478 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	3301      	adds	r3, #1
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	791b      	ldrb	r3, [r3, #4]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d3cd      	bcc.n	8003ec2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f003 fa3a 	bl	80073b4 <USB_ReadInterrupts>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f4a:	d156      	bne.n	8003ffa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f50:	e045      	b.n	8003fde <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d12e      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	da2b      	bge.n	8003fd8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003f8c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d121      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fd4:	6053      	str	r3, [r2, #4]
            break;
 8003fd6:	e008      	b.n	8003fea <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fda:	3301      	adds	r3, #1
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	791b      	ldrb	r3, [r3, #4]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d3b3      	bcc.n	8003f52 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003ff8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f003 f9d8 	bl	80073b4 <USB_ReadInterrupts>
 8004004:	4603      	mov	r3, r0
 8004006:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400e:	d10a      	bne.n	8004026 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f005 fc83 	bl	800991c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004024:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f003 f9c2 	bl	80073b4 <USB_ReadInterrupts>
 8004030:	4603      	mov	r3, r0
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b04      	cmp	r3, #4
 8004038:	d115      	bne.n	8004066 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f005 fc73 	bl	8009938 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6859      	ldr	r1, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	e000      	b.n	8004066 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004064:	bf00      	nop
    }
  }
}
 8004066:	3734      	adds	r7, #52	@ 0x34
 8004068:	46bd      	mov	sp, r7
 800406a:	bd90      	pop	{r4, r7, pc}

0800406c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_PCD_SetAddress+0x1a>
 8004082:	2302      	movs	r3, #2
 8004084:	e012      	b.n	80040ac <HAL_PCD_SetAddress+0x40>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f003 f921 	bl	80072e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	4608      	mov	r0, r1
 80040be:	4611      	mov	r1, r2
 80040c0:	461a      	mov	r2, r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	70fb      	strb	r3, [r7, #3]
 80040c6:	460b      	mov	r3, r1
 80040c8:	803b      	strh	r3, [r7, #0]
 80040ca:	4613      	mov	r3, r2
 80040cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da0f      	bge.n	80040fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	f003 020f 	and.w	r2, r3, #15
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	3310      	adds	r3, #16
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	3304      	adds	r3, #4
 80040f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	705a      	strb	r2, [r3, #1]
 80040f8:	e00f      	b.n	800411a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	f003 020f 	and.w	r2, r3, #15
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4413      	add	r3, r2
 8004110:	3304      	adds	r3, #4
 8004112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	b2da      	uxtb	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004126:	883b      	ldrh	r3, [r7, #0]
 8004128:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	78ba      	ldrb	r2, [r7, #2]
 8004134:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	785b      	ldrb	r3, [r3, #1]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d004      	beq.n	8004148 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004148:	78bb      	ldrb	r3, [r7, #2]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d102      	bne.n	8004154 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_PCD_EP_Open+0xae>
 800415e:	2302      	movs	r3, #2
 8004160:	e00e      	b.n	8004180 <HAL_PCD_EP_Open+0xcc>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68f9      	ldr	r1, [r7, #12]
 8004170:	4618      	mov	r0, r3
 8004172:	f002 faa1 	bl	80066b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800417e:	7afb      	ldrb	r3, [r7, #11]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004198:	2b00      	cmp	r3, #0
 800419a:	da0f      	bge.n	80041bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	f003 020f 	and.w	r2, r3, #15
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	3310      	adds	r3, #16
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4413      	add	r3, r2
 80041b0:	3304      	adds	r3, #4
 80041b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	705a      	strb	r2, [r3, #1]
 80041ba:	e00f      	b.n	80041dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	f003 020f 	and.w	r2, r3, #15
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	3304      	adds	r3, #4
 80041d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_PCD_EP_Close+0x6e>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e00e      	b.n	8004214 <HAL_PCD_EP_Close+0x8c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	4618      	mov	r0, r3
 8004206:	f002 fadf 	bl	80067c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	460b      	mov	r3, r1
 800422a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800422c:	7afb      	ldrb	r3, [r7, #11]
 800422e:	f003 020f 	and.w	r2, r3, #15
 8004232:	4613      	mov	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4413      	add	r3, r2
 8004242:	3304      	adds	r3, #4
 8004244:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2200      	movs	r2, #0
 800425c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800425e:	7afb      	ldrb	r3, [r7, #11]
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	b2da      	uxtb	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	799b      	ldrb	r3, [r3, #6]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d102      	bne.n	8004278 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	799b      	ldrb	r3, [r3, #6]
 8004280:	461a      	mov	r2, r3
 8004282:	6979      	ldr	r1, [r7, #20]
 8004284:	f002 fb7c 	bl	8006980 <USB_EPStartXfer>

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b086      	sub	sp, #24
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	460b      	mov	r3, r1
 80042a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042a2:	7afb      	ldrb	r3, [r7, #11]
 80042a4:	f003 020f 	and.w	r2, r3, #15
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	3310      	adds	r3, #16
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4413      	add	r3, r2
 80042b6:	3304      	adds	r3, #4
 80042b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2200      	movs	r2, #0
 80042ca:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2201      	movs	r2, #1
 80042d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d2:	7afb      	ldrb	r3, [r7, #11]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	799b      	ldrb	r3, [r3, #6]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d102      	bne.n	80042ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	799b      	ldrb	r3, [r3, #6]
 80042f4:	461a      	mov	r2, r3
 80042f6:	6979      	ldr	r1, [r7, #20]
 80042f8:	f002 fb42 	bl	8006980 <USB_EPStartXfer>

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	460b      	mov	r3, r1
 8004310:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	7912      	ldrb	r2, [r2, #4]
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e04f      	b.n	80043c4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004328:	2b00      	cmp	r3, #0
 800432a:	da0f      	bge.n	800434c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	f003 020f 	and.w	r2, r3, #15
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	3310      	adds	r3, #16
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	4413      	add	r3, r2
 8004340:	3304      	adds	r3, #4
 8004342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	705a      	strb	r2, [r3, #1]
 800434a:	e00d      	b.n	8004368 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	3304      	adds	r3, #4
 8004360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800436e:	78fb      	ldrb	r3, [r7, #3]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_PCD_EP_SetStall+0x82>
 8004384:	2302      	movs	r3, #2
 8004386:	e01d      	b.n	80043c4 <HAL_PCD_EP_SetStall+0xbe>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68f9      	ldr	r1, [r7, #12]
 8004396:	4618      	mov	r0, r3
 8004398:	f002 fed0 	bl	800713c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d109      	bne.n	80043ba <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7999      	ldrb	r1, [r3, #6]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043b4:	461a      	mov	r2, r3
 80043b6:	f003 f8c1 	bl	800753c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	7912      	ldrb	r2, [r2, #4]
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e042      	b.n	8004470 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	da0f      	bge.n	8004412 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	f003 020f 	and.w	r2, r3, #15
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	3310      	adds	r3, #16
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	3304      	adds	r3, #4
 8004408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	705a      	strb	r2, [r3, #1]
 8004410:	e00f      	b.n	8004432 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	f003 020f 	and.w	r2, r3, #15
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4413      	add	r3, r2
 8004428:	3304      	adds	r3, #4
 800442a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	b2da      	uxtb	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_PCD_EP_ClrStall+0x86>
 800444e:	2302      	movs	r3, #2
 8004450:	e00e      	b.n	8004470 <HAL_PCD_EP_ClrStall+0xa4>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	4618      	mov	r0, r3
 8004462:	f002 fed9 	bl	8007218 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004488:	2b00      	cmp	r3, #0
 800448a:	da0c      	bge.n	80044a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	f003 020f 	and.w	r2, r3, #15
 8004492:	4613      	mov	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	3310      	adds	r3, #16
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	4413      	add	r3, r2
 80044a0:	3304      	adds	r3, #4
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e00c      	b.n	80044c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	f003 020f 	and.w	r2, r3, #15
 80044ac:	4613      	mov	r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	4413      	add	r3, r2
 80044bc:	3304      	adds	r3, #4
 80044be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68f9      	ldr	r1, [r7, #12]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f002 fcf8 	bl	8006ebc <USB_EPStopXfer>
 80044cc:	4603      	mov	r3, r0
 80044ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80044d0:	7afb      	ldrb	r3, [r7, #11]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	@ 0x28
 80044de:	af02      	add	r7, sp, #8
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	3310      	adds	r3, #16
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	4413      	add	r3, r2
 80044fe:	3304      	adds	r3, #4
 8004500:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	429a      	cmp	r2, r3
 800450c:	d901      	bls.n	8004512 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e06b      	b.n	80045ea <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	429a      	cmp	r2, r3
 8004526:	d902      	bls.n	800452e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3303      	adds	r3, #3
 8004532:	089b      	lsrs	r3, r3, #2
 8004534:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004536:	e02a      	b.n	800458e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	429a      	cmp	r2, r3
 800454c:	d902      	bls.n	8004554 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	3303      	adds	r3, #3
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	68d9      	ldr	r1, [r3, #12]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	4603      	mov	r3, r0
 8004570:	6978      	ldr	r0, [r7, #20]
 8004572:	f002 fd4d 	bl	8007010 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	441a      	add	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	695a      	ldr	r2, [r3, #20]
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	441a      	add	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d809      	bhi.n	80045b8 <PCD_WriteEmptyTxFifo+0xde>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	695a      	ldr	r2, [r3, #20]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d203      	bcs.n	80045b8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1bf      	bne.n	8004538 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d811      	bhi.n	80045e8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	2201      	movs	r2, #1
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	43db      	mvns	r3, r3
 80045de:	6939      	ldr	r1, [r7, #16]
 80045e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045e4:	4013      	ands	r3, r2
 80045e6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3720      	adds	r7, #32
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	333c      	adds	r3, #60	@ 0x3c
 800460c:	3304      	adds	r3, #4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	799b      	ldrb	r3, [r3, #6]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d17b      	bne.n	8004722 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	4a61      	ldr	r2, [pc, #388]	@ (80047bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	f240 80b9 	bls.w	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80b3 	beq.w	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004656:	461a      	mov	r2, r3
 8004658:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800465c:	6093      	str	r3, [r2, #8]
 800465e:	e0a7      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004676:	461a      	mov	r2, r3
 8004678:	2320      	movs	r3, #32
 800467a:	6093      	str	r3, [r2, #8]
 800467c:	e098      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 8093 	bne.w	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	4a4b      	ldr	r2, [pc, #300]	@ (80047bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d90f      	bls.n	80046b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a8:	461a      	mov	r2, r3
 80046aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ae:	6093      	str	r3, [r2, #8]
 80046b0:	e07e      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	4413      	add	r3, r2
 80046c4:	3304      	adds	r3, #4
 80046c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a1a      	ldr	r2, [r3, #32]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	0159      	lsls	r1, r3, #5
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	440b      	add	r3, r1
 80046d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046de:	1ad2      	subs	r2, r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d114      	bne.n	8004714 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046fc:	461a      	mov	r2, r3
 80046fe:	2101      	movs	r1, #1
 8004700:	f002 ff1c 	bl	800753c <USB_EP0_OutStart>
 8004704:	e006      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	441a      	add	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	4619      	mov	r1, r3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f005 f83a 	bl	8009794 <HAL_PCD_DataOutStageCallback>
 8004720:	e046      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	4a26      	ldr	r2, [pc, #152]	@ (80047c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d124      	bne.n	8004774 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004740:	461a      	mov	r2, r3
 8004742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004746:	6093      	str	r3, [r2, #8]
 8004748:	e032      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004760:	461a      	mov	r2, r3
 8004762:	2320      	movs	r3, #32
 8004764:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	b2db      	uxtb	r3, r3
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f005 f811 	bl	8009794 <HAL_PCD_DataOutStageCallback>
 8004772:	e01d      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d114      	bne.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	4613      	mov	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d108      	bne.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800479c:	461a      	mov	r2, r3
 800479e:	2100      	movs	r1, #0
 80047a0:	f002 fecc 	bl	800753c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f004 fff2 	bl	8009794 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	4f54300a 	.word	0x4f54300a
 80047c0:	4f54310a 	.word	0x4f54310a

080047c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	333c      	adds	r3, #60	@ 0x3c
 80047dc:	3304      	adds	r3, #4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a15      	ldr	r2, [pc, #84]	@ (800484c <PCD_EP_OutSetupPacket_int+0x88>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d90e      	bls.n	8004818 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004810:	461a      	mov	r2, r3
 8004812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004816:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f004 ffa9 	bl	8009770 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4a0a      	ldr	r2, [pc, #40]	@ (800484c <PCD_EP_OutSetupPacket_int+0x88>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d90c      	bls.n	8004840 <PCD_EP_OutSetupPacket_int+0x7c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	799b      	ldrb	r3, [r3, #6]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d108      	bne.n	8004840 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004838:	461a      	mov	r2, r3
 800483a:	2101      	movs	r1, #1
 800483c:	f002 fe7e 	bl	800753c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	4f54300a 	.word	0x4f54300a

08004850 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	70fb      	strb	r3, [r7, #3]
 800485c:	4613      	mov	r3, r2
 800485e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004866:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d107      	bne.n	800487e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800486e:	883b      	ldrh	r3, [r7, #0]
 8004870:	0419      	lsls	r1, r3, #16
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	430a      	orrs	r2, r1
 800487a:	629a      	str	r2, [r3, #40]	@ 0x28
 800487c:	e028      	b.n	80048d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	4413      	add	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]
 8004890:	e00d      	b.n	80048ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	3340      	adds	r3, #64	@ 0x40
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	4413      	add	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	3301      	adds	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
 80048ae:	7bfa      	ldrb	r2, [r7, #15]
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d3ec      	bcc.n	8004892 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048b8:	883b      	ldrh	r3, [r7, #0]
 80048ba:	0418      	lsls	r0, r3, #16
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	4302      	orrs	r2, r0
 80048c8:	3340      	adds	r3, #64	@ 0x40
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	887a      	ldrh	r2, [r7, #2]
 80048f0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e267      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d075      	beq.n	8004a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004936:	4b88      	ldr	r3, [pc, #544]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	2b04      	cmp	r3, #4
 8004940:	d00c      	beq.n	800495c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004942:	4b85      	ldr	r3, [pc, #532]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800494a:	2b08      	cmp	r3, #8
 800494c:	d112      	bne.n	8004974 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800494e:	4b82      	ldr	r3, [pc, #520]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004956:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800495a:	d10b      	bne.n	8004974 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d05b      	beq.n	8004a20 <HAL_RCC_OscConfig+0x108>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d157      	bne.n	8004a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e242      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800497c:	d106      	bne.n	800498c <HAL_RCC_OscConfig+0x74>
 800497e:	4b76      	ldr	r3, [pc, #472]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a75      	ldr	r2, [pc, #468]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e01d      	b.n	80049c8 <HAL_RCC_OscConfig+0xb0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x98>
 8004996:	4b70      	ldr	r3, [pc, #448]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a6f      	ldr	r2, [pc, #444]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 800499c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e00b      	b.n	80049c8 <HAL_RCC_OscConfig+0xb0>
 80049b0:	4b69      	ldr	r3, [pc, #420]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a68      	ldr	r2, [pc, #416]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4b66      	ldr	r3, [pc, #408]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a65      	ldr	r2, [pc, #404]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d013      	beq.n	80049f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fe fa56 	bl	8002e80 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d8:	f7fe fa52 	bl	8002e80 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	@ 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e207      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0xc0>
 80049f6:	e014      	b.n	8004a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fe fa42 	bl	8002e80 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fe fa3e 	bl	8002e80 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	@ 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e1f3      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a12:	4b51      	ldr	r3, [pc, #324]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0xe8>
 8004a1e:	e000      	b.n	8004a22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d063      	beq.n	8004af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a3a:	4b47      	ldr	r3, [pc, #284]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d11c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a46:	4b44      	ldr	r3, [pc, #272]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d116      	bne.n	8004a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a52:	4b41      	ldr	r3, [pc, #260]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_RCC_OscConfig+0x152>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e1c7      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4937      	ldr	r1, [pc, #220]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7e:	e03a      	b.n	8004af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d020      	beq.n	8004aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a88:	4b34      	ldr	r3, [pc, #208]	@ (8004b5c <HAL_RCC_OscConfig+0x244>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fe f9f7 	bl	8002e80 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a96:	f7fe f9f3 	bl	8002e80 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e1a8      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab4:	4b28      	ldr	r3, [pc, #160]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4925      	ldr	r1, [pc, #148]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]
 8004ac8:	e015      	b.n	8004af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aca:	4b24      	ldr	r3, [pc, #144]	@ (8004b5c <HAL_RCC_OscConfig+0x244>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fe f9d6 	bl	8002e80 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad8:	f7fe f9d2 	bl	8002e80 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e187      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aea:	4b1b      	ldr	r3, [pc, #108]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d036      	beq.n	8004b70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d016      	beq.n	8004b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0a:	4b15      	ldr	r3, [pc, #84]	@ (8004b60 <HAL_RCC_OscConfig+0x248>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fe f9b6 	bl	8002e80 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b18:	f7fe f9b2 	bl	8002e80 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e167      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCC_OscConfig+0x200>
 8004b36:	e01b      	b.n	8004b70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b38:	4b09      	ldr	r3, [pc, #36]	@ (8004b60 <HAL_RCC_OscConfig+0x248>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3e:	f7fe f99f 	bl	8002e80 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b44:	e00e      	b.n	8004b64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b46:	f7fe f99b 	bl	8002e80 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d907      	bls.n	8004b64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e150      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	42470000 	.word	0x42470000
 8004b60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b64:	4b88      	ldr	r3, [pc, #544]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ea      	bne.n	8004b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8097 	beq.w	8004cac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b82:	4b81      	ldr	r3, [pc, #516]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10f      	bne.n	8004bae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	4b7d      	ldr	r3, [pc, #500]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	4a7c      	ldr	r2, [pc, #496]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b9e:	4b7a      	ldr	r3, [pc, #488]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004baa:	2301      	movs	r3, #1
 8004bac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bae:	4b77      	ldr	r3, [pc, #476]	@ (8004d8c <HAL_RCC_OscConfig+0x474>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d118      	bne.n	8004bec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bba:	4b74      	ldr	r3, [pc, #464]	@ (8004d8c <HAL_RCC_OscConfig+0x474>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a73      	ldr	r2, [pc, #460]	@ (8004d8c <HAL_RCC_OscConfig+0x474>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc6:	f7fe f95b 	bl	8002e80 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bce:	f7fe f957 	bl	8002e80 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e10c      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be0:	4b6a      	ldr	r3, [pc, #424]	@ (8004d8c <HAL_RCC_OscConfig+0x474>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCC_OscConfig+0x2ea>
 8004bf4:	4b64      	ldr	r3, [pc, #400]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf8:	4a63      	ldr	r2, [pc, #396]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c00:	e01c      	b.n	8004c3c <HAL_RCC_OscConfig+0x324>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b05      	cmp	r3, #5
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x30c>
 8004c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0e:	4a5e      	ldr	r2, [pc, #376]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c10:	f043 0304 	orr.w	r3, r3, #4
 8004c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c16:	4b5c      	ldr	r3, [pc, #368]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c22:	e00b      	b.n	8004c3c <HAL_RCC_OscConfig+0x324>
 8004c24:	4b58      	ldr	r3, [pc, #352]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c28:	4a57      	ldr	r2, [pc, #348]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c30:	4b55      	ldr	r3, [pc, #340]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c34:	4a54      	ldr	r2, [pc, #336]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c36:	f023 0304 	bic.w	r3, r3, #4
 8004c3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c44:	f7fe f91c 	bl	8002e80 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4a:	e00a      	b.n	8004c62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4c:	f7fe f918 	bl	8002e80 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e0cb      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c62:	4b49      	ldr	r3, [pc, #292]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0ee      	beq.n	8004c4c <HAL_RCC_OscConfig+0x334>
 8004c6e:	e014      	b.n	8004c9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c70:	f7fe f906 	bl	8002e80 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c76:	e00a      	b.n	8004c8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c78:	f7fe f902 	bl	8002e80 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e0b5      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1ee      	bne.n	8004c78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d105      	bne.n	8004cac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca0:	4b39      	ldr	r3, [pc, #228]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca4:	4a38      	ldr	r2, [pc, #224]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004ca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004caa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80a1 	beq.w	8004df8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cb6:	4b34      	ldr	r3, [pc, #208]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d05c      	beq.n	8004d7c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d141      	bne.n	8004d4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cca:	4b31      	ldr	r3, [pc, #196]	@ (8004d90 <HAL_RCC_OscConfig+0x478>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd0:	f7fe f8d6 	bl	8002e80 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd8:	f7fe f8d2 	bl	8002e80 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e087      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cea:	4b27      	ldr	r3, [pc, #156]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f0      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69da      	ldr	r2, [r3, #28]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	041b      	lsls	r3, r3, #16
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d18:	061b      	lsls	r3, r3, #24
 8004d1a:	491b      	ldr	r1, [pc, #108]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d20:	4b1b      	ldr	r3, [pc, #108]	@ (8004d90 <HAL_RCC_OscConfig+0x478>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d26:	f7fe f8ab 	bl	8002e80 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2e:	f7fe f8a7 	bl	8002e80 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e05c      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d40:	4b11      	ldr	r3, [pc, #68]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f0      	beq.n	8004d2e <HAL_RCC_OscConfig+0x416>
 8004d4c:	e054      	b.n	8004df8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4e:	4b10      	ldr	r3, [pc, #64]	@ (8004d90 <HAL_RCC_OscConfig+0x478>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fe f894 	bl	8002e80 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5c:	f7fe f890 	bl	8002e80 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e045      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6e:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x444>
 8004d7a:	e03d      	b.n	8004df8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d107      	bne.n	8004d94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e038      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	40007000 	.word	0x40007000
 8004d90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d94:	4b1b      	ldr	r3, [pc, #108]	@ (8004e04 <HAL_RCC_OscConfig+0x4ec>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d028      	beq.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d121      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d11a      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004dca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d111      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	085b      	lsrs	r3, r3, #1
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d107      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40023800 	.word	0x40023800

08004e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0cc      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b68      	ldr	r3, [pc, #416]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d90c      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b65      	ldr	r3, [pc, #404]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b63      	ldr	r3, [pc, #396]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0b8      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d020      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e5c:	4b59      	ldr	r3, [pc, #356]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4a58      	ldr	r2, [pc, #352]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e74:	4b53      	ldr	r3, [pc, #332]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4a52      	ldr	r2, [pc, #328]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e80:	4b50      	ldr	r3, [pc, #320]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	494d      	ldr	r1, [pc, #308]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d044      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d107      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea6:	4b47      	ldr	r3, [pc, #284]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d119      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e07f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d003      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d107      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d109      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e06f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e067      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ee6:	4b37      	ldr	r3, [pc, #220]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 0203 	bic.w	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	4934      	ldr	r1, [pc, #208]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ef8:	f7fd ffc2 	bl	8002e80 <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f00:	f7fd ffbe 	bl	8002e80 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e04f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f16:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 020c 	and.w	r2, r3, #12
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d1eb      	bne.n	8004f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f28:	4b25      	ldr	r3, [pc, #148]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d20c      	bcs.n	8004f50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f36:	4b22      	ldr	r3, [pc, #136]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3e:	4b20      	ldr	r3, [pc, #128]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e032      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f5c:	4b19      	ldr	r3, [pc, #100]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4916      	ldr	r1, [pc, #88]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f7a:	4b12      	ldr	r3, [pc, #72]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	490e      	ldr	r1, [pc, #56]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f8e:	f000 f821 	bl	8004fd4 <HAL_RCC_GetSysClockFreq>
 8004f92:	4602      	mov	r2, r0
 8004f94:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	490a      	ldr	r1, [pc, #40]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa0:	5ccb      	ldrb	r3, [r1, r3]
 8004fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa6:	4a09      	ldr	r2, [pc, #36]	@ (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004faa:	4b09      	ldr	r3, [pc, #36]	@ (8004fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fd ff22 	bl	8002df8 <HAL_InitTick>

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40023c00 	.word	0x40023c00
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	08009ff8 	.word	0x08009ff8
 8004fcc:	20000094 	.word	0x20000094
 8004fd0:	20000098 	.word	0x20000098

08004fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd8:	b094      	sub	sp, #80	@ 0x50
 8004fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fec:	4b79      	ldr	r3, [pc, #484]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d00d      	beq.n	8005014 <HAL_RCC_GetSysClockFreq+0x40>
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	f200 80e1 	bhi.w	80051c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0x34>
 8005002:	2b04      	cmp	r3, #4
 8005004:	d003      	beq.n	800500e <HAL_RCC_GetSysClockFreq+0x3a>
 8005006:	e0db      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005008:	4b73      	ldr	r3, [pc, #460]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800500a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800500c:	e0db      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800500e:	4b73      	ldr	r3, [pc, #460]	@ (80051dc <HAL_RCC_GetSysClockFreq+0x208>)
 8005010:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005012:	e0d8      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005014:	4b6f      	ldr	r3, [pc, #444]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800501c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800501e:	4b6d      	ldr	r3, [pc, #436]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d063      	beq.n	80050f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800502a:	4b6a      	ldr	r3, [pc, #424]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	099b      	lsrs	r3, r3, #6
 8005030:	2200      	movs	r2, #0
 8005032:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005034:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503c:	633b      	str	r3, [r7, #48]	@ 0x30
 800503e:	2300      	movs	r3, #0
 8005040:	637b      	str	r3, [r7, #52]	@ 0x34
 8005042:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005046:	4622      	mov	r2, r4
 8005048:	462b      	mov	r3, r5
 800504a:	f04f 0000 	mov.w	r0, #0
 800504e:	f04f 0100 	mov.w	r1, #0
 8005052:	0159      	lsls	r1, r3, #5
 8005054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005058:	0150      	lsls	r0, r2, #5
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4621      	mov	r1, r4
 8005060:	1a51      	subs	r1, r2, r1
 8005062:	6139      	str	r1, [r7, #16]
 8005064:	4629      	mov	r1, r5
 8005066:	eb63 0301 	sbc.w	r3, r3, r1
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005078:	4659      	mov	r1, fp
 800507a:	018b      	lsls	r3, r1, #6
 800507c:	4651      	mov	r1, sl
 800507e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005082:	4651      	mov	r1, sl
 8005084:	018a      	lsls	r2, r1, #6
 8005086:	4651      	mov	r1, sl
 8005088:	ebb2 0801 	subs.w	r8, r2, r1
 800508c:	4659      	mov	r1, fp
 800508e:	eb63 0901 	sbc.w	r9, r3, r1
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800509e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050a6:	4690      	mov	r8, r2
 80050a8:	4699      	mov	r9, r3
 80050aa:	4623      	mov	r3, r4
 80050ac:	eb18 0303 	adds.w	r3, r8, r3
 80050b0:	60bb      	str	r3, [r7, #8]
 80050b2:	462b      	mov	r3, r5
 80050b4:	eb49 0303 	adc.w	r3, r9, r3
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050c6:	4629      	mov	r1, r5
 80050c8:	024b      	lsls	r3, r1, #9
 80050ca:	4621      	mov	r1, r4
 80050cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050d0:	4621      	mov	r1, r4
 80050d2:	024a      	lsls	r2, r1, #9
 80050d4:	4610      	mov	r0, r2
 80050d6:	4619      	mov	r1, r3
 80050d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050da:	2200      	movs	r2, #0
 80050dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050e4:	f7fb fc66 	bl	80009b4 <__aeabi_uldivmod>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4613      	mov	r3, r2
 80050ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f0:	e058      	b.n	80051a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f2:	4b38      	ldr	r3, [pc, #224]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	099b      	lsrs	r3, r3, #6
 80050f8:	2200      	movs	r2, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	4611      	mov	r1, r2
 80050fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005102:	623b      	str	r3, [r7, #32]
 8005104:	2300      	movs	r3, #0
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24
 8005108:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800510c:	4642      	mov	r2, r8
 800510e:	464b      	mov	r3, r9
 8005110:	f04f 0000 	mov.w	r0, #0
 8005114:	f04f 0100 	mov.w	r1, #0
 8005118:	0159      	lsls	r1, r3, #5
 800511a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800511e:	0150      	lsls	r0, r2, #5
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4641      	mov	r1, r8
 8005126:	ebb2 0a01 	subs.w	sl, r2, r1
 800512a:	4649      	mov	r1, r9
 800512c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800513c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005140:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005144:	ebb2 040a 	subs.w	r4, r2, sl
 8005148:	eb63 050b 	sbc.w	r5, r3, fp
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	00eb      	lsls	r3, r5, #3
 8005156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800515a:	00e2      	lsls	r2, r4, #3
 800515c:	4614      	mov	r4, r2
 800515e:	461d      	mov	r5, r3
 8005160:	4643      	mov	r3, r8
 8005162:	18e3      	adds	r3, r4, r3
 8005164:	603b      	str	r3, [r7, #0]
 8005166:	464b      	mov	r3, r9
 8005168:	eb45 0303 	adc.w	r3, r5, r3
 800516c:	607b      	str	r3, [r7, #4]
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800517a:	4629      	mov	r1, r5
 800517c:	028b      	lsls	r3, r1, #10
 800517e:	4621      	mov	r1, r4
 8005180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005184:	4621      	mov	r1, r4
 8005186:	028a      	lsls	r2, r1, #10
 8005188:	4610      	mov	r0, r2
 800518a:	4619      	mov	r1, r3
 800518c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800518e:	2200      	movs	r2, #0
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	61fa      	str	r2, [r7, #28]
 8005194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005198:	f7fb fc0c 	bl	80009b4 <__aeabi_uldivmod>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4613      	mov	r3, r2
 80051a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80051a4:	4b0b      	ldr	r3, [pc, #44]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	0c1b      	lsrs	r3, r3, #16
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	3301      	adds	r3, #1
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80051b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051be:	e002      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051c0:	4b05      	ldr	r3, [pc, #20]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80051c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3750      	adds	r7, #80	@ 0x50
 80051cc:	46bd      	mov	sp, r7
 80051ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d2:	bf00      	nop
 80051d4:	40023800 	.word	0x40023800
 80051d8:	00f42400 	.word	0x00f42400
 80051dc:	007a1200 	.word	0x007a1200

080051e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e4:	4b03      	ldr	r3, [pc, #12]	@ (80051f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051e6:	681b      	ldr	r3, [r3, #0]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20000094 	.word	0x20000094

080051f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e07b      	b.n	8005302 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d108      	bne.n	8005224 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800521a:	d009      	beq.n	8005230 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	61da      	str	r2, [r3, #28]
 8005222:	e005      	b.n	8005230 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fd fc76 	bl	8002b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005266:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b4:	ea42 0103 	orr.w	r1, r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	0c1b      	lsrs	r3, r3, #16
 80052ce:	f003 0104 	and.w	r1, r3, #4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	f003 0210 	and.w	r2, r3, #16
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b088      	sub	sp, #32
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800531a:	f7fd fdb1 	bl	8002e80 <HAL_GetTick>
 800531e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d001      	beq.n	8005334 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005330:	2302      	movs	r3, #2
 8005332:	e12a      	b.n	800558a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_SPI_Transmit+0x36>
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e122      	b.n	800558a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_SPI_Transmit+0x48>
 800534e:	2302      	movs	r3, #2
 8005350:	e11b      	b.n	800558a <HAL_SPI_Transmit+0x280>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2203      	movs	r2, #3
 800535e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	88fa      	ldrh	r2, [r7, #6]
 8005372:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a0:	d10f      	bne.n	80053c2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053cc:	2b40      	cmp	r3, #64	@ 0x40
 80053ce:	d007      	beq.n	80053e0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053e8:	d152      	bne.n	8005490 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <HAL_SPI_Transmit+0xee>
 80053f2:	8b7b      	ldrh	r3, [r7, #26]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d145      	bne.n	8005484 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fc:	881a      	ldrh	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005408:	1c9a      	adds	r2, r3, #2
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800541c:	e032      	b.n	8005484 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b02      	cmp	r3, #2
 800542a:	d112      	bne.n	8005452 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005430:	881a      	ldrh	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543c:	1c9a      	adds	r2, r3, #2
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005450:	e018      	b.n	8005484 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005452:	f7fd fd15 	bl	8002e80 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d803      	bhi.n	800546a <HAL_SPI_Transmit+0x160>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005468:	d102      	bne.n	8005470 <HAL_SPI_Transmit+0x166>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d109      	bne.n	8005484 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e082      	b.n	800558a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1c7      	bne.n	800541e <HAL_SPI_Transmit+0x114>
 800548e:	e053      	b.n	8005538 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_SPI_Transmit+0x194>
 8005498:	8b7b      	ldrh	r3, [r7, #26]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d147      	bne.n	800552e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	330c      	adds	r3, #12
 80054a8:	7812      	ldrb	r2, [r2, #0]
 80054aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054c4:	e033      	b.n	800552e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d113      	bne.n	80054fc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	7812      	ldrb	r2, [r2, #0]
 80054e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054fa:	e018      	b.n	800552e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054fc:	f7fd fcc0 	bl	8002e80 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d803      	bhi.n	8005514 <HAL_SPI_Transmit+0x20a>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d102      	bne.n	800551a <HAL_SPI_Transmit+0x210>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e02d      	b.n	800558a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005532:	b29b      	uxth	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1c6      	bne.n	80054c6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 fa59 	bl	80059f4 <SPI_EndRxTxTransaction>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10a      	bne.n	800556c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005588:	2300      	movs	r3, #0
  }
}
 800558a:	4618      	mov	r0, r3
 800558c:	3720      	adds	r7, #32
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b08a      	sub	sp, #40	@ 0x28
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
 800559e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055a0:	2301      	movs	r3, #1
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055a4:	f7fd fc6c 	bl	8002e80 <HAL_GetTick>
 80055a8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055b0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80055b8:	887b      	ldrh	r3, [r7, #2]
 80055ba:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055bc:	7ffb      	ldrb	r3, [r7, #31]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d00c      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x4a>
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055c8:	d106      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d102      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x46>
 80055d2:	7ffb      	ldrb	r3, [r7, #31]
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d001      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
 80055da:	e17f      	b.n	80058dc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_SPI_TransmitReceive+0x5c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <HAL_SPI_TransmitReceive+0x5c>
 80055e8:	887b      	ldrh	r3, [r7, #2]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e174      	b.n	80058dc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_SPI_TransmitReceive+0x6e>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e16d      	b.n	80058dc <HAL_SPI_TransmitReceive+0x34a>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b04      	cmp	r3, #4
 8005612:	d003      	beq.n	800561c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2205      	movs	r2, #5
 8005618:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	887a      	ldrh	r2, [r7, #2]
 800562c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	887a      	ldrh	r2, [r7, #2]
 8005632:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	887a      	ldrh	r2, [r7, #2]
 800563e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	887a      	ldrh	r2, [r7, #2]
 8005644:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565c:	2b40      	cmp	r3, #64	@ 0x40
 800565e:	d007      	beq.n	8005670 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800566e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005678:	d17e      	bne.n	8005778 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_SPI_TransmitReceive+0xf6>
 8005682:	8afb      	ldrh	r3, [r7, #22]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d16c      	bne.n	8005762 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568c:	881a      	ldrh	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005698:	1c9a      	adds	r2, r3, #2
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ac:	e059      	b.n	8005762 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d11b      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x162>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d016      	beq.n	80056f4 <HAL_SPI_TransmitReceive+0x162>
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d113      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d0:	881a      	ldrh	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056dc:	1c9a      	adds	r2, r3, #2
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d119      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x1a4>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d014      	beq.n	8005736 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005716:	b292      	uxth	r2, r2
 8005718:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571e:	1c9a      	adds	r2, r3, #2
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005732:	2301      	movs	r3, #1
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005736:	f7fd fba3 	bl	8002e80 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005742:	429a      	cmp	r2, r3
 8005744:	d80d      	bhi.n	8005762 <HAL_SPI_TransmitReceive+0x1d0>
 8005746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d009      	beq.n	8005762 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e0bc      	b.n	80058dc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1a0      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x11c>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d19b      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x11c>
 8005776:	e082      	b.n	800587e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <HAL_SPI_TransmitReceive+0x1f4>
 8005780:	8afb      	ldrh	r3, [r7, #22]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d171      	bne.n	800586a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	330c      	adds	r3, #12
 8005790:	7812      	ldrb	r2, [r2, #0]
 8005792:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ac:	e05d      	b.n	800586a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d11c      	bne.n	80057f6 <HAL_SPI_TransmitReceive+0x264>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d017      	beq.n	80057f6 <HAL_SPI_TransmitReceive+0x264>
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d114      	bne.n	80057f6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	7812      	ldrb	r2, [r2, #0]
 80057d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b01      	cmp	r3, #1
 8005802:	d119      	bne.n	8005838 <HAL_SPI_TransmitReceive+0x2a6>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d014      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005834:	2301      	movs	r3, #1
 8005836:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005838:	f7fd fb22 	bl	8002e80 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005844:	429a      	cmp	r2, r3
 8005846:	d803      	bhi.n	8005850 <HAL_SPI_TransmitReceive+0x2be>
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d102      	bne.n	8005856 <HAL_SPI_TransmitReceive+0x2c4>
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e038      	b.n	80058dc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d19c      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x21c>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d197      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800587e:	6a3a      	ldr	r2, [r7, #32]
 8005880:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f8b6 	bl	80059f4 <SPI_EndRxTxTransaction>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d008      	beq.n	80058a0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2220      	movs	r2, #32
 8005892:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e01d      	b.n	80058dc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058a8:	2300      	movs	r3, #0
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80058da:	2300      	movs	r3, #0
  }
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3728      	adds	r7, #40	@ 0x28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	4613      	mov	r3, r2
 80058f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058f4:	f7fd fac4 	bl	8002e80 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	4413      	add	r3, r2
 8005902:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005904:	f7fd fabc 	bl	8002e80 <HAL_GetTick>
 8005908:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800590a:	4b39      	ldr	r3, [pc, #228]	@ (80059f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	015b      	lsls	r3, r3, #5
 8005910:	0d1b      	lsrs	r3, r3, #20
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	fb02 f303 	mul.w	r3, r2, r3
 8005918:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800591a:	e054      	b.n	80059c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005922:	d050      	beq.n	80059c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005924:	f7fd faac 	bl	8002e80 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	429a      	cmp	r2, r3
 8005932:	d902      	bls.n	800593a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d13d      	bne.n	80059b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005948:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005952:	d111      	bne.n	8005978 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800595c:	d004      	beq.n	8005968 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005966:	d107      	bne.n	8005978 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005976:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005980:	d10f      	bne.n	80059a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e017      	b.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4013      	ands	r3, r2
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	bf0c      	ite	eq
 80059d6:	2301      	moveq	r3, #1
 80059d8:	2300      	movne	r3, #0
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d19b      	bne.n	800591c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3720      	adds	r7, #32
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000094 	.word	0x20000094

080059f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2201      	movs	r2, #1
 8005a08:	2102      	movs	r1, #2
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f7ff ff6a 	bl	80058e4 <SPI_WaitFlagStateUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d007      	beq.n	8005a26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e032      	b.n	8005a8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a26:	4b1b      	ldr	r3, [pc, #108]	@ (8005a94 <SPI_EndRxTxTransaction+0xa0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005a98 <SPI_EndRxTxTransaction+0xa4>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	0d5b      	lsrs	r3, r3, #21
 8005a32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a44:	d112      	bne.n	8005a6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2180      	movs	r1, #128	@ 0x80
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff ff47 	bl	80058e4 <SPI_WaitFlagStateUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d016      	beq.n	8005a8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a60:	f043 0220 	orr.w	r2, r3, #32
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e00f      	b.n	8005a8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a82:	2b80      	cmp	r3, #128	@ 0x80
 8005a84:	d0f2      	beq.n	8005a6c <SPI_EndRxTxTransaction+0x78>
 8005a86:	e000      	b.n	8005a8a <SPI_EndRxTxTransaction+0x96>
        break;
 8005a88:	bf00      	nop
  }

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20000094 	.word	0x20000094
 8005a98:	165e9f81 	.word	0x165e9f81

08005a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e041      	b.n	8005b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fd f924 	bl	8002d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f000 f9b6 	bl	8005e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d001      	beq.n	8005b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e04e      	b.n	8005bf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a23      	ldr	r2, [pc, #140]	@ (8005c00 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d022      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x80>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b7e:	d01d      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x80>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a1f      	ldr	r2, [pc, #124]	@ (8005c04 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d018      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x80>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005c08 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d013      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x80>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1c      	ldr	r2, [pc, #112]	@ (8005c0c <HAL_TIM_Base_Start_IT+0xd0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00e      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x80>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d009      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x80>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a19      	ldr	r2, [pc, #100]	@ (8005c14 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d004      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x80>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a18      	ldr	r2, [pc, #96]	@ (8005c18 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d111      	bne.n	8005be0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b06      	cmp	r3, #6
 8005bcc:	d010      	beq.n	8005bf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0201 	orr.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bde:	e007      	b.n	8005bf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40010000 	.word	0x40010000
 8005c04:	40000400 	.word	0x40000400
 8005c08:	40000800 	.word	0x40000800
 8005c0c:	40000c00 	.word	0x40000c00
 8005c10:	40010400 	.word	0x40010400
 8005c14:	40014000 	.word	0x40014000
 8005c18:	40001800 	.word	0x40001800

08005c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d020      	beq.n	8005c80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01b      	beq.n	8005c80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0202 	mvn.w	r2, #2
 8005c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f8d2 	bl	8005e10 <HAL_TIM_IC_CaptureCallback>
 8005c6c:	e005      	b.n	8005c7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f8c4 	bl	8005dfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f8d5 	bl	8005e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d020      	beq.n	8005ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01b      	beq.n	8005ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0204 	mvn.w	r2, #4
 8005c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f8ac 	bl	8005e10 <HAL_TIM_IC_CaptureCallback>
 8005cb8:	e005      	b.n	8005cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f89e 	bl	8005dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f8af 	bl	8005e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d020      	beq.n	8005d18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01b      	beq.n	8005d18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0208 	mvn.w	r2, #8
 8005ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2204      	movs	r2, #4
 8005cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f886 	bl	8005e10 <HAL_TIM_IC_CaptureCallback>
 8005d04:	e005      	b.n	8005d12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f878 	bl	8005dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f889 	bl	8005e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d020      	beq.n	8005d64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01b      	beq.n	8005d64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f06f 0210 	mvn.w	r2, #16
 8005d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f860 	bl	8005e10 <HAL_TIM_IC_CaptureCallback>
 8005d50:	e005      	b.n	8005d5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f852 	bl	8005dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f863 	bl	8005e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00c      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0201 	mvn.w	r2, #1
 8005d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7fc fe64 	bl	8002a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00c      	beq.n	8005dac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d007      	beq.n	8005dac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f906 	bl	8005fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00c      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d007      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f834 	bl	8005e38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00c      	beq.n	8005df4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0220 	mvn.w	r2, #32
 8005dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f8d8 	bl	8005fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005df4:	bf00      	nop
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a46      	ldr	r2, [pc, #280]	@ (8005f78 <TIM_Base_SetConfig+0x12c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d013      	beq.n	8005e8c <TIM_Base_SetConfig+0x40>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e6a:	d00f      	beq.n	8005e8c <TIM_Base_SetConfig+0x40>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a43      	ldr	r2, [pc, #268]	@ (8005f7c <TIM_Base_SetConfig+0x130>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00b      	beq.n	8005e8c <TIM_Base_SetConfig+0x40>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a42      	ldr	r2, [pc, #264]	@ (8005f80 <TIM_Base_SetConfig+0x134>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d007      	beq.n	8005e8c <TIM_Base_SetConfig+0x40>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a41      	ldr	r2, [pc, #260]	@ (8005f84 <TIM_Base_SetConfig+0x138>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_Base_SetConfig+0x40>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a40      	ldr	r2, [pc, #256]	@ (8005f88 <TIM_Base_SetConfig+0x13c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d108      	bne.n	8005e9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a35      	ldr	r2, [pc, #212]	@ (8005f78 <TIM_Base_SetConfig+0x12c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d02b      	beq.n	8005efe <TIM_Base_SetConfig+0xb2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eac:	d027      	beq.n	8005efe <TIM_Base_SetConfig+0xb2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a32      	ldr	r2, [pc, #200]	@ (8005f7c <TIM_Base_SetConfig+0x130>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d023      	beq.n	8005efe <TIM_Base_SetConfig+0xb2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a31      	ldr	r2, [pc, #196]	@ (8005f80 <TIM_Base_SetConfig+0x134>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01f      	beq.n	8005efe <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a30      	ldr	r2, [pc, #192]	@ (8005f84 <TIM_Base_SetConfig+0x138>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d01b      	beq.n	8005efe <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a2f      	ldr	r2, [pc, #188]	@ (8005f88 <TIM_Base_SetConfig+0x13c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d017      	beq.n	8005efe <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8005f8c <TIM_Base_SetConfig+0x140>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d013      	beq.n	8005efe <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8005f90 <TIM_Base_SetConfig+0x144>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00f      	beq.n	8005efe <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8005f94 <TIM_Base_SetConfig+0x148>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00b      	beq.n	8005efe <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8005f98 <TIM_Base_SetConfig+0x14c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d007      	beq.n	8005efe <TIM_Base_SetConfig+0xb2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8005f9c <TIM_Base_SetConfig+0x150>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d003      	beq.n	8005efe <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a29      	ldr	r2, [pc, #164]	@ (8005fa0 <TIM_Base_SetConfig+0x154>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d108      	bne.n	8005f10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a10      	ldr	r2, [pc, #64]	@ (8005f78 <TIM_Base_SetConfig+0x12c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d003      	beq.n	8005f44 <TIM_Base_SetConfig+0xf8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a12      	ldr	r2, [pc, #72]	@ (8005f88 <TIM_Base_SetConfig+0x13c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d103      	bne.n	8005f4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d105      	bne.n	8005f6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f023 0201 	bic.w	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	611a      	str	r2, [r3, #16]
  }
}
 8005f6a:	bf00      	nop
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40000800 	.word	0x40000800
 8005f84:	40000c00 	.word	0x40000c00
 8005f88:	40010400 	.word	0x40010400
 8005f8c:	40014000 	.word	0x40014000
 8005f90:	40014400 	.word	0x40014400
 8005f94:	40014800 	.word	0x40014800
 8005f98:	40001800 	.word	0x40001800
 8005f9c:	40001c00 	.word	0x40001c00
 8005fa0:	40002000 	.word	0x40002000

08005fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fcc:	b084      	sub	sp, #16
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	f107 001c 	add.w	r0, r7, #28
 8005fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fde:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d123      	bne.n	800602e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005ffa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800600e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006012:	2b01      	cmp	r3, #1
 8006014:	d105      	bne.n	8006022 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 fae8 	bl	80075f8 <USB_CoreReset>
 8006028:	4603      	mov	r3, r0
 800602a:	73fb      	strb	r3, [r7, #15]
 800602c:	e01b      	b.n	8006066 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f001 fadc 	bl	80075f8 <USB_CoreReset>
 8006040:	4603      	mov	r3, r0
 8006042:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006044:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006050:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	639a      	str	r2, [r3, #56]	@ 0x38
 8006058:	e005      	b.n	8006066 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006066:	7fbb      	ldrb	r3, [r7, #30]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d10b      	bne.n	8006084 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f043 0206 	orr.w	r2, r3, #6
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f043 0220 	orr.w	r2, r3, #32
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006090:	b004      	add	sp, #16
 8006092:	4770      	bx	lr

08006094 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	4613      	mov	r3, r2
 80060a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d165      	bne.n	8006174 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4a41      	ldr	r2, [pc, #260]	@ (80061b0 <USB_SetTurnaroundTime+0x11c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d906      	bls.n	80060be <USB_SetTurnaroundTime+0x2a>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4a40      	ldr	r2, [pc, #256]	@ (80061b4 <USB_SetTurnaroundTime+0x120>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d202      	bcs.n	80060be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80060b8:	230f      	movs	r3, #15
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e062      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4a3c      	ldr	r2, [pc, #240]	@ (80061b4 <USB_SetTurnaroundTime+0x120>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d306      	bcc.n	80060d4 <USB_SetTurnaroundTime+0x40>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	4a3b      	ldr	r2, [pc, #236]	@ (80061b8 <USB_SetTurnaroundTime+0x124>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d202      	bcs.n	80060d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80060ce:	230e      	movs	r3, #14
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	e057      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4a38      	ldr	r2, [pc, #224]	@ (80061b8 <USB_SetTurnaroundTime+0x124>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d306      	bcc.n	80060ea <USB_SetTurnaroundTime+0x56>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4a37      	ldr	r2, [pc, #220]	@ (80061bc <USB_SetTurnaroundTime+0x128>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d202      	bcs.n	80060ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80060e4:	230d      	movs	r3, #13
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	e04c      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4a33      	ldr	r2, [pc, #204]	@ (80061bc <USB_SetTurnaroundTime+0x128>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d306      	bcc.n	8006100 <USB_SetTurnaroundTime+0x6c>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	4a32      	ldr	r2, [pc, #200]	@ (80061c0 <USB_SetTurnaroundTime+0x12c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d802      	bhi.n	8006100 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80060fa:	230c      	movs	r3, #12
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e041      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4a2f      	ldr	r2, [pc, #188]	@ (80061c0 <USB_SetTurnaroundTime+0x12c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d906      	bls.n	8006116 <USB_SetTurnaroundTime+0x82>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4a2e      	ldr	r2, [pc, #184]	@ (80061c4 <USB_SetTurnaroundTime+0x130>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d802      	bhi.n	8006116 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006110:	230b      	movs	r3, #11
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e036      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4a2a      	ldr	r2, [pc, #168]	@ (80061c4 <USB_SetTurnaroundTime+0x130>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d906      	bls.n	800612c <USB_SetTurnaroundTime+0x98>
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4a29      	ldr	r2, [pc, #164]	@ (80061c8 <USB_SetTurnaroundTime+0x134>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d802      	bhi.n	800612c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006126:	230a      	movs	r3, #10
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	e02b      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4a26      	ldr	r2, [pc, #152]	@ (80061c8 <USB_SetTurnaroundTime+0x134>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d906      	bls.n	8006142 <USB_SetTurnaroundTime+0xae>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4a25      	ldr	r2, [pc, #148]	@ (80061cc <USB_SetTurnaroundTime+0x138>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d202      	bcs.n	8006142 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800613c:	2309      	movs	r3, #9
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	e020      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	4a21      	ldr	r2, [pc, #132]	@ (80061cc <USB_SetTurnaroundTime+0x138>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d306      	bcc.n	8006158 <USB_SetTurnaroundTime+0xc4>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4a20      	ldr	r2, [pc, #128]	@ (80061d0 <USB_SetTurnaroundTime+0x13c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d802      	bhi.n	8006158 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006152:	2308      	movs	r3, #8
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	e015      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4a1d      	ldr	r2, [pc, #116]	@ (80061d0 <USB_SetTurnaroundTime+0x13c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d906      	bls.n	800616e <USB_SetTurnaroundTime+0xda>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4a1c      	ldr	r2, [pc, #112]	@ (80061d4 <USB_SetTurnaroundTime+0x140>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d202      	bcs.n	800616e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006168:	2307      	movs	r3, #7
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e00a      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800616e:	2306      	movs	r3, #6
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	e007      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d102      	bne.n	8006180 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800617a:	2309      	movs	r3, #9
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e001      	b.n	8006184 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006180:	2309      	movs	r3, #9
 8006182:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	029b      	lsls	r3, r3, #10
 8006198:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800619c:	431a      	orrs	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	00d8acbf 	.word	0x00d8acbf
 80061b4:	00e4e1c0 	.word	0x00e4e1c0
 80061b8:	00f42400 	.word	0x00f42400
 80061bc:	01067380 	.word	0x01067380
 80061c0:	011a499f 	.word	0x011a499f
 80061c4:	01312cff 	.word	0x01312cff
 80061c8:	014ca43f 	.word	0x014ca43f
 80061cc:	016e3600 	.word	0x016e3600
 80061d0:	01a6ab1f 	.word	0x01a6ab1f
 80061d4:	01e84800 	.word	0x01e84800

080061d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f043 0201 	orr.w	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f023 0201 	bic.w	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d115      	bne.n	800626a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800624a:	200a      	movs	r0, #10
 800624c:	f7fc fe24 	bl	8002e98 <HAL_Delay>
      ms += 10U;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	330a      	adds	r3, #10
 8006254:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 f93f 	bl	80074da <USB_GetMode>
 800625c:	4603      	mov	r3, r0
 800625e:	2b01      	cmp	r3, #1
 8006260:	d01e      	beq.n	80062a0 <USB_SetCurrentMode+0x84>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2bc7      	cmp	r3, #199	@ 0xc7
 8006266:	d9f0      	bls.n	800624a <USB_SetCurrentMode+0x2e>
 8006268:	e01a      	b.n	80062a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d115      	bne.n	800629c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800627c:	200a      	movs	r0, #10
 800627e:	f7fc fe0b 	bl	8002e98 <HAL_Delay>
      ms += 10U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	330a      	adds	r3, #10
 8006286:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 f926 	bl	80074da <USB_GetMode>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <USB_SetCurrentMode+0x84>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2bc7      	cmp	r3, #199	@ 0xc7
 8006298:	d9f0      	bls.n	800627c <USB_SetCurrentMode+0x60>
 800629a:	e001      	b.n	80062a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e005      	b.n	80062ac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80062a4:	d101      	bne.n	80062aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062b4:	b084      	sub	sp, #16
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b086      	sub	sp, #24
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80062c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	e009      	b.n	80062e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	3340      	adds	r3, #64	@ 0x40
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	2200      	movs	r2, #0
 80062e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	3301      	adds	r3, #1
 80062e6:	613b      	str	r3, [r7, #16]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	2b0e      	cmp	r3, #14
 80062ec:	d9f2      	bls.n	80062d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d11c      	bne.n	8006330 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006304:	f043 0302 	orr.w	r3, r3, #2
 8006308:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006326:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	639a      	str	r2, [r3, #56]	@ 0x38
 800632e:	e00b      	b.n	8006348 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006334:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006340:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800634e:	461a      	mov	r2, r3
 8006350:	2300      	movs	r3, #0
 8006352:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006354:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006358:	2b01      	cmp	r3, #1
 800635a:	d10d      	bne.n	8006378 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800635c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006364:	2100      	movs	r1, #0
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f968 	bl	800663c <USB_SetDevSpeed>
 800636c:	e008      	b.n	8006380 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800636e:	2101      	movs	r1, #1
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f963 	bl	800663c <USB_SetDevSpeed>
 8006376:	e003      	b.n	8006380 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006378:	2103      	movs	r1, #3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f95e 	bl	800663c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006380:	2110      	movs	r1, #16
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f8fa 	bl	800657c <USB_FlushTxFifo>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f924 	bl	80065e0 <USB_FlushRxFifo>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a8:	461a      	mov	r2, r3
 80063aa:	2300      	movs	r3, #0
 80063ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063b4:	461a      	mov	r2, r3
 80063b6:	2300      	movs	r3, #0
 80063b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c0:	461a      	mov	r2, r3
 80063c2:	2300      	movs	r3, #0
 80063c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063c6:	2300      	movs	r3, #0
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	e043      	b.n	8006454 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063e2:	d118      	bne.n	8006416 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f6:	461a      	mov	r2, r3
 80063f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	e013      	b.n	8006428 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800640c:	461a      	mov	r2, r3
 800640e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	e008      	b.n	8006428 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006422:	461a      	mov	r2, r3
 8006424:	2300      	movs	r3, #0
 8006426:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006434:	461a      	mov	r2, r3
 8006436:	2300      	movs	r3, #0
 8006438:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006446:	461a      	mov	r2, r3
 8006448:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800644c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	3301      	adds	r3, #1
 8006452:	613b      	str	r3, [r7, #16]
 8006454:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006458:	461a      	mov	r2, r3
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	4293      	cmp	r3, r2
 800645e:	d3b5      	bcc.n	80063cc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006460:	2300      	movs	r3, #0
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	e043      	b.n	80064ee <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800647c:	d118      	bne.n	80064b0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10a      	bne.n	800649a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006490:	461a      	mov	r2, r3
 8006492:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006496:	6013      	str	r3, [r2, #0]
 8006498:	e013      	b.n	80064c2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a6:	461a      	mov	r2, r3
 80064a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	e008      	b.n	80064c2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064bc:	461a      	mov	r2, r3
 80064be:	2300      	movs	r3, #0
 80064c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ce:	461a      	mov	r2, r3
 80064d0:	2300      	movs	r3, #0
 80064d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e0:	461a      	mov	r2, r3
 80064e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	3301      	adds	r3, #1
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064f2:	461a      	mov	r2, r3
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d3b5      	bcc.n	8006466 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800650c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800651a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800651c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f043 0210 	orr.w	r2, r3, #16
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699a      	ldr	r2, [r3, #24]
 8006534:	4b10      	ldr	r3, [pc, #64]	@ (8006578 <USB_DevInit+0x2c4>)
 8006536:	4313      	orrs	r3, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800653c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	f043 0208 	orr.w	r2, r3, #8
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006550:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006554:	2b01      	cmp	r3, #1
 8006556:	d107      	bne.n	8006568 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006560:	f043 0304 	orr.w	r3, r3, #4
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006568:	7dfb      	ldrb	r3, [r7, #23]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006574:	b004      	add	sp, #16
 8006576:	4770      	bx	lr
 8006578:	803c3800 	.word	0x803c3800

0800657c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3301      	adds	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006596:	d901      	bls.n	800659c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e01b      	b.n	80065d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	daf2      	bge.n	800658a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	019b      	lsls	r3, r3, #6
 80065ac:	f043 0220 	orr.w	r2, r3, #32
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3301      	adds	r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065c0:	d901      	bls.n	80065c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e006      	b.n	80065d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	d0f0      	beq.n	80065b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3301      	adds	r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065f8:	d901      	bls.n	80065fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e018      	b.n	8006630 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	daf2      	bge.n	80065ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2210      	movs	r2, #16
 800660e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3301      	adds	r3, #1
 8006614:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800661c:	d901      	bls.n	8006622 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e006      	b.n	8006630 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0310 	and.w	r3, r3, #16
 800662a:	2b10      	cmp	r3, #16
 800662c:	d0f0      	beq.n	8006610 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800665c:	4313      	orrs	r3, r2
 800665e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800666e:	b480      	push	{r7}
 8006670:	b087      	sub	sp, #28
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 0306 	and.w	r3, r3, #6
 8006686:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d102      	bne.n	8006694 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800668e:	2300      	movs	r3, #0
 8006690:	75fb      	strb	r3, [r7, #23]
 8006692:	e00a      	b.n	80066aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d002      	beq.n	80066a0 <USB_GetDevSpeed+0x32>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b06      	cmp	r3, #6
 800669e:	d102      	bne.n	80066a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80066a0:	2302      	movs	r3, #2
 80066a2:	75fb      	strb	r3, [r7, #23]
 80066a4:	e001      	b.n	80066aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80066a6:	230f      	movs	r3, #15
 80066a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	785b      	ldrb	r3, [r3, #1]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d13a      	bne.n	800674a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	2101      	movs	r1, #1
 80066e6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	68f9      	ldr	r1, [r7, #12]
 80066ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066f2:	4313      	orrs	r3, r2
 80066f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d155      	bne.n	80067b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	791b      	ldrb	r3, [r3, #4]
 8006726:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006728:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	059b      	lsls	r3, r3, #22
 800672e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006730:	4313      	orrs	r3, r2
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	440a      	add	r2, r1
 800673a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800673e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	e036      	b.n	80067b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006750:	69da      	ldr	r2, [r3, #28]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	2101      	movs	r1, #1
 800675c:	fa01 f303 	lsl.w	r3, r1, r3
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	68f9      	ldr	r1, [r7, #12]
 8006764:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006768:	4313      	orrs	r3, r2
 800676a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d11a      	bne.n	80067b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	791b      	ldrb	r3, [r3, #4]
 800679c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800679e:	430b      	orrs	r3, r1
 80067a0:	4313      	orrs	r3, r2
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d161      	bne.n	80068a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067fa:	d11f      	bne.n	800683c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	440a      	add	r2, r1
 8006812:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006816:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800681a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	440a      	add	r2, r1
 8006832:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006836:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800683a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	2101      	movs	r1, #1
 800684e:	fa01 f303 	lsl.w	r3, r1, r3
 8006852:	b29b      	uxth	r3, r3
 8006854:	43db      	mvns	r3, r3
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800685c:	4013      	ands	r3, r2
 800685e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	2101      	movs	r1, #1
 8006872:	fa01 f303 	lsl.w	r3, r1, r3
 8006876:	b29b      	uxth	r3, r3
 8006878:	43db      	mvns	r3, r3
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006880:	4013      	ands	r3, r2
 8006882:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	0159      	lsls	r1, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	440b      	add	r3, r1
 800689a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689e:	4619      	mov	r1, r3
 80068a0:	4b35      	ldr	r3, [pc, #212]	@ (8006978 <USB_DeactivateEndpoint+0x1b0>)
 80068a2:	4013      	ands	r3, r2
 80068a4:	600b      	str	r3, [r1, #0]
 80068a6:	e060      	b.n	800696a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068be:	d11f      	bne.n	8006900 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006906:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	2101      	movs	r1, #1
 8006912:	fa01 f303 	lsl.w	r3, r1, r3
 8006916:	041b      	lsls	r3, r3, #16
 8006918:	43db      	mvns	r3, r3
 800691a:	68f9      	ldr	r1, [r7, #12]
 800691c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006920:	4013      	ands	r3, r2
 8006922:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800692a:	69da      	ldr	r2, [r3, #28]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	2101      	movs	r1, #1
 8006936:	fa01 f303 	lsl.w	r3, r1, r3
 800693a:	041b      	lsls	r3, r3, #16
 800693c:	43db      	mvns	r3, r3
 800693e:	68f9      	ldr	r1, [r7, #12]
 8006940:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006944:	4013      	ands	r3, r2
 8006946:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	0159      	lsls	r1, r3, #5
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	440b      	add	r3, r1
 800695e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006962:	4619      	mov	r1, r3
 8006964:	4b05      	ldr	r3, [pc, #20]	@ (800697c <USB_DeactivateEndpoint+0x1b4>)
 8006966:	4013      	ands	r3, r2
 8006968:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	ec337800 	.word	0xec337800
 800697c:	eff37800 	.word	0xeff37800

08006980 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08a      	sub	sp, #40	@ 0x28
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	4613      	mov	r3, r2
 800698c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	785b      	ldrb	r3, [r3, #1]
 800699c:	2b01      	cmp	r3, #1
 800699e:	f040 817f 	bne.w	8006ca0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d132      	bne.n	8006a10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069c4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80069c8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80069cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a08:	0cdb      	lsrs	r3, r3, #19
 8006a0a:	04db      	lsls	r3, r3, #19
 8006a0c:	6113      	str	r3, [r2, #16]
 8006a0e:	e097      	b.n	8006b40 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a2a:	0cdb      	lsrs	r3, r3, #19
 8006a2c:	04db      	lsls	r3, r3, #19
 8006a2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006a4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a52:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d11a      	bne.n	8006a90 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d903      	bls.n	8006a6e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a8c:	6113      	str	r3, [r2, #16]
 8006a8e:	e044      	b.n	8006b1a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	4413      	add	r3, r2
 8006a9a:	1e5a      	subs	r2, r3, #1
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	8afb      	ldrh	r3, [r7, #22]
 8006ab6:	04d9      	lsls	r1, r3, #19
 8006ab8:	4ba4      	ldr	r3, [pc, #656]	@ (8006d4c <USB_EPStartXfer+0x3cc>)
 8006aba:	400b      	ands	r3, r1
 8006abc:	69b9      	ldr	r1, [r7, #24]
 8006abe:	0148      	lsls	r0, r1, #5
 8006ac0:	69f9      	ldr	r1, [r7, #28]
 8006ac2:	4401      	add	r1, r0
 8006ac4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	791b      	ldrb	r3, [r3, #4]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d122      	bne.n	8006b1a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	0151      	lsls	r1, r2, #5
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	440a      	add	r2, r1
 8006aea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aee:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006af2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b00:	691a      	ldr	r2, [r3, #16]
 8006b02:	8afb      	ldrh	r3, [r7, #22]
 8006b04:	075b      	lsls	r3, r3, #29
 8006b06:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006b0a:	69b9      	ldr	r1, [r7, #24]
 8006b0c:	0148      	lsls	r0, r1, #5
 8006b0e:	69f9      	ldr	r1, [r7, #28]
 8006b10:	4401      	add	r1, r0
 8006b12:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006b16:	4313      	orrs	r3, r2
 8006b18:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b26:	691a      	ldr	r2, [r3, #16]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b30:	69b9      	ldr	r1, [r7, #24]
 8006b32:	0148      	lsls	r0, r1, #5
 8006b34:	69f9      	ldr	r1, [r7, #28]
 8006b36:	4401      	add	r1, r0
 8006b38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d14b      	bne.n	8006bde <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d009      	beq.n	8006b62 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	791b      	ldrb	r3, [r3, #4]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d128      	bne.n	8006bbc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d110      	bne.n	8006b9c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	e00f      	b.n	8006bbc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	69fa      	ldr	r2, [r7, #28]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bba:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	0151      	lsls	r1, r2, #5
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	440a      	add	r2, r1
 8006bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bd6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	e166      	b.n	8006eac <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bf8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006bfc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	791b      	ldrb	r3, [r3, #4]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d015      	beq.n	8006c32 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 814e 	beq.w	8006eac <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	f003 030f 	and.w	r3, r3, #15
 8006c20:	2101      	movs	r1, #1
 8006c22:	fa01 f303 	lsl.w	r3, r1, r3
 8006c26:	69f9      	ldr	r1, [r7, #28]
 8006c28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006c30:	e13c      	b.n	8006eac <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d110      	bne.n	8006c64 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	e00f      	b.n	8006c84 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	69fa      	ldr	r2, [r7, #28]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c82:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	68d9      	ldr	r1, [r3, #12]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	781a      	ldrb	r2, [r3, #0]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	b298      	uxth	r0, r3
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	4603      	mov	r3, r0
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 f9b9 	bl	8007010 <USB_WritePacket>
 8006c9e:	e105      	b.n	8006eac <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	0151      	lsls	r1, r2, #5
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cba:	0cdb      	lsrs	r3, r3, #19
 8006cbc:	04db      	lsls	r3, r3, #19
 8006cbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	0151      	lsls	r1, r2, #5
 8006cd2:	69fa      	ldr	r2, [r7, #28]
 8006cd4:	440a      	add	r2, r1
 8006cd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cda:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006cde:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ce2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d132      	bne.n	8006d50 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d18:	69b9      	ldr	r1, [r7, #24]
 8006d1a:	0148      	lsls	r0, r1, #5
 8006d1c:	69f9      	ldr	r1, [r7, #28]
 8006d1e:	4401      	add	r1, r0
 8006d20:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d24:	4313      	orrs	r3, r2
 8006d26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d46:	6113      	str	r3, [r2, #16]
 8006d48:	e062      	b.n	8006e10 <USB_EPStartXfer+0x490>
 8006d4a:	bf00      	nop
 8006d4c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d123      	bne.n	8006da0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d6e:	69b9      	ldr	r1, [r7, #24]
 8006d70:	0148      	lsls	r0, r1, #5
 8006d72:	69f9      	ldr	r1, [r7, #28]
 8006d74:	4401      	add	r1, r0
 8006d76:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d9c:	6113      	str	r3, [r2, #16]
 8006d9e:	e037      	b.n	8006e10 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	691a      	ldr	r2, [r3, #16]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	4413      	add	r3, r2
 8006daa:	1e5a      	subs	r2, r3, #1
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	8afa      	ldrh	r2, [r7, #22]
 8006dbc:	fb03 f202 	mul.w	r2, r3, r2
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	8afb      	ldrh	r3, [r7, #22]
 8006dd4:	04d9      	lsls	r1, r3, #19
 8006dd6:	4b38      	ldr	r3, [pc, #224]	@ (8006eb8 <USB_EPStartXfer+0x538>)
 8006dd8:	400b      	ands	r3, r1
 8006dda:	69b9      	ldr	r1, [r7, #24]
 8006ddc:	0148      	lsls	r0, r1, #5
 8006dde:	69f9      	ldr	r1, [r7, #28]
 8006de0:	4401      	add	r1, r0
 8006de2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006de6:	4313      	orrs	r3, r2
 8006de8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e00:	69b9      	ldr	r1, [r7, #24]
 8006e02:	0148      	lsls	r0, r1, #5
 8006e04:	69f9      	ldr	r1, [r7, #28]
 8006e06:	4401      	add	r1, r0
 8006e08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d10d      	bne.n	8006e32 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d009      	beq.n	8006e32 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	68d9      	ldr	r1, [r3, #12]
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e2e:	460a      	mov	r2, r1
 8006e30:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	791b      	ldrb	r3, [r3, #4]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d128      	bne.n	8006e8c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d110      	bne.n	8006e6c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	0151      	lsls	r1, r2, #5
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	440a      	add	r2, r1
 8006e60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	e00f      	b.n	8006e8c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e8a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ea6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006eaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3720      	adds	r7, #32
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	1ff80000 	.word	0x1ff80000

08006ebc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	785b      	ldrb	r3, [r3, #1]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d14a      	bne.n	8006f70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006eee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ef2:	f040 8086 	bne.w	8007002 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	7812      	ldrb	r2, [r2, #0]
 8006f0a:	0151      	lsls	r1, r2, #5
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	440a      	add	r2, r1
 8006f10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	7812      	ldrb	r2, [r2, #0]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3301      	adds	r3, #1
 8006f42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d902      	bls.n	8006f54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	75fb      	strb	r3, [r7, #23]
          break;
 8006f52:	e056      	b.n	8007002 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f6c:	d0e7      	beq.n	8006f3e <USB_EPStopXfer+0x82>
 8006f6e:	e048      	b.n	8007002 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f88:	d13b      	bne.n	8007002 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	7812      	ldrb	r2, [r2, #0]
 8006f9e:	0151      	lsls	r1, r2, #5
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fa8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006fac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	7812      	ldrb	r2, [r2, #0]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d902      	bls.n	8006fe8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8006fe6:	e00c      	b.n	8007002 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007000:	d0e7      	beq.n	8006fd2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007002:	7dfb      	ldrb	r3, [r7, #23]
}
 8007004:	4618      	mov	r0, r3
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007010:	b480      	push	{r7}
 8007012:	b089      	sub	sp, #36	@ 0x24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	4611      	mov	r1, r2
 800701c:	461a      	mov	r2, r3
 800701e:	460b      	mov	r3, r1
 8007020:	71fb      	strb	r3, [r7, #7]
 8007022:	4613      	mov	r3, r2
 8007024:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800702e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	d123      	bne.n	800707e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007036:	88bb      	ldrh	r3, [r7, #4]
 8007038:	3303      	adds	r3, #3
 800703a:	089b      	lsrs	r3, r3, #2
 800703c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800703e:	2300      	movs	r3, #0
 8007040:	61bb      	str	r3, [r7, #24]
 8007042:	e018      	b.n	8007076 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	031a      	lsls	r2, r3, #12
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4413      	add	r3, r2
 800704c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007050:	461a      	mov	r2, r3
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	3301      	adds	r3, #1
 800705c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	3301      	adds	r3, #1
 8007062:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	3301      	adds	r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	3301      	adds	r3, #1
 800706e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	3301      	adds	r3, #1
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	429a      	cmp	r2, r3
 800707c:	d3e2      	bcc.n	8007044 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3724      	adds	r7, #36	@ 0x24
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800708c:	b480      	push	{r7}
 800708e:	b08b      	sub	sp, #44	@ 0x2c
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	4613      	mov	r3, r2
 8007098:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80070a2:	88fb      	ldrh	r3, [r7, #6]
 80070a4:	089b      	lsrs	r3, r3, #2
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	f003 0303 	and.w	r3, r3, #3
 80070b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80070b2:	2300      	movs	r3, #0
 80070b4:	623b      	str	r3, [r7, #32]
 80070b6:	e014      	b.n	80070e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80070c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c6:	3301      	adds	r3, #1
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	3301      	adds	r3, #1
 80070ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	3301      	adds	r3, #1
 80070d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	3301      	adds	r3, #1
 80070da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	3301      	adds	r3, #1
 80070e0:	623b      	str	r3, [r7, #32]
 80070e2:	6a3a      	ldr	r2, [r7, #32]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d3e6      	bcc.n	80070b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070ea:	8bfb      	ldrh	r3, [r7, #30]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01e      	beq.n	800712e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070fa:	461a      	mov	r2, r3
 80070fc:	f107 0310 	add.w	r3, r7, #16
 8007100:	6812      	ldr	r2, [r2, #0]
 8007102:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	fa22 f303 	lsr.w	r3, r2, r3
 8007110:	b2da      	uxtb	r2, r3
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	701a      	strb	r2, [r3, #0]
      i++;
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	3301      	adds	r3, #1
 800711a:	623b      	str	r3, [r7, #32]
      pDest++;
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	3301      	adds	r3, #1
 8007120:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007122:	8bfb      	ldrh	r3, [r7, #30]
 8007124:	3b01      	subs	r3, #1
 8007126:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007128:	8bfb      	ldrh	r3, [r7, #30]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1ea      	bne.n	8007104 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007130:	4618      	mov	r0, r3
 8007132:	372c      	adds	r7, #44	@ 0x2c
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	785b      	ldrb	r3, [r3, #1]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d12c      	bne.n	80071b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	db12      	blt.n	8007190 <USB_EPSetStall+0x54>
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00f      	beq.n	8007190 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	0151      	lsls	r1, r2, #5
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	440a      	add	r2, r1
 8007186:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800718a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800718e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	0151      	lsls	r1, r2, #5
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	440a      	add	r2, r1
 80071a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	e02b      	b.n	800720a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	db12      	blt.n	80071ea <USB_EPSetStall+0xae>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00f      	beq.n	80071ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	0151      	lsls	r1, r2, #5
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	440a      	add	r2, r1
 80071e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80071e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	0151      	lsls	r1, r2, #5
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	440a      	add	r2, r1
 8007200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007204:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007208:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d128      	bne.n	8007286 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	0151      	lsls	r1, r2, #5
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	440a      	add	r2, r1
 800724a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800724e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007252:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	791b      	ldrb	r3, [r3, #4]
 8007258:	2b03      	cmp	r3, #3
 800725a:	d003      	beq.n	8007264 <USB_EPClearStall+0x4c>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	791b      	ldrb	r3, [r3, #4]
 8007260:	2b02      	cmp	r3, #2
 8007262:	d138      	bne.n	80072d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	0151      	lsls	r1, r2, #5
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	440a      	add	r2, r1
 800727a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800727e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007282:	6013      	str	r3, [r2, #0]
 8007284:	e027      	b.n	80072d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	0151      	lsls	r1, r2, #5
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	440a      	add	r2, r1
 800729c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80072a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	791b      	ldrb	r3, [r3, #4]
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d003      	beq.n	80072b6 <USB_EPClearStall+0x9e>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	791b      	ldrb	r3, [r3, #4]
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d10f      	bne.n	80072d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	0151      	lsls	r1, r2, #5
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	440a      	add	r2, r1
 80072cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007302:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007306:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007318:	68f9      	ldr	r1, [r7, #12]
 800731a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800731e:	4313      	orrs	r3, r2
 8007320:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800734a:	f023 0303 	bic.w	r3, r3, #3
 800734e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800735e:	f023 0302 	bic.w	r3, r3, #2
 8007362:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007372:	b480      	push	{r7}
 8007374:	b085      	sub	sp, #20
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800738c:	f023 0303 	bic.w	r3, r3, #3
 8007390:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073a0:	f043 0302 	orr.w	r3, r3, #2
 80073a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4013      	ands	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073cc:	68fb      	ldr	r3, [r7, #12]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80073da:	b480      	push	{r7}
 80073dc:	b085      	sub	sp, #20
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	4013      	ands	r3, r2
 80073fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	0c1b      	lsrs	r3, r3, #16
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800740e:	b480      	push	{r7}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	4013      	ands	r3, r2
 8007430:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	b29b      	uxth	r3, r3
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007442:	b480      	push	{r7}
 8007444:	b085      	sub	sp, #20
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	460b      	mov	r3, r1
 800744c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	4013      	ands	r3, r2
 800746e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007470:	68bb      	ldr	r3, [r7, #8]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800747e:	b480      	push	{r7}
 8007480:	b087      	sub	sp, #28
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800749e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	f003 030f 	and.w	r3, r3, #15
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	fa22 f303 	lsr.w	r3, r2, r3
 80074ae:	01db      	lsls	r3, r3, #7
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	4013      	ands	r3, r2
 80074ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074cc:	68bb      	ldr	r3, [r7, #8]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	f003 0301 	and.w	r3, r3, #1
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b085      	sub	sp, #20
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007510:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007514:	f023 0307 	bic.w	r3, r3, #7
 8007518:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800752c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	460b      	mov	r3, r1
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	333c      	adds	r3, #60	@ 0x3c
 8007552:	3304      	adds	r3, #4
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	4a26      	ldr	r2, [pc, #152]	@ (80075f4 <USB_EP0_OutStart+0xb8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d90a      	bls.n	8007576 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800756c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007570:	d101      	bne.n	8007576 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	e037      	b.n	80075e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800757c:	461a      	mov	r2, r3
 800757e:	2300      	movs	r3, #0
 8007580:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007590:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007594:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075a4:	f043 0318 	orr.w	r3, r3, #24
 80075a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075b8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80075bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80075be:	7afb      	ldrb	r3, [r7, #11]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d10f      	bne.n	80075e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075de:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80075e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	371c      	adds	r7, #28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	4f54300a 	.word	0x4f54300a

080075f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007610:	d901      	bls.n	8007616 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e01b      	b.n	800764e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	daf2      	bge.n	8007604 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f043 0201 	orr.w	r2, r3, #1
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3301      	adds	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800763a:	d901      	bls.n	8007640 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e006      	b.n	800764e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b01      	cmp	r3, #1
 800764a:	d0f0      	beq.n	800762e <USB_CoreReset+0x36>

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
	...

0800765c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007668:	2054      	movs	r0, #84	@ 0x54
 800766a:	f002 faeb 	bl	8009c44 <USBD_static_malloc>
 800766e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	32b0      	adds	r2, #176	@ 0xb0
 8007680:	2100      	movs	r1, #0
 8007682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007686:	2302      	movs	r3, #2
 8007688:	e08b      	b.n	80077a2 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	32b0      	adds	r2, #176	@ 0xb0
 8007694:	68f9      	ldr	r1, [r7, #12]
 8007696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	32b0      	adds	r2, #176	@ 0xb0
 80076a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	7c1b      	ldrb	r3, [r3, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d11b      	bne.n	80076ee <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80076b6:	4b3d      	ldr	r3, [pc, #244]	@ (80077ac <USBD_CUSTOM_HID_Init+0x150>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	f003 020f 	and.w	r2, r3, #15
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	440b      	add	r3, r1
 80076ca:	3326      	adds	r3, #38	@ 0x26
 80076cc:	2205      	movs	r2, #5
 80076ce:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80076d0:	4b37      	ldr	r3, [pc, #220]	@ (80077b0 <USBD_CUSTOM_HID_Init+0x154>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	f003 020f 	and.w	r2, r3, #15
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	440b      	add	r3, r1
 80076e4:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80076e8:	2205      	movs	r2, #5
 80076ea:	801a      	strh	r2, [r3, #0]
 80076ec:	e01a      	b.n	8007724 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80076ee:	4b2f      	ldr	r3, [pc, #188]	@ (80077ac <USBD_CUSTOM_HID_Init+0x150>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	f003 020f 	and.w	r2, r3, #15
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	3326      	adds	r3, #38	@ 0x26
 8007704:	2205      	movs	r2, #5
 8007706:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007708:	4b29      	ldr	r3, [pc, #164]	@ (80077b0 <USBD_CUSTOM_HID_Init+0x154>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	f003 020f 	and.w	r2, r3, #15
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	440b      	add	r3, r1
 800771c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007720:	2205      	movs	r2, #5
 8007722:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8007724:	4b21      	ldr	r3, [pc, #132]	@ (80077ac <USBD_CUSTOM_HID_Init+0x150>)
 8007726:	7819      	ldrb	r1, [r3, #0]
 8007728:	2302      	movs	r3, #2
 800772a:	2203      	movs	r2, #3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f002 f978 	bl	8009a22 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8007732:	4b1e      	ldr	r3, [pc, #120]	@ (80077ac <USBD_CUSTOM_HID_Init+0x150>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	f003 020f 	and.w	r2, r3, #15
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	4613      	mov	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	440b      	add	r3, r1
 8007746:	3324      	adds	r3, #36	@ 0x24
 8007748:	2201      	movs	r2, #1
 800774a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800774c:	4b18      	ldr	r3, [pc, #96]	@ (80077b0 <USBD_CUSTOM_HID_Init+0x154>)
 800774e:	7819      	ldrb	r1, [r3, #0]
 8007750:	2302      	movs	r3, #2
 8007752:	2203      	movs	r2, #3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f002 f964 	bl	8009a22 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800775a:	4b15      	ldr	r3, [pc, #84]	@ (80077b0 <USBD_CUSTOM_HID_Init+0x154>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	f003 020f 	and.w	r2, r3, #15
 8007762:	6879      	ldr	r1, [r7, #4]
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007772:	2201      	movs	r2, #1
 8007774:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	33b0      	adds	r3, #176	@ 0xb0
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8007792:	4b07      	ldr	r3, [pc, #28]	@ (80077b0 <USBD_CUSTOM_HID_Init+0x154>)
 8007794:	7819      	ldrb	r1, [r3, #0]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	2340      	movs	r3, #64	@ 0x40
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f002 fa30 	bl	8009c00 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	2000011a 	.word	0x2000011a
 80077b0:	2000011b 	.word	0x2000011b

080077b4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80077c0:	4b37      	ldr	r3, [pc, #220]	@ (80078a0 <USBD_CUSTOM_HID_DeInit+0xec>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f002 f951 	bl	8009a6e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80077cc:	4b34      	ldr	r3, [pc, #208]	@ (80078a0 <USBD_CUSTOM_HID_DeInit+0xec>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	f003 020f 	and.w	r2, r3, #15
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	4613      	mov	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	3324      	adds	r3, #36	@ 0x24
 80077e2:	2200      	movs	r2, #0
 80077e4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80077e6:	4b2e      	ldr	r3, [pc, #184]	@ (80078a0 <USBD_CUSTOM_HID_DeInit+0xec>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	f003 020f 	and.w	r2, r3, #15
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	4613      	mov	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	440b      	add	r3, r1
 80077fa:	3326      	adds	r3, #38	@ 0x26
 80077fc:	2200      	movs	r2, #0
 80077fe:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8007800:	4b28      	ldr	r3, [pc, #160]	@ (80078a4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	4619      	mov	r1, r3
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f002 f931 	bl	8009a6e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800780c:	4b25      	ldr	r3, [pc, #148]	@ (80078a4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	f003 020f 	and.w	r2, r3, #15
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	4613      	mov	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007824:	2200      	movs	r2, #0
 8007826:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8007828:	4b1e      	ldr	r3, [pc, #120]	@ (80078a4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	f003 020f 	and.w	r2, r3, #15
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007840:	2200      	movs	r2, #0
 8007842:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	32b0      	adds	r2, #176	@ 0xb0
 800784e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d01f      	beq.n	8007896 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	33b0      	adds	r3, #176	@ 0xb0
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	32b0      	adds	r2, #176	@ 0xb0
 8007874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007878:	4618      	mov	r0, r3
 800787a:	f002 f9f1 	bl	8009c60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	32b0      	adds	r2, #176	@ 0xb0
 8007888:	2100      	movs	r1, #0
 800788a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	2000011a 	.word	0x2000011a
 80078a4:	2000011b 	.word	0x2000011b

080078a8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	32b0      	adds	r2, #176	@ 0xb0
 80078bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80078d8:	2303      	movs	r3, #3
 80078da:	e102      	b.n	8007ae2 <USBD_CUSTOM_HID_Setup+0x23a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d056      	beq.n	8007996 <USBD_CUSTOM_HID_Setup+0xee>
 80078e8:	2b20      	cmp	r3, #32
 80078ea:	f040 80f2 	bne.w	8007ad2 <USBD_CUSTOM_HID_Setup+0x22a>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	3b02      	subs	r3, #2
 80078f4:	2b09      	cmp	r3, #9
 80078f6:	d846      	bhi.n	8007986 <USBD_CUSTOM_HID_Setup+0xde>
 80078f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007900 <USBD_CUSTOM_HID_Setup+0x58>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	08007959 	.word	0x08007959
 8007904:	08007937 	.word	0x08007937
 8007908:	08007987 	.word	0x08007987
 800790c:	08007987 	.word	0x08007987
 8007910:	08007987 	.word	0x08007987
 8007914:	08007987 	.word	0x08007987
 8007918:	08007987 	.word	0x08007987
 800791c:	08007969 	.word	0x08007969
 8007920:	08007947 	.word	0x08007947
 8007924:	08007929 	.word	0x08007929
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	885b      	ldrh	r3, [r3, #2]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	461a      	mov	r2, r3
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8007934:	e02e      	b.n	8007994 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	3340      	adds	r3, #64	@ 0x40
 800793a:	2201      	movs	r2, #1
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 fcaa 	bl	8009298 <USBD_CtlSendData>
          break;
 8007944:	e026      	b.n	8007994 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	885b      	ldrh	r3, [r3, #2]
 800794a:	0a1b      	lsrs	r3, r3, #8
 800794c:	b29b      	uxth	r3, r3
 800794e:	b2db      	uxtb	r3, r3
 8007950:	461a      	mov	r2, r3
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8007956:	e01d      	b.n	8007994 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	3344      	adds	r3, #68	@ 0x44
 800795c:	2201      	movs	r2, #1
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 fc99 	bl	8009298 <USBD_CtlSendData>
          break;
 8007966:	e015      	b.n	8007994 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	2201      	movs	r2, #1
 800796c:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800796e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	88db      	ldrh	r3, [r3, #6]
 8007974:	2b40      	cmp	r3, #64	@ 0x40
 8007976:	bf28      	it	cs
 8007978:	2340      	movcs	r3, #64	@ 0x40
 800797a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800797c:	461a      	mov	r2, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 fcb6 	bl	80092f0 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8007984:	e006      	b.n	8007994 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 fc08 	bl	800919e <USBD_CtlError>
          ret = USBD_FAIL;
 800798e:	2303      	movs	r3, #3
 8007990:	75fb      	strb	r3, [r7, #23]
          break;
 8007992:	bf00      	nop
      }
      break;
 8007994:	e0a4      	b.n	8007ae0 <USBD_CUSTOM_HID_Setup+0x238>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	2b0b      	cmp	r3, #11
 800799c:	f200 8090 	bhi.w	8007ac0 <USBD_CUSTOM_HID_Setup+0x218>
 80079a0:	a201      	add	r2, pc, #4	@ (adr r2, 80079a8 <USBD_CUSTOM_HID_Setup+0x100>)
 80079a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a6:	bf00      	nop
 80079a8:	080079d9 	.word	0x080079d9
 80079ac:	08007acf 	.word	0x08007acf
 80079b0:	08007ac1 	.word	0x08007ac1
 80079b4:	08007ac1 	.word	0x08007ac1
 80079b8:	08007ac1 	.word	0x08007ac1
 80079bc:	08007ac1 	.word	0x08007ac1
 80079c0:	08007a03 	.word	0x08007a03
 80079c4:	08007ac1 	.word	0x08007ac1
 80079c8:	08007ac1 	.word	0x08007ac1
 80079cc:	08007ac1 	.word	0x08007ac1
 80079d0:	08007a6f 	.word	0x08007a6f
 80079d4:	08007a99 	.word	0x08007a99
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d107      	bne.n	80079f4 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80079e4:	f107 030e 	add.w	r3, r7, #14
 80079e8:	2202      	movs	r2, #2
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 fc53 	bl	8009298 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079f2:	e06d      	b.n	8007ad0 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 fbd1 	bl	800919e <USBD_CtlError>
            ret = USBD_FAIL;
 80079fc:	2303      	movs	r3, #3
 80079fe:	75fb      	strb	r3, [r7, #23]
          break;
 8007a00:	e066      	b.n	8007ad0 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	885b      	ldrh	r3, [r3, #2]
 8007a06:	0a1b      	lsrs	r3, r3, #8
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2b22      	cmp	r3, #34	@ 0x22
 8007a0c:	d110      	bne.n	8007a30 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	88db      	ldrh	r3, [r3, #6]
 8007a12:	2b21      	cmp	r3, #33	@ 0x21
 8007a14:	bf28      	it	cs
 8007a16:	2321      	movcs	r3, #33	@ 0x21
 8007a18:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	33b0      	adds	r3, #176	@ 0xb0
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	61bb      	str	r3, [r7, #24]
 8007a2e:	e00d      	b.n	8007a4c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	885b      	ldrh	r3, [r3, #2]
 8007a34:	0a1b      	lsrs	r3, r3, #8
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	2b21      	cmp	r3, #33	@ 0x21
 8007a3a:	d107      	bne.n	8007a4c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8007aec <USBD_CUSTOM_HID_Setup+0x244>)
 8007a3e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	88db      	ldrh	r3, [r3, #6]
 8007a44:	2b09      	cmp	r3, #9
 8007a46:	bf28      	it	cs
 8007a48:	2309      	movcs	r3, #9
 8007a4a:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d006      	beq.n	8007a60 <USBD_CUSTOM_HID_Setup+0x1b8>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a52:	8bfb      	ldrh	r3, [r7, #30]
 8007a54:	461a      	mov	r2, r3
 8007a56:	69b9      	ldr	r1, [r7, #24]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 fc1d 	bl	8009298 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a5e:	e037      	b.n	8007ad0 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 fb9b 	bl	800919e <USBD_CtlError>
            ret = USBD_FAIL;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	75fb      	strb	r3, [r7, #23]
          break;
 8007a6c:	e030      	b.n	8007ad0 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d107      	bne.n	8007a8a <USBD_CUSTOM_HID_Setup+0x1e2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	3348      	adds	r3, #72	@ 0x48
 8007a7e:	2201      	movs	r2, #1
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f001 fc08 	bl	8009298 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a88:	e022      	b.n	8007ad0 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 fb86 	bl	800919e <USBD_CtlError>
            ret = USBD_FAIL;
 8007a92:	2303      	movs	r3, #3
 8007a94:	75fb      	strb	r3, [r7, #23]
          break;
 8007a96:	e01b      	b.n	8007ad0 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d106      	bne.n	8007ab2 <USBD_CUSTOM_HID_Setup+0x20a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	885b      	ldrh	r3, [r3, #2]
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ab0:	e00e      	b.n	8007ad0 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 fb72 	bl	800919e <USBD_CtlError>
            ret = USBD_FAIL;
 8007aba:	2303      	movs	r3, #3
 8007abc:	75fb      	strb	r3, [r7, #23]
          break;
 8007abe:	e007      	b.n	8007ad0 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 fb6b 	bl	800919e <USBD_CtlError>
          ret = USBD_FAIL;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	75fb      	strb	r3, [r7, #23]
          break;
 8007acc:	e000      	b.n	8007ad0 <USBD_CUSTOM_HID_Setup+0x228>
          break;
 8007ace:	bf00      	nop
      }
      break;
 8007ad0:	e006      	b.n	8007ae0 <USBD_CUSTOM_HID_Setup+0x238>

    default:
      USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 fb62 	bl	800919e <USBD_CtlError>
      ret = USBD_FAIL;
 8007ada:	2303      	movs	r3, #3
 8007adc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ade:	bf00      	nop
  }
  return (uint8_t)ret;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3720      	adds	r7, #32
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20000104 	.word	0x20000104

08007af0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007af8:	2181      	movs	r1, #129	@ 0x81
 8007afa:	4815      	ldr	r0, [pc, #84]	@ (8007b50 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007afc:	f000 fd19 	bl	8008532 <USBD_GetEpDesc>
 8007b00:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007b02:	2101      	movs	r1, #1
 8007b04:	4812      	ldr	r0, [pc, #72]	@ (8007b50 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007b06:	f000 fd14 	bl	8008532 <USBD_GetEpDesc>
 8007b0a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d009      	beq.n	8007b26 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f042 0202 	orr.w	r2, r2, #2
 8007b1a:	711a      	strb	r2, [r3, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2205      	movs	r2, #5
 8007b24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d009      	beq.n	8007b40 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f042 0202 	orr.w	r2, r2, #2
 8007b34:	711a      	strb	r2, [r3, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2205      	movs	r2, #5
 8007b3e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2229      	movs	r2, #41	@ 0x29
 8007b44:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007b46:	4b02      	ldr	r3, [pc, #8]	@ (8007b50 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	200000d8 	.word	0x200000d8

08007b54 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007b5c:	2181      	movs	r1, #129	@ 0x81
 8007b5e:	4815      	ldr	r0, [pc, #84]	@ (8007bb4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007b60:	f000 fce7 	bl	8008532 <USBD_GetEpDesc>
 8007b64:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007b66:	2101      	movs	r1, #1
 8007b68:	4812      	ldr	r0, [pc, #72]	@ (8007bb4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007b6a:	f000 fce2 	bl	8008532 <USBD_GetEpDesc>
 8007b6e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f042 0202 	orr.w	r2, r2, #2
 8007b7e:	711a      	strb	r2, [r3, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2205      	movs	r2, #5
 8007b88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d009      	beq.n	8007ba4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f042 0202 	orr.w	r2, r2, #2
 8007b98:	711a      	strb	r2, [r3, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2205      	movs	r2, #5
 8007ba2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2229      	movs	r2, #41	@ 0x29
 8007ba8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007baa:	4b02      	ldr	r3, [pc, #8]	@ (8007bb4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	200000d8 	.word	0x200000d8

08007bb8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007bc0:	2181      	movs	r1, #129	@ 0x81
 8007bc2:	4815      	ldr	r0, [pc, #84]	@ (8007c18 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8007bc4:	f000 fcb5 	bl	8008532 <USBD_GetEpDesc>
 8007bc8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007bca:	2101      	movs	r1, #1
 8007bcc:	4812      	ldr	r0, [pc, #72]	@ (8007c18 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8007bce:	f000 fcb0 	bl	8008532 <USBD_GetEpDesc>
 8007bd2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d009      	beq.n	8007bee <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f042 0202 	orr.w	r2, r2, #2
 8007be2:	711a      	strb	r2, [r3, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2205      	movs	r2, #5
 8007bec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d009      	beq.n	8007c08 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f042 0202 	orr.w	r2, r2, #2
 8007bfc:	711a      	strb	r2, [r3, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	2205      	movs	r2, #5
 8007c06:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2229      	movs	r2, #41	@ 0x29
 8007c0c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007c0e:	4b02      	ldr	r3, [pc, #8]	@ (8007c18 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	200000d8 	.word	0x200000d8

08007c1c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	32b0      	adds	r2, #176	@ 0xb0
 8007c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	32b0      	adds	r2, #176	@ 0xb0
 8007c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e014      	b.n	8007c96 <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	32b0      	adds	r2, #176	@ 0xb0
 8007c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	33b0      	adds	r3, #176	@ 0xb0
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	4610      	mov	r0, r2
 8007c92:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
	...

08007ca0 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	32b0      	adds	r2, #176	@ 0xb0
 8007cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e00f      	b.n	8007cde <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	32b0      	adds	r2, #176	@ 0xb0
 8007cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ccc:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8007cce:	4b06      	ldr	r3, [pc, #24]	@ (8007ce8 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8007cd0:	7819      	ldrb	r1, [r3, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	2340      	movs	r3, #64	@ 0x40
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 ff92 	bl	8009c00 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	2000011b 	.word	0x2000011b

08007cec <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	32b0      	adds	r2, #176	@ 0xb0
 8007cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d02:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e013      	b.n	8007d36 <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d10e      	bne.n	8007d34 <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	33b0      	adds	r3, #176	@ 0xb0
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	220a      	movs	r2, #10
 8007d4c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007d4e:	4b03      	ldr	r3, [pc, #12]	@ (8007d5c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	20000110 	.word	0x20000110

08007d60 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e009      	b.n	8007d88 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	33b0      	adds	r3, #176	@ 0xb0
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e01f      	b.n	8007dec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	79fa      	ldrb	r2, [r7, #7]
 8007dde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f001 fdb7 	bl	8009954 <USBD_LL_Init>
 8007de6:	4603      	mov	r3, r0
 8007de8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e025      	b.n	8007e58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	32ae      	adds	r2, #174	@ 0xae
 8007e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00f      	beq.n	8007e48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	32ae      	adds	r2, #174	@ 0xae
 8007e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e38:	f107 020e 	add.w	r2, r7, #14
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4798      	blx	r3
 8007e40:	4602      	mov	r2, r0
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007e4e:	1c5a      	adds	r2, r3, #1
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 fdbf 	bl	80099ec <USBD_LL_Start>
 8007e6e:	4603      	mov	r3, r0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	460b      	mov	r3, r1
 8007e98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d009      	beq.n	8007ebc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	78fa      	ldrb	r2, [r7, #3]
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	4798      	blx	r3
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	78fa      	ldrb	r2, [r7, #3]
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	4798      	blx	r3
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007eec:	2303      	movs	r3, #3
 8007eee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f001 f90c 	bl	800912a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007f20:	461a      	mov	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f2e:	f003 031f 	and.w	r3, r3, #31
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d01a      	beq.n	8007f6c <USBD_LL_SetupStage+0x72>
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d822      	bhi.n	8007f80 <USBD_LL_SetupStage+0x86>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <USBD_LL_SetupStage+0x4a>
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d00a      	beq.n	8007f58 <USBD_LL_SetupStage+0x5e>
 8007f42:	e01d      	b.n	8007f80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fb63 	bl	8008618 <USBD_StdDevReq>
 8007f52:	4603      	mov	r3, r0
 8007f54:	73fb      	strb	r3, [r7, #15]
      break;
 8007f56:	e020      	b.n	8007f9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fbcb 	bl	80086fc <USBD_StdItfReq>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]
      break;
 8007f6a:	e016      	b.n	8007f9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fc2d 	bl	80087d4 <USBD_StdEPReq>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f7e:	e00c      	b.n	8007f9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f86:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 fd8c 	bl	8009aac <USBD_LL_StallEP>
 8007f94:	4603      	mov	r3, r0
 8007f96:	73fb      	strb	r3, [r7, #15]
      break;
 8007f98:	bf00      	nop
  }

  return ret;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	460b      	mov	r3, r1
 8007fae:	607a      	str	r2, [r7, #4]
 8007fb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007fb6:	7afb      	ldrb	r3, [r7, #11]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d16e      	bne.n	800809a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007fc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	f040 8098 	bne.w	8008100 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	689a      	ldr	r2, [r3, #8]
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d913      	bls.n	8008004 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	1ad2      	subs	r2, r2, r3
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	bf28      	it	cs
 8007ff6:	4613      	movcs	r3, r2
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f001 f994 	bl	800932a <USBD_CtlContinueRx>
 8008002:	e07d      	b.n	8008100 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800800a:	f003 031f 	and.w	r3, r3, #31
 800800e:	2b02      	cmp	r3, #2
 8008010:	d014      	beq.n	800803c <USBD_LL_DataOutStage+0x98>
 8008012:	2b02      	cmp	r3, #2
 8008014:	d81d      	bhi.n	8008052 <USBD_LL_DataOutStage+0xae>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <USBD_LL_DataOutStage+0x7c>
 800801a:	2b01      	cmp	r3, #1
 800801c:	d003      	beq.n	8008026 <USBD_LL_DataOutStage+0x82>
 800801e:	e018      	b.n	8008052 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	75bb      	strb	r3, [r7, #22]
            break;
 8008024:	e018      	b.n	8008058 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800802c:	b2db      	uxtb	r3, r3
 800802e:	4619      	mov	r1, r3
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 fa64 	bl	80084fe <USBD_CoreFindIF>
 8008036:	4603      	mov	r3, r0
 8008038:	75bb      	strb	r3, [r7, #22]
            break;
 800803a:	e00d      	b.n	8008058 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008042:	b2db      	uxtb	r3, r3
 8008044:	4619      	mov	r1, r3
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 fa66 	bl	8008518 <USBD_CoreFindEP>
 800804c:	4603      	mov	r3, r0
 800804e:	75bb      	strb	r3, [r7, #22]
            break;
 8008050:	e002      	b.n	8008058 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	75bb      	strb	r3, [r7, #22]
            break;
 8008056:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008058:	7dbb      	ldrb	r3, [r7, #22]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d119      	bne.n	8008092 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b03      	cmp	r3, #3
 8008068:	d113      	bne.n	8008092 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800806a:	7dba      	ldrb	r2, [r7, #22]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	32ae      	adds	r2, #174	@ 0xae
 8008070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00b      	beq.n	8008092 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800807a:	7dba      	ldrb	r2, [r7, #22]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008082:	7dba      	ldrb	r2, [r7, #22]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	32ae      	adds	r2, #174	@ 0xae
 8008088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f001 f95a 	bl	800934c <USBD_CtlSendStatus>
 8008098:	e032      	b.n	8008100 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800809a:	7afb      	ldrb	r3, [r7, #11]
 800809c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	4619      	mov	r1, r3
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fa37 	bl	8008518 <USBD_CoreFindEP>
 80080aa:	4603      	mov	r3, r0
 80080ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080ae:	7dbb      	ldrb	r3, [r7, #22]
 80080b0:	2bff      	cmp	r3, #255	@ 0xff
 80080b2:	d025      	beq.n	8008100 <USBD_LL_DataOutStage+0x15c>
 80080b4:	7dbb      	ldrb	r3, [r7, #22]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d122      	bne.n	8008100 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d117      	bne.n	80080f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80080c6:	7dba      	ldrb	r2, [r7, #22]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	32ae      	adds	r2, #174	@ 0xae
 80080cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00f      	beq.n	80080f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80080d6:	7dba      	ldrb	r2, [r7, #22]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80080de:	7dba      	ldrb	r2, [r7, #22]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	32ae      	adds	r2, #174	@ 0xae
 80080e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	7afa      	ldrb	r2, [r7, #11]
 80080ec:	4611      	mov	r1, r2
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	4798      	blx	r3
 80080f2:	4603      	mov	r3, r0
 80080f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80080fc:	7dfb      	ldrb	r3, [r7, #23]
 80080fe:	e000      	b.n	8008102 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b086      	sub	sp, #24
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	460b      	mov	r3, r1
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d16f      	bne.n	80081fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3314      	adds	r3, #20
 8008122:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800812a:	2b02      	cmp	r3, #2
 800812c:	d15a      	bne.n	80081e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	429a      	cmp	r2, r3
 8008138:	d914      	bls.n	8008164 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	689a      	ldr	r2, [r3, #8]
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	1ad2      	subs	r2, r2, r3
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	461a      	mov	r2, r3
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f001 f8bc 	bl	80092ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008156:	2300      	movs	r3, #0
 8008158:	2200      	movs	r2, #0
 800815a:	2100      	movs	r1, #0
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f001 fd4f 	bl	8009c00 <USBD_LL_PrepareReceive>
 8008162:	e03f      	b.n	80081e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	68da      	ldr	r2, [r3, #12]
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	429a      	cmp	r2, r3
 800816e:	d11c      	bne.n	80081aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008178:	429a      	cmp	r2, r3
 800817a:	d316      	bcc.n	80081aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008186:	429a      	cmp	r2, r3
 8008188:	d20f      	bcs.n	80081aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800818a:	2200      	movs	r2, #0
 800818c:	2100      	movs	r1, #0
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f001 f89d 	bl	80092ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800819c:	2300      	movs	r3, #0
 800819e:	2200      	movs	r2, #0
 80081a0:	2100      	movs	r1, #0
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f001 fd2c 	bl	8009c00 <USBD_LL_PrepareReceive>
 80081a8:	e01c      	b.n	80081e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d10f      	bne.n	80081d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d009      	beq.n	80081d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80081d6:	2180      	movs	r1, #128	@ 0x80
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f001 fc67 	bl	8009aac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f001 f8c7 	bl	8009372 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d03a      	beq.n	8008264 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7ff fe42 	bl	8007e78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80081fc:	e032      	b.n	8008264 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80081fe:	7afb      	ldrb	r3, [r7, #11]
 8008200:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008204:	b2db      	uxtb	r3, r3
 8008206:	4619      	mov	r1, r3
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 f985 	bl	8008518 <USBD_CoreFindEP>
 800820e:	4603      	mov	r3, r0
 8008210:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	2bff      	cmp	r3, #255	@ 0xff
 8008216:	d025      	beq.n	8008264 <USBD_LL_DataInStage+0x15a>
 8008218:	7dfb      	ldrb	r3, [r7, #23]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d122      	bne.n	8008264 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b03      	cmp	r3, #3
 8008228:	d11c      	bne.n	8008264 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800822a:	7dfa      	ldrb	r2, [r7, #23]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	32ae      	adds	r2, #174	@ 0xae
 8008230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d014      	beq.n	8008264 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800823a:	7dfa      	ldrb	r2, [r7, #23]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008242:	7dfa      	ldrb	r2, [r7, #23]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	32ae      	adds	r2, #174	@ 0xae
 8008248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	7afa      	ldrb	r2, [r7, #11]
 8008250:	4611      	mov	r1, r2
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	4798      	blx	r3
 8008256:	4603      	mov	r3, r0
 8008258:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800825a:	7dbb      	ldrb	r3, [r7, #22]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008260:	7dbb      	ldrb	r3, [r7, #22]
 8008262:	e000      	b.n	8008266 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d014      	beq.n	80082d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00e      	beq.n	80082d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	6852      	ldr	r2, [r2, #4]
 80082c2:	b2d2      	uxtb	r2, r2
 80082c4:	4611      	mov	r1, r2
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80082d0:	2303      	movs	r3, #3
 80082d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082d4:	2340      	movs	r3, #64	@ 0x40
 80082d6:	2200      	movs	r2, #0
 80082d8:	2100      	movs	r1, #0
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f001 fba1 	bl	8009a22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2240      	movs	r2, #64	@ 0x40
 80082ec:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082f0:	2340      	movs	r3, #64	@ 0x40
 80082f2:	2200      	movs	r2, #0
 80082f4:	2180      	movs	r1, #128	@ 0x80
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 fb93 	bl	8009a22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2240      	movs	r2, #64	@ 0x40
 8008306:	621a      	str	r2, [r3, #32]

  return ret;
 8008308:	7bfb      	ldrb	r3, [r7, #15]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	78fa      	ldrb	r2, [r7, #3]
 8008322:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b04      	cmp	r3, #4
 8008344:	d006      	beq.n	8008354 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800834c:	b2da      	uxtb	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2204      	movs	r2, #4
 8008358:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b04      	cmp	r3, #4
 800837c:	d106      	bne.n	800838c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008384:	b2da      	uxtb	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d110      	bne.n	80083d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d005      	beq.n	80083d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b082      	sub	sp, #8
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	460b      	mov	r3, r1
 80083e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	32ae      	adds	r2, #174	@ 0xae
 80083f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e01c      	b.n	8008436 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b03      	cmp	r3, #3
 8008406:	d115      	bne.n	8008434 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	32ae      	adds	r2, #174	@ 0xae
 8008412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	32ae      	adds	r2, #174	@ 0xae
 8008426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	78fa      	ldrb	r2, [r7, #3]
 800842e:	4611      	mov	r1, r2
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b082      	sub	sp, #8
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	460b      	mov	r3, r1
 8008448:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	32ae      	adds	r2, #174	@ 0xae
 8008454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800845c:	2303      	movs	r3, #3
 800845e:	e01c      	b.n	800849a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b03      	cmp	r3, #3
 800846a:	d115      	bne.n	8008498 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	32ae      	adds	r2, #174	@ 0xae
 8008476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00b      	beq.n	8008498 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	32ae      	adds	r2, #174	@ 0xae
 800848a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008490:	78fa      	ldrb	r2, [r7, #3]
 8008492:	4611      	mov	r1, r2
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00e      	beq.n	80084f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6852      	ldr	r2, [r2, #4]
 80084e2:	b2d2      	uxtb	r2, r2
 80084e4:	4611      	mov	r1, r2
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80084f0:	2303      	movs	r3, #3
 80084f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084fe:	b480      	push	{r7}
 8008500:	b083      	sub	sp, #12
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800850a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800850c:	4618      	mov	r0, r3
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008524:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008526:	4618      	mov	r0, r3
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b086      	sub	sp, #24
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	460b      	mov	r3, r1
 800853c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008546:	2300      	movs	r3, #0
 8008548:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	885b      	ldrh	r3, [r3, #2]
 800854e:	b29b      	uxth	r3, r3
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	7812      	ldrb	r2, [r2, #0]
 8008554:	4293      	cmp	r3, r2
 8008556:	d91f      	bls.n	8008598 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800855e:	e013      	b.n	8008588 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008560:	f107 030a 	add.w	r3, r7, #10
 8008564:	4619      	mov	r1, r3
 8008566:	6978      	ldr	r0, [r7, #20]
 8008568:	f000 f81b 	bl	80085a2 <USBD_GetNextDesc>
 800856c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	2b05      	cmp	r3, #5
 8008574:	d108      	bne.n	8008588 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	789b      	ldrb	r3, [r3, #2]
 800857e:	78fa      	ldrb	r2, [r7, #3]
 8008580:	429a      	cmp	r2, r3
 8008582:	d008      	beq.n	8008596 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008584:	2300      	movs	r3, #0
 8008586:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	885b      	ldrh	r3, [r3, #2]
 800858c:	b29a      	uxth	r2, r3
 800858e:	897b      	ldrh	r3, [r7, #10]
 8008590:	429a      	cmp	r2, r3
 8008592:	d8e5      	bhi.n	8008560 <USBD_GetEpDesc+0x2e>
 8008594:	e000      	b.n	8008598 <USBD_GetEpDesc+0x66>
          break;
 8008596:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008598:	693b      	ldr	r3, [r7, #16]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b085      	sub	sp, #20
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	7812      	ldrb	r2, [r2, #0]
 80085b8:	4413      	add	r3, r2
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4413      	add	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80085cc:	68fb      	ldr	r3, [r7, #12]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80085da:	b480      	push	{r7}
 80085dc:	b087      	sub	sp, #28
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	3301      	adds	r3, #1
 80085f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80085f8:	8a3b      	ldrh	r3, [r7, #16]
 80085fa:	021b      	lsls	r3, r3, #8
 80085fc:	b21a      	sxth	r2, r3
 80085fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008602:	4313      	orrs	r3, r2
 8008604:	b21b      	sxth	r3, r3
 8008606:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008608:	89fb      	ldrh	r3, [r7, #14]
}
 800860a:	4618      	mov	r0, r3
 800860c:	371c      	adds	r7, #28
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
	...

08008618 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800862e:	2b40      	cmp	r3, #64	@ 0x40
 8008630:	d005      	beq.n	800863e <USBD_StdDevReq+0x26>
 8008632:	2b40      	cmp	r3, #64	@ 0x40
 8008634:	d857      	bhi.n	80086e6 <USBD_StdDevReq+0xce>
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00f      	beq.n	800865a <USBD_StdDevReq+0x42>
 800863a:	2b20      	cmp	r3, #32
 800863c:	d153      	bne.n	80086e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	32ae      	adds	r2, #174	@ 0xae
 8008648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	4798      	blx	r3
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]
      break;
 8008658:	e04a      	b.n	80086f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	785b      	ldrb	r3, [r3, #1]
 800865e:	2b09      	cmp	r3, #9
 8008660:	d83b      	bhi.n	80086da <USBD_StdDevReq+0xc2>
 8008662:	a201      	add	r2, pc, #4	@ (adr r2, 8008668 <USBD_StdDevReq+0x50>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	080086bd 	.word	0x080086bd
 800866c:	080086d1 	.word	0x080086d1
 8008670:	080086db 	.word	0x080086db
 8008674:	080086c7 	.word	0x080086c7
 8008678:	080086db 	.word	0x080086db
 800867c:	0800869b 	.word	0x0800869b
 8008680:	08008691 	.word	0x08008691
 8008684:	080086db 	.word	0x080086db
 8008688:	080086b3 	.word	0x080086b3
 800868c:	080086a5 	.word	0x080086a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa3c 	bl	8008b10 <USBD_GetDescriptor>
          break;
 8008698:	e024      	b.n	80086e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fba1 	bl	8008de4 <USBD_SetAddress>
          break;
 80086a2:	e01f      	b.n	80086e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fbe0 	bl	8008e6c <USBD_SetConfig>
 80086ac:	4603      	mov	r3, r0
 80086ae:	73fb      	strb	r3, [r7, #15]
          break;
 80086b0:	e018      	b.n	80086e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fc83 	bl	8008fc0 <USBD_GetConfig>
          break;
 80086ba:	e013      	b.n	80086e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fcb4 	bl	800902c <USBD_GetStatus>
          break;
 80086c4:	e00e      	b.n	80086e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fce3 	bl	8009094 <USBD_SetFeature>
          break;
 80086ce:	e009      	b.n	80086e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fd07 	bl	80090e6 <USBD_ClrFeature>
          break;
 80086d8:	e004      	b.n	80086e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fd5e 	bl	800919e <USBD_CtlError>
          break;
 80086e2:	bf00      	nop
      }
      break;
 80086e4:	e004      	b.n	80086f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fd58 	bl	800919e <USBD_CtlError>
      break;
 80086ee:	bf00      	nop
  }

  return ret;
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop

080086fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008712:	2b40      	cmp	r3, #64	@ 0x40
 8008714:	d005      	beq.n	8008722 <USBD_StdItfReq+0x26>
 8008716:	2b40      	cmp	r3, #64	@ 0x40
 8008718:	d852      	bhi.n	80087c0 <USBD_StdItfReq+0xc4>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <USBD_StdItfReq+0x26>
 800871e:	2b20      	cmp	r3, #32
 8008720:	d14e      	bne.n	80087c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008728:	b2db      	uxtb	r3, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	2b02      	cmp	r3, #2
 800872e:	d840      	bhi.n	80087b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	889b      	ldrh	r3, [r3, #4]
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b01      	cmp	r3, #1
 8008738:	d836      	bhi.n	80087a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	889b      	ldrh	r3, [r3, #4]
 800873e:	b2db      	uxtb	r3, r3
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7ff fedb 	bl	80084fe <USBD_CoreFindIF>
 8008748:	4603      	mov	r3, r0
 800874a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	2bff      	cmp	r3, #255	@ 0xff
 8008750:	d01d      	beq.n	800878e <USBD_StdItfReq+0x92>
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d11a      	bne.n	800878e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008758:	7bba      	ldrb	r2, [r7, #14]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	32ae      	adds	r2, #174	@ 0xae
 800875e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00f      	beq.n	8008788 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008768:	7bba      	ldrb	r2, [r7, #14]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008770:	7bba      	ldrb	r2, [r7, #14]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	32ae      	adds	r2, #174	@ 0xae
 8008776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
 8008782:	4603      	mov	r3, r0
 8008784:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008786:	e004      	b.n	8008792 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008788:	2303      	movs	r3, #3
 800878a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800878c:	e001      	b.n	8008792 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800878e:	2303      	movs	r3, #3
 8008790:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	88db      	ldrh	r3, [r3, #6]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d110      	bne.n	80087bc <USBD_StdItfReq+0xc0>
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10d      	bne.n	80087bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fdd3 	bl	800934c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80087a6:	e009      	b.n	80087bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fcf7 	bl	800919e <USBD_CtlError>
          break;
 80087b0:	e004      	b.n	80087bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fcf2 	bl	800919e <USBD_CtlError>
          break;
 80087ba:	e000      	b.n	80087be <USBD_StdItfReq+0xc2>
          break;
 80087bc:	bf00      	nop
      }
      break;
 80087be:	e004      	b.n	80087ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fceb 	bl	800919e <USBD_CtlError>
      break;
 80087c8:	bf00      	nop
  }

  return ret;
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	889b      	ldrh	r3, [r3, #4]
 80087e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087f0:	2b40      	cmp	r3, #64	@ 0x40
 80087f2:	d007      	beq.n	8008804 <USBD_StdEPReq+0x30>
 80087f4:	2b40      	cmp	r3, #64	@ 0x40
 80087f6:	f200 817f 	bhi.w	8008af8 <USBD_StdEPReq+0x324>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d02a      	beq.n	8008854 <USBD_StdEPReq+0x80>
 80087fe:	2b20      	cmp	r3, #32
 8008800:	f040 817a 	bne.w	8008af8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7ff fe85 	bl	8008518 <USBD_CoreFindEP>
 800880e:	4603      	mov	r3, r0
 8008810:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008812:	7b7b      	ldrb	r3, [r7, #13]
 8008814:	2bff      	cmp	r3, #255	@ 0xff
 8008816:	f000 8174 	beq.w	8008b02 <USBD_StdEPReq+0x32e>
 800881a:	7b7b      	ldrb	r3, [r7, #13]
 800881c:	2b00      	cmp	r3, #0
 800881e:	f040 8170 	bne.w	8008b02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008822:	7b7a      	ldrb	r2, [r7, #13]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800882a:	7b7a      	ldrb	r2, [r7, #13]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	32ae      	adds	r2, #174	@ 0xae
 8008830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 8163 	beq.w	8008b02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800883c:	7b7a      	ldrb	r2, [r7, #13]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	32ae      	adds	r2, #174	@ 0xae
 8008842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	4798      	blx	r3
 800884e:	4603      	mov	r3, r0
 8008850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008852:	e156      	b.n	8008b02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	785b      	ldrb	r3, [r3, #1]
 8008858:	2b03      	cmp	r3, #3
 800885a:	d008      	beq.n	800886e <USBD_StdEPReq+0x9a>
 800885c:	2b03      	cmp	r3, #3
 800885e:	f300 8145 	bgt.w	8008aec <USBD_StdEPReq+0x318>
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 809b 	beq.w	800899e <USBD_StdEPReq+0x1ca>
 8008868:	2b01      	cmp	r3, #1
 800886a:	d03c      	beq.n	80088e6 <USBD_StdEPReq+0x112>
 800886c:	e13e      	b.n	8008aec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b02      	cmp	r3, #2
 8008878:	d002      	beq.n	8008880 <USBD_StdEPReq+0xac>
 800887a:	2b03      	cmp	r3, #3
 800887c:	d016      	beq.n	80088ac <USBD_StdEPReq+0xd8>
 800887e:	e02c      	b.n	80088da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008880:	7bbb      	ldrb	r3, [r7, #14]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00d      	beq.n	80088a2 <USBD_StdEPReq+0xce>
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	2b80      	cmp	r3, #128	@ 0x80
 800888a:	d00a      	beq.n	80088a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800888c:	7bbb      	ldrb	r3, [r7, #14]
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f001 f90b 	bl	8009aac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008896:	2180      	movs	r1, #128	@ 0x80
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 f907 	bl	8009aac <USBD_LL_StallEP>
 800889e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088a0:	e020      	b.n	80088e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fc7a 	bl	800919e <USBD_CtlError>
              break;
 80088aa:	e01b      	b.n	80088e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	885b      	ldrh	r3, [r3, #2]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10e      	bne.n	80088d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00b      	beq.n	80088d2 <USBD_StdEPReq+0xfe>
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b80      	cmp	r3, #128	@ 0x80
 80088be:	d008      	beq.n	80088d2 <USBD_StdEPReq+0xfe>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	88db      	ldrh	r3, [r3, #6]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d104      	bne.n	80088d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 f8ed 	bl	8009aac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fd3a 	bl	800934c <USBD_CtlSendStatus>

              break;
 80088d8:	e004      	b.n	80088e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fc5e 	bl	800919e <USBD_CtlError>
              break;
 80088e2:	bf00      	nop
          }
          break;
 80088e4:	e107      	b.n	8008af6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d002      	beq.n	80088f8 <USBD_StdEPReq+0x124>
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d016      	beq.n	8008924 <USBD_StdEPReq+0x150>
 80088f6:	e04b      	b.n	8008990 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00d      	beq.n	800891a <USBD_StdEPReq+0x146>
 80088fe:	7bbb      	ldrb	r3, [r7, #14]
 8008900:	2b80      	cmp	r3, #128	@ 0x80
 8008902:	d00a      	beq.n	800891a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008904:	7bbb      	ldrb	r3, [r7, #14]
 8008906:	4619      	mov	r1, r3
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f001 f8cf 	bl	8009aac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800890e:	2180      	movs	r1, #128	@ 0x80
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f001 f8cb 	bl	8009aac <USBD_LL_StallEP>
 8008916:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008918:	e040      	b.n	800899c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fc3e 	bl	800919e <USBD_CtlError>
              break;
 8008922:	e03b      	b.n	800899c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	885b      	ldrh	r3, [r3, #2]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d136      	bne.n	800899a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008936:	7bbb      	ldrb	r3, [r7, #14]
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 f8d5 	bl	8009aea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fd03 	bl	800934c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008946:	7bbb      	ldrb	r3, [r7, #14]
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff fde4 	bl	8008518 <USBD_CoreFindEP>
 8008950:	4603      	mov	r3, r0
 8008952:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008954:	7b7b      	ldrb	r3, [r7, #13]
 8008956:	2bff      	cmp	r3, #255	@ 0xff
 8008958:	d01f      	beq.n	800899a <USBD_StdEPReq+0x1c6>
 800895a:	7b7b      	ldrb	r3, [r7, #13]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d11c      	bne.n	800899a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008960:	7b7a      	ldrb	r2, [r7, #13]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008968:	7b7a      	ldrb	r2, [r7, #13]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	32ae      	adds	r2, #174	@ 0xae
 800896e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d010      	beq.n	800899a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008978:	7b7a      	ldrb	r2, [r7, #13]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	32ae      	adds	r2, #174	@ 0xae
 800897e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	4798      	blx	r3
 800898a:	4603      	mov	r3, r0
 800898c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800898e:	e004      	b.n	800899a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fc03 	bl	800919e <USBD_CtlError>
              break;
 8008998:	e000      	b.n	800899c <USBD_StdEPReq+0x1c8>
              break;
 800899a:	bf00      	nop
          }
          break;
 800899c:	e0ab      	b.n	8008af6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d002      	beq.n	80089b0 <USBD_StdEPReq+0x1dc>
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	d032      	beq.n	8008a14 <USBD_StdEPReq+0x240>
 80089ae:	e097      	b.n	8008ae0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d007      	beq.n	80089c6 <USBD_StdEPReq+0x1f2>
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	2b80      	cmp	r3, #128	@ 0x80
 80089ba:	d004      	beq.n	80089c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fbed 	bl	800919e <USBD_CtlError>
                break;
 80089c4:	e091      	b.n	8008aea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	da0b      	bge.n	80089e6 <USBD_StdEPReq+0x212>
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
 80089d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089d4:	4613      	mov	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	3310      	adds	r3, #16
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	4413      	add	r3, r2
 80089e2:	3304      	adds	r3, #4
 80089e4:	e00b      	b.n	80089fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	4413      	add	r3, r2
 80089fc:	3304      	adds	r3, #4
 80089fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2202      	movs	r2, #2
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fc43 	bl	8009298 <USBD_CtlSendData>
              break;
 8008a12:	e06a      	b.n	8008aea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	da11      	bge.n	8008a40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	f003 020f 	and.w	r2, r3, #15
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	4613      	mov	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	440b      	add	r3, r1
 8008a2e:	3324      	adds	r3, #36	@ 0x24
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d117      	bne.n	8008a66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fbb0 	bl	800919e <USBD_CtlError>
                  break;
 8008a3e:	e054      	b.n	8008aea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	f003 020f 	and.w	r2, r3, #15
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	440b      	add	r3, r1
 8008a52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d104      	bne.n	8008a66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fb9d 	bl	800919e <USBD_CtlError>
                  break;
 8008a64:	e041      	b.n	8008aea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	da0b      	bge.n	8008a86 <USBD_StdEPReq+0x2b2>
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a74:	4613      	mov	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	3310      	adds	r3, #16
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	4413      	add	r3, r2
 8008a82:	3304      	adds	r3, #4
 8008a84:	e00b      	b.n	8008a9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <USBD_StdEPReq+0x2d8>
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
 8008aa8:	2b80      	cmp	r3, #128	@ 0x80
 8008aaa:	d103      	bne.n	8008ab4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	e00e      	b.n	8008ad2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f001 f835 	bl	8009b28 <USBD_LL_IsStallEP>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	e002      	b.n	8008ad2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fbdd 	bl	8009298 <USBD_CtlSendData>
              break;
 8008ade:	e004      	b.n	8008aea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fb5b 	bl	800919e <USBD_CtlError>
              break;
 8008ae8:	bf00      	nop
          }
          break;
 8008aea:	e004      	b.n	8008af6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fb55 	bl	800919e <USBD_CtlError>
          break;
 8008af4:	bf00      	nop
      }
      break;
 8008af6:	e005      	b.n	8008b04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fb4f 	bl	800919e <USBD_CtlError>
      break;
 8008b00:	e000      	b.n	8008b04 <USBD_StdEPReq+0x330>
      break;
 8008b02:	bf00      	nop
  }

  return ret;
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	885b      	ldrh	r3, [r3, #2]
 8008b2a:	0a1b      	lsrs	r3, r3, #8
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	2b06      	cmp	r3, #6
 8008b32:	f200 8128 	bhi.w	8008d86 <USBD_GetDescriptor+0x276>
 8008b36:	a201      	add	r2, pc, #4	@ (adr r2, 8008b3c <USBD_GetDescriptor+0x2c>)
 8008b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3c:	08008b59 	.word	0x08008b59
 8008b40:	08008b71 	.word	0x08008b71
 8008b44:	08008bb1 	.word	0x08008bb1
 8008b48:	08008d87 	.word	0x08008d87
 8008b4c:	08008d87 	.word	0x08008d87
 8008b50:	08008d27 	.word	0x08008d27
 8008b54:	08008d53 	.word	0x08008d53
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	7c12      	ldrb	r2, [r2, #16]
 8008b64:	f107 0108 	add.w	r1, r7, #8
 8008b68:	4610      	mov	r0, r2
 8008b6a:	4798      	blx	r3
 8008b6c:	60f8      	str	r0, [r7, #12]
      break;
 8008b6e:	e112      	b.n	8008d96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	7c1b      	ldrb	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10d      	bne.n	8008b94 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b80:	f107 0208 	add.w	r2, r7, #8
 8008b84:	4610      	mov	r0, r2
 8008b86:	4798      	blx	r3
 8008b88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	2202      	movs	r2, #2
 8008b90:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b92:	e100      	b.n	8008d96 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9c:	f107 0208 	add.w	r2, r7, #8
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4798      	blx	r3
 8008ba4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	2202      	movs	r2, #2
 8008bac:	701a      	strb	r2, [r3, #0]
      break;
 8008bae:	e0f2      	b.n	8008d96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	885b      	ldrh	r3, [r3, #2]
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b05      	cmp	r3, #5
 8008bb8:	f200 80ac 	bhi.w	8008d14 <USBD_GetDescriptor+0x204>
 8008bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc4 <USBD_GetDescriptor+0xb4>)
 8008bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc2:	bf00      	nop
 8008bc4:	08008bdd 	.word	0x08008bdd
 8008bc8:	08008c11 	.word	0x08008c11
 8008bcc:	08008c45 	.word	0x08008c45
 8008bd0:	08008c79 	.word	0x08008c79
 8008bd4:	08008cad 	.word	0x08008cad
 8008bd8:	08008ce1 	.word	0x08008ce1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	7c12      	ldrb	r2, [r2, #16]
 8008bf4:	f107 0108 	add.w	r1, r7, #8
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4798      	blx	r3
 8008bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bfe:	e091      	b.n	8008d24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 facb 	bl	800919e <USBD_CtlError>
            err++;
 8008c08:	7afb      	ldrb	r3, [r7, #11]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c0e:	e089      	b.n	8008d24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00b      	beq.n	8008c34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	7c12      	ldrb	r2, [r2, #16]
 8008c28:	f107 0108 	add.w	r1, r7, #8
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4798      	blx	r3
 8008c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c32:	e077      	b.n	8008d24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fab1 	bl	800919e <USBD_CtlError>
            err++;
 8008c3c:	7afb      	ldrb	r3, [r7, #11]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	72fb      	strb	r3, [r7, #11]
          break;
 8008c42:	e06f      	b.n	8008d24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00b      	beq.n	8008c68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	7c12      	ldrb	r2, [r2, #16]
 8008c5c:	f107 0108 	add.w	r1, r7, #8
 8008c60:	4610      	mov	r0, r2
 8008c62:	4798      	blx	r3
 8008c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c66:	e05d      	b.n	8008d24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fa97 	bl	800919e <USBD_CtlError>
            err++;
 8008c70:	7afb      	ldrb	r3, [r7, #11]
 8008c72:	3301      	adds	r3, #1
 8008c74:	72fb      	strb	r3, [r7, #11]
          break;
 8008c76:	e055      	b.n	8008d24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00b      	beq.n	8008c9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	7c12      	ldrb	r2, [r2, #16]
 8008c90:	f107 0108 	add.w	r1, r7, #8
 8008c94:	4610      	mov	r0, r2
 8008c96:	4798      	blx	r3
 8008c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c9a:	e043      	b.n	8008d24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fa7d 	bl	800919e <USBD_CtlError>
            err++;
 8008ca4:	7afb      	ldrb	r3, [r7, #11]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8008caa:	e03b      	b.n	8008d24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00b      	beq.n	8008cd0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	7c12      	ldrb	r2, [r2, #16]
 8008cc4:	f107 0108 	add.w	r1, r7, #8
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4798      	blx	r3
 8008ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cce:	e029      	b.n	8008d24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fa63 	bl	800919e <USBD_CtlError>
            err++;
 8008cd8:	7afb      	ldrb	r3, [r7, #11]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cde:	e021      	b.n	8008d24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00b      	beq.n	8008d04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	7c12      	ldrb	r2, [r2, #16]
 8008cf8:	f107 0108 	add.w	r1, r7, #8
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	4798      	blx	r3
 8008d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d02:	e00f      	b.n	8008d24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fa49 	bl	800919e <USBD_CtlError>
            err++;
 8008d0c:	7afb      	ldrb	r3, [r7, #11]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	72fb      	strb	r3, [r7, #11]
          break;
 8008d12:	e007      	b.n	8008d24 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fa41 	bl	800919e <USBD_CtlError>
          err++;
 8008d1c:	7afb      	ldrb	r3, [r7, #11]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008d22:	bf00      	nop
      }
      break;
 8008d24:	e037      	b.n	8008d96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	7c1b      	ldrb	r3, [r3, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d109      	bne.n	8008d42 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d36:	f107 0208 	add.w	r2, r7, #8
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	4798      	blx	r3
 8008d3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d40:	e029      	b.n	8008d96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fa2a 	bl	800919e <USBD_CtlError>
        err++;
 8008d4a:	7afb      	ldrb	r3, [r7, #11]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d50:	e021      	b.n	8008d96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	7c1b      	ldrb	r3, [r3, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10d      	bne.n	8008d76 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d62:	f107 0208 	add.w	r2, r7, #8
 8008d66:	4610      	mov	r0, r2
 8008d68:	4798      	blx	r3
 8008d6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	2207      	movs	r2, #7
 8008d72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d74:	e00f      	b.n	8008d96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fa10 	bl	800919e <USBD_CtlError>
        err++;
 8008d7e:	7afb      	ldrb	r3, [r7, #11]
 8008d80:	3301      	adds	r3, #1
 8008d82:	72fb      	strb	r3, [r7, #11]
      break;
 8008d84:	e007      	b.n	8008d96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fa08 	bl	800919e <USBD_CtlError>
      err++;
 8008d8e:	7afb      	ldrb	r3, [r7, #11]
 8008d90:	3301      	adds	r3, #1
 8008d92:	72fb      	strb	r3, [r7, #11]
      break;
 8008d94:	bf00      	nop
  }

  if (err != 0U)
 8008d96:	7afb      	ldrb	r3, [r7, #11]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d11e      	bne.n	8008dda <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	88db      	ldrh	r3, [r3, #6]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d016      	beq.n	8008dd2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008da4:	893b      	ldrh	r3, [r7, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00e      	beq.n	8008dc8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	88da      	ldrh	r2, [r3, #6]
 8008dae:	893b      	ldrh	r3, [r7, #8]
 8008db0:	4293      	cmp	r3, r2
 8008db2:	bf28      	it	cs
 8008db4:	4613      	movcs	r3, r2
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dba:	893b      	ldrh	r3, [r7, #8]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	68f9      	ldr	r1, [r7, #12]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fa69 	bl	8009298 <USBD_CtlSendData>
 8008dc6:	e009      	b.n	8008ddc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f9e7 	bl	800919e <USBD_CtlError>
 8008dd0:	e004      	b.n	8008ddc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 faba 	bl	800934c <USBD_CtlSendStatus>
 8008dd8:	e000      	b.n	8008ddc <USBD_GetDescriptor+0x2cc>
    return;
 8008dda:	bf00      	nop
  }
}
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop

08008de4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	889b      	ldrh	r3, [r3, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d131      	bne.n	8008e5a <USBD_SetAddress+0x76>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	88db      	ldrh	r3, [r3, #6]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d12d      	bne.n	8008e5a <USBD_SetAddress+0x76>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	885b      	ldrh	r3, [r3, #2]
 8008e02:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e04:	d829      	bhi.n	8008e5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	885b      	ldrh	r3, [r3, #2]
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d104      	bne.n	8008e28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f9bc 	bl	800919e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e26:	e01d      	b.n	8008e64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	7bfa      	ldrb	r2, [r7, #15]
 8008e2c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fea3 	bl	8009b80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fa86 	bl	800934c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d004      	beq.n	8008e50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e4e:	e009      	b.n	8008e64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e58:	e004      	b.n	8008e64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f99e 	bl	800919e <USBD_CtlError>
  }
}
 8008e62:	bf00      	nop
 8008e64:	bf00      	nop
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	885b      	ldrh	r3, [r3, #2]
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	4b4e      	ldr	r3, [pc, #312]	@ (8008fbc <USBD_SetConfig+0x150>)
 8008e82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e84:	4b4d      	ldr	r3, [pc, #308]	@ (8008fbc <USBD_SetConfig+0x150>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d905      	bls.n	8008e98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f985 	bl	800919e <USBD_CtlError>
    return USBD_FAIL;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e08c      	b.n	8008fb2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d002      	beq.n	8008eaa <USBD_SetConfig+0x3e>
 8008ea4:	2b03      	cmp	r3, #3
 8008ea6:	d029      	beq.n	8008efc <USBD_SetConfig+0x90>
 8008ea8:	e075      	b.n	8008f96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008eaa:	4b44      	ldr	r3, [pc, #272]	@ (8008fbc <USBD_SetConfig+0x150>)
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d020      	beq.n	8008ef4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008eb2:	4b42      	ldr	r3, [pc, #264]	@ (8008fbc <USBD_SetConfig+0x150>)
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8008fbc <USBD_SetConfig+0x150>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7fe ffe3 	bl	8007e8e <USBD_SetClassConfig>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d008      	beq.n	8008ee4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f962 	bl	800919e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2202      	movs	r2, #2
 8008ede:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ee2:	e065      	b.n	8008fb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fa31 	bl	800934c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2203      	movs	r2, #3
 8008eee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008ef2:	e05d      	b.n	8008fb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fa29 	bl	800934c <USBD_CtlSendStatus>
      break;
 8008efa:	e059      	b.n	8008fb0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008efc:	4b2f      	ldr	r3, [pc, #188]	@ (8008fbc <USBD_SetConfig+0x150>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d112      	bne.n	8008f2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8008fbc <USBD_SetConfig+0x150>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	461a      	mov	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f16:	4b29      	ldr	r3, [pc, #164]	@ (8008fbc <USBD_SetConfig+0x150>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7fe ffd2 	bl	8007ec6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa12 	bl	800934c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f28:	e042      	b.n	8008fb0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008f2a:	4b24      	ldr	r3, [pc, #144]	@ (8008fbc <USBD_SetConfig+0x150>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d02a      	beq.n	8008f8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7fe ffc0 	bl	8007ec6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f46:	4b1d      	ldr	r3, [pc, #116]	@ (8008fbc <USBD_SetConfig+0x150>)
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f50:	4b1a      	ldr	r3, [pc, #104]	@ (8008fbc <USBD_SetConfig+0x150>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7fe ff99 	bl	8007e8e <USBD_SetClassConfig>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00f      	beq.n	8008f86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f918 	bl	800919e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7fe ffa5 	bl	8007ec6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008f84:	e014      	b.n	8008fb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f9e0 	bl	800934c <USBD_CtlSendStatus>
      break;
 8008f8c:	e010      	b.n	8008fb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f9dc 	bl	800934c <USBD_CtlSendStatus>
      break;
 8008f94:	e00c      	b.n	8008fb0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f900 	bl	800919e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f9e:	4b07      	ldr	r3, [pc, #28]	@ (8008fbc <USBD_SetConfig+0x150>)
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7fe ff8e 	bl	8007ec6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008faa:	2303      	movs	r3, #3
 8008fac:	73fb      	strb	r3, [r7, #15]
      break;
 8008fae:	bf00      	nop
  }

  return ret;
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000260 	.word	0x20000260

08008fc0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	88db      	ldrh	r3, [r3, #6]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d004      	beq.n	8008fdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f8e2 	bl	800919e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008fda:	e023      	b.n	8009024 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	dc02      	bgt.n	8008fee <USBD_GetConfig+0x2e>
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	dc03      	bgt.n	8008ff4 <USBD_GetConfig+0x34>
 8008fec:	e015      	b.n	800901a <USBD_GetConfig+0x5a>
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d00b      	beq.n	800900a <USBD_GetConfig+0x4a>
 8008ff2:	e012      	b.n	800901a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	2201      	movs	r2, #1
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f948 	bl	8009298 <USBD_CtlSendData>
        break;
 8009008:	e00c      	b.n	8009024 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3304      	adds	r3, #4
 800900e:	2201      	movs	r2, #1
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f940 	bl	8009298 <USBD_CtlSendData>
        break;
 8009018:	e004      	b.n	8009024 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f8be 	bl	800919e <USBD_CtlError>
        break;
 8009022:	bf00      	nop
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800903c:	b2db      	uxtb	r3, r3
 800903e:	3b01      	subs	r3, #1
 8009040:	2b02      	cmp	r3, #2
 8009042:	d81e      	bhi.n	8009082 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	88db      	ldrh	r3, [r3, #6]
 8009048:	2b02      	cmp	r3, #2
 800904a:	d004      	beq.n	8009056 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f8a5 	bl	800919e <USBD_CtlError>
        break;
 8009054:	e01a      	b.n	800908c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f043 0202 	orr.w	r2, r3, #2
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	330c      	adds	r3, #12
 8009076:	2202      	movs	r2, #2
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f90c 	bl	8009298 <USBD_CtlSendData>
      break;
 8009080:	e004      	b.n	800908c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f88a 	bl	800919e <USBD_CtlError>
      break;
 800908a:	bf00      	nop
  }
}
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	885b      	ldrh	r3, [r3, #2]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d107      	bne.n	80090b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f94c 	bl	800934c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80090b4:	e013      	b.n	80090de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	885b      	ldrh	r3, [r3, #2]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d10b      	bne.n	80090d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	889b      	ldrh	r3, [r3, #4]
 80090c2:	0a1b      	lsrs	r3, r3, #8
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f93c 	bl	800934c <USBD_CtlSendStatus>
}
 80090d4:	e003      	b.n	80090de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f860 	bl	800919e <USBD_CtlError>
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	3b01      	subs	r3, #1
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d80b      	bhi.n	8009116 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	885b      	ldrh	r3, [r3, #2]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d10c      	bne.n	8009120 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f91c 	bl	800934c <USBD_CtlSendStatus>
      }
      break;
 8009114:	e004      	b.n	8009120 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f840 	bl	800919e <USBD_CtlError>
      break;
 800911e:	e000      	b.n	8009122 <USBD_ClrFeature+0x3c>
      break;
 8009120:	bf00      	nop
  }
}
 8009122:	bf00      	nop
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	781a      	ldrb	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3301      	adds	r3, #1
 8009144:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	781a      	ldrb	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3301      	adds	r3, #1
 8009152:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7ff fa40 	bl	80085da <SWAPBYTE>
 800915a:	4603      	mov	r3, r0
 800915c:	461a      	mov	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3301      	adds	r3, #1
 800916c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f7ff fa33 	bl	80085da <SWAPBYTE>
 8009174:	4603      	mov	r3, r0
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3301      	adds	r3, #1
 8009180:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	3301      	adds	r3, #1
 8009186:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f7ff fa26 	bl	80085da <SWAPBYTE>
 800918e:	4603      	mov	r3, r0
 8009190:	461a      	mov	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	80da      	strh	r2, [r3, #6]
}
 8009196:	bf00      	nop
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b082      	sub	sp, #8
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091a8:	2180      	movs	r1, #128	@ 0x80
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fc7e 	bl	8009aac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091b0:	2100      	movs	r1, #0
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fc7a 	bl	8009aac <USBD_LL_StallEP>
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d042      	beq.n	800925c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80091da:	6938      	ldr	r0, [r7, #16]
 80091dc:	f000 f842 	bl	8009264 <USBD_GetLen>
 80091e0:	4603      	mov	r3, r0
 80091e2:	3301      	adds	r3, #1
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ea:	d808      	bhi.n	80091fe <USBD_GetString+0x3e>
 80091ec:	6938      	ldr	r0, [r7, #16]
 80091ee:	f000 f839 	bl	8009264 <USBD_GetLen>
 80091f2:	4603      	mov	r3, r0
 80091f4:	3301      	adds	r3, #1
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	e001      	b.n	8009202 <USBD_GetString+0x42>
 80091fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009206:	7dfb      	ldrb	r3, [r7, #23]
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	4413      	add	r3, r2
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	7812      	ldrb	r2, [r2, #0]
 8009210:	701a      	strb	r2, [r3, #0]
  idx++;
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	3301      	adds	r3, #1
 8009216:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009218:	7dfb      	ldrb	r3, [r7, #23]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	4413      	add	r3, r2
 800921e:	2203      	movs	r2, #3
 8009220:	701a      	strb	r2, [r3, #0]
  idx++;
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	3301      	adds	r3, #1
 8009226:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009228:	e013      	b.n	8009252 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	4413      	add	r3, r2
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	7812      	ldrb	r2, [r2, #0]
 8009234:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	3301      	adds	r3, #1
 800923a:	613b      	str	r3, [r7, #16]
    idx++;
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	3301      	adds	r3, #1
 8009240:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	4413      	add	r3, r2
 8009248:	2200      	movs	r2, #0
 800924a:	701a      	strb	r2, [r3, #0]
    idx++;
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	3301      	adds	r3, #1
 8009250:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e7      	bne.n	800922a <USBD_GetString+0x6a>
 800925a:	e000      	b.n	800925e <USBD_GetString+0x9e>
    return;
 800925c:	bf00      	nop
  }
}
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009274:	e005      	b.n	8009282 <USBD_GetLen+0x1e>
  {
    len++;
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	3301      	adds	r3, #1
 800927a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	3301      	adds	r3, #1
 8009280:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1f5      	bne.n	8009276 <USBD_GetLen+0x12>
  }

  return len;
 800928a:	7bfb      	ldrb	r3, [r7, #15]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	2100      	movs	r1, #0
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 fc7d 	bl	8009bbe <USBD_LL_Transmit>

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	2100      	movs	r1, #0
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 fc6c 	bl	8009bbe <USBD_LL_Transmit>

  return USBD_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2203      	movs	r2, #3
 8009300:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	2100      	movs	r1, #0
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 fc70 	bl	8009c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	60f8      	str	r0, [r7, #12]
 8009332:	60b9      	str	r1, [r7, #8]
 8009334:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	2100      	movs	r1, #0
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 fc5f 	bl	8009c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2204      	movs	r2, #4
 8009358:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800935c:	2300      	movs	r3, #0
 800935e:	2200      	movs	r2, #0
 8009360:	2100      	movs	r1, #0
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fc2b 	bl	8009bbe <USBD_LL_Transmit>

  return USBD_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b082      	sub	sp, #8
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2205      	movs	r2, #5
 800937e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009382:	2300      	movs	r3, #0
 8009384:	2200      	movs	r2, #0
 8009386:	2100      	movs	r1, #0
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fc39 	bl	8009c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800939c:	2200      	movs	r2, #0
 800939e:	4912      	ldr	r1, [pc, #72]	@ (80093e8 <MX_USB_DEVICE_Init+0x50>)
 80093a0:	4812      	ldr	r0, [pc, #72]	@ (80093ec <MX_USB_DEVICE_Init+0x54>)
 80093a2:	f7fe fcf7 	bl	8007d94 <USBD_Init>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80093ac:	f7f9 fb84 	bl	8002ab8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80093b0:	490f      	ldr	r1, [pc, #60]	@ (80093f0 <MX_USB_DEVICE_Init+0x58>)
 80093b2:	480e      	ldr	r0, [pc, #56]	@ (80093ec <MX_USB_DEVICE_Init+0x54>)
 80093b4:	f7fe fd1e 	bl	8007df4 <USBD_RegisterClass>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093be:	f7f9 fb7b 	bl	8002ab8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80093c2:	490c      	ldr	r1, [pc, #48]	@ (80093f4 <MX_USB_DEVICE_Init+0x5c>)
 80093c4:	4809      	ldr	r0, [pc, #36]	@ (80093ec <MX_USB_DEVICE_Init+0x54>)
 80093c6:	f7fe fccb 	bl	8007d60 <USBD_CUSTOM_HID_RegisterInterface>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093d0:	f7f9 fb72 	bl	8002ab8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093d4:	4805      	ldr	r0, [pc, #20]	@ (80093ec <MX_USB_DEVICE_Init+0x54>)
 80093d6:	f7fe fd43 	bl	8007e60 <USBD_Start>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093e0:	f7f9 fb6a 	bl	8002ab8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093e4:	bf00      	nop
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	20000150 	.word	0x20000150
 80093ec:	20000264 	.word	0x20000264
 80093f0:	200000a0 	.word	0x200000a0
 80093f4:	20000140 	.word	0x20000140

080093f8 <_ZL18CUSTOM_HID_Init_FSv>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80093f8:	b480      	push	{r7}
 80093fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093fe:	4618      	mov	r0, r3
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <_ZL20CUSTOM_HID_DeInit_FSv>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009408:	b480      	push	{r7}
 800940a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800940c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800940e:	4618      	mov	r0, r3
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <_ZL22CUSTOM_HID_OutEvent_FSPh>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* report_buffer)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8009420:	4817      	ldr	r0, [pc, #92]	@ (8009480 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x68>)
 8009422:	f7fe fc3d 	bl	8007ca0 <USBD_CUSTOM_HID_ReceivePacket>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	bf14      	ite	ne
 800942c:	2301      	movne	r3, #1
 800942e:	2300      	moveq	r3, #0
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d002      	beq.n	800943c <_ZL22CUSTOM_HID_OutEvent_FSPh+0x24>
  {
    return -1;
 8009436:	f04f 33ff 	mov.w	r3, #4294967295
 800943a:	e01c      	b.n	8009476 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x5e>
//  }

//  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report_buffer, 0x08);

//  memcpy(buffer, report_buffer, 0x08);
  if (report_buffer[0] == 0x01)  // Zakładamy, że 0x01 to komenda dla obrotu w lewo
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d109      	bne.n	8009458 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x40>
  {
	  tmc4671.setMoveAngleFlag(true, 90);
 8009444:	225a      	movs	r2, #90	@ 0x5a
 8009446:	2101      	movs	r1, #1
 8009448:	480e      	ldr	r0, [pc, #56]	@ (8009484 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x6c>)
 800944a:	f7f7 fec5 	bl	80011d8 <_ZN14TMC4671_Driver16setMoveAngleFlagEbs>
	  HAL_GPIO_TogglePin(LED_ERR_GPIO_Port, LED_ERR_Pin);
 800944e:	2102      	movs	r1, #2
 8009450:	480d      	ldr	r0, [pc, #52]	@ (8009488 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x70>)
 8009452:	f7fa f80c 	bl	800346e <HAL_GPIO_TogglePin>
 8009456:	e00d      	b.n	8009474 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x5c>
  }
  else if (report_buffer[0] == 0x02)  // Zakładamy, że 0x02 to komenda dla obrotu w prawo
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b02      	cmp	r3, #2
 800945e:	d109      	bne.n	8009474 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x5c>
  {
	  tmc4671.setMoveAngleFlag(true, -90);
 8009460:	f06f 0259 	mvn.w	r2, #89	@ 0x59
 8009464:	2101      	movs	r1, #1
 8009466:	4807      	ldr	r0, [pc, #28]	@ (8009484 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x6c>)
 8009468:	f7f7 feb6 	bl	80011d8 <_ZN14TMC4671_Driver16setMoveAngleFlagEbs>
	  HAL_GPIO_TogglePin(LED_CLIP_GPIO_Port, LED_CLIP_Pin);
 800946c:	2101      	movs	r1, #1
 800946e:	4806      	ldr	r0, [pc, #24]	@ (8009488 <_ZL22CUSTOM_HID_OutEvent_FSPh+0x70>)
 8009470:	f7f9 fffd 	bl	800346e <HAL_GPIO_TogglePin>
  }

//  buffer[0] = 0x01;
//  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, buffer, 0x08);

  return (USBD_OK);
 8009474:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20000264 	.word	0x20000264
 8009484:	20000000 	.word	0x20000000
 8009488:	40021000 	.word	0x40021000

0800948c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	6039      	str	r1, [r7, #0]
 8009496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2212      	movs	r2, #18
 800949c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800949e:	4b03      	ldr	r3, [pc, #12]	@ (80094ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	2000016c 	.word	0x2000016c

080094b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	6039      	str	r1, [r7, #0]
 80094ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2204      	movs	r2, #4
 80094c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094c2:	4b03      	ldr	r3, [pc, #12]	@ (80094d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	20000180 	.word	0x20000180

080094d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	4603      	mov	r3, r0
 80094dc:	6039      	str	r1, [r7, #0]
 80094de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094e0:	79fb      	ldrb	r3, [r7, #7]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d105      	bne.n	80094f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	4907      	ldr	r1, [pc, #28]	@ (8009508 <USBD_FS_ProductStrDescriptor+0x34>)
 80094ea:	4808      	ldr	r0, [pc, #32]	@ (800950c <USBD_FS_ProductStrDescriptor+0x38>)
 80094ec:	f7ff fe68 	bl	80091c0 <USBD_GetString>
 80094f0:	e004      	b.n	80094fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	4904      	ldr	r1, [pc, #16]	@ (8009508 <USBD_FS_ProductStrDescriptor+0x34>)
 80094f6:	4805      	ldr	r0, [pc, #20]	@ (800950c <USBD_FS_ProductStrDescriptor+0x38>)
 80094f8:	f7ff fe62 	bl	80091c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094fc:	4b02      	ldr	r3, [pc, #8]	@ (8009508 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20000540 	.word	0x20000540
 800950c:	08009d60 	.word	0x08009d60

08009510 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	4904      	ldr	r1, [pc, #16]	@ (8009530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009520:	4804      	ldr	r0, [pc, #16]	@ (8009534 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009522:	f7ff fe4d 	bl	80091c0 <USBD_GetString>
  return USBD_StrDesc;
 8009526:	4b02      	ldr	r3, [pc, #8]	@ (8009530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009528:	4618      	mov	r0, r3
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	20000540 	.word	0x20000540
 8009534:	08009d80 	.word	0x08009d80

08009538 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	6039      	str	r1, [r7, #0]
 8009542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	221a      	movs	r2, #26
 8009548:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800954a:	f000 f843 	bl	80095d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800954e:	4b02      	ldr	r3, [pc, #8]	@ (8009558 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009550:	4618      	mov	r0, r3
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	20000184 	.word	0x20000184

0800955c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	6039      	str	r1, [r7, #0]
 8009566:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009568:	79fb      	ldrb	r3, [r7, #7]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d105      	bne.n	800957a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	4907      	ldr	r1, [pc, #28]	@ (8009590 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009572:	4808      	ldr	r0, [pc, #32]	@ (8009594 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009574:	f7ff fe24 	bl	80091c0 <USBD_GetString>
 8009578:	e004      	b.n	8009584 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	4904      	ldr	r1, [pc, #16]	@ (8009590 <USBD_FS_ConfigStrDescriptor+0x34>)
 800957e:	4805      	ldr	r0, [pc, #20]	@ (8009594 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009580:	f7ff fe1e 	bl	80091c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009584:	4b02      	ldr	r3, [pc, #8]	@ (8009590 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20000540 	.word	0x20000540
 8009594:	08009d94 	.word	0x08009d94

08009598 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	6039      	str	r1, [r7, #0]
 80095a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095a4:	79fb      	ldrb	r3, [r7, #7]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d105      	bne.n	80095b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	4907      	ldr	r1, [pc, #28]	@ (80095cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095ae:	4808      	ldr	r0, [pc, #32]	@ (80095d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095b0:	f7ff fe06 	bl	80091c0 <USBD_GetString>
 80095b4:	e004      	b.n	80095c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	4904      	ldr	r1, [pc, #16]	@ (80095cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095ba:	4805      	ldr	r0, [pc, #20]	@ (80095d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095bc:	f7ff fe00 	bl	80091c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095c0:	4b02      	ldr	r3, [pc, #8]	@ (80095cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20000540 	.word	0x20000540
 80095d0:	08009da8 	.word	0x08009da8

080095d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095da:	4b0f      	ldr	r3, [pc, #60]	@ (8009618 <Get_SerialNum+0x44>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095e0:	4b0e      	ldr	r3, [pc, #56]	@ (800961c <Get_SerialNum+0x48>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009620 <Get_SerialNum+0x4c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4413      	add	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d009      	beq.n	800960e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095fa:	2208      	movs	r2, #8
 80095fc:	4909      	ldr	r1, [pc, #36]	@ (8009624 <Get_SerialNum+0x50>)
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f000 f814 	bl	800962c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009604:	2204      	movs	r2, #4
 8009606:	4908      	ldr	r1, [pc, #32]	@ (8009628 <Get_SerialNum+0x54>)
 8009608:	68b8      	ldr	r0, [r7, #8]
 800960a:	f000 f80f 	bl	800962c <IntToUnicode>
  }
}
 800960e:	bf00      	nop
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	1fff7a10 	.word	0x1fff7a10
 800961c:	1fff7a14 	.word	0x1fff7a14
 8009620:	1fff7a18 	.word	0x1fff7a18
 8009624:	20000186 	.word	0x20000186
 8009628:	20000196 	.word	0x20000196

0800962c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	4613      	mov	r3, r2
 8009638:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800963e:	2300      	movs	r3, #0
 8009640:	75fb      	strb	r3, [r7, #23]
 8009642:	e027      	b.n	8009694 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	0f1b      	lsrs	r3, r3, #28
 8009648:	2b09      	cmp	r3, #9
 800964a:	d80b      	bhi.n	8009664 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	0f1b      	lsrs	r3, r3, #28
 8009650:	b2da      	uxtb	r2, r3
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	4619      	mov	r1, r3
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	440b      	add	r3, r1
 800965c:	3230      	adds	r2, #48	@ 0x30
 800965e:	b2d2      	uxtb	r2, r2
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	e00a      	b.n	800967a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	0f1b      	lsrs	r3, r3, #28
 8009668:	b2da      	uxtb	r2, r3
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	005b      	lsls	r3, r3, #1
 800966e:	4619      	mov	r1, r3
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	440b      	add	r3, r1
 8009674:	3237      	adds	r2, #55	@ 0x37
 8009676:	b2d2      	uxtb	r2, r2
 8009678:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	011b      	lsls	r3, r3, #4
 800967e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	3301      	adds	r3, #1
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	4413      	add	r3, r2
 800968a:	2200      	movs	r2, #0
 800968c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800968e:	7dfb      	ldrb	r3, [r7, #23]
 8009690:	3301      	adds	r3, #1
 8009692:	75fb      	strb	r3, [r7, #23]
 8009694:	7dfa      	ldrb	r2, [r7, #23]
 8009696:	79fb      	ldrb	r3, [r7, #7]
 8009698:	429a      	cmp	r2, r3
 800969a:	d3d3      	bcc.n	8009644 <IntToUnicode+0x18>
  }
}
 800969c:	bf00      	nop
 800969e:	bf00      	nop
 80096a0:	371c      	adds	r7, #28
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
	...

080096ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08a      	sub	sp, #40	@ 0x28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096b4:	f107 0314 	add.w	r3, r7, #20
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	605a      	str	r2, [r3, #4]
 80096be:	609a      	str	r2, [r3, #8]
 80096c0:	60da      	str	r2, [r3, #12]
 80096c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096cc:	d147      	bne.n	800975e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096ce:	2300      	movs	r3, #0
 80096d0:	613b      	str	r3, [r7, #16]
 80096d2:	4b25      	ldr	r3, [pc, #148]	@ (8009768 <HAL_PCD_MspInit+0xbc>)
 80096d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d6:	4a24      	ldr	r2, [pc, #144]	@ (8009768 <HAL_PCD_MspInit+0xbc>)
 80096d8:	f043 0301 	orr.w	r3, r3, #1
 80096dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80096de:	4b22      	ldr	r3, [pc, #136]	@ (8009768 <HAL_PCD_MspInit+0xbc>)
 80096e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	613b      	str	r3, [r7, #16]
 80096e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80096ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096f0:	2300      	movs	r3, #0
 80096f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096f4:	2300      	movs	r3, #0
 80096f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096f8:	f107 0314 	add.w	r3, r7, #20
 80096fc:	4619      	mov	r1, r3
 80096fe:	481b      	ldr	r0, [pc, #108]	@ (800976c <HAL_PCD_MspInit+0xc0>)
 8009700:	f7f9 fd00 	bl	8003104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009704:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800970a:	2302      	movs	r3, #2
 800970c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800970e:	2300      	movs	r3, #0
 8009710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009712:	2303      	movs	r3, #3
 8009714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009716:	230a      	movs	r3, #10
 8009718:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800971a:	f107 0314 	add.w	r3, r7, #20
 800971e:	4619      	mov	r1, r3
 8009720:	4812      	ldr	r0, [pc, #72]	@ (800976c <HAL_PCD_MspInit+0xc0>)
 8009722:	f7f9 fcef 	bl	8003104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009726:	4b10      	ldr	r3, [pc, #64]	@ (8009768 <HAL_PCD_MspInit+0xbc>)
 8009728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800972a:	4a0f      	ldr	r2, [pc, #60]	@ (8009768 <HAL_PCD_MspInit+0xbc>)
 800972c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009730:	6353      	str	r3, [r2, #52]	@ 0x34
 8009732:	2300      	movs	r3, #0
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	4b0c      	ldr	r3, [pc, #48]	@ (8009768 <HAL_PCD_MspInit+0xbc>)
 8009738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800973a:	4a0b      	ldr	r2, [pc, #44]	@ (8009768 <HAL_PCD_MspInit+0xbc>)
 800973c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009740:	6453      	str	r3, [r2, #68]	@ 0x44
 8009742:	4b09      	ldr	r3, [pc, #36]	@ (8009768 <HAL_PCD_MspInit+0xbc>)
 8009744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800974e:	2200      	movs	r2, #0
 8009750:	2100      	movs	r1, #0
 8009752:	2043      	movs	r0, #67	@ 0x43
 8009754:	f7f9 fc9f 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009758:	2043      	movs	r0, #67	@ 0x43
 800975a:	f7f9 fcb8 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800975e:	bf00      	nop
 8009760:	3728      	adds	r7, #40	@ 0x28
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	40023800 	.word	0x40023800
 800976c:	40020000 	.word	0x40020000

08009770 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009784:	4619      	mov	r1, r3
 8009786:	4610      	mov	r0, r2
 8009788:	f7fe fbb7 	bl	8007efa <USBD_LL_SetupStage>
}
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80097a6:	78fa      	ldrb	r2, [r7, #3]
 80097a8:	6879      	ldr	r1, [r7, #4]
 80097aa:	4613      	mov	r3, r2
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	4413      	add	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	440b      	add	r3, r1
 80097b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	78fb      	ldrb	r3, [r7, #3]
 80097bc:	4619      	mov	r1, r3
 80097be:	f7fe fbf1 	bl	8007fa4 <USBD_LL_DataOutStage>
}
 80097c2:	bf00      	nop
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	460b      	mov	r3, r1
 80097d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80097dc:	78fa      	ldrb	r2, [r7, #3]
 80097de:	6879      	ldr	r1, [r7, #4]
 80097e0:	4613      	mov	r3, r2
 80097e2:	00db      	lsls	r3, r3, #3
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	440b      	add	r3, r1
 80097ea:	3320      	adds	r3, #32
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	78fb      	ldrb	r3, [r7, #3]
 80097f0:	4619      	mov	r1, r3
 80097f2:	f7fe fc8a 	bl	800810a <USBD_LL_DataInStage>
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800980c:	4618      	mov	r0, r3
 800980e:	f7fe fdc4 	bl	800839a <USBD_LL_SOF>
}
 8009812:	bf00      	nop
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009822:	2301      	movs	r3, #1
 8009824:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	79db      	ldrb	r3, [r3, #7]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d102      	bne.n	8009834 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800982e:	2300      	movs	r3, #0
 8009830:	73fb      	strb	r3, [r7, #15]
 8009832:	e008      	b.n	8009846 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	79db      	ldrb	r3, [r3, #7]
 8009838:	2b02      	cmp	r3, #2
 800983a:	d102      	bne.n	8009842 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800983c:	2301      	movs	r3, #1
 800983e:	73fb      	strb	r3, [r7, #15]
 8009840:	e001      	b.n	8009846 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009842:	f7f9 f939 	bl	8002ab8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800984c:	7bfa      	ldrb	r2, [r7, #15]
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe fd5e 	bl	8008312 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800985c:	4618      	mov	r0, r3
 800985e:	f7fe fd06 	bl	800826e <USBD_LL_Reset>
}
 8009862:	bf00      	nop
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
	...

0800986c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe fd59 	bl	8008332 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	6812      	ldr	r2, [r2, #0]
 800988e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009892:	f043 0301 	orr.w	r3, r3, #1
 8009896:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	7adb      	ldrb	r3, [r3, #11]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d005      	beq.n	80098ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098a0:	4b04      	ldr	r3, [pc, #16]	@ (80098b4 <HAL_PCD_SuspendCallback+0x48>)
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	4a03      	ldr	r2, [pc, #12]	@ (80098b4 <HAL_PCD_SuspendCallback+0x48>)
 80098a6:	f043 0306 	orr.w	r3, r3, #6
 80098aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098ac:	bf00      	nop
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	e000ed00 	.word	0xe000ed00

080098b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fe fd4f 	bl	800836a <USBD_LL_Resume>
}
 80098cc:	bf00      	nop
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098e6:	78fa      	ldrb	r2, [r7, #3]
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe fda7 	bl	800843e <USBD_LL_IsoOUTIncomplete>
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800990a:	78fa      	ldrb	r2, [r7, #3]
 800990c:	4611      	mov	r1, r2
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe fd63 	bl	80083da <USBD_LL_IsoINIncomplete>
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fdb9 	bl	80084a2 <USBD_LL_DevConnected>
}
 8009930:	bf00      	nop
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe fdb6 	bl	80084b8 <USBD_LL_DevDisconnected>
}
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d13c      	bne.n	80099de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009964:	4a20      	ldr	r2, [pc, #128]	@ (80099e8 <USBD_LL_Init+0x94>)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a1e      	ldr	r2, [pc, #120]	@ (80099e8 <USBD_LL_Init+0x94>)
 8009970:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009974:	4b1c      	ldr	r3, [pc, #112]	@ (80099e8 <USBD_LL_Init+0x94>)
 8009976:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800997a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800997c:	4b1a      	ldr	r3, [pc, #104]	@ (80099e8 <USBD_LL_Init+0x94>)
 800997e:	2204      	movs	r2, #4
 8009980:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009982:	4b19      	ldr	r3, [pc, #100]	@ (80099e8 <USBD_LL_Init+0x94>)
 8009984:	2202      	movs	r2, #2
 8009986:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009988:	4b17      	ldr	r3, [pc, #92]	@ (80099e8 <USBD_LL_Init+0x94>)
 800998a:	2200      	movs	r2, #0
 800998c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800998e:	4b16      	ldr	r3, [pc, #88]	@ (80099e8 <USBD_LL_Init+0x94>)
 8009990:	2202      	movs	r2, #2
 8009992:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009994:	4b14      	ldr	r3, [pc, #80]	@ (80099e8 <USBD_LL_Init+0x94>)
 8009996:	2200      	movs	r2, #0
 8009998:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800999a:	4b13      	ldr	r3, [pc, #76]	@ (80099e8 <USBD_LL_Init+0x94>)
 800999c:	2200      	movs	r2, #0
 800999e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80099a0:	4b11      	ldr	r3, [pc, #68]	@ (80099e8 <USBD_LL_Init+0x94>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80099a6:	4b10      	ldr	r3, [pc, #64]	@ (80099e8 <USBD_LL_Init+0x94>)
 80099a8:	2201      	movs	r2, #1
 80099aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80099ac:	4b0e      	ldr	r3, [pc, #56]	@ (80099e8 <USBD_LL_Init+0x94>)
 80099ae:	2200      	movs	r2, #0
 80099b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80099b2:	480d      	ldr	r0, [pc, #52]	@ (80099e8 <USBD_LL_Init+0x94>)
 80099b4:	f7f9 fd75 	bl	80034a2 <HAL_PCD_Init>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80099be:	f7f9 f87b 	bl	8002ab8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80099c2:	2180      	movs	r1, #128	@ 0x80
 80099c4:	4808      	ldr	r0, [pc, #32]	@ (80099e8 <USBD_LL_Init+0x94>)
 80099c6:	f7fa ff8a 	bl	80048de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80099ca:	2240      	movs	r2, #64	@ 0x40
 80099cc:	2100      	movs	r1, #0
 80099ce:	4806      	ldr	r0, [pc, #24]	@ (80099e8 <USBD_LL_Init+0x94>)
 80099d0:	f7fa ff3e 	bl	8004850 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80099d4:	2280      	movs	r2, #128	@ 0x80
 80099d6:	2101      	movs	r1, #1
 80099d8:	4803      	ldr	r0, [pc, #12]	@ (80099e8 <USBD_LL_Init+0x94>)
 80099da:	f7fa ff39 	bl	8004850 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	20000740 	.word	0x20000740

080099ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7f9 fe5c 	bl	80036c0 <HAL_PCD_Start>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 f930 	bl	8009c74 <USBD_Get_USB_Status>
 8009a14:	4603      	mov	r3, r0
 8009a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b084      	sub	sp, #16
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	4608      	mov	r0, r1
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	461a      	mov	r2, r3
 8009a30:	4603      	mov	r3, r0
 8009a32:	70fb      	strb	r3, [r7, #3]
 8009a34:	460b      	mov	r3, r1
 8009a36:	70bb      	strb	r3, [r7, #2]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009a4a:	78bb      	ldrb	r3, [r7, #2]
 8009a4c:	883a      	ldrh	r2, [r7, #0]
 8009a4e:	78f9      	ldrb	r1, [r7, #3]
 8009a50:	f7fa fb30 	bl	80040b4 <HAL_PCD_EP_Open>
 8009a54:	4603      	mov	r3, r0
 8009a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 f90a 	bl	8009c74 <USBD_Get_USB_Status>
 8009a60:	4603      	mov	r3, r0
 8009a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	460b      	mov	r3, r1
 8009a78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a88:	78fa      	ldrb	r2, [r7, #3]
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fa fb7b 	bl	8004188 <HAL_PCD_EP_Close>
 8009a92:	4603      	mov	r3, r0
 8009a94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f000 f8eb 	bl	8009c74 <USBD_Get_USB_Status>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ac6:	78fa      	ldrb	r2, [r7, #3]
 8009ac8:	4611      	mov	r1, r2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fa fc1b 	bl	8004306 <HAL_PCD_EP_SetStall>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 f8cc 	bl	8009c74 <USBD_Get_USB_Status>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b084      	sub	sp, #16
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	460b      	mov	r3, r1
 8009af4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b04:	78fa      	ldrb	r2, [r7, #3]
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fa fc5f 	bl	80043cc <HAL_PCD_EP_ClrStall>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 f8ad 	bl	8009c74 <USBD_Get_USB_Status>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	460b      	mov	r3, r1
 8009b32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	da0b      	bge.n	8009b5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b44:	78fb      	ldrb	r3, [r7, #3]
 8009b46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b4a:	68f9      	ldr	r1, [r7, #12]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	440b      	add	r3, r1
 8009b56:	3316      	adds	r3, #22
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	e00b      	b.n	8009b74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b5c:	78fb      	ldrb	r3, [r7, #3]
 8009b5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b62:	68f9      	ldr	r1, [r7, #12]
 8009b64:	4613      	mov	r3, r2
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	440b      	add	r3, r1
 8009b6e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009b72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b9a:	78fa      	ldrb	r2, [r7, #3]
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fa fa64 	bl	800406c <HAL_PCD_SetAddress>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 f862 	bl	8009c74 <USBD_Get_USB_Status>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b086      	sub	sp, #24
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	60f8      	str	r0, [r7, #12]
 8009bc6:	607a      	str	r2, [r7, #4]
 8009bc8:	603b      	str	r3, [r7, #0]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009bdc:	7af9      	ldrb	r1, [r7, #11]
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	f7fa fb56 	bl	8004292 <HAL_PCD_EP_Transmit>
 8009be6:	4603      	mov	r3, r0
 8009be8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 f841 	bl	8009c74 <USBD_Get_USB_Status>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bf6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	607a      	str	r2, [r7, #4]
 8009c0a:	603b      	str	r3, [r7, #0]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009c1e:	7af9      	ldrb	r1, [r7, #11]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	f7fa fafa 	bl	800421c <HAL_PCD_EP_Receive>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c2c:	7dfb      	ldrb	r3, [r7, #23]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f820 	bl	8009c74 <USBD_Get_USB_Status>
 8009c34:	4603      	mov	r3, r0
 8009c36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c38:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
	...

08009c44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009c4c:	4b03      	ldr	r3, [pc, #12]	@ (8009c5c <USBD_static_malloc+0x18>)
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	20000c24 	.word	0x20000c24

08009c60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]

}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c82:	79fb      	ldrb	r3, [r7, #7]
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d817      	bhi.n	8009cb8 <USBD_Get_USB_Status+0x44>
 8009c88:	a201      	add	r2, pc, #4	@ (adr r2, 8009c90 <USBD_Get_USB_Status+0x1c>)
 8009c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8e:	bf00      	nop
 8009c90:	08009ca1 	.word	0x08009ca1
 8009c94:	08009ca7 	.word	0x08009ca7
 8009c98:	08009cad 	.word	0x08009cad
 8009c9c:	08009cb3 	.word	0x08009cb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca4:	e00b      	b.n	8009cbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8009caa:	e008      	b.n	8009cbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cac:	2301      	movs	r3, #1
 8009cae:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb0:	e005      	b.n	8009cbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb6:	e002      	b.n	8009cbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	73fb      	strb	r3, [r7, #15]
    break;
 8009cbc:	bf00      	nop
  }
  return usb_status;
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <memset>:
 8009ccc:	4402      	add	r2, r0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d100      	bne.n	8009cd6 <memset+0xa>
 8009cd4:	4770      	bx	lr
 8009cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8009cda:	e7f9      	b.n	8009cd0 <memset+0x4>

08009cdc <__libc_init_array>:
 8009cdc:	b570      	push	{r4, r5, r6, lr}
 8009cde:	4d0d      	ldr	r5, [pc, #52]	@ (8009d14 <__libc_init_array+0x38>)
 8009ce0:	4c0d      	ldr	r4, [pc, #52]	@ (8009d18 <__libc_init_array+0x3c>)
 8009ce2:	1b64      	subs	r4, r4, r5
 8009ce4:	10a4      	asrs	r4, r4, #2
 8009ce6:	2600      	movs	r6, #0
 8009ce8:	42a6      	cmp	r6, r4
 8009cea:	d109      	bne.n	8009d00 <__libc_init_array+0x24>
 8009cec:	4d0b      	ldr	r5, [pc, #44]	@ (8009d1c <__libc_init_array+0x40>)
 8009cee:	4c0c      	ldr	r4, [pc, #48]	@ (8009d20 <__libc_init_array+0x44>)
 8009cf0:	f000 f826 	bl	8009d40 <_init>
 8009cf4:	1b64      	subs	r4, r4, r5
 8009cf6:	10a4      	asrs	r4, r4, #2
 8009cf8:	2600      	movs	r6, #0
 8009cfa:	42a6      	cmp	r6, r4
 8009cfc:	d105      	bne.n	8009d0a <__libc_init_array+0x2e>
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}
 8009d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d04:	4798      	blx	r3
 8009d06:	3601      	adds	r6, #1
 8009d08:	e7ee      	b.n	8009ce8 <__libc_init_array+0xc>
 8009d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d0e:	4798      	blx	r3
 8009d10:	3601      	adds	r6, #1
 8009d12:	e7f2      	b.n	8009cfa <__libc_init_array+0x1e>
 8009d14:	0800a010 	.word	0x0800a010
 8009d18:	0800a010 	.word	0x0800a010
 8009d1c:	0800a010 	.word	0x0800a010
 8009d20:	0800a014 	.word	0x0800a014

08009d24 <memcpy>:
 8009d24:	440a      	add	r2, r1
 8009d26:	4291      	cmp	r1, r2
 8009d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d2c:	d100      	bne.n	8009d30 <memcpy+0xc>
 8009d2e:	4770      	bx	lr
 8009d30:	b510      	push	{r4, lr}
 8009d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d3a:	4291      	cmp	r1, r2
 8009d3c:	d1f9      	bne.n	8009d32 <memcpy+0xe>
 8009d3e:	bd10      	pop	{r4, pc}

08009d40 <_init>:
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d42:	bf00      	nop
 8009d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d46:	bc08      	pop	{r3}
 8009d48:	469e      	mov	lr, r3
 8009d4a:	4770      	bx	lr

08009d4c <_fini>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	bf00      	nop
 8009d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d52:	bc08      	pop	{r3}
 8009d54:	469e      	mov	lr, r3
 8009d56:	4770      	bx	lr
